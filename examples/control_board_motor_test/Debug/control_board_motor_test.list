
control_board_motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008e8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008480  20000060  08008eec  0000a060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200084e0  08008eec  0000a4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001627c  00000000  00000000  0000a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f05  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00023210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc2  00000000  00000000  00024278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc1c  00000000  00000000  00024f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139c7  00000000  00000000  00041b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe5e  00000000  00000000  0005551d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f537b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c14  00000000  00000000  000f53c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f9fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	08008ab0 	.word	0x08008ab0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	08008ab0 	.word	0x08008ab0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_frsub>:
 8000bd4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	e002      	b.n	8000be0 <__addsf3>
 8000bda:	bf00      	nop

08000bdc <__aeabi_fsub>:
 8000bdc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000be0 <__addsf3>:
 8000be0:	0042      	lsls	r2, r0, #1
 8000be2:	bf1f      	itttt	ne
 8000be4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be8:	ea92 0f03 	teqne	r2, r3
 8000bec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf4:	d06a      	beq.n	8000ccc <__addsf3+0xec>
 8000bf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfe:	bfc1      	itttt	gt
 8000c00:	18d2      	addgt	r2, r2, r3
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	4048      	eorgt	r0, r1
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	2b19      	cmp	r3, #25
 8000c0e:	bf88      	it	hi
 8000c10:	4770      	bxhi	lr
 8000c12:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4240      	negne	r0, r0
 8000c22:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c26:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c2a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2e:	bf18      	it	ne
 8000c30:	4249      	negne	r1, r1
 8000c32:	ea92 0f03 	teq	r2, r3
 8000c36:	d03f      	beq.n	8000cb8 <__addsf3+0xd8>
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c40:	eb10 000c 	adds.w	r0, r0, ip
 8000c44:	f1c3 0320 	rsb	r3, r3, #32
 8000c48:	fa01 f103 	lsl.w	r1, r1, r3
 8000c4c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__addsf3+0x78>
 8000c52:	4249      	negs	r1, r1
 8000c54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c58:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c5c:	d313      	bcc.n	8000c86 <__addsf3+0xa6>
 8000c5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c62:	d306      	bcc.n	8000c72 <__addsf3+0x92>
 8000c64:	0840      	lsrs	r0, r0, #1
 8000c66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6a:	f102 0201 	add.w	r2, r2, #1
 8000c6e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c70:	d251      	bcs.n	8000d16 <__addsf3+0x136>
 8000c72:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7a:	bf08      	it	eq
 8000c7c:	f020 0001 	biceq.w	r0, r0, #1
 8000c80:	ea40 0003 	orr.w	r0, r0, r3
 8000c84:	4770      	bx	lr
 8000c86:	0049      	lsls	r1, r1, #1
 8000c88:	eb40 0000 	adc.w	r0, r0, r0
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c94:	d2ed      	bcs.n	8000c72 <__addsf3+0x92>
 8000c96:	fab0 fc80 	clz	ip, r0
 8000c9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca6:	bfaa      	itet	ge
 8000ca8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cac:	4252      	neglt	r2, r2
 8000cae:	4318      	orrge	r0, r3
 8000cb0:	bfbc      	itt	lt
 8000cb2:	40d0      	lsrlt	r0, r2
 8000cb4:	4318      	orrlt	r0, r3
 8000cb6:	4770      	bx	lr
 8000cb8:	f092 0f00 	teq	r2, #0
 8000cbc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cc0:	bf06      	itte	eq
 8000cc2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	3201      	addeq	r2, #1
 8000cc8:	3b01      	subne	r3, #1
 8000cca:	e7b5      	b.n	8000c38 <__addsf3+0x58>
 8000ccc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cda:	d021      	beq.n	8000d20 <__addsf3+0x140>
 8000cdc:	ea92 0f03 	teq	r2, r3
 8000ce0:	d004      	beq.n	8000cec <__addsf3+0x10c>
 8000ce2:	f092 0f00 	teq	r2, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	4770      	bx	lr
 8000cec:	ea90 0f01 	teq	r0, r1
 8000cf0:	bf1c      	itt	ne
 8000cf2:	2000      	movne	r0, #0
 8000cf4:	4770      	bxne	lr
 8000cf6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cfa:	d104      	bne.n	8000d06 <__addsf3+0x126>
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	bf28      	it	cs
 8000d00:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d0a:	bf3c      	itt	cc
 8000d0c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d10:	4770      	bxcc	lr
 8000d12:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d16:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d24:	bf16      	itet	ne
 8000d26:	4608      	movne	r0, r1
 8000d28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d2c:	4601      	movne	r1, r0
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	bf06      	itte	eq
 8000d32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d36:	ea90 0f01 	teqeq	r0, r1
 8000d3a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_ui2f>:
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e004      	b.n	8000d50 <__aeabi_i2f+0x8>
 8000d46:	bf00      	nop

08000d48 <__aeabi_i2f>:
 8000d48:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	bf48      	it	mi
 8000d4e:	4240      	negmi	r0, r0
 8000d50:	ea5f 0c00 	movs.w	ip, r0
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	e01c      	b.n	8000d9e <__aeabi_l2f+0x2a>

08000d64 <__aeabi_ul2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e00a      	b.n	8000d88 <__aeabi_l2f+0x14>
 8000d72:	bf00      	nop

08000d74 <__aeabi_l2f>:
 8000d74:	ea50 0201 	orrs.w	r2, r0, r1
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d80:	d502      	bpl.n	8000d88 <__aeabi_l2f+0x14>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	ea5f 0c01 	movs.w	ip, r1
 8000d8c:	bf02      	ittt	eq
 8000d8e:	4684      	moveq	ip, r0
 8000d90:	4601      	moveq	r1, r0
 8000d92:	2000      	moveq	r0, #0
 8000d94:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d98:	bf08      	it	eq
 8000d9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000da2:	fabc f28c 	clz	r2, ip
 8000da6:	3a08      	subs	r2, #8
 8000da8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dac:	db10      	blt.n	8000dd0 <__aeabi_l2f+0x5c>
 8000dae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db2:	4463      	add	r3, ip
 8000db4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f102 0220 	add.w	r2, r2, #32
 8000dd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de0:	fa21 f202 	lsr.w	r2, r1, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fmul>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d06f      	beq.n	8000ee8 <__aeabi_fmul+0xf8>
 8000e08:	441a      	add	r2, r3
 8000e0a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0e:	0240      	lsls	r0, r0, #9
 8000e10:	bf18      	it	ne
 8000e12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e16:	d01e      	beq.n	8000e56 <__aeabi_fmul+0x66>
 8000e18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e24:	fba0 3101 	umull	r3, r1, r0, r1
 8000e28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e2c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e30:	bf3e      	ittt	cc
 8000e32:	0049      	lslcc	r1, r1, #1
 8000e34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	ea40 0001 	orr.w	r0, r0, r1
 8000e3e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e42:	2afd      	cmp	r2, #253	@ 0xfd
 8000e44:	d81d      	bhi.n	8000e82 <__aeabi_fmul+0x92>
 8000e46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	4770      	bx	lr
 8000e56:	f090 0f00 	teq	r0, #0
 8000e5a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e5e:	bf08      	it	eq
 8000e60:	0249      	lsleq	r1, r1, #9
 8000e62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e6a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e6c:	bfc2      	ittt	gt
 8000e6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e76:	4770      	bxgt	lr
 8000e78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	3a01      	subs	r2, #1
 8000e82:	dc5d      	bgt.n	8000f40 <__aeabi_fmul+0x150>
 8000e84:	f112 0f19 	cmn.w	r2, #25
 8000e88:	bfdc      	itt	le
 8000e8a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e8e:	4770      	bxle	lr
 8000e90:	f1c2 0200 	rsb	r2, r2, #0
 8000e94:	0041      	lsls	r1, r0, #1
 8000e96:	fa21 f102 	lsr.w	r1, r1, r2
 8000e9a:	f1c2 0220 	rsb	r2, r2, #32
 8000e9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ea6:	f140 0000 	adc.w	r0, r0, #0
 8000eaa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eae:	bf08      	it	eq
 8000eb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb4:	4770      	bx	lr
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fmul+0xce>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e78f      	b.n	8000e08 <__aeabi_fmul+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	bf18      	it	ne
 8000ef2:	ea93 0f0c 	teqne	r3, ip
 8000ef6:	d00a      	beq.n	8000f0e <__aeabi_fmul+0x11e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f02:	d1d8      	bne.n	8000eb6 <__aeabi_fmul+0xc6>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f0c:	4770      	bx	lr
 8000f0e:	f090 0f00 	teq	r0, #0
 8000f12:	bf17      	itett	ne
 8000f14:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f18:	4608      	moveq	r0, r1
 8000f1a:	f091 0f00 	teqne	r1, #0
 8000f1e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f22:	d014      	beq.n	8000f4e <__aeabi_fmul+0x15e>
 8000f24:	ea92 0f0c 	teq	r2, ip
 8000f28:	d101      	bne.n	8000f2e <__aeabi_fmul+0x13e>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d10f      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f2e:	ea93 0f0c 	teq	r3, ip
 8000f32:	d103      	bne.n	8000f3c <__aeabi_fmul+0x14c>
 8000f34:	024b      	lsls	r3, r1, #9
 8000f36:	bf18      	it	ne
 8000f38:	4608      	movne	r0, r1
 8000f3a:	d108      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f3c:	ea80 0001 	eor.w	r0, r0, r1
 8000f40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4c:	4770      	bx	lr
 8000f4e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f52:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f56:	4770      	bx	lr

08000f58 <__aeabi_fdiv>:
 8000f58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f60:	bf1e      	ittt	ne
 8000f62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f66:	ea92 0f0c 	teqne	r2, ip
 8000f6a:	ea93 0f0c 	teqne	r3, ip
 8000f6e:	d069      	beq.n	8001044 <__aeabi_fdiv+0xec>
 8000f70:	eba2 0203 	sub.w	r2, r2, r3
 8000f74:	ea80 0c01 	eor.w	ip, r0, r1
 8000f78:	0249      	lsls	r1, r1, #9
 8000f7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f7e:	d037      	beq.n	8000ff0 <__aeabi_fdiv+0x98>
 8000f80:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f90:	428b      	cmp	r3, r1
 8000f92:	bf38      	it	cc
 8000f94:	005b      	lslcc	r3, r3, #1
 8000f96:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f9a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	bf24      	itt	cs
 8000fa2:	1a5b      	subcs	r3, r3, r1
 8000fa4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fac:	bf24      	itt	cs
 8000fae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fb2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fb6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fba:	bf24      	itt	cs
 8000fbc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc8:	bf24      	itt	cs
 8000fca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	bf18      	it	ne
 8000fd6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fda:	d1e0      	bne.n	8000f9e <__aeabi_fdiv+0x46>
 8000fdc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fde:	f63f af50 	bhi.w	8000e82 <__aeabi_fmul+0x92>
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe8:	bf08      	it	eq
 8000fea:	f020 0001 	biceq.w	r0, r0, #1
 8000fee:	4770      	bx	lr
 8000ff0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ff4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff8:	327f      	adds	r2, #127	@ 0x7f
 8000ffa:	bfc2      	ittt	gt
 8000ffc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001000:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001004:	4770      	bxgt	lr
 8001006:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	3a01      	subs	r2, #1
 8001010:	e737      	b.n	8000e82 <__aeabi_fmul+0x92>
 8001012:	f092 0f00 	teq	r2, #0
 8001016:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800101a:	bf02      	ittt	eq
 800101c:	0040      	lsleq	r0, r0, #1
 800101e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001022:	3a01      	subeq	r2, #1
 8001024:	d0f9      	beq.n	800101a <__aeabi_fdiv+0xc2>
 8001026:	ea40 000c 	orr.w	r0, r0, ip
 800102a:	f093 0f00 	teq	r3, #0
 800102e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001032:	bf02      	ittt	eq
 8001034:	0049      	lsleq	r1, r1, #1
 8001036:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800103a:	3b01      	subeq	r3, #1
 800103c:	d0f9      	beq.n	8001032 <__aeabi_fdiv+0xda>
 800103e:	ea41 010c 	orr.w	r1, r1, ip
 8001042:	e795      	b.n	8000f70 <__aeabi_fdiv+0x18>
 8001044:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001048:	ea92 0f0c 	teq	r2, ip
 800104c:	d108      	bne.n	8001060 <__aeabi_fdiv+0x108>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	f47f af7d 	bne.w	8000f4e <__aeabi_fmul+0x15e>
 8001054:	ea93 0f0c 	teq	r3, ip
 8001058:	f47f af70 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 800105c:	4608      	mov	r0, r1
 800105e:	e776      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	d104      	bne.n	8001070 <__aeabi_fdiv+0x118>
 8001066:	024b      	lsls	r3, r1, #9
 8001068:	f43f af4c 	beq.w	8000f04 <__aeabi_fmul+0x114>
 800106c:	4608      	mov	r0, r1
 800106e:	e76e      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001070:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001074:	bf18      	it	ne
 8001076:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800107a:	d1ca      	bne.n	8001012 <__aeabi_fdiv+0xba>
 800107c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001080:	f47f af5c 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 8001084:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001088:	f47f af3c 	bne.w	8000f04 <__aeabi_fmul+0x114>
 800108c:	e75f      	b.n	8000f4e <__aeabi_fmul+0x15e>
 800108e:	bf00      	nop

08001090 <__gesf2>:
 8001090:	f04f 3cff 	mov.w	ip, #4294967295
 8001094:	e006      	b.n	80010a4 <__cmpsf2+0x4>
 8001096:	bf00      	nop

08001098 <__lesf2>:
 8001098:	f04f 0c01 	mov.w	ip, #1
 800109c:	e002      	b.n	80010a4 <__cmpsf2+0x4>
 800109e:	bf00      	nop

080010a0 <__cmpsf2>:
 80010a0:	f04f 0c01 	mov.w	ip, #1
 80010a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b4:	bf18      	it	ne
 80010b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ba:	d011      	beq.n	80010e0 <__cmpsf2+0x40>
 80010bc:	b001      	add	sp, #4
 80010be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010c2:	bf18      	it	ne
 80010c4:	ea90 0f01 	teqne	r0, r1
 80010c8:	bf58      	it	pl
 80010ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ce:	bf88      	it	hi
 80010d0:	17c8      	asrhi	r0, r1, #31
 80010d2:	bf38      	it	cc
 80010d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010d8:	bf18      	it	ne
 80010da:	f040 0001 	orrne.w	r0, r0, #1
 80010de:	4770      	bx	lr
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	d102      	bne.n	80010ec <__cmpsf2+0x4c>
 80010e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ea:	d105      	bne.n	80010f8 <__cmpsf2+0x58>
 80010ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010f0:	d1e4      	bne.n	80010bc <__cmpsf2+0x1c>
 80010f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f6:	d0e1      	beq.n	80010bc <__cmpsf2+0x1c>
 80010f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <__aeabi_cfrcmple>:
 8001100:	4684      	mov	ip, r0
 8001102:	4608      	mov	r0, r1
 8001104:	4661      	mov	r1, ip
 8001106:	e7ff      	b.n	8001108 <__aeabi_cfcmpeq>

08001108 <__aeabi_cfcmpeq>:
 8001108:	b50f      	push	{r0, r1, r2, r3, lr}
 800110a:	f7ff ffc9 	bl	80010a0 <__cmpsf2>
 800110e:	2800      	cmp	r0, #0
 8001110:	bf48      	it	mi
 8001112:	f110 0f00 	cmnmi.w	r0, #0
 8001116:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001118 <__aeabi_fcmpeq>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff fff4 	bl	8001108 <__aeabi_cfcmpeq>
 8001120:	bf0c      	ite	eq
 8001122:	2001      	moveq	r0, #1
 8001124:	2000      	movne	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmplt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffea 	bl	8001108 <__aeabi_cfcmpeq>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmple>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffe0 	bl	8001108 <__aeabi_cfcmpeq>
 8001148:	bf94      	ite	ls
 800114a:	2001      	movls	r0, #1
 800114c:	2000      	movhi	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmpge>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffd2 	bl	8001100 <__aeabi_cfrcmple>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpgt>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffc8 	bl	8001100 <__aeabi_cfrcmple>
 8001170:	bf34      	ite	cc
 8001172:	2001      	movcc	r0, #1
 8001174:	2000      	movcs	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_f2uiz>:
 800117c:	0042      	lsls	r2, r0, #1
 800117e:	d20e      	bcs.n	800119e <__aeabi_f2uiz+0x22>
 8001180:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001184:	d30b      	bcc.n	800119e <__aeabi_f2uiz+0x22>
 8001186:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800118a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118e:	d409      	bmi.n	80011a4 <__aeabi_f2uiz+0x28>
 8001190:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001198:	fa23 f002 	lsr.w	r0, r3, r2
 800119c:	4770      	bx	lr
 800119e:	f04f 0000 	mov.w	r0, #0
 80011a2:	4770      	bx	lr
 80011a4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a8:	d101      	bne.n	80011ae <__aeabi_f2uiz+0x32>
 80011aa:	0242      	lsls	r2, r0, #9
 80011ac:	d102      	bne.n	80011b4 <__aeabi_f2uiz+0x38>
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
 80011b2:	4770      	bx	lr
 80011b4:	f04f 0000 	mov.w	r0, #0
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, const float (&b_coefficient)[2], const float (&a_coefficient)[2])
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e013      	b.n	80011f6 <FO_IIR_Init+0x3a>
    {
        instance->b[i] = b_coefficient[i];
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	3202      	adds	r2, #2
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	dde8      	ble.n	80011ce <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 8001216:	b5b0      	push	{r4, r5, r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f7ff fdde 	bl	8000df0 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fdd6 	bl	8000df0 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	461d      	mov	r5, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff fdcc 	bl	8000df0 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	4628      	mov	r0, r5
 800125e:	f7ff fcbf 	bl	8000be0 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	4619      	mov	r1, r3
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fcba 	bl	8000be0 <__addsf3>
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	615a      	str	r2, [r3, #20]

    return output;
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bdb0      	pop	{r4, r5, r7, pc}

08001286 <SO_IIR_Init>:

void SO_IIR_Init(SO_IIR_Filter_t *instance, const float (&b_coefficient)[3],const float (&a_coefficient)[3])
{
 8001286:	b480      	push	{r7}
 8001288:	b087      	sub	sp, #28
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e025      	b.n	80012e4 <SO_IIR_Init+0x5e>
    {
        instance->b[i] = b_coefficient[i];
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3302      	adds	r3, #2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	605a      	str	r2, [r3, #4]
        instance->a[i] = a_coefficient[i];
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        
        if (i < 2)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	dc0d      	bgt.n	80012de <SO_IIR_Init+0x58>
        {
            instance->prev_y[i] = 0;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	3206      	adds	r2, #6
 80012c8:	f04f 0100 	mov.w	r1, #0
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            instance->prev_x[i] = 0;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	3208      	adds	r2, #8
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 3; i++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	ddd6      	ble.n	8001298 <SO_IIR_Init+0x12>
        }
    }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
	...

080012f8 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	463c      	mov	r4, r7
 8001300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8001304:	2110      	movs	r1, #16
 8001306:	2001      	movs	r0, #1
 8001308:	f007 fa30 	bl	800876c <calloc>
 800130c:	4603      	mov	r3, r0
 800130e:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2200      	movs	r2, #0
 800131a:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 8001328:	893a      	ldrh	r2, [r7, #8]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <Motor_Init+0x58>)
 8001332:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f000 f832 	bl	80013a0 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <Motor_Init+0x58>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f807 	bl	8001354 <Motor_Set_PWM_Frequency>

    return object;
 8001346:	697b      	ldr	r3, [r7, #20]
}
 8001348:	4618      	mov	r0, r3
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	2000007c 	.word	0x2000007c

08001354 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <Motor_Set_PWM_Frequency+0x40>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <Motor_Set_PWM_Frequency+0x44>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <Motor_Set_PWM_Frequency+0x40>)
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a09      	ldr	r2, [pc, #36]	@ (800139c <Motor_Set_PWM_Frequency+0x48>)
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <Motor_Set_PWM_Frequency+0x44>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	2000007c 	.word	0x2000007c
 8001398:	20000080 	.word	0x20000080
 800139c:	01e84800 	.word	0x01e84800

080013a0 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, int16_t duty)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
    if (duty == 0)
 80013ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <Motor_Set_PWM_Duty+0x24>
    {
        Motor_SetDirection(motor, DIRECTION_STOP);
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f8cc 	bl	8001554 <Motor_SetDirection>
        motor->pwm_duty = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
 80013c2:	e061      	b.n	8001488 <Motor_Set_PWM_Duty+0xe8>
    }
    else
    {
        switch (motor->direction)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d007      	beq.n	80013de <Motor_Set_PWM_Duty+0x3e>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	dc53      	bgt.n	800147a <Motor_Set_PWM_Duty+0xda>
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d017      	beq.n	8001408 <Motor_Set_PWM_Duty+0x68>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d031      	beq.n	8001440 <Motor_Set_PWM_Duty+0xa0>
                        motor->pwm_duty = 255 + duty;
                    }
                }
                break;
            default:
                break;
 80013dc:	e04d      	b.n	800147a <Motor_Set_PWM_Duty+0xda>
                    if (duty > 0)          motor->pwm_duty = duty;            // duty: 0 - Min, 255 - Max
 80013de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dd04      	ble.n	80013f0 <Motor_Set_PWM_Duty+0x50>
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	705a      	strb	r2, [r3, #1]
                break;
 80013ee:	e046      	b.n	800147e <Motor_Set_PWM_Duty+0xde>
                    else if (duty < 0)      
 80013f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da42      	bge.n	800147e <Motor_Set_PWM_Duty+0xde>
                        Motor_SetDirection(motor, DIRECTION_STOP);
 80013f8:	2100      	movs	r1, #0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f8aa 	bl	8001554 <Motor_SetDirection>
                        motor->pwm_duty = 0;    
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	705a      	strb	r2, [r3, #1]
                break;
 8001406:	e03a      	b.n	800147e <Motor_Set_PWM_Duty+0xde>
                    if (duty > 0)
 8001408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd07      	ble.n	8001420 <Motor_Set_PWM_Duty+0x80>
                        Motor_SetDirection(motor, DIRECTION_STOP);
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f89e 	bl	8001554 <Motor_SetDirection>
                        motor->pwm_duty = 0; 
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	705a      	strb	r2, [r3, #1]
                break;
 800141e:	e030      	b.n	8001482 <Motor_Set_PWM_Duty+0xe2>
                    else if (duty < 0)      motor->pwm_duty = 255 - abs(duty);
 8001420:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da2c      	bge.n	8001482 <Motor_Set_PWM_Duty+0xe2>
 8001428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfb8      	it	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	705a      	strb	r2, [r3, #1]
                break;
 800143e:	e020      	b.n	8001482 <Motor_Set_PWM_Duty+0xe2>
                    if (duty > 0)
 8001440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd08      	ble.n	800145a <Motor_Set_PWM_Duty+0xba>
                        Motor_SetDirection(motor, DIRECTION_FORWARD);
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f882 	bl	8001554 <Motor_SetDirection>
                        motor->pwm_duty = duty;
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	705a      	strb	r2, [r3, #1]
                break;
 8001458:	e015      	b.n	8001486 <Motor_Set_PWM_Duty+0xe6>
                    else if (duty < 0)
 800145a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da11      	bge.n	8001486 <Motor_Set_PWM_Duty+0xe6>
                        Motor_SetDirection(motor, DIRECTION_BACKWARD);
 8001462:	f04f 31ff 	mov.w	r1, #4294967295
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f874 	bl	8001554 <Motor_SetDirection>
                        motor->pwm_duty = 255 + duty;
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3b01      	subs	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	705a      	strb	r2, [r3, #1]
                break;
 8001478:	e005      	b.n	8001486 <Motor_Set_PWM_Duty+0xe6>
                break;
 800147a:	bf00      	nop
 800147c:	e004      	b.n	8001488 <Motor_Set_PWM_Duty+0xe8>
                break;
 800147e:	bf00      	nop
 8001480:	e002      	b.n	8001488 <Motor_Set_PWM_Duty+0xe8>
                break;
 8001482:	bf00      	nop
 8001484:	e000      	b.n	8001488 <Motor_Set_PWM_Duty+0xe8>
                break;
 8001486:	bf00      	nop
        }
    }

    float duty_percentage = motor->pwm_duty / 255.0f;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc5b 	bl	8000d48 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	491d      	ldr	r1, [pc, #116]	@ (800150c <Motor_Set_PWM_Duty+0x16c>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd5e 	bl	8000f58 <__aeabi_fdiv>
 800149c:	4603      	mov	r3, r0
 800149e:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <Motor_Set_PWM_Duty+0x170>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a6:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f7ff fc49 	bl	8000d40 <__aeabi_ui2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	6979      	ldr	r1, [r7, #20]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fc9c 	bl	8000df0 <__aeabi_fmul>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe5e 	bl	800117c <__aeabi_f2uiz>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <Motor_Set_PWM_Duty+0x136>
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <Motor_Set_PWM_Duty+0x170>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d4:	e015      	b.n	8001502 <Motor_Set_PWM_Duty+0x162>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d104      	bne.n	80014e8 <Motor_Set_PWM_Duty+0x148>
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <Motor_Set_PWM_Duty+0x170>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80014e6:	e00c      	b.n	8001502 <Motor_Set_PWM_Duty+0x162>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d104      	bne.n	80014fa <Motor_Set_PWM_Duty+0x15a>
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <Motor_Set_PWM_Duty+0x170>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014f8:	e003      	b.n	8001502 <Motor_Set_PWM_Duty+0x162>
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <Motor_Set_PWM_Duty+0x170>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	437f0000 	.word	0x437f0000
 8001510:	20000080 	.word	0x20000080

08001514 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f993 3000 	ldrsb.w	r3, [r3]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f815 	bl	8001554 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	@ (8001550 <Motor_Start+0x3c>)
 8001532:	f004 fef1 	bl	8006318 <HAL_TIM_PWM_Start>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <Motor_Start+0x32>
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	e000      	b.n	8001548 <Motor_Start+0x34>

    return STATUS_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000080 	.word	0x20000080

08001554 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	701a      	strb	r2, [r3, #0]

    switch (direction)
 8001566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d00d      	beq.n	800158c <Motor_SetDirection+0x38>
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	db13      	blt.n	800159e <Motor_SetDirection+0x4a>
 8001576:	2b01      	cmp	r3, #1
 8001578:	d811      	bhi.n	800159e <Motor_SetDirection+0x4a>
    {
    case DIRECTION_FORWARD:
    case DIRECTION_STOP:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6898      	ldr	r0, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	899b      	ldrh	r3, [r3, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	f004 f9f7 	bl	8005978 <HAL_GPIO_WritePin>
        break;
 800158a:	e009      	b.n	80015a0 <Motor_SetDirection+0x4c>
    case DIRECTION_BACKWARD:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6898      	ldr	r0, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	899b      	ldrh	r3, [r3, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f004 f9ee 	bl	8005978 <HAL_GPIO_WritePin>
        break;
 800159c:	e000      	b.n	80015a0 <Motor_SetDirection+0x4c>
    default:
        break;
 800159e:	bf00      	nop
    }

    return STATUS_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	463b      	mov	r3, r7
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 80015b6:	210c      	movs	r1, #12
 80015b8:	2001      	movs	r0, #1
 80015ba:	f007 f8d7 	bl	800876c <calloc>
 80015be:	4603      	mov	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	609a      	str	r2, [r3, #8]

    return object;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4808      	ldr	r0, [pc, #32]	@ (8001610 <Encoder_Start+0x30>)
 80015f0:	f004 ffa4 	bl	800653c <HAL_TIM_IC_Start_IT>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <Encoder_Start+0x24>
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e000      	b.n	8001606 <Encoder_Start+0x26>

    return STATUS_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000c8 	.word	0x200000c8

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001618:	f003 fa26 	bl	8004a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f80f 	bl	800163e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 f9b2 	bl	8001988 <MX_GPIO_Init>
  MX_DMA_Init();
 8001624:	f000 f98a 	bl	800193c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001628:	f000 f95e 	bl	80018e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800162c:	f000 f848 	bl	80016c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001630:	f000 f8e6 	bl	8001800 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001634:	f001 fe10 	bl	8003258 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001638:	f001 feaa 	bl	8003390 <loop>
 800163c:	e7fc      	b.n	8001638 <main+0x24>

0800163e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b090      	sub	sp, #64	@ 0x40
 8001642:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	2228      	movs	r2, #40	@ 0x28
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f007 f98d 	bl	800896c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001664:	2301      	movs	r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001668:	2310      	movs	r3, #16
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166c:	2302      	movs	r3, #2
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001670:	2300      	movs	r3, #0
 8001672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001674:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4618      	mov	r0, r3
 8001680:	f004 f992 	bl	80059a8 <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800168a:	f000 f9e3 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2302      	movs	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 fc00 	bl	8005eac <HAL_RCC_ClockConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016b2:	f000 f9cf 	bl	8001a54 <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	3740      	adds	r7, #64	@ 0x40
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b096      	sub	sp, #88	@ 0x58
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2220      	movs	r2, #32
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 f937 	bl	800896c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 80016fe:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001700:	4a3e      	ldr	r2, [pc, #248]	@ (80017fc <MX_TIM1_Init+0x13c>)
 8001702:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 32-1;
 8001704:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001706:	221f      	movs	r2, #31
 8001708:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <MX_TIM1_Init+0x138>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 1000-1;
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001712:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001716:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <MX_TIM1_Init+0x138>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 800171e:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 800172a:	4833      	ldr	r0, [pc, #204]	@ (80017f8 <MX_TIM1_Init+0x138>)
 800172c:	f004 fd4c 	bl	80061c8 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001736:	f000 f98d 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001744:	4619      	mov	r1, r3
 8001746:	482c      	ldr	r0, [pc, #176]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001748:	f005 fa78 	bl	8006c3c <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001752:	f000 f97f 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 8001756:	4828      	ldr	r0, [pc, #160]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001758:	f004 fd85 	bl	8006266 <HAL_TIM_PWM_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001762:	f000 f977 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 800176e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001772:	4619      	mov	r1, r3
 8001774:	4820      	ldr	r0, [pc, #128]	@ (80017f8 <MX_TIM1_Init+0x138>)
 8001776:	f005 ff47 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001780:	f000 f968 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	@ 0x60
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4813      	ldr	r0, [pc, #76]	@ (80017f8 <MX_TIM1_Init+0x138>)
 80017aa:	f005 f985 	bl	8006ab8 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017b4:	f000 f94e 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <MX_TIM1_Init+0x138>)
 80017dc:	f005 ff80 	bl	80076e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80017e6:	f000 f935 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 80017ea:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <MX_TIM1_Init+0x138>)
 80017ec:	f002 ff6e 	bl	80046cc <HAL_TIM_MspPostInit>

}
 80017f0:	bf00      	nop
 80017f2:	3758      	adds	r7, #88	@ 0x58
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000080 	.word	0x20000080
 80017fc:	40012c00 	.word	0x40012c00

08001800 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 800182c:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <MX_TIM8_Init+0xe4>)
 800182e:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 800183e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001842:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 800184a:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 8001856:	4822      	ldr	r0, [pc, #136]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001858:	f004 fcb6 	bl	80061c8 <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001862:	f000 f8f7 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4619      	mov	r1, r3
 8001872:	481b      	ldr	r0, [pc, #108]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001874:	f005 f9e2 	bl	8006c3c <HAL_TIM_ConfigClockSource>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800187e:	f000 f8e9 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 8001882:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 8001884:	f004 fe02 	bl	800648c <HAL_TIM_IC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800188e:	f000 f8e1 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	480f      	ldr	r0, [pc, #60]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 80018a2:	f005 feb1 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80018ac:	f000 f8d2 	bl	8001a54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018b4:	2301      	movs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_TIM8_Init+0xe0>)
 80018c8:	f005 f85a 	bl	8006980 <HAL_TIM_IC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80018d2:	f000 f8bf 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000c8 	.word	0x200000c8
 80018e4:	40013400 	.word	0x40013400

080018e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <MX_USART1_UART_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 115200;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_USART1_UART_Init+0x4c>)
 8001920:	f005 ff41 	bl	80077a6 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800192a:	f000 f893 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000110 	.word	0x20000110
 8001938:	40013800 	.word	0x40013800

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <MX_DMA_Init+0x48>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <MX_DMA_Init+0x48>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_DMA_Init+0x48>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	200e      	movs	r0, #14
 8001960:	f003 f9bb 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001964:	200e      	movs	r0, #14
 8001966:	f003 f9d4 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	200f      	movs	r0, #15
 8001970:	f003 f9b3 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001974:	200f      	movs	r0, #15
 8001976:	f003 f9cc 	bl	8004d12 <HAL_NVIC_EnableIRQ>

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_GPIO_Init+0xc4>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f242 0108 	movw	r1, #8200	@ 0x2008
 8001a02:	4813      	ldr	r0, [pc, #76]	@ (8001a50 <MX_GPIO_Init+0xc8>)
 8001a04:	f003 ffb8 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	@ (8001a50 <MX_GPIO_Init+0xc8>)
 8001a22:	f003 fe15 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001a26:	2308      	movs	r3, #8
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_GPIO_Init+0xc8>)
 8001a3e:	f003 fe07 	bl	8005650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40011000 	.word	0x40011000

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <Error_Handler+0x8>

08001a60 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <_ZN3ros3MsgC1Ev+0x1c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	08008e3c 	.word	0x08008e3c

08001aa0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
      data()
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffe8 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8001ab0:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ffd0 	bl	8001a60 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08008e24 	.word	0x08008e24

08001ad0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0a19      	lsrs	r1, r3, #8
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3301      	adds	r3, #1
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0c19      	lsrs	r1, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3302      	adds	r3, #2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0e19      	lsrs	r1, r3, #24
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3304      	adds	r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a19      	lsrs	r1, r3, #8
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	0c19      	lsrs	r1, r3, #16
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3302      	adds	r3, #2
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0e19      	lsrs	r1, r3, #24
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3303      	adds	r3, #3
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b72:	68fb      	ldr	r3, [r7, #12]
    }
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	440b      	add	r3, r1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3304      	adds	r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	6839      	ldr	r1, [r7, #0]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	440b      	add	r3, r1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3303      	adds	r3, #3
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	440b      	add	r3, r1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	061b      	lsls	r3, r3, #24
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3304      	adds	r3, #4
 8001c36:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c38:	68fb      	ldr	r3, [r7, #12]
    }
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4b02      	ldr	r3, [pc, #8]	@ (8001c58 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	08008ac8 	.word	0x08008ac8

08001c5c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	08008ad8 	.word	0x08008ad8

08001c74 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fefe 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8001c84:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001c94:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001c9a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ca0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
    {
    }
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08008e0c 	.word	0x08008e0c
 8001cb8:	08008afc 	.word	0x08008afc

08001cbc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8899      	ldrh	r1, [r3, #4]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	889b      	ldrh	r3, [r3, #4]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fa96 	bl	8000228 <strlen>
 8001cfc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	69b9      	ldr	r1, [r7, #24]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fc88 	bl	800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	18d0      	adds	r0, r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f006 fe68 	bl	80089f4 <memcpy>
      offset += length_topic_name;
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa79 	bl	8000228 <strlen>
 8001d36:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fc6b 	bl	800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	18d0      	adds	r0, r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f006 fe4b 	bl	80089f4 <memcpy>
      offset += length_message_type;
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4413      	add	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fa5c 	bl	8000228 <strlen>
 8001d70:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	6939      	ldr	r1, [r7, #16]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fc4e 	bl	800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3304      	adds	r3, #4
 8001d84:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	18d0      	adds	r0, r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4619      	mov	r1, r3
 8001d94:	f006 fe2e 	bl	80089f4 <memcpy>
      offset += length_md5sum;
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0a19      	lsrs	r1, r3, #8
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c19      	lsrs	r1, r3, #16
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0e19      	lsrs	r1, r3, #24
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3303      	adds	r3, #3
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001de8:	69fb      	ldr	r3, [r7, #28]
    }
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08a      	sub	sp, #40	@ 0x28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	889b      	ldrh	r3, [r3, #4]
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3301      	adds	r3, #1
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	441a      	add	r2, r3
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fc0a 	bl	8003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3304      	adds	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	e00b      	b.n	8001e68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	441a      	add	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	3301      	adds	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3ed      	bcc.n	8001e50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	441a      	add	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4413      	add	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fbd7 	bl	8003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3304      	adds	r3, #4
 8001eae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	e00b      	b.n	8001ece <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	441a      	add	r2, r3
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3ed      	bcc.n	8001eb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	441a      	add	r2, r3
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fba4 	bl	8003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	3304      	adds	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e00b      	b.n	8001f34 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	441a      	add	r2, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	440b      	add	r3, r1
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3ed      	bcc.n	8001f1c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	3b01      	subs	r3, #1
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	441a      	add	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	440a      	add	r2, r1
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	440b      	add	r3, r1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	6839      	ldr	r1, [r7, #0]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	08008b00 	.word	0x08008b00

08001fdc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	08008b1c 	.word	0x08008b1c

08001ff4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fd3e 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
      level(0),
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002014:	609a      	str	r2, [r3, #8]
    {
    }
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	08008df4 	.word	0x08008df4
 8002024:	08008afc 	.word	0x08008afc

08002028 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7912      	ldrb	r2, [r2, #4]
 8002040:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f8eb 	bl	8000228 <strlen>
 8002052:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 fadd 	bl	800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	18d0      	adds	r0, r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4619      	mov	r1, r3
 8002076:	f006 fcbd 	bl	80089f4 <memcpy>
      offset += length_msg;
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
      return offset;
 8002082:	68fb      	ldr	r3, [r7, #12]
    }
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3301      	adds	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	441a      	add	r2, r3
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 facd 	bl	8003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3304      	adds	r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e00b      	b.n	80020e2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	441a      	add	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	440b      	add	r3, r1
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3ed      	bcc.n	80020ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	3b01      	subs	r3, #1
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	3b01      	subs	r3, #1
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
     return offset;
 8002112:	693b      	ldr	r3, [r7, #16]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	4b02      	ldr	r3, [pc, #8]	@ (8002130 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	08008b40 	.word	0x08008b40

08002134 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	08008b54 	.word	0x08008b54

0800214c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fc92 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	08008ddc 	.word	0x08008ddc

080021a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0a19      	lsrs	r1, r3, #8
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	3301      	adds	r3, #1
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	b2ca      	uxtb	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0c19      	lsrs	r1, r3, #16
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	3302      	adds	r3, #2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	b2ca      	uxtb	r2, r1
 80021e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0e19      	lsrs	r1, r3, #24
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	3303      	adds	r3, #3
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	b2ca      	uxtb	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	3304      	adds	r3, #4
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	e02a      	b.n	800225c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	b2ca      	uxtb	r2, r1
 800221e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	0a19      	lsrs	r1, r3, #8
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	3301      	adds	r3, #1
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	b2ca      	uxtb	r2, r1
 800222e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	0c19      	lsrs	r1, r3, #16
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	3302      	adds	r3, #2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4413      	add	r3, r2
 800223c:	b2ca      	uxtb	r2, r1
 800223e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	0e19      	lsrs	r1, r3, #24
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	3303      	adds	r3, #3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	b2ca      	uxtb	r2, r1
 800224e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	3304      	adds	r3, #4
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	3301      	adds	r3, #1
 800225a:	623b      	str	r3, [r7, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3cf      	bcc.n	8002206 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4413      	add	r3, r2
 8002270:	b2ca      	uxtb	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	0a19      	lsrs	r1, r3, #8
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	0c19      	lsrs	r1, r3, #16
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3302      	adds	r3, #2
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	0e19      	lsrs	r1, r3, #24
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	3303      	adds	r3, #3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	3304      	adds	r3, #4
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	e02a      	b.n	800230c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	b2ca      	uxtb	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0a19      	lsrs	r1, r3, #8
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	3301      	adds	r3, #1
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	b2ca      	uxtb	r2, r1
 80022de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0c19      	lsrs	r1, r3, #16
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	3302      	adds	r3, #2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0e19      	lsrs	r1, r3, #24
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	3303      	adds	r3, #3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	b2ca      	uxtb	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	3304      	adds	r3, #4
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3cf      	bcc.n	80022b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69d9      	ldr	r1, [r3, #28]
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	0a19      	lsrs	r1, r3, #8
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	3301      	adds	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	b2ca      	uxtb	r2, r1
 8002334:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	0c19      	lsrs	r1, r3, #16
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	3302      	adds	r3, #2
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	0e19      	lsrs	r1, r3, #24
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	3303      	adds	r3, #3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	3304      	adds	r3, #4
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e027      	b.n	80023b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fd ff58 	bl	8000228 <strlen>
 8002378:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4413      	add	r3, r2
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f94a 	bl	800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	3304      	adds	r3, #4
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	18d0      	adds	r0, r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4619      	mov	r1, r3
 80023a4:	f006 fb26 	bl	80089f4 <memcpy>
      offset += length_stringsi;
 80023a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4413      	add	r3, r2
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3d2      	bcc.n	8002366 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80023c2:	4618      	mov	r0, r3
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08e      	sub	sp, #56	@ 0x38
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e4:	3301      	adds	r3, #1
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	6a3a      	ldr	r2, [r7, #32]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f6:	3302      	adds	r3, #2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	4313      	orrs	r3, r2
 8002404:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002408:	3303      	adds	r3, #3
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	4313      	orrs	r3, r2
 8002416:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241a:	3304      	adds	r3, #4
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	6a3a      	ldr	r2, [r7, #32]
 8002424:	429a      	cmp	r2, r3
 8002426:	d90a      	bls.n	800243e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f006 fa64 	bl	8008900 <realloc>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002444:	2300      	movs	r3, #0
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
 8002448:	e035      	b.n	80024b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002452:	6839      	ldr	r1, [r7, #0]
 8002454:	440a      	add	r2, r1
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	3301      	adds	r3, #1
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	440b      	add	r3, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002472:	3302      	adds	r3, #2
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	440b      	add	r3, r1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002484:	3303      	adds	r3, #3
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	440b      	add	r3, r1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249a:	3304      	adds	r3, #4
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80024b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b2:	3301      	adds	r3, #1
 80024b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3c4      	bcc.n	800244a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024cc:	3301      	adds	r3, #1
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	3302      	adds	r3, #2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f0:	3303      	adds	r3, #3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002502:	3304      	adds	r3, #4
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	429a      	cmp	r2, r3
 800250e:	d90a      	bls.n	8002526 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f006 f9f0 	bl	8008900 <realloc>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002530:	e035      	b.n	800259e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	440a      	add	r2, r1
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002548:	3301      	adds	r3, #1
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	440b      	add	r3, r1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255a:	3302      	adds	r3, #2
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	440b      	add	r3, r1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	3303      	adds	r3, #3
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	440b      	add	r3, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002582:	3304      	adds	r3, #4
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	3214      	adds	r2, #20
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	3301      	adds	r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3c4      	bcc.n	8002532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b4:	3301      	adds	r3, #1
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c6:	3302      	adds	r3, #2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d8:	3303      	adds	r3, #3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	3304      	adds	r3, #4
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d90a      	bls.n	800260e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f006 f97c 	bl	8008900 <realloc>
 8002608:	4602      	mov	r2, r0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002618:	e03e      	b.n	8002698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800261a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	441a      	add	r2, r3
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f001 f816 	bl	8003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262e:	3304      	adds	r3, #4
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
 8002636:	e00b      	b.n	8002650 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	441a      	add	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	3b01      	subs	r3, #1
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	429a      	cmp	r2, r3
 800265a:	d3ed      	bcc.n	8002638 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800265c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	3b01      	subs	r3, #1
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800266c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266e:	3b01      	subs	r3, #1
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	441a      	add	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002678:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	3220      	adds	r2, #32
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002694:	3301      	adds	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3bb      	bcc.n	800261a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80026a4:	4618      	mov	r0, r3
 80026a6:	3738      	adds	r7, #56	@ 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	4b02      	ldr	r3, [pc, #8]	@ (80026c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	08008d00 	.word	0x08008d00

080026c4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	4b02      	ldr	r3, [pc, #8]	@ (80026d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	08008b78 	.word	0x08008b78

080026dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
  }
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002734:	2201      	movs	r2, #1
 8002736:	711a      	strb	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800273e:	2200      	movs	r2, #0
 8002740:	80da      	strh	r2, [r3, #6]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002748:	2200      	movs	r2, #0
 800274a:	811a      	strh	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002752:	2200      	movs	r2, #0
 8002754:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <_ZN10SerialComm4initEv>:

    void init(void)
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f90e 	bl	800298c <_ZN10SerialComm10reset_rbufEv>
    }
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8002790:	b29b      	uxth	r3, r3
 8002792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002796:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800279e:	895b      	ldrh	r3, [r3, #10]
 80027a0:	89fa      	ldrh	r2, [r7, #14]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d102      	bne.n	80027ac <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e01d      	b.n	80027e8 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027b2:	895b      	ldrh	r3, [r3, #10]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	b291      	uxth	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80027be:	8151      	strh	r1, [r2, #10]
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027ca:	3304      	adds	r3, #4
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027d6:	895b      	ldrh	r3, [r3, #10]
 80027d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027e4:	815a      	strh	r2, [r3, #10]

        return c;
 80027e6:	68bb      	ldr	r3, [r7, #8]
    }
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002804:	dc46      	bgt.n	8002894 <_ZN10SerialComm5writeEPKhi+0xa2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	dd43      	ble.n	8002894 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 800280c:	bf00      	nop
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002814:	791b      	ldrb	r3, [r3, #4]
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f6      	bne.n	800280e <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002826:	88db      	ldrh	r3, [r3, #6]
 8002828:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4293      	cmp	r3, r2
 8002830:	bfa8      	it	ge
 8002832:	4613      	movge	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	4618      	mov	r0, r3
 800284c:	f006 f8d2 	bl	80089f4 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002856:	88da      	ldrh	r2, [r3, #6]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4413      	add	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800286c:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	d00a      	beq.n	800288c <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1d18      	adds	r0, r3, #4
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	18d1      	adds	r1, r2, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	461a      	mov	r2, r3
 8002888:	f006 f8b4 	bl	80089f4 <memcpy>
        }

        // TODO: Start transfering
        flush();
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f805 	bl	800289c <_ZN10SerialComm5flushEv>
 8002892:	e000      	b.n	8002896 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8002894:	bf00      	nop
    }
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028aa:	791b      	ldrb	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028b6:	88da      	ldrh	r2, [r3, #6]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d04c      	beq.n	800295e <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028ce:	891a      	ldrh	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028d6:	88db      	ldrh	r3, [r3, #6]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d218      	bcs.n	800290e <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028e2:	88da      	ldrh	r2, [r3, #6]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028ea:	891b      	ldrh	r3, [r3, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028fa:	891b      	ldrh	r3, [r3, #8]
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	89fa      	ldrh	r2, [r7, #14]
 8002906:	4619      	mov	r1, r3
 8002908:	f004 ff9e 	bl	8007848 <HAL_UART_Transmit_DMA>
 800290c:	e01f      	b.n	800294e <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002914:	891b      	ldrh	r3, [r3, #8]
 8002916:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 800291a:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002926:	891b      	ldrh	r3, [r3, #8]
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	89fa      	ldrh	r2, [r7, #14]
 8002932:	4619      	mov	r1, r3
 8002934:	f004 ff88 	bl	8007848 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1d19      	adds	r1, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002946:	88db      	ldrh	r3, [r3, #6]
 8002948:	461a      	mov	r2, r3
 800294a:	f004 ff7d 	bl	8007848 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002954:	88da      	ldrh	r2, [r3, #6]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800295c:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002964:	2200      	movs	r2, #0
 8002966:	711a      	strb	r2, [r3, #4]
        }
    }
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800297e:	2201      	movs	r2, #1
 8002980:	711a      	strb	r2, [r3, #4]
    }
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800299e:	3304      	adds	r3, #4
 80029a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a4:	4619      	mov	r1, r3
 80029a6:	f004 ffbf 	bl	8007928 <HAL_UART_Receive_DMA>
    }
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80029c0:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200001e0 	.word	0x200001e0

080029d4 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff febe 	bl	8002762 <_ZN10SerialComm4initEv>
    }
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZN13STM32Hardware4readEv>:

    int read()  
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff febc 	bl	8002778 <_ZN10SerialComm4readEv>
 8002a00:	4603      	mov	r3, r0
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fee7 	bl	80027f2 <_ZN10SerialComm5writeEPKhi>
    }
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8002a34:	f002 f870 	bl	8004b18 <HAL_GetTick>
 8002a38:	4603      	mov	r3, r0
    }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
      data(0)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f816 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8002a54:	4a05      	ldr	r2, [pc, #20]	@ (8002a6c <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	809a      	strh	r2, [r3, #4]
    {
    }
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08008d98 	.word	0x08008d98

08002a70 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a84:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002a86:	8939      	ldrh	r1, [r7, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b2ca      	uxtb	r2, r1
 8002a90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002a92:	893b      	ldrh	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	b299      	uxth	r1, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2ca      	uxtb	r2, r1
 8002aa2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    }
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ac8:	893b      	ldrh	r3, [r7, #8]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	440a      	add	r2, r1
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	440b      	add	r3, r1
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002af2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3302      	adds	r3, #2
 8002afe:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b00:	68fb      	ldr	r3, [r7, #12]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4b02      	ldr	r3, [pc, #8]	@ (8002b20 <_ZN8std_msgs5Int167getTypeEv+0x14>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	08008b9c 	.word	0x08008b9c

08002b24 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	4b02      	ldr	r3, [pc, #8]	@ (8002b38 <_ZN8std_msgs5Int166getMD5Ev+0x14>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	08008bac 	.word	0x08008bac

08002b3c <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
      data(0)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe ff9a 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8002b4c:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
    {
    }
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08008d80 	.word	0x08008d80

08002b68 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	0a19      	lsrs	r1, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0c19      	lsrs	r1, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2ca      	uxtb	r2, r1
 8002ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	0e19      	lsrs	r1, r3, #24
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b2ca      	uxtb	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
      return offset;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	440a      	add	r2, r1
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	440b      	add	r3, r1
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3302      	adds	r3, #2
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	440b      	add	r3, r1
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3303      	adds	r3, #3
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	440b      	add	r3, r1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4b02      	ldr	r3, [pc, #8]	@ (8002c4c <_ZN8std_msgs7Float327getTypeEv+0x14>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	08008bd0 	.word	0x08008bd0

08002c50 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	4b02      	ldr	r3, [pc, #8]	@ (8002c64 <_ZN8std_msgs7Float326getMD5Ev+0x14>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	08008be4 	.word	0x08008be4

08002c68 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
      data(0)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe ff04 	bl	8001a80 <_ZN3ros3MsgC1Ev>
 8002c78:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <_ZN8std_msgs7Float64C1Ev+0x30>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08008d68 	.word	0x08008d68

08002c9c <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	4401      	add	r1, r0
 8002cbe:	b2d3      	uxtb	r3, r2
 8002cc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002cc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	0a02      	lsrs	r2, r0, #8
 8002cd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002cd4:	0a0b      	lsrs	r3, r1, #8
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	3101      	adds	r1, #1
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	4401      	add	r1, r0
 8002cde:	b2d3      	uxtb	r3, r2
 8002ce0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	0c02      	lsrs	r2, r0, #16
 8002cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cf4:	0c0b      	lsrs	r3, r1, #16
 8002cf6:	6979      	ldr	r1, [r7, #20]
 8002cf8:	3102      	adds	r1, #2
 8002cfa:	6838      	ldr	r0, [r7, #0]
 8002cfc:	4401      	add	r1, r0
 8002cfe:	b2d3      	uxtb	r3, r2
 8002d00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	0e02      	lsrs	r2, r0, #24
 8002d10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d14:	0e0b      	lsrs	r3, r1, #24
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	3103      	adds	r1, #3
 8002d1a:	6838      	ldr	r0, [r7, #0]
 8002d1c:	4401      	add	r1, r0
 8002d1e:	b2d3      	uxtb	r3, r2
 8002d20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	000a      	movs	r2, r1
 8002d30:	2300      	movs	r3, #0
 8002d32:	6979      	ldr	r1, [r7, #20]
 8002d34:	3104      	adds	r1, #4
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	4401      	add	r1, r0
 8002d3a:	b2d3      	uxtb	r3, r2
 8002d3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	0a0a      	lsrs	r2, r1, #8
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	3105      	adds	r1, #5
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	4401      	add	r1, r0
 8002d56:	b2d3      	uxtb	r3, r2
 8002d58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8002d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	0c0a      	lsrs	r2, r1, #16
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6979      	ldr	r1, [r7, #20]
 8002d6c:	3106      	adds	r1, #6
 8002d6e:	6838      	ldr	r0, [r7, #0]
 8002d70:	4401      	add	r1, r0
 8002d72:	b2d3      	uxtb	r3, r2
 8002d74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	0e0a      	lsrs	r2, r1, #24
 8002d84:	2300      	movs	r3, #0
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	3107      	adds	r1, #7
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	4401      	add	r1, r0
 8002d8e:	b2d3      	uxtb	r3, r2
 8002d90:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3308      	adds	r3, #8
 8002d96:	617b      	str	r3, [r7, #20]
      return offset;
 8002d98:	697b      	ldr	r3, [r7, #20]
    }
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002da4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002da8:	b0a3      	sub	sp, #140	@ 0x8c
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6778      	str	r0, [r7, #116]	@ 0x74
 8002dae:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dc2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002dc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	4615      	mov	r5, r2
 8002dd8:	ea40 0804 	orr.w	r8, r0, r4
 8002ddc:	ea41 0905 	orr.w	r9, r1, r5
 8002de0:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002de4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	469a      	mov	sl, r3
 8002dfa:	4693      	mov	fp, r2
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002e08:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002e0c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002e10:	ea40 0402 	orr.w	r4, r0, r2
 8002e14:	66bc      	str	r4, [r7, #104]	@ 0x68
 8002e16:	430b      	orrs	r3, r1
 8002e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e1a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002e1e:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e22:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e38:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e46:	464c      	mov	r4, r9
 8002e48:	0423      	lsls	r3, r4, #16
 8002e4a:	46c4      	mov	ip, r8
 8002e4c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002e50:	4644      	mov	r4, r8
 8002e52:	0422      	lsls	r2, r4, #16
 8002e54:	ea40 0402 	orr.w	r4, r0, r2
 8002e58:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002e62:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e66:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e6e:	1cda      	adds	r2, r3, #3
 8002e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e7c:	657a      	str	r2, [r7, #84]	@ 0x54
 8002e7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002e82:	4623      	mov	r3, r4
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e88:	4623      	mov	r3, r4
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e8e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002e92:	461a      	mov	r2, r3
 8002e94:	4302      	orrs	r2, r0
 8002e96:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e98:	4623      	mov	r3, r4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002ea2:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ea6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002ec8:	0023      	movs	r3, r4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	ea40 0402 	orr.w	r4, r0, r2
 8002ed0:	633c      	str	r4, [r7, #48]	@ 0x30
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002eda:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ede:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ee6:	1d5a      	adds	r2, r3, #5
 8002ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002f00:	0223      	lsls	r3, r4, #8
 8002f02:	2200      	movs	r2, #0
 8002f04:	ea40 0402 	orr.w	r4, r0, r2
 8002f08:	623c      	str	r4, [r7, #32]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f12:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f16:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f1e:	3306      	adds	r3, #6
 8002f20:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	61fa      	str	r2, [r7, #28]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	69bc      	ldr	r4, [r7, #24]
 8002f38:	0423      	lsls	r3, r4, #16
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	ea40 0402 	orr.w	r4, r0, r2
 8002f40:	613c      	str	r4, [r7, #16]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f4a:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f4e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f56:	3307      	adds	r3, #7
 8002f58:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2200      	movs	r2, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	60fa      	str	r2, [r7, #12]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	68bc      	ldr	r4, [r7, #8]
 8002f70:	0623      	lsls	r3, r4, #24
 8002f72:	2200      	movs	r2, #0
 8002f74:	ea40 0402 	orr.w	r4, r0, r2
 8002f78:	603c      	str	r4, [r7, #0]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f82:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8002f86:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002f8a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8002f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f94:	3308      	adds	r3, #8
 8002f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8002f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	378c      	adds	r7, #140	@ 0x8c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fa8:	4770      	bx	lr
	...

08002fac <_ZN8std_msgs7Float647getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float64"; };
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	4b02      	ldr	r3, [pc, #8]	@ (8002fc0 <_ZN8std_msgs7Float647getTypeEv+0x14>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	08008c08 	.word	0x08008c08

08002fc4 <_ZN8std_msgs7Float646getMD5Ev>:
    virtual const char * getMD5() override { return "fdb28210bfa9d7c91146260178d9a584"; };
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	4b02      	ldr	r3, [pc, #8]	@ (8002fd8 <_ZN8std_msgs7Float646getMD5Ev+0x14>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	08008c1c 	.word	0x08008c1c

08002fdc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	08008dc8 	.word	0x08008dc8

08002ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ffe8 	bl	8002fdc <_ZN3ros15NodeHandleBase_C1Ev>
 800300c:	4a41      	ldr	r2, [pc, #260]	@ (8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev+0x118>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fccc 	bl	80029b4 <_ZN13STM32HardwareC1Ev>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	615a      	str	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3318      	adds	r3, #24
 8003038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fc94 	bl	800896c <memset>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800304a:	3318      	adds	r3, #24
 800304c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f005 fc8a 	bl	800896c <memset>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800305e:	3318      	adds	r3, #24
 8003060:	2228      	movs	r2, #40	@ 0x28
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fc81 	bl	800896c <memset>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003070:	3340      	adds	r3, #64	@ 0x40
 8003072:	2228      	movs	r2, #40	@ 0x28
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f005 fc78 	bl	800896c <memset>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6693      	str	r3, [r2, #104]	@ 0x68
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030a6:	461a      	mov	r2, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	6753      	str	r3, [r2, #116]	@ 0x74
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6793      	str	r3, [r2, #120]	@ 0x78
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030d8:	461a      	mov	r2, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030e6:	461a      	mov	r2, r3
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8003100:	3310      	adds	r3, #16
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f822 	bl	800214c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08008d54 	.word	0x08008d54

08003118 <HAL_UART_TxCpltCallback>:
int16_t duty_pwm = 0;

bool is_tick_changed = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8003120:	4803      	ldr	r0, [pc, #12]	@ (8003130 <HAL_UART_TxCpltCallback+0x18>)
 8003122:	f7ff fc25 	bl	8002970 <_ZN10SerialComm11set_tx_cpltEv>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200001e0 	.word	0x200001e0

08003134 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 800313c:	4803      	ldr	r0, [pc, #12]	@ (800314c <HAL_UART_RxCpltCallback+0x18>)
 800313e:	f7ff fc25 	bl	800298c <_ZN10SerialComm10reset_rbufEv>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200001e0 	.word	0x200001e0

08003150 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7f1b      	ldrb	r3, [r3, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_TIM_IC_CaptureCallback+0x1c>
	{
		my_encoder->tick++;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x28>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	3201      	adds	r2, #1
 8003168:	b292      	uxth	r2, r2
 800316a:	801a      	strh	r2, [r3, #0]
	}
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	2000835c 	.word	0x2000835c

0800317c <_Z16motorVelCallbackRKN8std_msgs5Int16E>:

void motorVelCallback(const std_msgs::Int16& motor_speed_msg)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	my_controller->set_point = static_cast<double>(motor_speed_msg.data);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800318a:	4a0e      	ldr	r2, [pc, #56]	@ (80031c4 <_Z16motorVelCallbackRKN8std_msgs5Int16E+0x48>)
 800318c:	6814      	ldr	r4, [r2, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f9a4 	bl	80004dc <__aeabi_i2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	e9c4 2300 	strd	r2, r3, [r4]
	set_point = my_controller->set_point;
 800319c:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <_Z16motorVelCallbackRKN8std_msgs5Int16E+0x48>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fcc4 	bl	8000b34 <__aeabi_d2f>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a06      	ldr	r2, [pc, #24]	@ (80031c8 <_Z16motorVelCallbackRKN8std_msgs5Int16E+0x4c>)
 80031b0:	6013      	str	r3, [r2, #0]
	duty_pwm = motor_speed_msg.data;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <_Z16motorVelCallbackRKN8std_msgs5Int16E+0x50>)
 80031ba:	801a      	strh	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	20008364 	.word	0x20008364
 80031c8:	20008388 	.word	0x20008388
 80031cc:	2000838c 	.word	0x2000838c

080031d0 <_Z13pGainCallbackRKN8std_msgs7Float64E>:
void pGainCallback(const std_msgs::Float64& kp_msg)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	my_controller->kp = static_cast<double>(kp_msg.data);
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <_Z13pGainCallbackRKN8std_msgs7Float64E+0x20>)
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20008364 	.word	0x20008364

080031f4 <_Z9ros_setupv>:
{
	my_controller->kd = static_cast<double>(kd_msg.data);
}

void ros_setup()
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	nh.initNode();
 80031f8:	480c      	ldr	r0, [pc, #48]	@ (800322c <_Z9ros_setupv+0x38>)
 80031fa:	f000 faab 	bl	8003754 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>

	nh.subscribe(sub_motor_speed);
 80031fe:	490c      	ldr	r1, [pc, #48]	@ (8003230 <_Z9ros_setupv+0x3c>)
 8003200:	480a      	ldr	r0, [pc, #40]	@ (800322c <_Z9ros_setupv+0x38>)
 8003202:	f000 facc 	bl	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_P_gain);
 8003206:	490b      	ldr	r1, [pc, #44]	@ (8003234 <_Z9ros_setupv+0x40>)
 8003208:	4808      	ldr	r0, [pc, #32]	@ (800322c <_Z9ros_setupv+0x38>)
 800320a:	f000 fac8 	bl	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_I_gain);
 800320e:	490a      	ldr	r1, [pc, #40]	@ (8003238 <_Z9ros_setupv+0x44>)
 8003210:	4806      	ldr	r0, [pc, #24]	@ (800322c <_Z9ros_setupv+0x38>)
 8003212:	f000 fac4 	bl	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_D_gain);
 8003216:	4909      	ldr	r1, [pc, #36]	@ (800323c <_Z9ros_setupv+0x48>)
 8003218:	4804      	ldr	r0, [pc, #16]	@ (800322c <_Z9ros_setupv+0x38>)
 800321a:	f000 fac0 	bl	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>

	nh.advertise(pub_motor_rpm);
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <_Z9ros_setupv+0x4c>)
 8003220:	4802      	ldr	r0, [pc, #8]	@ (800322c <_Z9ros_setupv+0x38>)
 8003222:	f000 fae8 	bl	80037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200041ec 	.word	0x200041ec
 8003230:	200082ac 	.word	0x200082ac
 8003234:	200082c8 	.word	0x200082c8
 8003238:	200082f0 	.word	0x200082f0
 800323c:	20008318 	.word	0x20008318
 8003240:	20008348 	.word	0x20008348

08003244 <_Z6millisv>:

uint32_t millis()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003248:	f001 fc66 	bl	8004b18 <HAL_GetTick>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}
 8003252:	0000      	movs	r0, r0
 8003254:	0000      	movs	r0, r0
	...

08003258 <setup>:

void setup()
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b093      	sub	sp, #76	@ 0x4c
 800325c:	af02      	add	r7, sp, #8
	ros_setup();
 800325e:	f7ff ffc9 	bl	80031f4 <_Z9ros_setupv>

	Encoder_Handle_t encoder_handle =
 8003262:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003268:	2300      	movs	r3, #0
 800326a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	{
			.max_count = 0xFFFF,
			.tick_read_channel = TIM_CHANNEL_1
	};
	my_encoder = Encoder_Init(encoder_handle);
 800326c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003274:	f7fe f999 	bl	80015aa <Encoder_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	4a3b      	ldr	r2, [pc, #236]	@ (8003368 <setup+0x110>)
 800327c:	6013      	str	r3, [r2, #0]
	Encoder_Start(my_encoder);
 800327e:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <setup+0x110>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f9ac 	bl	80015e0 <Encoder_Start>

	float b1_coeff[] = { 0.2452,	0.2452 };
 8003288:	4a38      	ldr	r2, [pc, #224]	@ (800336c <setup+0x114>)
 800328a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800328e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003292:	e883 0003 	stmia.w	r3, {r0, r1}
	float a1_coeff[] = {    1.0, -0.5095 };
 8003296:	4a36      	ldr	r2, [pc, #216]	@ (8003370 <setup+0x118>)
 8003298:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800329c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a0:	e883 0003 	stmia.w	r3, {r0, r1}
	encoder_filter = reinterpret_cast<FO_IIR_Filter_t*>(calloc(1, sizeof(FO_IIR_Filter_t)));
 80032a4:	2118      	movs	r1, #24
 80032a6:	2001      	movs	r0, #1
 80032a8:	f005 fa60 	bl	800876c <calloc>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b30      	ldr	r3, [pc, #192]	@ (8003374 <setup+0x11c>)
 80032b2:	601a      	str	r2, [r3, #0]
	FO_IIR_Init(encoder_filter, b1_coeff, a1_coeff);
 80032b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003374 <setup+0x11c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80032bc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd ff7b 	bl	80011bc <FO_IIR_Init>

	float b2_coeff[] = { 0.0564, 0.1129, 0.0564 };
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <setup+0x120>)
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float a2_coeff[] = {    1.0, -1.2247, 0.4504 };
 80032d2:	4a2a      	ldr	r2, [pc, #168]	@ (800337c <setup+0x124>)
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80032da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	encoder_filter_2 = reinterpret_cast<SO_IIR_Filter_t*>(calloc(1, sizeof(SO_IIR_Filter_t)));
 80032de:	2128      	movs	r1, #40	@ 0x28
 80032e0:	2001      	movs	r0, #1
 80032e2:	f005 fa43 	bl	800876c <calloc>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <setup+0x128>)
 80032ec:	601a      	str	r2, [r3, #0]
	SO_IIR_Init(encoder_filter_2, b2_coeff, a2_coeff);
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <setup+0x128>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f107 0210 	add.w	r2, r7, #16
 80032f6:	f107 011c 	add.w	r1, r7, #28
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd ffc3 	bl	8001286 <SO_IIR_Init>

	Motor_Handle_t motor_handle =
 8003300:	4b20      	ldr	r3, [pc, #128]	@ (8003384 <setup+0x12c>)
 8003302:	463c      	mov	r4, r7
 8003304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.pwm_channel = TIM_CHANNEL_1,
			.direction_port = GPIOC,
			.direction_pin = GPIO_PIN_3,
			.pwm_frequency = 1000
	};
	my_motor = Motor_Init(motor_handle);
 800330a:	463b      	mov	r3, r7
 800330c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800330e:	f7fd fff3 	bl	80012f8 <Motor_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <setup+0x130>)
 8003316:	6013      	str	r3, [r2, #0]
	Motor_Start(my_motor);
 8003318:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <setup+0x130>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe f8f9 	bl	8001514 <Motor_Start>

	my_controller = PID_Init(KP, KI, KD);
 8003322:	a30b      	add	r3, pc, #44	@ (adr r3, 8003350 <setup+0xf8>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	e9cd 2300 	strd	r2, r3, [sp]
 800332c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003358 <setup+0x100>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	a10b      	add	r1, pc, #44	@ (adr r1, 8003360 <setup+0x108>)
 8003334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003338:	f001 f80c 	bl	8004354 <PID_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	4a13      	ldr	r2, [pc, #76]	@ (800338c <setup+0x134>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	3744      	adds	r7, #68	@ 0x44
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w
 8003350:	020c49ba 	.word	0x020c49ba
 8003354:	3f76872b 	.word	0x3f76872b
 8003358:	9999999a 	.word	0x9999999a
 800335c:	40059999 	.word	0x40059999
 8003360:	147ae148 	.word	0x147ae148
 8003364:	3fed47ae 	.word	0x3fed47ae
 8003368:	2000835c 	.word	0x2000835c
 800336c:	08008c40 	.word	0x08008c40
 8003370:	08008c48 	.word	0x08008c48
 8003374:	20008368 	.word	0x20008368
 8003378:	08008c50 	.word	0x08008c50
 800337c:	08008c5c 	.word	0x08008c5c
 8003380:	2000836c 	.word	0x2000836c
 8003384:	08008c68 	.word	0x08008c68
 8003388:	20008360 	.word	0x20008360
 800338c:	20008364 	.word	0x20008364

08003390 <loop>:

uint32_t start_time = 8000;
int8_t direction;
uint8_t duty_debug;
void loop()
{
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	b083      	sub	sp, #12
 8003394:	af02      	add	r7, sp, #8
	t = millis();
 8003396:	f7ff ff55 	bl	8003244 <_Z6millisv>
 800339a:	4603      	mov	r3, r0
 800339c:	4a46      	ldr	r2, [pc, #280]	@ (80034b8 <loop+0x128>)
 800339e:	6013      	str	r3, [r2, #0]

	if ((t - t_motor_rpm_prev) >= dt[1])
 80033a0:	4b45      	ldr	r3, [pc, #276]	@ (80034b8 <loop+0x128>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b45      	ldr	r3, [pc, #276]	@ (80034bc <loop+0x12c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	4a45      	ldr	r2, [pc, #276]	@ (80034c0 <loop+0x130>)
 80033ac:	8852      	ldrh	r2, [r2, #2]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d305      	bcc.n	80033be <loop+0x2e>
	{
		updateRpm();
 80033b2:	f000 f89b 	bl	80034ec <_Z9updateRpmv>
		//publishRpmMsg();

		t_motor_rpm_prev = t;
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <loop+0x128>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a40      	ldr	r2, [pc, #256]	@ (80034bc <loop+0x12c>)
 80033bc:	6013      	str	r3, [r2, #0]
	}

	if ((t - t_motor_control_prev) >= dt[0])
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <loop+0x128>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b40      	ldr	r3, [pc, #256]	@ (80034c4 <loop+0x134>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	4a3d      	ldr	r2, [pc, #244]	@ (80034c0 <loop+0x130>)
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d36c      	bcc.n	80034aa <loop+0x11a>
	{
		duty_pwm = PID_Compute(my_controller, rpm_LPF, dt[0]);
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <loop+0x138>)
 80033d2:	681e      	ldr	r6, [r3, #0]
 80033d4:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <loop+0x13c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f891 	bl	8000500 <__aeabi_f2d>
 80033de:	4604      	mov	r4, r0
 80033e0:	460d      	mov	r5, r1
 80033e2:	4b37      	ldr	r3, [pc, #220]	@ (80034c0 <loop+0x130>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f868 	bl	80004bc <__aeabi_ui2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	e9cd 2300 	strd	r2, r3, [sp]
 80033f4:	4622      	mov	r2, r4
 80033f6:	462b      	mov	r3, r5
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 fff9 	bl	80043f0 <PID_Compute>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fb6d 	bl	8000ae4 <__aeabi_d2iz>
 800340a:	4603      	mov	r3, r0
 800340c:	b21a      	sxth	r2, r3
 800340e:	4b30      	ldr	r3, [pc, #192]	@ (80034d0 <loop+0x140>)
 8003410:	801a      	strh	r2, [r3, #0]

	    if ((rpm_LPF > -0.00001f) && (rpm_LPF < 0.00001f))
 8003412:	4b2e      	ldr	r3, [pc, #184]	@ (80034cc <loop+0x13c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	492f      	ldr	r1, [pc, #188]	@ (80034d4 <loop+0x144>)
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fea5 	bl	8001168 <__aeabi_fcmpgt>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <loop+0xae>
 8003424:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <loop+0x13c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	492b      	ldr	r1, [pc, #172]	@ (80034d8 <loop+0x148>)
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fe7e 	bl	800112c <__aeabi_fcmplt>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <loop+0xae>
	    {
	    	direction = DIRECTION_STOP;
 8003436:	4b29      	ldr	r3, [pc, #164]	@ (80034dc <loop+0x14c>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e01a      	b.n	8003474 <loop+0xe4>
	    }
	    else if (rpm_LPF > 0)
 800343e:	4b23      	ldr	r3, [pc, #140]	@ (80034cc <loop+0x13c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fe8e 	bl	8001168 <__aeabi_fcmpgt>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <loop+0xca>
	    {
	    	direction = DIRECTION_FORWARD;
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <loop+0x14c>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e00c      	b.n	8003474 <loop+0xe4>
	    }
	    else if (rpm_LPF < 0)
 800345a:	4b1c      	ldr	r3, [pc, #112]	@ (80034cc <loop+0x13c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fe62 	bl	800112c <__aeabi_fcmplt>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <loop+0xe4>
	    {
	    	direction = DIRECTION_BACKWARD;
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <loop+0x14c>)
 8003470:	22ff      	movs	r2, #255	@ 0xff
 8003472:	701a      	strb	r2, [r3, #0]
	    }

	    Motor_SetDirection(my_motor, direction);
 8003474:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <loop+0x150>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	@ (80034dc <loop+0x14c>)
 800347a:	f992 2000 	ldrsb.w	r2, [r2]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe f867 	bl	8001554 <Motor_SetDirection>

		Motor_Set_PWM_Duty(my_motor, duty_pwm);
 8003486:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <loop+0x150>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <loop+0x140>)
 800348c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd ff84 	bl	80013a0 <Motor_Set_PWM_Duty>
		duty_debug = my_motor->pwm_duty;
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <loop+0x150>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	785a      	ldrb	r2, [r3, #1]
 800349e:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <loop+0x154>)
 80034a0:	701a      	strb	r2, [r3, #0]

		t_motor_control_prev = t;
 80034a2:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <loop+0x128>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <loop+0x134>)
 80034a8:	6013      	str	r3, [r2, #0]
	}

	nh.spinOnce();
 80034aa:	480f      	ldr	r0, [pc, #60]	@ (80034e8 <loop+0x158>)
 80034ac:	f000 f9d2 	bl	8003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>
}
 80034b0:	bf00      	nop
 80034b2:	3704      	adds	r7, #4
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b8:	20008370 	.word	0x20008370
 80034bc:	20008378 	.word	0x20008378
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20008374 	.word	0x20008374
 80034c8:	20008364 	.word	0x20008364
 80034cc:	20008384 	.word	0x20008384
 80034d0:	2000838c 	.word	0x2000838c
 80034d4:	b727c5ac 	.word	0xb727c5ac
 80034d8:	3727c5ac 	.word	0x3727c5ac
 80034dc:	2000838e 	.word	0x2000838e
 80034e0:	20008360 	.word	0x20008360
 80034e4:	2000838f 	.word	0x2000838f
 80034e8:	200041ec 	.word	0x200041ec

080034ec <_Z9updateRpmv>:

void updateRpm()
{
 80034ec:	b598      	push	{r3, r4, r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	// Count overflow
	if (my_encoder->tick < last_tick)
 80034f0:	4b3d      	ldr	r3, [pc, #244]	@ (80035e8 <_Z9updateRpmv+0xfc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ec <_Z9updateRpmv+0x100>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20f      	bcs.n	800351e <_Z9updateRpmv+0x32>
	{
		d_tick = my_encoder->tick + (my_encoder->max_count - last_tick);
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <_Z9updateRpmv+0xfc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <_Z9updateRpmv+0xfc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b299      	uxth	r1, r3
 800350c:	4b37      	ldr	r3, [pc, #220]	@ (80035ec <_Z9updateRpmv+0x100>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1acb      	subs	r3, r1, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	4413      	add	r3, r2
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <_Z9updateRpmv+0x104>)
 800351a:	801a      	strh	r2, [r3, #0]
 800351c:	e008      	b.n	8003530 <_Z9updateRpmv+0x44>
	}
	else
	{
		d_tick = my_encoder->tick - last_tick;
 800351e:	4b32      	ldr	r3, [pc, #200]	@ (80035e8 <_Z9updateRpmv+0xfc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	881a      	ldrh	r2, [r3, #0]
 8003524:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <_Z9updateRpmv+0x100>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <_Z9updateRpmv+0x104>)
 800352e:	801a      	strh	r2, [r3, #0]
	}
	last_tick = my_encoder->tick;
 8003530:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <_Z9updateRpmv+0xfc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <_Z9updateRpmv+0x100>)
 8003538:	801a      	strh	r2, [r3, #0]

	// Get the number of rotation
	rpm_data = static_cast<float>(d_tick) / ENCODER_RESOLUTION;
 800353a:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <_Z9updateRpmv+0x104>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fbfe 	bl	8000d40 <__aeabi_ui2f>
 8003544:	4603      	mov	r3, r0
 8003546:	492b      	ldr	r1, [pc, #172]	@ (80035f4 <_Z9updateRpmv+0x108>)
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fd05 	bl	8000f58 <__aeabi_fdiv>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 8003554:	601a      	str	r2, [r3, #0]
	// Get the rotation per second
	rpm_data *= RPM_PUBLISH_FREQUENCY;
 8003556:	4b28      	ldr	r3, [pc, #160]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4928      	ldr	r1, [pc, #160]	@ (80035fc <_Z9updateRpmv+0x110>)
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fc47 	bl	8000df0 <__aeabi_fmul>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 8003568:	601a      	str	r2, [r3, #0]
	// Get the rotation per minute
	rpm_data *= 60;
 800356a:	4b23      	ldr	r3, [pc, #140]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4924      	ldr	r1, [pc, #144]	@ (8003600 <_Z9updateRpmv+0x114>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fc3d 	bl	8000df0 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	4b1f      	ldr	r3, [pc, #124]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 800357c:	601a      	str	r2, [r3, #0]

	// Apply Low Pass filter
	rpm_LPF = my_motor->direction * FO_IIR_Compute(encoder_filter, rpm_data);
 800357e:	4b21      	ldr	r3, [pc, #132]	@ (8003604 <_Z9updateRpmv+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f993 3000 	ldrsb.w	r3, [r3]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fbde 	bl	8000d48 <__aeabi_i2f>
 800358c:	4604      	mov	r4, r0
 800358e:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <_Z9updateRpmv+0x11c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <_Z9updateRpmv+0x10c>)
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fe3c 	bl	8001216 <FO_IIR_Compute>
 800359e:	4603      	mov	r3, r0
 80035a0:	4619      	mov	r1, r3
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7fd fc24 	bl	8000df0 <__aeabi_fmul>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b17      	ldr	r3, [pc, #92]	@ (800360c <_Z9updateRpmv+0x120>)
 80035ae:	601a      	str	r2, [r3, #0]
	if ((rpm_LPF > -0.00001f) && (rpm_LPF < 0.00001f))	rpm_LPF = 0;
 80035b0:	4b16      	ldr	r3, [pc, #88]	@ (800360c <_Z9updateRpmv+0x120>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4916      	ldr	r1, [pc, #88]	@ (8003610 <_Z9updateRpmv+0x124>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fdd6 	bl	8001168 <__aeabi_fcmpgt>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <_Z9updateRpmv+0xf0>
 80035c2:	4b12      	ldr	r3, [pc, #72]	@ (800360c <_Z9updateRpmv+0x120>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4913      	ldr	r1, [pc, #76]	@ (8003614 <_Z9updateRpmv+0x128>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fdaf 	bl	800112c <__aeabi_fcmplt>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <_Z9updateRpmv+0xf0>
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <_Z9updateRpmv+0x120>)
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

	rpm_msg.data = rpm_LPF;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <_Z9updateRpmv+0x120>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003618 <_Z9updateRpmv+0x12c>)
 80035e2:	6053      	str	r3, [r2, #4]
}
 80035e4:	bf00      	nop
 80035e6:	bd98      	pop	{r3, r4, r7, pc}
 80035e8:	2000835c 	.word	0x2000835c
 80035ec:	2000837c 	.word	0x2000837c
 80035f0:	2000837e 	.word	0x2000837e
 80035f4:	41a00000 	.word	0x41a00000
 80035f8:	20008380 	.word	0x20008380
 80035fc:	41200000 	.word	0x41200000
 8003600:	42700000 	.word	0x42700000
 8003604:	20008360 	.word	0x20008360
 8003608:	20008368 	.word	0x20008368
 800360c:	20008384 	.word	0x20008384
 8003610:	b727c5ac 	.word	0xb727c5ac
 8003614:	3727c5ac 	.word	0x3727c5ac
 8003618:	20008340 	.word	0x20008340

0800361c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e00c      	b.n	8003646 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	fa22 f103 	lsr.w	r1, r2, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	b2ca      	uxtb	r2, r1
 800363e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d9ef      	bls.n	800362c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e010      	b.n	8003690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	440a      	add	r2, r1
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	4611      	mov	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	00d2      	lsls	r2, r2, #3
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d9eb      	bls.n	800366e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
	...

080036a4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	08008db0 	.word	0x08008db0

080036c4 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ffe5 	bl	80036a4 <_ZN3ros11Subscriber_C1Ev>
 80036da:	4a0b      	ldr	r2, [pc, #44]	@ (8003708 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	330c      	adds	r3, #12
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f9ad 	bl	8002a44 <_ZN8std_msgs5Int16C1Ev>
    cb_(cb),
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]
  };
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08008d3c 	.word	0x08008d3c

0800370c <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ffc1 	bl	80036a4 <_ZN3ros11Subscriber_C1Ev>
 8003722:	4a0b      	ldr	r2, [pc, #44]	@ (8003750 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3310      	adds	r3, #16
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fa9b 	bl	8002c68 <_ZN8std_msgs7Float64C1Ev>
    cb_(cb),
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]
    endpoint_(endpoint)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24
    topic_ = topic_name;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
  };
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	08008d24 	.word	0x08008d24

08003754 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff f937 	bl	80029d4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800376c:	461a      	mov	r2, r3
 800376e:	2300      	movs	r3, #0
 8003770:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003778:	461a      	mov	r2, r3
 800377a:	2300      	movs	r3, #0
 800377c:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003784:	461a      	mov	r2, r3
 8003786:	2300      	movs	r3, #0
 8003788:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e01a      	b.n	80037e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b6:	3310      	adds	r3, #16
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c8:	3310      	adds	r3, #16
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	605a      	str	r2, [r3, #4]
        return true;
 80037da:	2301      	movs	r3, #1
 80037dc:	e006      	b.n	80037ec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	dde1      	ble.n	80037ae <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80037ea:	2300      	movs	r3, #0
  }
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e01d      	b.n	8003842 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800380e:	3306      	adds	r3, #6
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003820:	3306      	adds	r3, #6
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	60da      	str	r2, [r3, #12]
        return true;
 8003838:	2301      	movs	r3, #1
 800383a:	e006      	b.n	800384a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b09      	cmp	r3, #9
 8003846:	ddde      	ble.n	8003806 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8003848:	2300      	movs	r3, #0
  }
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f8e3 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 8003866:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800387a:	4293      	cmp	r3, r2
 800387c:	d905      	bls.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003884:	2200      	movs	r2, #0
 8003886:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d905      	bls.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80038ac:	461a      	mov	r2, r3
 80038ae:	2300      	movs	r3, #0
 80038b0:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d013      	beq.n	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f8b4 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf8c      	ite	hi
 80038d2:	2301      	movhi	r3, #1
 80038d4:	2300      	movls	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 80038dc:	f06f 0301 	mvn.w	r3, #1
 80038e0:	e1e8      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      int data = hardware_.read();
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f881 	bl	80029ee <_ZN13STM32Hardware4readEv>
 80038ec:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f2c0 81c1 	blt.w	8003c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x424>
      checksum_ += data;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80038fc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003908:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003912:	2b07      	cmp	r3, #7
 8003914:	d124      	bne.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800391c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8003926:	674a      	str	r2, [r1, #116]	@ 0x74
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	b2d1      	uxtb	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	460a      	mov	r2, r1
 8003932:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800393a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393c:	3b01      	subs	r3, #1
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003944:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800394c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1af      	bne.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003958:	461a      	mov	r2, r3
 800395a:	2308      	movs	r3, #8
 800395c:	6693      	str	r3, [r2, #104]	@ 0x68
 800395e:	e7a8      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003968:	2b00      	cmp	r3, #0
 800396a:	d12e      	bne.n	80039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x176>
        if (data == 0xff)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2bff      	cmp	r3, #255	@ 0xff
 8003970:	d110      	bne.n	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x140>
          mode_++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800397a:	3301      	adds	r3, #1
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003982:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3314      	adds	r3, #20
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800398e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003992:	e78e      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f847 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 800399e:	4602      	mov	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf8c      	ite	hi
 80039ac:	2301      	movhi	r3, #1
 80039ae:	2300      	movls	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f43f af7d 	beq.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          configured_ = false;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 80039c4:	f06f 0301 	mvn.w	r3, #1
 80039c8:	e174      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d11e      	bne.n	8003a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80039da:	d109      	bne.n	80039f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x19c>
          mode_++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e4:	3301      	adds	r3, #1
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80039ec:	6693      	str	r3, [r2, #104]	@ 0x68
 80039ee:	e760      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a02:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f47f af53 	bne.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f955 	bl	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
 8003a12:	e74e      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x204>
        bytes_ = data;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a40:	3301      	adds	r3, #1
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003a48:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6793      	str	r3, [r2, #120]	@ 0x78
 8003a56:	e72c      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d114      	bne.n	8003a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a6a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4413      	add	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003a78:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a82:	3301      	adds	r3, #1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003a8a:	6693      	str	r3, [r2, #104]	@ 0x68
 8003a8c:	e711      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d11b      	bne.n	8003ad2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa2:	425a      	negs	r2, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	bf58      	it	pl
 8003aaa:	4253      	negpl	r3, r2
 8003aac:	2bff      	cmp	r3, #255	@ 0xff
 8003aae:	d109      	bne.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x270>
          mode_++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab8:	3301      	adds	r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003ac0:	6693      	str	r3, [r2, #104]	@ 0x68
 8003ac2:	e6f6      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	6693      	str	r3, [r2, #104]	@ 0x68
 8003ad0:	e6ef      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d115      	bne.n	8003b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x2b6>
        topic_ = data;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af2:	3301      	adds	r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003afa:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6793      	str	r3, [r2, #120]	@ 0x78
 8003b08:	e6d3      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d11e      	bne.n	8003b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	4413      	add	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b32:	461a      	mov	r2, r3
 8003b34:	2307      	movs	r3, #7
 8003b36:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f aeb6 	bne.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2308      	movs	r3, #8
 8003b50:	6693      	str	r3, [r2, #104]	@ 0x68
 8003b52:	e6ae      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	f47f aea8 	bne.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b76:	425a      	negs	r2, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	bf58      	it	pl
 8003b7e:	4253      	negpl	r3, r2
 8003b80:	2bff      	cmp	r3, #255	@ 0xff
 8003b82:	f47f ae96 	bne.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36c>
            requestSyncTime();
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f892 	bl	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f8ac 	bl	8003cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	e079      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	2b0a      	cmp	r3, #10
 8003bca:	d106      	bne.n	8003bda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x386>
            syncTime(message_in);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f97a 	bl	8003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>
 8003bd8:	e66b      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d110      	bne.n	8003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8003bec:	3310      	adds	r3, #16
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	3218      	adds	r2, #24
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fbe8 	bl	80023ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8003c06:	e654      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	2b0b      	cmp	r3, #11
 8003c12:	d106      	bne.n	8003c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3ce>
            configured_ = false;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8003c20:	e647      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	3b64      	subs	r3, #100	@ 0x64
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c32:	3310      	adds	r3, #16
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f43f ae3a 	beq.w	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	3b64      	subs	r3, #100	@ 0x64
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4e:	3310      	adds	r3, #16
 8003c50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	3b64      	subs	r3, #100	@ 0x64
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c64:	3310      	adds	r3, #16
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	3218      	adds	r2, #24
 8003c72:	4611      	mov	r1, r2
 8003c74:	4798      	blx	r3
    while (true)
 8003c76:	e61c      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        break;
 8003c78:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c80:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d909      	bls.n	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
      requestSyncTime();
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f80c 	bl	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 8003cb2:	2300      	movs	r3, #0
  }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fee9 	bl	8001aa0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f107 020c 	add.w	r2, r7, #12
 8003cd8:	210a      	movs	r1, #10
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
    rt_time = hardware_.time();
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fea2 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
  }
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b08b      	sub	sp, #44	@ 0x2c
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd ffb6 	bl	8001c74 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0c:	e062      	b.n	8003dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d16:	3306      	adds	r3, #6
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d056      	beq.n	8003dce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d28:	3306      	adds	r3, #6
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3c:	3306      	adds	r3, #6
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d4e:	3306      	adds	r3, #6
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d5e:	3306      	adds	r3, #6
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4798      	blx	r3
 8003d70:	4603      	mov	r3, r0
 8003d72:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7c:	3306      	adds	r3, #6
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8c:	3306      	adds	r3, #6
 8003d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4798      	blx	r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003da2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003da6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681c      	ldr	r4, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db6:	3306      	adds	r3, #6
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe fca3 	bl	8002708 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	dd99      	ble.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e067      	b.n	8003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de8:	3310      	adds	r3, #16
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d05b      	beq.n	8003eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0e:	3310      	adds	r3, #16
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e20:	3310      	adds	r3, #16
 8003e22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e2e:	3310      	adds	r3, #16
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4798      	blx	r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e4a:	3310      	adds	r3, #16
 8003e4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e58:	3310      	adds	r3, #16
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4608      	mov	r0, r1
 8003e66:	4798      	blx	r3
 8003e68:	4603      	mov	r3, r0
 8003e6a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e70:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681c      	ldr	r4, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e80:	3310      	adds	r3, #16
 8003e82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8e:	3310      	adds	r3, #16
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3304      	adds	r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	4798      	blx	r3
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	3301      	adds	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	dd94      	ble.n	8003de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8003ec2:	bf00      	nop
 8003ec4:	372c      	adds	r7, #44	@ 0x2c
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
	...

08003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fde0 	bl	8001aa0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fda1 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ef4:	f107 0308 	add.w	r3, r7, #8
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd fe3f 	bl	8001b7e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	4915      	ldr	r1, [pc, #84]	@ (8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8003f06:	fba1 1303 	umull	r1, r3, r1, r3
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8003f16:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f20:	fb00 f303 	mul.w	r3, r0, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x94>)
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f8b7 	bl	80040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fd72 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	10624dd3 	.word	0x10624dd3
 8003f60:	000f4240 	.word	0x000f4240

08003f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b63      	cmp	r3, #99	@ 0x63
 8003f74:	dd0b      	ble.n	8003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003f7c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e087      	b.n	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4790      	blx	r2
 8003fa4:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fac:	22ff      	movs	r2, #255	@ 0xff
 8003fae:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fb6:	22fe      	movs	r2, #254	@ 0xfe
 8003fb8:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fc4:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fd6:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fde:	7e9a      	ldrb	r2, [r3, #26]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fe6:	7edb      	ldrb	r3, [r3, #27]
 8003fe8:	4413      	add	r3, r2
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ff6:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004002:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	b21b      	sxth	r3, r3
 8004008:	121b      	asrs	r3, r3, #8
 800400a:	b21b      	sxth	r3, r3
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004014:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800401a:	2305      	movs	r3, #5
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e00d      	b.n	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4413      	add	r3, r2
 8004026:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800402a:	3318      	adds	r3, #24
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	3301      	adds	r3, #1
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3306      	adds	r3, #6
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	ddec      	ble.n	8004020 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	3307      	adds	r3, #7
 800404a:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	425a      	negs	r2, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	bf58      	it	pl
 8004056:	4253      	negpl	r3, r2
 8004058:	b2da      	uxtb	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	6179      	str	r1, [r7, #20]
 8004060:	43d2      	mvns	r2, r2
 8004062:	b2d1      	uxtb	r1, r2
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800406c:	3318      	adds	r3, #24
 800406e:	460a      	mov	r2, r1
 8004070:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004078:	dc0b      	bgt.n	8004092 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1d18      	adds	r0, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004084:	3318      	adds	r3, #24
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4619      	mov	r1, r3
 800408a:	f7fe fcbe 	bl	8002a0a <_ZN13STM32Hardware5writeEPhi>
      return l;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	e005      	b.n	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004092:	4905      	ldr	r1, [pc, #20]	@ (80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x144>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f847 	bl	8004128 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>
      return -1;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	08008c78 	.word	0x08008c78

080040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fcb6 	bl	8002a2c <_ZN13STM32Hardware4timeEv>
 80040c0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4914      	ldr	r1, [pc, #80]	@ (800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 80040ca:	fba1 1303 	umull	r1, r3, r1, r3
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 80040e0:	fba3 0302 	umull	r0, r3, r3, r2
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040ea:	fb00 f303 	mul.w	r3, r0, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004120 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x74>)
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	1aca      	subs	r2, r1, r3
 80040f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x78>)
 80040fa:	4413      	add	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f103 020c 	add.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3310      	adds	r3, #16
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 fc59 	bl	80049c4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	000f4240 	.word	0x000f4240
 8004124:	3b9aca00 	.word	0x3b9aca00

08004128 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	2103      	movs	r1, #3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f804 	bl	8004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>
  }
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	460b      	mov	r3, r1
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd ff4c 	bl	8001ff4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800415c:	7afb      	ldrb	r3, [r7, #11]
 800415e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f107 0214 	add.w	r2, r7, #20
 800416e:	2107      	movs	r1, #7
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	4798      	blx	r3
  }
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_Z41__static_initialization_and_destruction_0ii>:

void publishRpmMsg()
{
	pub_motor_rpm.publish(&rpm_msg);
}
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d12f      	bne.n	80041ec <_Z41__static_initialization_and_destruction_0ii+0x70>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004192:	4293      	cmp	r3, r2
 8004194:	d12a      	bne.n	80041ec <_Z41__static_initialization_and_destruction_0ii+0x70>
};

SerialComm comm_rosserial(huart_rosserial);
 8004196:	4917      	ldr	r1, [pc, #92]	@ (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004198:	4817      	ldr	r0, [pc, #92]	@ (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800419a:	f7fe fac0 	bl	800271e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 800419e:	4817      	ldr	r0, [pc, #92]	@ (80041fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80041a0:	f7fe ff2c 	bl	8002ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>
ros::Time current_time;
 80041a4:	4816      	ldr	r0, [pc, #88]	@ (8004200 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80041a6:	f7fd fc5b 	bl	8001a60 <_ZN3ros4TimeC1Ev>
 */

/*
 * Subscribers
 */
ros::Subscriber<std_msgs::Int16> sub_motor_speed("/motor_speed", &motorVelCallback);
 80041aa:	2301      	movs	r3, #1
 80041ac:	4a15      	ldr	r2, [pc, #84]	@ (8004204 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80041ae:	4916      	ldr	r1, [pc, #88]	@ (8004208 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80041b0:	4816      	ldr	r0, [pc, #88]	@ (800420c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80041b2:	f7ff fa87 	bl	80036c4 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_P_gain("/controller_kp", &pGainCallback);
 80041b6:	2301      	movs	r3, #1
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80041ba:	4916      	ldr	r1, [pc, #88]	@ (8004214 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80041bc:	4816      	ldr	r0, [pc, #88]	@ (8004218 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80041be:	f7ff faa5 	bl	800370c <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_I_gain("/controller_ki", &pGainCallback);
 80041c2:	2301      	movs	r3, #1
 80041c4:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80041c6:	4915      	ldr	r1, [pc, #84]	@ (800421c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80041c8:	4815      	ldr	r0, [pc, #84]	@ (8004220 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80041ca:	f7ff fa9f 	bl	800370c <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_D_gain("/controller_kd", &pGainCallback);
 80041ce:	2301      	movs	r3, #1
 80041d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80041d2:	4914      	ldr	r1, [pc, #80]	@ (8004224 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80041d4:	4814      	ldr	r0, [pc, #80]	@ (8004228 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80041d6:	f7ff fa99 	bl	800370c <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::Float32 rpm_msg;
 80041da:	4814      	ldr	r0, [pc, #80]	@ (800422c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80041dc:	f7fe fcae 	bl	8002b3c <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub_motor_rpm("/motor_rpm", &rpm_msg);
 80041e0:	2300      	movs	r3, #0
 80041e2:	4a12      	ldr	r2, [pc, #72]	@ (800422c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80041e4:	4912      	ldr	r1, [pc, #72]	@ (8004230 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80041e6:	4813      	ldr	r0, [pc, #76]	@ (8004234 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80041e8:	f7fe fa78 	bl	80026dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000110 	.word	0x20000110
 80041f8:	200001e0 	.word	0x200001e0
 80041fc:	200041ec 	.word	0x200041ec
 8004200:	200082a4 	.word	0x200082a4
 8004204:	0800317d 	.word	0x0800317d
 8004208:	08008cb4 	.word	0x08008cb4
 800420c:	200082ac 	.word	0x200082ac
 8004210:	080031d1 	.word	0x080031d1
 8004214:	08008cc4 	.word	0x08008cc4
 8004218:	200082c8 	.word	0x200082c8
 800421c:	08008cd4 	.word	0x08008cd4
 8004220:	200082f0 	.word	0x200082f0
 8004224:	08008ce4 	.word	0x08008ce4
 8004228:	20008318 	.word	0x20008318
 800422c:	20008340 	.word	0x20008340
 8004230:	08008cf4 	.word	0x08008cf4
 8004234:	20008348 	.word	0x20008348

08004238 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3310      	adds	r3, #16
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fdab 	bl	8002da4 <_ZN8std_msgs7Float6411deserializeEPh>
    this->cb_(msg);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	3210      	adds	r2, #16
 8004256:	4610      	mov	r0, r2
 8004258:	4798      	blx	r3
  }
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3310      	adds	r3, #16
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fe91 	bl	8002fac <_ZN8std_msgs7Float647getTypeEv>
 800428a:	4603      	mov	r3, r0
  }
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fe8f 	bl	8002fc4 <_ZN8std_msgs7Float646getMD5Ev>
 80042a6:	4603      	mov	r3, r0
  }
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	330c      	adds	r3, #12
 80042be:	6839      	ldr	r1, [r7, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe fbf8 	bl	8002ab6 <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	320c      	adds	r2, #12
 80042ce:	4610      	mov	r0, r2
 80042d0:	4798      	blx	r3
  }
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
  }
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	330c      	adds	r3, #12
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe fc05 	bl	8002b0c <_ZN8std_msgs5Int167getTypeEv>
 8004302:	4603      	mov	r3, r0
  }
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	330c      	adds	r3, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fc03 	bl	8002b24 <_ZN8std_msgs5Int166getMD5Ev>
 800431e:	4603      	mov	r3, r0
  }
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9connectedEv>:
  virtual bool connected() override
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    return configured_;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004336:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <_GLOBAL__sub_I_comm_rosserial>:
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
 8004348:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800434c:	2001      	movs	r0, #1
 800434e:	f7ff ff15 	bl	800417c <_Z41__static_initialization_and_destruction_0ii>
 8004352:	bd80      	pop	{r7, pc}

08004354 <PID_Init>:
#include "pid.h"

PID_t* PID_Init(double p, double i, double d)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800435e:	e9c7 2300 	strd	r2, r3, [r7]
    PID_t *object = calloc(1, sizeof(PID_t));
 8004362:	2148      	movs	r1, #72	@ 0x48
 8004364:	2001      	movs	r0, #1
 8004366:	f004 fa01 	bl	800876c <calloc>
 800436a:	4603      	mov	r3, r0
 800436c:	617b      	str	r3, [r7, #20]

    object->set_point = 0;
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9c1 2300 	strd	r2, r3, [r1]
    
    object->kp = p;
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004382:	e9c1 2302 	strd	r2, r3, [r1, #8]
    object->ki = i;
 8004386:	6979      	ldr	r1, [r7, #20]
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    object->kd = d;
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	e9c1 2306 	strd	r2, r3, [r1, #24]

    object->P = 0;
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    object->I = 0;
 80043a8:	6979      	ldr	r1, [r7, #20]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    object->D = 0;
 80043b6:	6979      	ldr	r1, [r7, #20]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    object->integral_sum = 0;
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    object->last_input = 0;
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return object;
 80043e0:	697b      	ldr	r3, [r7, #20]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	0000      	movs	r0, r0
 80043ec:	0000      	movs	r0, r0
	...

080043f0 <PID_Compute>:
    controller->ki = i;
    controller->kd = d;
}

double PID_Compute(PID_t *controller, double input, double dt)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	e9c7 2300 	strd	r2, r3, [r7]
    // Error calculation
    double err = controller->set_point - input;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004406:	f7fb ff1b 	bl	8000240 <__aeabi_dsub>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // P
    controller->P = err * controller->kp;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	f7fc f8c8 	bl	80005b0 <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // I
    controller->integral_sum += err * (dt/1000);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	4b5c      	ldr	r3, [pc, #368]	@ (80045a8 <PID_Compute+0x1b8>)
 8004436:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800443a:	f7fc f9e3 	bl	8000804 <__aeabi_ddiv>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444a:	f7fc f8b1 	bl	80005b0 <__aeabi_dmul>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4620      	mov	r0, r4
 8004454:	4629      	mov	r1, r5
 8004456:	f7fb fef5 	bl	8000244 <__adddf3>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    controller->I = controller->integral_sum * controller->ki;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004470:	f7fc f89e 	bl	80005b0 <__aeabi_dmul>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    if (controller->I >= MAX_INTEGRAL)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	4b48      	ldr	r3, [pc, #288]	@ (80045ac <PID_Compute+0x1bc>)
 800448a:	f7fc fb17 	bl	8000abc <__aeabi_dcmpge>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PID_Compute+0xb0>
    {
        controller->I = MAX_INTEGRAL;
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <PID_Compute+0x1bc>)
 800449c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    if (controller->I <= MIN_INTEGRAL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <PID_Compute+0x1c0>)
 80044ac:	f7fc fafc 	bl	8000aa8 <__aeabi_dcmple>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <PID_Compute+0xd2>
    {
        controller->I = MIN_INTEGRAL;
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <PID_Compute+0x1c0>)
 80044be:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }

    // D
    double dError = (input - controller->last_input) / (dt/1000);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80044c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044cc:	f7fb feb8 	bl	8000240 <__aeabi_dsub>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <PID_Compute+0x1b8>)
 80044de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80044e2:	f7fc f98f 	bl	8000804 <__aeabi_ddiv>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fc f989 	bl	8000804 <__aeabi_ddiv>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    controller->last_input = input;
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    controller->D = dError  * controller->kd;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800450a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800450e:	f7fc f84f 	bl	80005b0 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Calculate the output
    double output = controller->P + controller->I + controller->D;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004528:	f7fb fe8c 	bl	8000244 <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800453a:	f7fb fe83 	bl	8000244 <__adddf3>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if (output >= MAX_PID_OUTPUT)
 8004546:	a314      	add	r3, pc, #80	@ (adr r3, 8004598 <PID_Compute+0x1a8>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004550:	f7fc fab4 	bl	8000abc <__aeabi_dcmpge>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <PID_Compute+0x176>
    {
        output = MAX_PID_OUTPUT;
 800455a:	a30f      	add	r3, pc, #60	@ (adr r3, 8004598 <PID_Compute+0x1a8>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004564:	e00e      	b.n	8004584 <PID_Compute+0x194>
    }
    else if (output <= MIN_PID_OUTPUT)
 8004566:	a30e      	add	r3, pc, #56	@ (adr r3, 80045a0 <PID_Compute+0x1b0>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004570:	f7fc fa9a 	bl	8000aa8 <__aeabi_dcmple>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <PID_Compute+0x194>
    {
        output = MIN_PID_OUTPUT;
 800457a:	a309      	add	r3, pc, #36	@ (adr r3, 80045a0 <PID_Compute+0x1b0>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return output;
 8004584:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	3728      	adds	r7, #40	@ 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bdb0      	pop	{r4, r5, r7, pc}
 8004592:	bf00      	nop
 8004594:	f3af 8000 	nop.w
 8004598:	00000000 	.word	0x00000000
 800459c:	406fe000 	.word	0x406fe000
 80045a0:	00000000 	.word	0x00000000
 80045a4:	c06fe000 	.word	0xc06fe000
 80045a8:	408f4000 	.word	0x408f4000
 80045ac:	40640000 	.word	0x40640000
 80045b0:	c0640000 	.word	0xc0640000

080045b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80045ba:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <HAL_MspInit+0x5c>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <HAL_MspInit+0x5c>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6193      	str	r3, [r2, #24]
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_MspInit+0x5c>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <HAL_MspInit+0x5c>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004610 <HAL_MspInit+0x5c>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	61d3      	str	r3, [r2, #28]
 80045de:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_MspInit+0x5c>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <HAL_MspInit+0x60>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	4a04      	ldr	r2, [pc, #16]	@ (8004614 <HAL_MspInit+0x60>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40021000 	.word	0x40021000
 8004614:	40010000 	.word	0x40010000

08004618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	@ 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 0318 	add.w	r3, r7, #24
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <HAL_TIM_Base_MspInit+0xa4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004638:	4b21      	ldr	r3, [pc, #132]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 800463e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004642:	6193      	str	r3, [r2, #24]
 8004644:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004650:	e030      	b.n	80046b4 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <HAL_TIM_Base_MspInit+0xac>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d12b      	bne.n	80046b4 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800465c:	4b18      	ldr	r3, [pc, #96]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 8004662:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004666:	6193      	str	r3, [r2, #24]
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004674:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4a11      	ldr	r2, [pc, #68]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 800467a:	f043 0310 	orr.w	r3, r3, #16
 800467e:	6193      	str	r3, [r2, #24]
 8004680:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <HAL_TIM_Base_MspInit+0xa8>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_TICK_Pin;
 800468c:	2340      	movs	r3, #64	@ 0x40
 800468e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_TICK_GPIO_Port, &GPIO_InitStruct);
 8004698:	f107 0318 	add.w	r3, r7, #24
 800469c:	4619      	mov	r1, r3
 800469e:	480a      	ldr	r0, [pc, #40]	@ (80046c8 <HAL_TIM_Base_MspInit+0xb0>)
 80046a0:	f000 ffd6 	bl	8005650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	202e      	movs	r0, #46	@ 0x2e
 80046aa:	f000 fb16 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80046ae:	202e      	movs	r0, #46	@ 0x2e
 80046b0:	f000 fb2f 	bl	8004d12 <HAL_NVIC_EnableIRQ>
}
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	@ 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40011000 	.word	0x40011000

080046cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a10      	ldr	r2, [pc, #64]	@ (8004728 <HAL_TIM_MspPostInit+0x5c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d118      	bne.n	800471e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <HAL_TIM_MspPostInit+0x60>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <HAL_TIM_MspPostInit+0x60>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	6193      	str	r3, [r2, #24]
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <HAL_TIM_MspPostInit+0x60>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8004704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470e:	2302      	movs	r3, #2
 8004710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8004712:	f107 0310 	add.w	r3, r7, #16
 8004716:	4619      	mov	r1, r3
 8004718:	4805      	ldr	r0, [pc, #20]	@ (8004730 <HAL_TIM_MspPostInit+0x64>)
 800471a:	f000 ff99 	bl	8005650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800471e:	bf00      	nop
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40021000 	.word	0x40021000
 8004730:	40010800 	.word	0x40010800

08004734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a4d      	ldr	r2, [pc, #308]	@ (8004884 <HAL_UART_MspInit+0x150>)
 8004750:	4293      	cmp	r3, r2
 8004752:	f040 8092 	bne.w	800487a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004756:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <HAL_UART_MspInit+0x154>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	4a4b      	ldr	r2, [pc, #300]	@ (8004888 <HAL_UART_MspInit+0x154>)
 800475c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004760:	6193      	str	r3, [r2, #24]
 8004762:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <HAL_UART_MspInit+0x154>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476e:	4b46      	ldr	r3, [pc, #280]	@ (8004888 <HAL_UART_MspInit+0x154>)
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4a45      	ldr	r2, [pc, #276]	@ (8004888 <HAL_UART_MspInit+0x154>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6193      	str	r3, [r2, #24]
 800477a:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_UART_MspInit+0x154>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004786:	2340      	movs	r3, #64	@ 0x40
 8004788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800478e:	2303      	movs	r3, #3
 8004790:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	4619      	mov	r1, r3
 8004798:	483c      	ldr	r0, [pc, #240]	@ (800488c <HAL_UART_MspInit+0x158>)
 800479a:	f000 ff59 	bl	8005650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	4619      	mov	r1, r3
 80047b0:	4836      	ldr	r0, [pc, #216]	@ (800488c <HAL_UART_MspInit+0x158>)
 80047b2:	f000 ff4d 	bl	8005650 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80047b6:	4b36      	ldr	r3, [pc, #216]	@ (8004890 <HAL_UART_MspInit+0x15c>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	f043 0304 	orr.w	r3, r3, #4
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80047cc:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <HAL_UART_MspInit+0x15c>)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80047d2:	4b30      	ldr	r3, [pc, #192]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047d4:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <HAL_UART_MspInit+0x164>)
 80047d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047de:	4b2d      	ldr	r3, [pc, #180]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047e6:	2280      	movs	r2, #128	@ 0x80
 80047e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047f0:	4b28      	ldr	r3, [pc, #160]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80047f6:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047fc:	4b25      	ldr	r3, [pc, #148]	@ (8004894 <HAL_UART_MspInit+0x160>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004802:	4824      	ldr	r0, [pc, #144]	@ (8004894 <HAL_UART_MspInit+0x160>)
 8004804:	f000 faa0 	bl	8004d48 <HAL_DMA_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800480e:	f7fd f921 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_UART_MspInit+0x160>)
 8004816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004818:	4a1e      	ldr	r2, [pc, #120]	@ (8004894 <HAL_UART_MspInit+0x160>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800481e:	4b1f      	ldr	r3, [pc, #124]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <HAL_UART_MspInit+0x16c>)
 8004822:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004824:	4b1d      	ldr	r3, [pc, #116]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004826:	2210      	movs	r2, #16
 8004828:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800482a:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <HAL_UART_MspInit+0x168>)
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004830:	4b1a      	ldr	r3, [pc, #104]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800483c:	4b17      	ldr	r3, [pc, #92]	@ (800489c <HAL_UART_MspInit+0x168>)
 800483e:	2200      	movs	r2, #0
 8004840:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004842:	4b16      	ldr	r3, [pc, #88]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <HAL_UART_MspInit+0x168>)
 800484a:	2200      	movs	r2, #0
 800484c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800484e:	4813      	ldr	r0, [pc, #76]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004850:	f000 fa7a 	bl	8004d48 <HAL_DMA_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800485a:	f7fd f8fb 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a0e      	ldr	r2, [pc, #56]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <HAL_UART_MspInit+0x168>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	2025      	movs	r0, #37	@ 0x25
 8004870:	f000 fa33 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004874:	2025      	movs	r0, #37	@ 0x25
 8004876:	f000 fa4c 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800487a:	bf00      	nop
 800487c:	3728      	adds	r7, #40	@ 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40013800 	.word	0x40013800
 8004888:	40021000 	.word	0x40021000
 800488c:	40010c00 	.word	0x40010c00
 8004890:	40010000 	.word	0x40010000
 8004894:	20000158 	.word	0x20000158
 8004898:	40020058 	.word	0x40020058
 800489c:	2000019c 	.word	0x2000019c
 80048a0:	40020044 	.word	0x40020044

080048a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <NMI_Handler+0x4>

080048ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <HardFault_Handler+0x4>

080048b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <MemManage_Handler+0x4>

080048bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <BusFault_Handler+0x4>

080048c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <UsageFault_Handler+0x4>

080048cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048f4:	f000 f8fe 	bl	8004af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004900:	4802      	ldr	r0, [pc, #8]	@ (800490c <DMA1_Channel4_IRQHandler+0x10>)
 8004902:	f000 fc3b 	bl	800517c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2000019c 	.word	0x2000019c

08004910 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004914:	4802      	ldr	r0, [pc, #8]	@ (8004920 <DMA1_Channel5_IRQHandler+0x10>)
 8004916:	f000 fc31 	bl	800517c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000158 	.word	0x20000158

08004924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8004928:	4802      	ldr	r0, [pc, #8]	@ (8004934 <USART1_IRQHandler+0x10>)
 800492a:	f003 f823 	bl	8007974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000110 	.word	0x20000110

08004938 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800493c:	4802      	ldr	r0, [pc, #8]	@ (8004948 <TIM8_CC_IRQHandler+0x10>)
 800493e:	f001 ff17 	bl	8006770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200000c8 	.word	0x200000c8

0800494c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004954:	4a14      	ldr	r2, [pc, #80]	@ (80049a8 <_sbrk+0x5c>)
 8004956:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <_sbrk+0x60>)
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <_sbrk+0x64>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004968:	4b11      	ldr	r3, [pc, #68]	@ (80049b0 <_sbrk+0x64>)
 800496a:	4a12      	ldr	r2, [pc, #72]	@ (80049b4 <_sbrk+0x68>)
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496e:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <_sbrk+0x64>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	d207      	bcs.n	800498c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800497c:	f004 f80e 	bl	800899c <__errno>
 8004980:	4603      	mov	r3, r0
 8004982:	220c      	movs	r2, #12
 8004984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e009      	b.n	80049a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800498c:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <_sbrk+0x64>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004992:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <_sbrk+0x64>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	4a05      	ldr	r2, [pc, #20]	@ (80049b0 <_sbrk+0x64>)
 800499c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000c000 	.word	0x2000c000
 80049ac:	00000400 	.word	0x00000400
 80049b0:	20008390 	.word	0x20008390
 80049b4:	200084e0 	.word	0x200084e0

080049b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	0a5a      	lsrs	r2, r3, #9
 80049d4:	490f      	ldr	r1, [pc, #60]	@ (8004a14 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80049d6:	fba1 1202 	umull	r1, r2, r1, r2
 80049da:	09d2      	lsrs	r2, r2, #7
 80049dc:	490e      	ldr	r1, [pc, #56]	@ (8004a18 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80049de:	fb01 f202 	mul.w	r2, r1, r2
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	09db      	lsrs	r3, r3, #7
 80049f4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	00044b83 	.word	0x00044b83
 8004a18:	3b9aca00 	.word	0x3b9aca00

08004a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a1c:	f7ff ffcc 	bl	80049b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a20:	480b      	ldr	r0, [pc, #44]	@ (8004a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004a22:	490c      	ldr	r1, [pc, #48]	@ (8004a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004a24:	4a0c      	ldr	r2, [pc, #48]	@ (8004a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a28:	e002      	b.n	8004a30 <LoopCopyDataInit>

08004a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a2e:	3304      	adds	r3, #4

08004a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a34:	d3f9      	bcc.n	8004a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004a38:	4c09      	ldr	r4, [pc, #36]	@ (8004a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a3c:	e001      	b.n	8004a42 <LoopFillZerobss>

08004a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a40:	3204      	adds	r2, #4

08004a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a44:	d3fb      	bcc.n	8004a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a46:	f003 ffaf 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a4a:	f7fc fde3 	bl	8001614 <main>
  bx lr
 8004a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8004a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004a58:	08008e8c 	.word	0x08008e8c
  ldr r2, =_sbss
 8004a5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004a60:	200084e0 	.word	0x200084e0

08004a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a64:	e7fe      	b.n	8004a64 <ADC1_2_IRQHandler>
	...

08004a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a6c:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <HAL_Init+0x28>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a07      	ldr	r2, [pc, #28]	@ (8004a90 <HAL_Init+0x28>)
 8004a72:	f043 0310 	orr.w	r3, r3, #16
 8004a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f000 f923 	bl	8004cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a7e:	200f      	movs	r0, #15
 8004a80:	f000 f808 	bl	8004a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a84:	f7ff fd96 	bl	80045b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40022000 	.word	0x40022000

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <HAL_InitTick+0x54>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_InitTick+0x58>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f93b 	bl	8004d2e <HAL_SYSTICK_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00e      	b.n	8004ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d80a      	bhi.n	8004ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	f000 f903 	bl	8004cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad4:	4a06      	ldr	r2, [pc, #24]	@ (8004af0 <HAL_InitTick+0x5c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000004 	.word	0x20000004
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	20000008 	.word	0x20000008

08004af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_IncTick+0x1c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_IncTick+0x20>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	4a03      	ldr	r2, [pc, #12]	@ (8004b14 <HAL_IncTick+0x20>)
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	2000000c 	.word	0x2000000c
 8004b14:	20008394 	.word	0x20008394

08004b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b02      	ldr	r3, [pc, #8]	@ (8004b28 <HAL_GetTick+0x10>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	20008394 	.word	0x20008394

08004b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <__NVIC_SetPriorityGrouping+0x44>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5e:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <__NVIC_SetPriorityGrouping+0x44>)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	60d3      	str	r3, [r2, #12]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b78:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <__NVIC_GetPriorityGrouping+0x18>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	f003 0307 	and.w	r3, r3, #7
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db0b      	blt.n	8004bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	4906      	ldr	r1, [pc, #24]	@ (8004bc4 <__NVIC_EnableIRQ+0x34>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	@ (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	@ (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
         );
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	@ 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c90:	d301      	bcc.n	8004c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00f      	b.n	8004cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <SysTick_Config+0x40>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9e:	210f      	movs	r1, #15
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f7ff ff90 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <SysTick_Config+0x40>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <SysTick_Config+0x40>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010

08004cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff2d 	bl	8004b2c <__NVIC_SetPriorityGrouping>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cec:	f7ff ff42 	bl	8004b74 <__NVIC_GetPriorityGrouping>
 8004cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff90 	bl	8004c1c <NVIC_EncodePriority>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff5f 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff35 	bl	8004b90 <__NVIC_EnableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ffa2 	bl	8004c80 <SysTick_Config>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e059      	b.n	8004e12 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b2d      	ldr	r3, [pc, #180]	@ (8004e1c <HAL_DMA_Init+0xd4>)
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d80f      	bhi.n	8004d8a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <HAL_DMA_Init+0xd8>)
 8004d72:	4413      	add	r3, r2
 8004d74:	4a2b      	ldr	r2, [pc, #172]	@ (8004e24 <HAL_DMA_Init+0xdc>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	009a      	lsls	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a28      	ldr	r2, [pc, #160]	@ (8004e28 <HAL_DMA_Init+0xe0>)
 8004d86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d88:	e00e      	b.n	8004da8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b26      	ldr	r3, [pc, #152]	@ (8004e2c <HAL_DMA_Init+0xe4>)
 8004d92:	4413      	add	r3, r2
 8004d94:	4a23      	ldr	r2, [pc, #140]	@ (8004e24 <HAL_DMA_Init+0xdc>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	009a      	lsls	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a22      	ldr	r2, [pc, #136]	@ (8004e30 <HAL_DMA_Init+0xe8>)
 8004da6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004dbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004dc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40020407 	.word	0x40020407
 8004e20:	bffdfff8 	.word	0xbffdfff8
 8004e24:	cccccccd 	.word	0xcccccccd
 8004e28:	40020000 	.word	0x40020000
 8004e2c:	bffdfbf8 	.word	0xbffdfbf8
 8004e30:	40020400 	.word	0x40020400

08004e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA_Start_IT+0x20>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e04b      	b.n	8004eec <HAL_DMA_Start_IT+0xb8>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d13a      	bne.n	8004ede <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fbb1 	bl	80055f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 020e 	orr.w	r2, r2, #14
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e00f      	b.n	8004ecc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 020a 	orr.w	r2, r2, #10
 8004eca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e005      	b.n	8004eea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d008      	beq.n	8004f1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e020      	b.n	8004f60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 020e 	bic.w	r2, r2, #14
 8004f2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d005      	beq.n	8004f90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2204      	movs	r2, #4
 8004f88:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
 8004f8e:	e0d6      	b.n	800513e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 020e 	bic.w	r2, r2, #14
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b64      	ldr	r3, [pc, #400]	@ (8005148 <HAL_DMA_Abort_IT+0x1dc>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d958      	bls.n	800506e <HAL_DMA_Abort_IT+0x102>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a62      	ldr	r2, [pc, #392]	@ (800514c <HAL_DMA_Abort_IT+0x1e0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d04f      	beq.n	8005066 <HAL_DMA_Abort_IT+0xfa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a61      	ldr	r2, [pc, #388]	@ (8005150 <HAL_DMA_Abort_IT+0x1e4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d048      	beq.n	8005062 <HAL_DMA_Abort_IT+0xf6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8005154 <HAL_DMA_Abort_IT+0x1e8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d040      	beq.n	800505c <HAL_DMA_Abort_IT+0xf0>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5e      	ldr	r2, [pc, #376]	@ (8005158 <HAL_DMA_Abort_IT+0x1ec>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d038      	beq.n	8005056 <HAL_DMA_Abort_IT+0xea>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800515c <HAL_DMA_Abort_IT+0x1f0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d030      	beq.n	8005050 <HAL_DMA_Abort_IT+0xe4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8005160 <HAL_DMA_Abort_IT+0x1f4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d028      	beq.n	800504a <HAL_DMA_Abort_IT+0xde>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_DMA_Abort_IT+0x1dc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d020      	beq.n	8005044 <HAL_DMA_Abort_IT+0xd8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a57      	ldr	r2, [pc, #348]	@ (8005164 <HAL_DMA_Abort_IT+0x1f8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d019      	beq.n	8005040 <HAL_DMA_Abort_IT+0xd4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a55      	ldr	r2, [pc, #340]	@ (8005168 <HAL_DMA_Abort_IT+0x1fc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d012      	beq.n	800503c <HAL_DMA_Abort_IT+0xd0>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a54      	ldr	r2, [pc, #336]	@ (800516c <HAL_DMA_Abort_IT+0x200>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00a      	beq.n	8005036 <HAL_DMA_Abort_IT+0xca>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a52      	ldr	r2, [pc, #328]	@ (8005170 <HAL_DMA_Abort_IT+0x204>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d102      	bne.n	8005030 <HAL_DMA_Abort_IT+0xc4>
 800502a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800502e:	e01b      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005034:	e018      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800503a:	e015      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 800503c:	2310      	movs	r3, #16
 800503e:	e013      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005040:	2301      	movs	r3, #1
 8005042:	e011      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005044:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005048:	e00e      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 800504a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800504e:	e00b      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005054:	e008      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800505a:	e005      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 800505c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005060:	e002      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005062:	2310      	movs	r3, #16
 8005064:	e000      	b.n	8005068 <HAL_DMA_Abort_IT+0xfc>
 8005066:	2301      	movs	r3, #1
 8005068:	4a42      	ldr	r2, [pc, #264]	@ (8005174 <HAL_DMA_Abort_IT+0x208>)
 800506a:	6053      	str	r3, [r2, #4]
 800506c:	e057      	b.n	800511e <HAL_DMA_Abort_IT+0x1b2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a36      	ldr	r2, [pc, #216]	@ (800514c <HAL_DMA_Abort_IT+0x1e0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d04f      	beq.n	8005118 <HAL_DMA_Abort_IT+0x1ac>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a34      	ldr	r2, [pc, #208]	@ (8005150 <HAL_DMA_Abort_IT+0x1e4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d048      	beq.n	8005114 <HAL_DMA_Abort_IT+0x1a8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <HAL_DMA_Abort_IT+0x1e8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d040      	beq.n	800510e <HAL_DMA_Abort_IT+0x1a2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a31      	ldr	r2, [pc, #196]	@ (8005158 <HAL_DMA_Abort_IT+0x1ec>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d038      	beq.n	8005108 <HAL_DMA_Abort_IT+0x19c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a30      	ldr	r2, [pc, #192]	@ (800515c <HAL_DMA_Abort_IT+0x1f0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d030      	beq.n	8005102 <HAL_DMA_Abort_IT+0x196>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005160 <HAL_DMA_Abort_IT+0x1f4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d028      	beq.n	80050fc <HAL_DMA_Abort_IT+0x190>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a26      	ldr	r2, [pc, #152]	@ (8005148 <HAL_DMA_Abort_IT+0x1dc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d020      	beq.n	80050f6 <HAL_DMA_Abort_IT+0x18a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005164 <HAL_DMA_Abort_IT+0x1f8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d019      	beq.n	80050f2 <HAL_DMA_Abort_IT+0x186>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a29      	ldr	r2, [pc, #164]	@ (8005168 <HAL_DMA_Abort_IT+0x1fc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d012      	beq.n	80050ee <HAL_DMA_Abort_IT+0x182>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a27      	ldr	r2, [pc, #156]	@ (800516c <HAL_DMA_Abort_IT+0x200>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00a      	beq.n	80050e8 <HAL_DMA_Abort_IT+0x17c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a26      	ldr	r2, [pc, #152]	@ (8005170 <HAL_DMA_Abort_IT+0x204>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d102      	bne.n	80050e2 <HAL_DMA_Abort_IT+0x176>
 80050dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050e0:	e01b      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050e6:	e018      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050ec:	e015      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050ee:	2310      	movs	r3, #16
 80050f0:	e013      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e011      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050fa:	e00e      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 80050fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005100:	e00b      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 8005102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005106:	e008      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 8005108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800510c:	e005      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 800510e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005112:	e002      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 8005114:	2310      	movs	r3, #16
 8005116:	e000      	b.n	800511a <HAL_DMA_Abort_IT+0x1ae>
 8005118:	2301      	movs	r3, #1
 800511a:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <HAL_DMA_Abort_IT+0x20c>)
 800511c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
    } 
  }
  return status;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40020080 	.word	0x40020080
 800514c:	40020008 	.word	0x40020008
 8005150:	4002001c 	.word	0x4002001c
 8005154:	40020030 	.word	0x40020030
 8005158:	40020044 	.word	0x40020044
 800515c:	40020058 	.word	0x40020058
 8005160:	4002006c 	.word	0x4002006c
 8005164:	40020408 	.word	0x40020408
 8005168:	4002041c 	.word	0x4002041c
 800516c:	40020430 	.word	0x40020430
 8005170:	40020444 	.word	0x40020444
 8005174:	40020400 	.word	0x40020400
 8005178:	40020000 	.word	0x40020000

0800517c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	2204      	movs	r2, #4
 800519a:	409a      	lsls	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80f1 	beq.w	8005388 <HAL_DMA_IRQHandler+0x20c>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80eb 	beq.w	8005388 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d107      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0204 	bic.w	r2, r2, #4
 80051ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005354 <HAL_DMA_IRQHandler+0x1d8>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d958      	bls.n	800528e <HAL_DMA_IRQHandler+0x112>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005358 <HAL_DMA_IRQHandler+0x1dc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04f      	beq.n	8005286 <HAL_DMA_IRQHandler+0x10a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <HAL_DMA_IRQHandler+0x1e0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d048      	beq.n	8005282 <HAL_DMA_IRQHandler+0x106>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005360 <HAL_DMA_IRQHandler+0x1e4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_IRQHandler+0x100>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a59      	ldr	r2, [pc, #356]	@ (8005364 <HAL_DMA_IRQHandler+0x1e8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d038      	beq.n	8005276 <HAL_DMA_IRQHandler+0xfa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a57      	ldr	r2, [pc, #348]	@ (8005368 <HAL_DMA_IRQHandler+0x1ec>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d030      	beq.n	8005270 <HAL_DMA_IRQHandler+0xf4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a56      	ldr	r2, [pc, #344]	@ (800536c <HAL_DMA_IRQHandler+0x1f0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d028      	beq.n	800526a <HAL_DMA_IRQHandler+0xee>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a4d      	ldr	r2, [pc, #308]	@ (8005354 <HAL_DMA_IRQHandler+0x1d8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d020      	beq.n	8005264 <HAL_DMA_IRQHandler+0xe8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a52      	ldr	r2, [pc, #328]	@ (8005370 <HAL_DMA_IRQHandler+0x1f4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d019      	beq.n	8005260 <HAL_DMA_IRQHandler+0xe4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a50      	ldr	r2, [pc, #320]	@ (8005374 <HAL_DMA_IRQHandler+0x1f8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d012      	beq.n	800525c <HAL_DMA_IRQHandler+0xe0>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4f      	ldr	r2, [pc, #316]	@ (8005378 <HAL_DMA_IRQHandler+0x1fc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00a      	beq.n	8005256 <HAL_DMA_IRQHandler+0xda>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4d      	ldr	r2, [pc, #308]	@ (800537c <HAL_DMA_IRQHandler+0x200>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d102      	bne.n	8005250 <HAL_DMA_IRQHandler+0xd4>
 800524a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800524e:	e01b      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005250:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005254:	e018      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800525a:	e015      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 800525c:	2340      	movs	r3, #64	@ 0x40
 800525e:	e013      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005260:	2304      	movs	r3, #4
 8005262:	e011      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005264:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005268:	e00e      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 800526a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800526e:	e00b      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005270:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005274:	e008      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005276:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800527a:	e005      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 800527c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005280:	e002      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005282:	2340      	movs	r3, #64	@ 0x40
 8005284:	e000      	b.n	8005288 <HAL_DMA_IRQHandler+0x10c>
 8005286:	2304      	movs	r3, #4
 8005288:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <HAL_DMA_IRQHandler+0x204>)
 800528a:	6053      	str	r3, [r2, #4]
 800528c:	e057      	b.n	800533e <HAL_DMA_IRQHandler+0x1c2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a31      	ldr	r2, [pc, #196]	@ (8005358 <HAL_DMA_IRQHandler+0x1dc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d04f      	beq.n	8005338 <HAL_DMA_IRQHandler+0x1bc>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2f      	ldr	r2, [pc, #188]	@ (800535c <HAL_DMA_IRQHandler+0x1e0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d048      	beq.n	8005334 <HAL_DMA_IRQHandler+0x1b8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005360 <HAL_DMA_IRQHandler+0x1e4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d040      	beq.n	800532e <HAL_DMA_IRQHandler+0x1b2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005364 <HAL_DMA_IRQHandler+0x1e8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d038      	beq.n	8005328 <HAL_DMA_IRQHandler+0x1ac>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005368 <HAL_DMA_IRQHandler+0x1ec>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d030      	beq.n	8005322 <HAL_DMA_IRQHandler+0x1a6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a29      	ldr	r2, [pc, #164]	@ (800536c <HAL_DMA_IRQHandler+0x1f0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d028      	beq.n	800531c <HAL_DMA_IRQHandler+0x1a0>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <HAL_DMA_IRQHandler+0x1d8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d020      	beq.n	8005316 <HAL_DMA_IRQHandler+0x19a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a25      	ldr	r2, [pc, #148]	@ (8005370 <HAL_DMA_IRQHandler+0x1f4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d019      	beq.n	8005312 <HAL_DMA_IRQHandler+0x196>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <HAL_DMA_IRQHandler+0x1f8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d012      	beq.n	800530e <HAL_DMA_IRQHandler+0x192>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <HAL_DMA_IRQHandler+0x1fc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x18c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a21      	ldr	r2, [pc, #132]	@ (800537c <HAL_DMA_IRQHandler+0x200>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d102      	bne.n	8005302 <HAL_DMA_IRQHandler+0x186>
 80052fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005300:	e01b      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005302:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005306:	e018      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800530c:	e015      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	e013      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005312:	2304      	movs	r3, #4
 8005314:	e011      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005316:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800531a:	e00e      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 800531c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005320:	e00b      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005322:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005326:	e008      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005328:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800532c:	e005      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 800532e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005332:	e002      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005334:	2340      	movs	r3, #64	@ 0x40
 8005336:	e000      	b.n	800533a <HAL_DMA_IRQHandler+0x1be>
 8005338:	2304      	movs	r3, #4
 800533a:	4a12      	ldr	r2, [pc, #72]	@ (8005384 <HAL_DMA_IRQHandler+0x208>)
 800533c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8136 	beq.w	80055b4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005350:	e130      	b.n	80055b4 <HAL_DMA_IRQHandler+0x438>
 8005352:	bf00      	nop
 8005354:	40020080 	.word	0x40020080
 8005358:	40020008 	.word	0x40020008
 800535c:	4002001c 	.word	0x4002001c
 8005360:	40020030 	.word	0x40020030
 8005364:	40020044 	.word	0x40020044
 8005368:	40020058 	.word	0x40020058
 800536c:	4002006c 	.word	0x4002006c
 8005370:	40020408 	.word	0x40020408
 8005374:	4002041c 	.word	0x4002041c
 8005378:	40020430 	.word	0x40020430
 800537c:	40020444 	.word	0x40020444
 8005380:	40020400 	.word	0x40020400
 8005384:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	2202      	movs	r2, #2
 800538e:	409a      	lsls	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80dd 	beq.w	8005554 <HAL_DMA_IRQHandler+0x3d8>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80d7 	beq.w	8005554 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 020a 	bic.w	r2, r2, #10
 80053c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <HAL_DMA_IRQHandler+0x444>)
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d958      	bls.n	800548a <HAL_DMA_IRQHandler+0x30e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a79      	ldr	r2, [pc, #484]	@ (80055c4 <HAL_DMA_IRQHandler+0x448>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04f      	beq.n	8005482 <HAL_DMA_IRQHandler+0x306>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a78      	ldr	r2, [pc, #480]	@ (80055c8 <HAL_DMA_IRQHandler+0x44c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d048      	beq.n	800547e <HAL_DMA_IRQHandler+0x302>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a76      	ldr	r2, [pc, #472]	@ (80055cc <HAL_DMA_IRQHandler+0x450>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <HAL_DMA_IRQHandler+0x2fc>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a75      	ldr	r2, [pc, #468]	@ (80055d0 <HAL_DMA_IRQHandler+0x454>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d038      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2f6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a73      	ldr	r2, [pc, #460]	@ (80055d4 <HAL_DMA_IRQHandler+0x458>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d030      	beq.n	800546c <HAL_DMA_IRQHandler+0x2f0>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a72      	ldr	r2, [pc, #456]	@ (80055d8 <HAL_DMA_IRQHandler+0x45c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d028      	beq.n	8005466 <HAL_DMA_IRQHandler+0x2ea>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <HAL_DMA_IRQHandler+0x444>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d020      	beq.n	8005460 <HAL_DMA_IRQHandler+0x2e4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6e      	ldr	r2, [pc, #440]	@ (80055dc <HAL_DMA_IRQHandler+0x460>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d019      	beq.n	800545c <HAL_DMA_IRQHandler+0x2e0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6c      	ldr	r2, [pc, #432]	@ (80055e0 <HAL_DMA_IRQHandler+0x464>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d012      	beq.n	8005458 <HAL_DMA_IRQHandler+0x2dc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6b      	ldr	r2, [pc, #428]	@ (80055e4 <HAL_DMA_IRQHandler+0x468>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00a      	beq.n	8005452 <HAL_DMA_IRQHandler+0x2d6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a69      	ldr	r2, [pc, #420]	@ (80055e8 <HAL_DMA_IRQHandler+0x46c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d102      	bne.n	800544c <HAL_DMA_IRQHandler+0x2d0>
 8005446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800544a:	e01b      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 800544c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005450:	e018      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005452:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005456:	e015      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005458:	2320      	movs	r3, #32
 800545a:	e013      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 800545c:	2302      	movs	r3, #2
 800545e:	e011      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005460:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005464:	e00e      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005466:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800546a:	e00b      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 800546c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005470:	e008      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005476:	e005      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005478:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800547c:	e002      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 800547e:	2320      	movs	r3, #32
 8005480:	e000      	b.n	8005484 <HAL_DMA_IRQHandler+0x308>
 8005482:	2302      	movs	r3, #2
 8005484:	4a59      	ldr	r2, [pc, #356]	@ (80055ec <HAL_DMA_IRQHandler+0x470>)
 8005486:	6053      	str	r3, [r2, #4]
 8005488:	e057      	b.n	800553a <HAL_DMA_IRQHandler+0x3be>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a4d      	ldr	r2, [pc, #308]	@ (80055c4 <HAL_DMA_IRQHandler+0x448>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04f      	beq.n	8005534 <HAL_DMA_IRQHandler+0x3b8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a4b      	ldr	r2, [pc, #300]	@ (80055c8 <HAL_DMA_IRQHandler+0x44c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d048      	beq.n	8005530 <HAL_DMA_IRQHandler+0x3b4>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a4a      	ldr	r2, [pc, #296]	@ (80055cc <HAL_DMA_IRQHandler+0x450>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_IRQHandler+0x3ae>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a48      	ldr	r2, [pc, #288]	@ (80055d0 <HAL_DMA_IRQHandler+0x454>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d038      	beq.n	8005524 <HAL_DMA_IRQHandler+0x3a8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a47      	ldr	r2, [pc, #284]	@ (80055d4 <HAL_DMA_IRQHandler+0x458>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d030      	beq.n	800551e <HAL_DMA_IRQHandler+0x3a2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a45      	ldr	r2, [pc, #276]	@ (80055d8 <HAL_DMA_IRQHandler+0x45c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d028      	beq.n	8005518 <HAL_DMA_IRQHandler+0x39c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	@ (80055c0 <HAL_DMA_IRQHandler+0x444>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d020      	beq.n	8005512 <HAL_DMA_IRQHandler+0x396>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a41      	ldr	r2, [pc, #260]	@ (80055dc <HAL_DMA_IRQHandler+0x460>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d019      	beq.n	800550e <HAL_DMA_IRQHandler+0x392>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a40      	ldr	r2, [pc, #256]	@ (80055e0 <HAL_DMA_IRQHandler+0x464>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d012      	beq.n	800550a <HAL_DMA_IRQHandler+0x38e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3e      	ldr	r2, [pc, #248]	@ (80055e4 <HAL_DMA_IRQHandler+0x468>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00a      	beq.n	8005504 <HAL_DMA_IRQHandler+0x388>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a3d      	ldr	r2, [pc, #244]	@ (80055e8 <HAL_DMA_IRQHandler+0x46c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d102      	bne.n	80054fe <HAL_DMA_IRQHandler+0x382>
 80054f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054fc:	e01b      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 80054fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005502:	e018      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005508:	e015      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 800550a:	2320      	movs	r3, #32
 800550c:	e013      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 800550e:	2302      	movs	r3, #2
 8005510:	e011      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005516:	e00e      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005518:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800551c:	e00b      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 800551e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005522:	e008      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005528:	e005      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 800552a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800552e:	e002      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005530:	2320      	movs	r3, #32
 8005532:	e000      	b.n	8005536 <HAL_DMA_IRQHandler+0x3ba>
 8005534:	2302      	movs	r3, #2
 8005536:	4a2e      	ldr	r2, [pc, #184]	@ (80055f0 <HAL_DMA_IRQHandler+0x474>)
 8005538:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d034      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005552:	e02f      	b.n	80055b4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	2208      	movs	r2, #8
 800555a:	409a      	lsls	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d028      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x43a>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d023      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 020e 	bic.w	r2, r2, #14
 800557c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	2101      	movs	r1, #1
 8005588:	fa01 f202 	lsl.w	r2, r1, r2
 800558c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
    }
  }
  return;
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
}
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40020080 	.word	0x40020080
 80055c4:	40020008 	.word	0x40020008
 80055c8:	4002001c 	.word	0x4002001c
 80055cc:	40020030 	.word	0x40020030
 80055d0:	40020044 	.word	0x40020044
 80055d4:	40020058 	.word	0x40020058
 80055d8:	4002006c 	.word	0x4002006c
 80055dc:	40020408 	.word	0x40020408
 80055e0:	4002041c 	.word	0x4002041c
 80055e4:	40020430 	.word	0x40020430
 80055e8:	40020444 	.word	0x40020444
 80055ec:	40020400 	.word	0x40020400
 80055f0:	40020000 	.word	0x40020000

080055f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	2101      	movs	r1, #1
 800560c:	fa01 f202 	lsl.w	r2, r1, r2
 8005610:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b10      	cmp	r3, #16
 8005620:	d108      	bne.n	8005634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005632:	e007      	b.n	8005644 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
	...

08005650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005650:	b480      	push	{r7}
 8005652:	b08b      	sub	sp, #44	@ 0x2c
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005662:	e179      	b.n	8005958 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005664:	2201      	movs	r2, #1
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	f040 8168 	bne.w	8005952 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a96      	ldr	r2, [pc, #600]	@ (80058e0 <HAL_GPIO_Init+0x290>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d05e      	beq.n	800574a <HAL_GPIO_Init+0xfa>
 800568c:	4a94      	ldr	r2, [pc, #592]	@ (80058e0 <HAL_GPIO_Init+0x290>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d875      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 8005692:	4a94      	ldr	r2, [pc, #592]	@ (80058e4 <HAL_GPIO_Init+0x294>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d058      	beq.n	800574a <HAL_GPIO_Init+0xfa>
 8005698:	4a92      	ldr	r2, [pc, #584]	@ (80058e4 <HAL_GPIO_Init+0x294>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d86f      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 800569e:	4a92      	ldr	r2, [pc, #584]	@ (80058e8 <HAL_GPIO_Init+0x298>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d052      	beq.n	800574a <HAL_GPIO_Init+0xfa>
 80056a4:	4a90      	ldr	r2, [pc, #576]	@ (80058e8 <HAL_GPIO_Init+0x298>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d869      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 80056aa:	4a90      	ldr	r2, [pc, #576]	@ (80058ec <HAL_GPIO_Init+0x29c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04c      	beq.n	800574a <HAL_GPIO_Init+0xfa>
 80056b0:	4a8e      	ldr	r2, [pc, #568]	@ (80058ec <HAL_GPIO_Init+0x29c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d863      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 80056b6:	4a8e      	ldr	r2, [pc, #568]	@ (80058f0 <HAL_GPIO_Init+0x2a0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d046      	beq.n	800574a <HAL_GPIO_Init+0xfa>
 80056bc:	4a8c      	ldr	r2, [pc, #560]	@ (80058f0 <HAL_GPIO_Init+0x2a0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d85d      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 80056c2:	2b12      	cmp	r3, #18
 80056c4:	d82a      	bhi.n	800571c <HAL_GPIO_Init+0xcc>
 80056c6:	2b12      	cmp	r3, #18
 80056c8:	d859      	bhi.n	800577e <HAL_GPIO_Init+0x12e>
 80056ca:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <HAL_GPIO_Init+0x80>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	0800574b 	.word	0x0800574b
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005737 	.word	0x08005737
 80056dc:	08005779 	.word	0x08005779
 80056e0:	0800577f 	.word	0x0800577f
 80056e4:	0800577f 	.word	0x0800577f
 80056e8:	0800577f 	.word	0x0800577f
 80056ec:	0800577f 	.word	0x0800577f
 80056f0:	0800577f 	.word	0x0800577f
 80056f4:	0800577f 	.word	0x0800577f
 80056f8:	0800577f 	.word	0x0800577f
 80056fc:	0800577f 	.word	0x0800577f
 8005700:	0800577f 	.word	0x0800577f
 8005704:	0800577f 	.word	0x0800577f
 8005708:	0800577f 	.word	0x0800577f
 800570c:	0800577f 	.word	0x0800577f
 8005710:	0800577f 	.word	0x0800577f
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005741 	.word	0x08005741
 800571c:	4a75      	ldr	r2, [pc, #468]	@ (80058f4 <HAL_GPIO_Init+0x2a4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005722:	e02c      	b.n	800577e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	623b      	str	r3, [r7, #32]
          break;
 800572a:	e029      	b.n	8005780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	3304      	adds	r3, #4
 8005732:	623b      	str	r3, [r7, #32]
          break;
 8005734:	e024      	b.n	8005780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	3308      	adds	r3, #8
 800573c:	623b      	str	r3, [r7, #32]
          break;
 800573e:	e01f      	b.n	8005780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	330c      	adds	r3, #12
 8005746:	623b      	str	r3, [r7, #32]
          break;
 8005748:	e01a      	b.n	8005780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005752:	2304      	movs	r3, #4
 8005754:	623b      	str	r3, [r7, #32]
          break;
 8005756:	e013      	b.n	8005780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005760:	2308      	movs	r3, #8
 8005762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	611a      	str	r2, [r3, #16]
          break;
 800576a:	e009      	b.n	8005780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800576c:	2308      	movs	r3, #8
 800576e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	615a      	str	r2, [r3, #20]
          break;
 8005776:	e003      	b.n	8005780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005778:	2300      	movs	r3, #0
 800577a:	623b      	str	r3, [r7, #32]
          break;
 800577c:	e000      	b.n	8005780 <HAL_GPIO_Init+0x130>
          break;
 800577e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2bff      	cmp	r3, #255	@ 0xff
 8005784:	d801      	bhi.n	800578a <HAL_GPIO_Init+0x13a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	e001      	b.n	800578e <HAL_GPIO_Init+0x13e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2bff      	cmp	r3, #255	@ 0xff
 8005794:	d802      	bhi.n	800579c <HAL_GPIO_Init+0x14c>
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	e002      	b.n	80057a2 <HAL_GPIO_Init+0x152>
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	3b08      	subs	r3, #8
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	210f      	movs	r1, #15
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	431a      	orrs	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80c1 	beq.w	8005952 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057d0:	4b49      	ldr	r3, [pc, #292]	@ (80058f8 <HAL_GPIO_Init+0x2a8>)
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	4a48      	ldr	r2, [pc, #288]	@ (80058f8 <HAL_GPIO_Init+0x2a8>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6193      	str	r3, [r2, #24]
 80057dc:	4b46      	ldr	r3, [pc, #280]	@ (80058f8 <HAL_GPIO_Init+0x2a8>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80057e8:	4a44      	ldr	r2, [pc, #272]	@ (80058fc <HAL_GPIO_Init+0x2ac>)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3302      	adds	r3, #2
 80057f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	220f      	movs	r2, #15
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4013      	ands	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	@ (8005900 <HAL_GPIO_Init+0x2b0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01f      	beq.n	8005854 <HAL_GPIO_Init+0x204>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3b      	ldr	r2, [pc, #236]	@ (8005904 <HAL_GPIO_Init+0x2b4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d019      	beq.n	8005850 <HAL_GPIO_Init+0x200>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3a      	ldr	r2, [pc, #232]	@ (8005908 <HAL_GPIO_Init+0x2b8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_GPIO_Init+0x1fc>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a39      	ldr	r2, [pc, #228]	@ (800590c <HAL_GPIO_Init+0x2bc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00d      	beq.n	8005848 <HAL_GPIO_Init+0x1f8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a38      	ldr	r2, [pc, #224]	@ (8005910 <HAL_GPIO_Init+0x2c0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <HAL_GPIO_Init+0x1f4>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <HAL_GPIO_Init+0x2c4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d101      	bne.n	8005840 <HAL_GPIO_Init+0x1f0>
 800583c:	2305      	movs	r3, #5
 800583e:	e00a      	b.n	8005856 <HAL_GPIO_Init+0x206>
 8005840:	2306      	movs	r3, #6
 8005842:	e008      	b.n	8005856 <HAL_GPIO_Init+0x206>
 8005844:	2304      	movs	r3, #4
 8005846:	e006      	b.n	8005856 <HAL_GPIO_Init+0x206>
 8005848:	2303      	movs	r3, #3
 800584a:	e004      	b.n	8005856 <HAL_GPIO_Init+0x206>
 800584c:	2302      	movs	r3, #2
 800584e:	e002      	b.n	8005856 <HAL_GPIO_Init+0x206>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_GPIO_Init+0x206>
 8005854:	2300      	movs	r3, #0
 8005856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005858:	f002 0203 	and.w	r2, r2, #3
 800585c:	0092      	lsls	r2, r2, #2
 800585e:	4093      	lsls	r3, r2
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005866:	4925      	ldr	r1, [pc, #148]	@ (80058fc <HAL_GPIO_Init+0x2ac>)
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	3302      	adds	r3, #2
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4924      	ldr	r1, [pc, #144]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	608b      	str	r3, [r1, #8]
 800588c:	e006      	b.n	800589c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800588e:	4b22      	ldr	r3, [pc, #136]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	43db      	mvns	r3, r3
 8005896:	4920      	ldr	r1, [pc, #128]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 8005898:	4013      	ands	r3, r2
 800589a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	491a      	ldr	r1, [pc, #104]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60cb      	str	r3, [r1, #12]
 80058b4:	e006      	b.n	80058c4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80058b6:	4b18      	ldr	r3, [pc, #96]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	43db      	mvns	r3, r3
 80058be:	4916      	ldr	r1, [pc, #88]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d025      	beq.n	800591c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4910      	ldr	r1, [pc, #64]	@ (8005918 <HAL_GPIO_Init+0x2c8>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	4313      	orrs	r3, r2
 80058da:	604b      	str	r3, [r1, #4]
 80058dc:	e025      	b.n	800592a <HAL_GPIO_Init+0x2da>
 80058de:	bf00      	nop
 80058e0:	10320000 	.word	0x10320000
 80058e4:	10310000 	.word	0x10310000
 80058e8:	10220000 	.word	0x10220000
 80058ec:	10210000 	.word	0x10210000
 80058f0:	10120000 	.word	0x10120000
 80058f4:	10110000 	.word	0x10110000
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40010000 	.word	0x40010000
 8005900:	40010800 	.word	0x40010800
 8005904:	40010c00 	.word	0x40010c00
 8005908:	40011000 	.word	0x40011000
 800590c:	40011400 	.word	0x40011400
 8005910:	40011800 	.word	0x40011800
 8005914:	40011c00 	.word	0x40011c00
 8005918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800591c:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <HAL_GPIO_Init+0x324>)
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	43db      	mvns	r3, r3
 8005924:	4913      	ldr	r1, [pc, #76]	@ (8005974 <HAL_GPIO_Init+0x324>)
 8005926:	4013      	ands	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d006      	beq.n	8005944 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005936:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <HAL_GPIO_Init+0x324>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	490e      	ldr	r1, [pc, #56]	@ (8005974 <HAL_GPIO_Init+0x324>)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
 8005942:	e006      	b.n	8005952 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_GPIO_Init+0x324>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	43db      	mvns	r3, r3
 800594c:	4909      	ldr	r1, [pc, #36]	@ (8005974 <HAL_GPIO_Init+0x324>)
 800594e:	4013      	ands	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	3301      	adds	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	f47f ae7e 	bne.w	8005664 <HAL_GPIO_Init+0x14>
  }
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	372c      	adds	r7, #44	@ 0x2c
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	40010400 	.word	0x40010400

08005978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
 8005984:	4613      	mov	r3, r2
 8005986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005988:	787b      	ldrb	r3, [r7, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005994:	e003      	b.n	800599e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	041a      	lsls	r2, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e272      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8087 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059c8:	4b92      	ldr	r3, [pc, #584]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d00c      	beq.n	80059ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d112      	bne.n	8005a06 <HAL_RCC_OscConfig+0x5e>
 80059e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ec:	d10b      	bne.n	8005a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ee:	4b89      	ldr	r3, [pc, #548]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d06c      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x12c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d168      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e24c      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCC_OscConfig+0x76>
 8005a10:	4b80      	ldr	r3, [pc, #512]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a7f      	ldr	r2, [pc, #508]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e02e      	b.n	8005a7c <HAL_RCC_OscConfig+0xd4>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCC_OscConfig+0x98>
 8005a26:	4b7b      	ldr	r3, [pc, #492]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a7a      	ldr	r2, [pc, #488]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b78      	ldr	r3, [pc, #480]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a77      	ldr	r2, [pc, #476]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e01d      	b.n	8005a7c <HAL_RCC_OscConfig+0xd4>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0xbc>
 8005a4a:	4b72      	ldr	r3, [pc, #456]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a71      	ldr	r2, [pc, #452]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4b6f      	ldr	r3, [pc, #444]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e00b      	b.n	8005a7c <HAL_RCC_OscConfig+0xd4>
 8005a64:	4b6b      	ldr	r3, [pc, #428]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6a      	ldr	r2, [pc, #424]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	4b68      	ldr	r3, [pc, #416]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a67      	ldr	r2, [pc, #412]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d013      	beq.n	8005aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7ff f848 	bl	8004b18 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7ff f844 	bl	8004b18 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	@ 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e200      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0xe4>
 8005aaa:	e014      	b.n	8005ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7ff f834 	bl	8004b18 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab4:	f7ff f830 	bl	8004b18 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b64      	cmp	r3, #100	@ 0x64
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e1ec      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac6:	4b53      	ldr	r3, [pc, #332]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x10c>
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d063      	beq.n	8005baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005aee:	4b49      	ldr	r3, [pc, #292]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d11c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x18c>
 8005afa:	4b46      	ldr	r3, [pc, #280]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d116      	bne.n	8005b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b06:	4b43      	ldr	r3, [pc, #268]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_RCC_OscConfig+0x176>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d001      	beq.n	8005b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e1c0      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4939      	ldr	r1, [pc, #228]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b32:	e03a      	b.n	8005baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d020      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b3c:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <HAL_RCC_OscConfig+0x270>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fe ffe9 	bl	8004b18 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4a:	f7fe ffe5 	bl	8004b18 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e1a1      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b68:	4b2a      	ldr	r3, [pc, #168]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4927      	ldr	r1, [pc, #156]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]
 8005b7c:	e015      	b.n	8005baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7e:	4b26      	ldr	r3, [pc, #152]	@ (8005c18 <HAL_RCC_OscConfig+0x270>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fe ffc8 	bl	8004b18 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8c:	f7fe ffc4 	bl	8004b18 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e180      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03a      	beq.n	8005c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d019      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bbe:	4b17      	ldr	r3, [pc, #92]	@ (8005c1c <HAL_RCC_OscConfig+0x274>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc4:	f7fe ffa8 	bl	8004b18 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bcc:	f7fe ffa4 	bl	8004b18 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e160      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <HAL_RCC_OscConfig+0x26c>)
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005bea:	2001      	movs	r0, #1
 8005bec:	f000 face 	bl	800618c <RCC_Delay>
 8005bf0:	e01c      	b.n	8005c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <HAL_RCC_OscConfig+0x274>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf8:	f7fe ff8e 	bl	8004b18 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bfe:	e00f      	b.n	8005c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c00:	f7fe ff8a 	bl	8004b18 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d908      	bls.n	8005c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e146      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000
 8005c18:	42420000 	.word	0x42420000
 8005c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c20:	4b92      	ldr	r3, [pc, #584]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e9      	bne.n	8005c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80a6 	beq.w	8005d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	4b88      	ldr	r3, [pc, #544]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4a87      	ldr	r2, [pc, #540]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	61d3      	str	r3, [r2, #28]
 8005c56:	4b85      	ldr	r3, [pc, #532]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	4b82      	ldr	r3, [pc, #520]	@ (8005e70 <HAL_RCC_OscConfig+0x4c8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d118      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c72:	4b7f      	ldr	r3, [pc, #508]	@ (8005e70 <HAL_RCC_OscConfig+0x4c8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7e      	ldr	r2, [pc, #504]	@ (8005e70 <HAL_RCC_OscConfig+0x4c8>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fe ff4b 	bl	8004b18 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fe ff47 	bl	8004b18 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b64      	cmp	r3, #100	@ 0x64
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e103      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	4b75      	ldr	r3, [pc, #468]	@ (8005e70 <HAL_RCC_OscConfig+0x4c8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x312>
 8005cac:	4b6f      	ldr	r3, [pc, #444]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6213      	str	r3, [r2, #32]
 8005cb8:	e02d      	b.n	8005d16 <HAL_RCC_OscConfig+0x36e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x334>
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	4a69      	ldr	r2, [pc, #420]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6213      	str	r3, [r2, #32]
 8005cce:	4b67      	ldr	r3, [pc, #412]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	4a66      	ldr	r2, [pc, #408]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6213      	str	r3, [r2, #32]
 8005cda:	e01c      	b.n	8005d16 <HAL_RCC_OscConfig+0x36e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCC_OscConfig+0x356>
 8005ce4:	4b61      	ldr	r3, [pc, #388]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	4a60      	ldr	r2, [pc, #384]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6213      	str	r3, [r2, #32]
 8005cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6213      	str	r3, [r2, #32]
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCC_OscConfig+0x36e>
 8005cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	4a5a      	ldr	r2, [pc, #360]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	6213      	str	r3, [r2, #32]
 8005d0a:	4b58      	ldr	r3, [pc, #352]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	4a57      	ldr	r2, [pc, #348]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1e:	f7fe fefb 	bl	8004b18 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fe fef7 	bl	8004b18 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e0b1      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ee      	beq.n	8005d26 <HAL_RCC_OscConfig+0x37e>
 8005d48:	e014      	b.n	8005d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4a:	f7fe fee5 	bl	8004b18 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fe fee1 	bl	8004b18 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e09b      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d68:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ee      	bne.n	8005d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d105      	bne.n	8005d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8087 	beq.w	8005e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d90:	4b36      	ldr	r3, [pc, #216]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d061      	beq.n	8005e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d146      	bne.n	8005e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da4:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <HAL_RCC_OscConfig+0x4cc>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fe feb5 	bl	8004b18 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fe feb1 	bl	8004b18 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e06d      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dc4:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd8:	d108      	bne.n	8005dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005dda:	4b24      	ldr	r3, [pc, #144]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4921      	ldr	r1, [pc, #132]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dec:	4b1f      	ldr	r3, [pc, #124]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a19      	ldr	r1, [r3, #32]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	491b      	ldr	r1, [pc, #108]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e04:	4b1b      	ldr	r3, [pc, #108]	@ (8005e74 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0a:	f7fe fe85 	bl	8004b18 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fe fe81 	bl	8004b18 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e03d      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x46a>
 8005e30:	e035      	b.n	8005e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_RCC_OscConfig+0x4cc>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7fe fe6e 	bl	8004b18 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e40:	f7fe fe6a 	bl	8004b18 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e026      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e52:	4b06      	ldr	r3, [pc, #24]	@ (8005e6c <HAL_RCC_OscConfig+0x4c4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x498>
 8005e5e:	e01e      	b.n	8005e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e019      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40007000 	.word	0x40007000
 8005e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <HAL_RCC_OscConfig+0x500>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d001      	beq.n	8005e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000

08005eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0d0      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d910      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b67      	ldr	r3, [pc, #412]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 0207 	bic.w	r2, r3, #7
 8005ed6:	4965      	ldr	r1, [pc, #404]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b63      	ldr	r3, [pc, #396]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0b8      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f08:	4b59      	ldr	r3, [pc, #356]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a58      	ldr	r2, [pc, #352]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f20:	4b53      	ldr	r3, [pc, #332]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4a52      	ldr	r2, [pc, #328]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2c:	4b50      	ldr	r3, [pc, #320]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	494d      	ldr	r1, [pc, #308]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d040      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	4b47      	ldr	r3, [pc, #284]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d115      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6a:	4b41      	ldr	r3, [pc, #260]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e073      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06b      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f023 0203 	bic.w	r2, r3, #3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4936      	ldr	r1, [pc, #216]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f9c:	f7fe fdbc 	bl	8004b18 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa4:	f7fe fdb8 	bl	8004b18 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e053      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fba:	4b2d      	ldr	r3, [pc, #180]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 020c 	and.w	r2, r3, #12
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d1eb      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d210      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b24      	ldr	r3, [pc, #144]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 0207 	bic.w	r2, r3, #7
 8005fe2:	4922      	ldr	r1, [pc, #136]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b20      	ldr	r3, [pc, #128]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e032      	b.n	8006062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	4b19      	ldr	r3, [pc, #100]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4916      	ldr	r1, [pc, #88]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006026:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	490e      	ldr	r1, [pc, #56]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8006036:	4313      	orrs	r3, r2
 8006038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800603a:	f000 f821 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	490a      	ldr	r1, [pc, #40]	@ (8006074 <HAL_RCC_ClockConfig+0x1c8>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <HAL_RCC_ClockConfig+0x1cc>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006056:	4b09      	ldr	r3, [pc, #36]	@ (800607c <HAL_RCC_ClockConfig+0x1d0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fd1a 	bl	8004a94 <HAL_InitTick>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40022000 	.word	0x40022000
 8006070:	40021000 	.word	0x40021000
 8006074:	08008e4c 	.word	0x08008e4c
 8006078:	20000004 	.word	0x20000004
 800607c:	20000008 	.word	0x20000008

08006080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	2300      	movs	r3, #0
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800609a:	4b1e      	ldr	r3, [pc, #120]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x94>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d002      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x30>
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x36>
 80060ae:	e027      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060b0:	4b19      	ldr	r3, [pc, #100]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x98>)
 80060b2:	613b      	str	r3, [r7, #16]
      break;
 80060b4:	e027      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	0c9b      	lsrs	r3, r3, #18
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	4a17      	ldr	r2, [pc, #92]	@ (800611c <HAL_RCC_GetSysClockFreq+0x9c>)
 80060c0:	5cd3      	ldrb	r3, [r2, r3]
 80060c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060ce:	4b11      	ldr	r3, [pc, #68]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x94>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	0c5b      	lsrs	r3, r3, #17
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	4a11      	ldr	r2, [pc, #68]	@ (8006120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80060da:	5cd3      	ldrb	r3, [r2, r3]
 80060dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x98>)
 80060e2:	fb03 f202 	mul.w	r2, r3, r2
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e004      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80060f4:	fb02 f303 	mul.w	r3, r2, r3
 80060f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	613b      	str	r3, [r7, #16]
      break;
 80060fe:	e002      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b05      	ldr	r3, [pc, #20]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x98>)
 8006102:	613b      	str	r3, [r7, #16]
      break;
 8006104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006106:	693b      	ldr	r3, [r7, #16]
}
 8006108:	4618      	mov	r0, r3
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000
 8006118:	007a1200 	.word	0x007a1200
 800611c:	08008e64 	.word	0x08008e64
 8006120:	08008e74 	.word	0x08008e74
 8006124:	003d0900 	.word	0x003d0900

08006128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800612c:	4b02      	ldr	r3, [pc, #8]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x10>)
 800612e:	681b      	ldr	r3, [r3, #0]
}
 8006130:	4618      	mov	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr
 8006138:	20000004 	.word	0x20000004

0800613c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006140:	f7ff fff2 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4903      	ldr	r1, [pc, #12]	@ (8006160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40021000 	.word	0x40021000
 8006160:	08008e5c 	.word	0x08008e5c

08006164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006168:	f7ff ffde 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	0adb      	lsrs	r3, r3, #11
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	4903      	ldr	r1, [pc, #12]	@ (8006188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	08008e5c 	.word	0x08008e5c

0800618c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006194:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <RCC_Delay+0x34>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a0a      	ldr	r2, [pc, #40]	@ (80061c4 <RCC_Delay+0x38>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	0a5b      	lsrs	r3, r3, #9
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061a8:	bf00      	nop
  }
  while (Delay --);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1e5a      	subs	r2, r3, #1
 80061ae:	60fa      	str	r2, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f9      	bne.n	80061a8 <RCC_Delay+0x1c>
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	20000004 	.word	0x20000004
 80061c4:	10624dd3 	.word	0x10624dd3

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fe fa12 	bl	8004618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 fe04 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e041      	b.n	80062fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f839 	bl	8006304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 fdb5 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr
	...

08006318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_TIM_PWM_Start+0x24>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e022      	b.n	8006382 <HAL_TIM_PWM_Start+0x6a>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d109      	bne.n	8006356 <HAL_TIM_PWM_Start+0x3e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e015      	b.n	8006382 <HAL_TIM_PWM_Start+0x6a>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d109      	bne.n	8006370 <HAL_TIM_PWM_Start+0x58>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e008      	b.n	8006382 <HAL_TIM_PWM_Start+0x6a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e072      	b.n	8006470 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_TIM_PWM_Start+0x82>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006398:	e013      	b.n	80063c2 <HAL_TIM_PWM_Start+0xaa>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d104      	bne.n	80063aa <HAL_TIM_PWM_Start+0x92>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a8:	e00b      	b.n	80063c2 <HAL_TIM_PWM_Start+0xaa>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b8:	e003      	b.n	80063c2 <HAL_TIM_PWM_Start+0xaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f8f7 	bl	80075be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a28      	ldr	r2, [pc, #160]	@ (8006478 <HAL_TIM_PWM_Start+0x160>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_PWM_Start+0xcc>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a27      	ldr	r2, [pc, #156]	@ (800647c <HAL_TIM_PWM_Start+0x164>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_PWM_Start+0xd0>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <HAL_TIM_PWM_Start+0xd2>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1d      	ldr	r2, [pc, #116]	@ (8006478 <HAL_TIM_PWM_Start+0x160>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_TIM_PWM_Start+0x122>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1b      	ldr	r2, [pc, #108]	@ (800647c <HAL_TIM_PWM_Start+0x164>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_TIM_PWM_Start+0x122>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641a:	d00e      	beq.n	800643a <HAL_TIM_PWM_Start+0x122>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a17      	ldr	r2, [pc, #92]	@ (8006480 <HAL_TIM_PWM_Start+0x168>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIM_PWM_Start+0x122>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <HAL_TIM_PWM_Start+0x16c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIM_PWM_Start+0x122>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <HAL_TIM_PWM_Start+0x170>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b06      	cmp	r3, #6
 800644a:	d010      	beq.n	800646e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	e007      	b.n	800646e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0201 	orr.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00

0800648c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e041      	b.n	8006522 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f839 	bl	800652a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fca2 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <HAL_TIM_IC_Start_IT+0x1e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e013      	b.n	8006582 <HAL_TIM_IC_Start_IT+0x46>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b04      	cmp	r3, #4
 800655e:	d104      	bne.n	800656a <HAL_TIM_IC_Start_IT+0x2e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e00b      	b.n	8006582 <HAL_TIM_IC_Start_IT+0x46>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d104      	bne.n	800657a <HAL_TIM_IC_Start_IT+0x3e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e003      	b.n	8006582 <HAL_TIM_IC_Start_IT+0x46>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006580:	b2db      	uxtb	r3, r3
 8006582:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <HAL_TIM_IC_Start_IT+0x58>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e013      	b.n	80065bc <HAL_TIM_IC_Start_IT+0x80>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d104      	bne.n	80065a4 <HAL_TIM_IC_Start_IT+0x68>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e00b      	b.n	80065bc <HAL_TIM_IC_Start_IT+0x80>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d104      	bne.n	80065b4 <HAL_TIM_IC_Start_IT+0x78>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e003      	b.n	80065bc <HAL_TIM_IC_Start_IT+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c4:	7b7b      	ldrb	r3, [r7, #13]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d001      	beq.n	80065ce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0c2      	b.n	8006754 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <HAL_TIM_IC_Start_IT+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065dc:	e013      	b.n	8006606 <HAL_TIM_IC_Start_IT+0xca>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_IC_Start_IT+0xb2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_IC_Start_IT+0xca>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_IC_Start_IT+0xc2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065fc:	e003      	b.n	8006606 <HAL_TIM_IC_Start_IT+0xca>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <HAL_TIM_IC_Start_IT+0xda>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006614:	e013      	b.n	800663e <HAL_TIM_IC_Start_IT+0x102>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d104      	bne.n	8006626 <HAL_TIM_IC_Start_IT+0xea>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006624:	e00b      	b.n	800663e <HAL_TIM_IC_Start_IT+0x102>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d104      	bne.n	8006636 <HAL_TIM_IC_Start_IT+0xfa>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006634:	e003      	b.n	800663e <HAL_TIM_IC_Start_IT+0x102>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b0c      	cmp	r3, #12
 8006642:	d841      	bhi.n	80066c8 <HAL_TIM_IC_Start_IT+0x18c>
 8006644:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <HAL_TIM_IC_Start_IT+0x110>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006681 	.word	0x08006681
 8006650:	080066c9 	.word	0x080066c9
 8006654:	080066c9 	.word	0x080066c9
 8006658:	080066c9 	.word	0x080066c9
 800665c:	08006693 	.word	0x08006693
 8006660:	080066c9 	.word	0x080066c9
 8006664:	080066c9 	.word	0x080066c9
 8006668:	080066c9 	.word	0x080066c9
 800666c:	080066a5 	.word	0x080066a5
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066c9 	.word	0x080066c9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066b7 	.word	0x080066b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0202 	orr.w	r2, r2, #2
 800668e:	60da      	str	r2, [r3, #12]
      break;
 8006690:	e01d      	b.n	80066ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0204 	orr.w	r2, r2, #4
 80066a0:	60da      	str	r2, [r3, #12]
      break;
 80066a2:	e014      	b.n	80066ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	60da      	str	r2, [r3, #12]
      break;
 80066b4:	e00b      	b.n	80066ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0210 	orr.w	r2, r2, #16
 80066c4:	60da      	str	r2, [r3, #12]
      break;
 80066c6:	e002      	b.n	80066ce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d13e      	bne.n	8006752 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ff6e 	bl	80075be <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <HAL_TIM_IC_Start_IT+0x220>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_TIM_IC_Start_IT+0x1e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_TIM_IC_Start_IT+0x224>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_TIM_IC_Start_IT+0x1e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fe:	d00e      	beq.n	800671e <HAL_TIM_IC_Start_IT+0x1e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <HAL_TIM_IC_Start_IT+0x228>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_TIM_IC_Start_IT+0x1e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a16      	ldr	r2, [pc, #88]	@ (8006768 <HAL_TIM_IC_Start_IT+0x22c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_TIM_IC_Start_IT+0x1e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a14      	ldr	r2, [pc, #80]	@ (800676c <HAL_TIM_IC_Start_IT+0x230>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d111      	bne.n	8006742 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b06      	cmp	r3, #6
 800672e:	d010      	beq.n	8006752 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006740:	e007      	b.n	8006752 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40013400 	.word	0x40013400
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40000c00 	.word	0x40000c00

08006770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b02      	cmp	r3, #2
 8006784:	d122      	bne.n	80067cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d11b      	bne.n	80067cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0202 	mvn.w	r2, #2
 800679c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fc fccc 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 80067b8:	e005      	b.n	80067c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb0e 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb14 	bl	8006dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d122      	bne.n	8006820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d11b      	bne.n	8006820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0204 	mvn.w	r2, #4
 80067f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fc fca2 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fae4 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 faea 	bl	8006dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b08      	cmp	r3, #8
 800682c:	d122      	bne.n	8006874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b08      	cmp	r3, #8
 800683a:	d11b      	bne.n	8006874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0208 	mvn.w	r2, #8
 8006844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2204      	movs	r2, #4
 800684a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc fc78 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8006860:	e005      	b.n	800686e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 faba 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fac0 	bl	8006dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0310 	and.w	r3, r3, #16
 800687e:	2b10      	cmp	r3, #16
 8006880:	d122      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b10      	cmp	r3, #16
 800688e:	d11b      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0210 	mvn.w	r2, #16
 8006898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2208      	movs	r2, #8
 800689e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fc fc4e 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 80068b4:	e005      	b.n	80068c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa90 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa96 	bl	8006dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10e      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0201 	mvn.w	r2, #1
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa6b 	bl	8006dca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068fe:	2b80      	cmp	r3, #128	@ 0x80
 8006900:	d10e      	bne.n	8006920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d107      	bne.n	8006920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 ff3a 	bl	8007794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b40      	cmp	r3, #64	@ 0x40
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b40      	cmp	r3, #64	@ 0x40
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa5a 	bl	8006e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b20      	cmp	r3, #32
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b20      	cmp	r3, #32
 8006966:	d107      	bne.n	8006978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0220 	mvn.w	r2, #32
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ff05 	bl	8007782 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_TIM_IC_ConfigChannel+0x1e>
 800699a:	2302      	movs	r3, #2
 800699c:	e088      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x130>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80069bc:	f000 fc50 	bl	8007260 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 020c 	bic.w	r2, r2, #12
 80069ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6999      	ldr	r1, [r3, #24]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	619a      	str	r2, [r3, #24]
 80069e2:	e060      	b.n	8006aa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d11c      	bne.n	8006a24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80069fa:	f000 fcc5 	bl	8007388 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6999      	ldr	r1, [r3, #24]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	021a      	lsls	r2, r3, #8
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	619a      	str	r2, [r3, #24]
 8006a22:	e040      	b.n	8006aa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d11b      	bne.n	8006a62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a3a:	f000 fd10 	bl	800745e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 020c 	bic.w	r2, r2, #12
 8006a4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69d9      	ldr	r1, [r3, #28]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	61da      	str	r2, [r3, #28]
 8006a60:	e021      	b.n	8006aa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	d11c      	bne.n	8006aa2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006a78:	f000 fd2c 	bl	80074d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69da      	ldr	r2, [r3, #28]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69d9      	ldr	r1, [r3, #28]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	021a      	lsls	r2, r3, #8
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e001      	b.n	8006aa6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e0ae      	b.n	8006c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b0c      	cmp	r3, #12
 8006ae2:	f200 809f 	bhi.w	8006c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b21 	.word	0x08006b21
 8006af0:	08006c25 	.word	0x08006c25
 8006af4:	08006c25 	.word	0x08006c25
 8006af8:	08006c25 	.word	0x08006c25
 8006afc:	08006b61 	.word	0x08006b61
 8006b00:	08006c25 	.word	0x08006c25
 8006b04:	08006c25 	.word	0x08006c25
 8006b08:	08006c25 	.word	0x08006c25
 8006b0c:	08006ba3 	.word	0x08006ba3
 8006b10:	08006c25 	.word	0x08006c25
 8006b14:	08006c25 	.word	0x08006c25
 8006b18:	08006c25 	.word	0x08006c25
 8006b1c:	08006be3 	.word	0x08006be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f9ee 	bl	8006f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0208 	orr.w	r2, r2, #8
 8006b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0204 	bic.w	r2, r2, #4
 8006b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6999      	ldr	r1, [r3, #24]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	619a      	str	r2, [r3, #24]
      break;
 8006b5e:	e064      	b.n	8006c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fa3e 	bl	8006fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	619a      	str	r2, [r3, #24]
      break;
 8006ba0:	e043      	b.n	8006c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fa91 	bl	80070d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0208 	orr.w	r2, r2, #8
 8006bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0204 	bic.w	r2, r2, #4
 8006bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69d9      	ldr	r1, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	61da      	str	r2, [r3, #28]
      break;
 8006be0:	e023      	b.n	8006c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fae5 	bl	80071b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	021a      	lsls	r2, r3, #8
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	61da      	str	r2, [r3, #28]
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_TIM_ConfigClockSource+0x1c>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e0b4      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x186>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c90:	d03e      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0xd4>
 8006c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c96:	f200 8087 	bhi.w	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9e:	f000 8086 	beq.w	8006dae <HAL_TIM_ConfigClockSource+0x172>
 8006ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca6:	d87f      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca8:	2b70      	cmp	r3, #112	@ 0x70
 8006caa:	d01a      	beq.n	8006ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8006cac:	2b70      	cmp	r3, #112	@ 0x70
 8006cae:	d87b      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb0:	2b60      	cmp	r3, #96	@ 0x60
 8006cb2:	d050      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x11a>
 8006cb4:	2b60      	cmp	r3, #96	@ 0x60
 8006cb6:	d877      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb8:	2b50      	cmp	r3, #80	@ 0x50
 8006cba:	d03c      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0xfa>
 8006cbc:	2b50      	cmp	r3, #80	@ 0x50
 8006cbe:	d873      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc0:	2b40      	cmp	r3, #64	@ 0x40
 8006cc2:	d058      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x13a>
 8006cc4:	2b40      	cmp	r3, #64	@ 0x40
 8006cc6:	d86f      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc8:	2b30      	cmp	r3, #48	@ 0x30
 8006cca:	d064      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x15a>
 8006ccc:	2b30      	cmp	r3, #48	@ 0x30
 8006cce:	d86b      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d060      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x15a>
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d867      	bhi.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d05c      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x15a>
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d05a      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x15a>
 8006ce0:	e062      	b.n	8006da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cf2:	f000 fc45 	bl	8007580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	609a      	str	r2, [r3, #8]
      break;
 8006d0e:	e04f      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d20:	f000 fc2e 	bl	8007580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d32:	609a      	str	r2, [r3, #8]
      break;
 8006d34:	e03c      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 faf2 	bl	800732c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2150      	movs	r1, #80	@ 0x50
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fbfc 	bl	800754c <TIM_ITRx_SetConfig>
      break;
 8006d54:	e02c      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d62:	461a      	mov	r2, r3
 8006d64:	f000 fb4c 	bl	8007400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2160      	movs	r1, #96	@ 0x60
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fbec 	bl	800754c <TIM_ITRx_SetConfig>
      break;
 8006d74:	e01c      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	461a      	mov	r2, r3
 8006d84:	f000 fad2 	bl	800732c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2140      	movs	r1, #64	@ 0x40
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fbdc 	bl	800754c <TIM_ITRx_SetConfig>
      break;
 8006d94:	e00c      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f000 fbd3 	bl	800754c <TIM_ITRx_SetConfig>
      break;
 8006da6:	e003      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e000      	b.n	8006db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
	...

08006e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a33      	ldr	r2, [pc, #204]	@ (8006ef4 <TIM_Base_SetConfig+0xe0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a32      	ldr	r2, [pc, #200]	@ (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00f      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3a:	d00b      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006efc <TIM_Base_SetConfig+0xe8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a2e      	ldr	r2, [pc, #184]	@ (8006f00 <TIM_Base_SetConfig+0xec>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f04 <TIM_Base_SetConfig+0xf0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d108      	bne.n	8006e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a22      	ldr	r2, [pc, #136]	@ (8006ef4 <TIM_Base_SetConfig+0xe0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <TIM_Base_SetConfig+0x82>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a21      	ldr	r2, [pc, #132]	@ (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <TIM_Base_SetConfig+0x82>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d00b      	beq.n	8006e96 <TIM_Base_SetConfig+0x82>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1e      	ldr	r2, [pc, #120]	@ (8006efc <TIM_Base_SetConfig+0xe8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_Base_SetConfig+0x82>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <TIM_Base_SetConfig+0xec>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_Base_SetConfig+0x82>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1c      	ldr	r2, [pc, #112]	@ (8006f04 <TIM_Base_SetConfig+0xf0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d108      	bne.n	8006ea8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a09      	ldr	r2, [pc, #36]	@ (8006ef4 <TIM_Base_SetConfig+0xe0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_Base_SetConfig+0xc8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <TIM_Base_SetConfig+0xe4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d103      	bne.n	8006ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	615a      	str	r2, [r3, #20]
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00

08006f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f023 0201 	bic.w	r2, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 0302 	bic.w	r3, r3, #2
 8006f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a20      	ldr	r2, [pc, #128]	@ (8006fe0 <TIM_OC1_SetConfig+0xd8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC1_SetConfig+0x64>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe4 <TIM_OC1_SetConfig+0xdc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d10c      	bne.n	8006f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0308 	bic.w	r3, r3, #8
 8006f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 0304 	bic.w	r3, r3, #4
 8006f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	@ (8006fe0 <TIM_OC1_SetConfig+0xd8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_OC1_SetConfig+0x8e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a14      	ldr	r2, [pc, #80]	@ (8006fe4 <TIM_OC1_SetConfig+0xdc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d111      	bne.n	8006fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40013400 	.word	0x40013400

08006fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f023 0210 	bic.w	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800701e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0320 	bic.w	r3, r3, #32
 8007032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a21      	ldr	r2, [pc, #132]	@ (80070c8 <TIM_OC2_SetConfig+0xe0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_OC2_SetConfig+0x68>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a20      	ldr	r2, [pc, #128]	@ (80070cc <TIM_OC2_SetConfig+0xe4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10d      	bne.n	800706c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800706a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a16      	ldr	r2, [pc, #88]	@ (80070c8 <TIM_OC2_SetConfig+0xe0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC2_SetConfig+0x94>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a15      	ldr	r2, [pc, #84]	@ (80070cc <TIM_OC2_SetConfig+0xe4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d113      	bne.n	80070a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800708a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400

080070d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a21      	ldr	r2, [pc, #132]	@ (80071b0 <TIM_OC3_SetConfig+0xe0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC3_SetConfig+0x66>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a20      	ldr	r2, [pc, #128]	@ (80071b4 <TIM_OC3_SetConfig+0xe4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d10d      	bne.n	8007152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800713c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <TIM_OC3_SetConfig+0xe0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_OC3_SetConfig+0x92>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a15      	ldr	r2, [pc, #84]	@ (80071b4 <TIM_OC3_SetConfig+0xe4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d113      	bne.n	800718a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	621a      	str	r2, [r3, #32]
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400

080071b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a11      	ldr	r2, [pc, #68]	@ (8007258 <TIM_OC4_SetConfig+0xa0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC4_SetConfig+0x68>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a10      	ldr	r2, [pc, #64]	@ (800725c <TIM_OC4_SetConfig+0xa4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d109      	bne.n	8007234 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	019b      	lsls	r3, r3, #6
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40013400 	.word	0x40013400

08007260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f023 0201 	bic.w	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a23      	ldr	r2, [pc, #140]	@ (8007318 <TIM_TI1_SetConfig+0xb8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <TIM_TI1_SetConfig+0x56>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4a22      	ldr	r2, [pc, #136]	@ (800731c <TIM_TI1_SetConfig+0xbc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_TI1_SetConfig+0x56>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729c:	d00b      	beq.n	80072b6 <TIM_TI1_SetConfig+0x56>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007320 <TIM_TI1_SetConfig+0xc0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_TI1_SetConfig+0x56>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007324 <TIM_TI1_SetConfig+0xc4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_TI1_SetConfig+0x56>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <TIM_TI1_SetConfig+0xc8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d101      	bne.n	80072ba <TIM_TI1_SetConfig+0x5a>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <TIM_TI1_SetConfig+0x5c>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	e003      	b.n	80072da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f023 030a 	bic.w	r3, r3, #10
 80072f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f003 030a 	and.w	r3, r3, #10
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr
 8007318:	40012c00 	.word	0x40012c00
 800731c:	40013400 	.word	0x40013400
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40000c00 	.word	0x40000c00

0800732c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f023 030a 	bic.w	r3, r3, #10
 8007368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f023 0210 	bic.w	r2, r3, #16
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	031b      	lsls	r3, r3, #12
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f023 0210 	bic.w	r2, r3, #16
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800742a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	031b      	lsls	r3, r3, #12
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800743c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800745e:	b480      	push	{r7}
 8007460:	b087      	sub	sp, #28
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800749a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007500:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	031b      	lsls	r3, r3, #12
 8007518:	b29b      	uxth	r3, r3
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007526:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	031b      	lsls	r3, r3, #12
 800752c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	f043 0307 	orr.w	r3, r3, #7
 800756e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	609a      	str	r2, [r3, #8]
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800759a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	021a      	lsls	r2, r3, #8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	609a      	str	r2, [r3, #8]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2201      	movs	r2, #1
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	43db      	mvns	r3, r3
 80075e0:	401a      	ands	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	fa01 f303 	lsl.w	r3, r1, r3
 80075f6:	431a      	orrs	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	621a      	str	r2, [r3, #32]
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr
	...

08007608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e050      	b.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1b      	ldr	r2, [pc, #108]	@ (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d018      	beq.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a19      	ldr	r2, [pc, #100]	@ (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d013      	beq.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007676:	d00e      	beq.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a15      	ldr	r2, [pc, #84]	@ (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d009      	beq.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a14      	ldr	r2, [pc, #80]	@ (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a12      	ldr	r2, [pc, #72]	@ (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d10c      	bne.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800769c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40000c00 	.word	0x40000c00

080076e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e03d      	b.n	8007778 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e042      	b.n	800783e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fc ffb1 	bl	8004734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2224      	movs	r2, #36	@ 0x24
 80077d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 ff30 	bl	8008650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800780e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800781e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	@ 0x30
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b20      	cmp	r3, #32
 8007860:	d156      	bne.n	8007910 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_UART_Transmit_DMA+0x26>
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e04f      	b.n	8007912 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2221      	movs	r2, #33	@ 0x21
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	4a21      	ldr	r2, [pc, #132]	@ (800791c <HAL_UART_Transmit_DMA+0xd4>)
 8007898:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	4a20      	ldr	r2, [pc, #128]	@ (8007920 <HAL_UART_Transmit_DMA+0xd8>)
 80078a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007924 <HAL_UART_Transmit_DMA+0xdc>)
 80078a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80078bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3304      	adds	r3, #4
 80078c6:	461a      	mov	r2, r3
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	f7fd fab3 	bl	8004e34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3314      	adds	r3, #20
 80078de:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	617b      	str	r3, [r7, #20]
   return(result);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80078fa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6a39      	ldr	r1, [r7, #32]
 80078fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	61fb      	str	r3, [r7, #28]
   return(result);
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e000      	b.n	8007912 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007910:	2302      	movs	r3, #2
  }
}
 8007912:	4618      	mov	r0, r3
 8007914:	3730      	adds	r7, #48	@ 0x30
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	08007ee5 	.word	0x08007ee5
 8007920:	08007f7f 	.word	0x08007f7f
 8007924:	08008103 	.word	0x08008103

08007928 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b20      	cmp	r3, #32
 8007940:	d112      	bne.n	8007968 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_UART_Receive_DMA+0x26>
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e00b      	b.n	800796a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	461a      	mov	r2, r3
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fc1a 	bl	8008198 <UART_Start_Receive_DMA>
 8007964:	4603      	mov	r3, r0
 8007966:	e000      	b.n	800796a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b0ba      	sub	sp, #232	@ 0xe8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <HAL_UART_IRQHandler+0x66>
 80079c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fd7e 	bl	80084d4 <UART_Receive_IT>
      return;
 80079d8:	e25b      	b.n	8007e92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80de 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x22c>
 80079e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80d1 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xae>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1a:	f043 0201 	orr.w	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <HAL_UART_IRQHandler+0xd2>
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3e:	f043 0202 	orr.w	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <HAL_UART_IRQHandler+0xf6>
 8007a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a62:	f043 0204 	orr.w	r2, r3, #4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d011      	beq.n	8007a9a <HAL_UART_IRQHandler+0x126>
 8007a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a92:	f043 0208 	orr.w	r2, r3, #8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 81f2 	beq.w	8007e88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d008      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x14e>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fd09 	bl	80084d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bf14      	ite	ne
 8007ad0:	2301      	movne	r3, #1
 8007ad2:	2300      	moveq	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <HAL_UART_IRQHandler+0x17a>
 8007ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d04f      	beq.n	8007b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc13 	bl	800831a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d041      	beq.n	8007b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3314      	adds	r3, #20
 8007b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d9      	bne.n	8007b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d013      	beq.n	8007b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007d54 <HAL_UART_IRQHandler+0x3e0>)
 8007b5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fd fa02 	bl	8004f6c <HAL_DMA_Abort_IT>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d016      	beq.n	8007b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e00e      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f99c 	bl	8007ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e00a      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f998 	bl	8007ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8c:	e006      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f994 	bl	8007ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b9a:	e175      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	bf00      	nop
    return;
 8007b9e:	e173      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	f040 814f 	bne.w	8007e48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8148 	beq.w	8007e48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8141 	beq.w	8007e48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80b6 	beq.w	8007d58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8145 	beq.w	8007e8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	f080 813e 	bcs.w	8007e8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	f000 8088 	beq.w	8007d34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1d9      	bne.n	8007c24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3314      	adds	r3, #20
 8007c76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e1      	bne.n	8007c70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d04:	f023 0310 	bic.w	r3, r3, #16
 8007d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e3      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd f8e0 	bl	8004ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8bf 	bl	8007ece <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d50:	e09c      	b.n	8007e8c <HAL_UART_IRQHandler+0x518>
 8007d52:	bf00      	nop
 8007d54:	080083df 	.word	0x080083df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 808e 	beq.w	8007e90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8089 	beq.w	8007e90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	330c      	adds	r3, #12
 8007d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007da2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e3      	bne.n	8007d7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3314      	adds	r3, #20
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e3      	bne.n	8007db6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0310 	bic.w	r3, r3, #16
 8007e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e20:	61fa      	str	r2, [r7, #28]
 8007e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69b9      	ldr	r1, [r7, #24]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e3      	bne.n	8007dfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f844 	bl	8007ece <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e46:	e023      	b.n	8007e90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <HAL_UART_IRQHandler+0x4f4>
 8007e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fad0 	bl	8008406 <UART_Transmit_IT>
    return;
 8007e66:	e014      	b.n	8007e92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <HAL_UART_IRQHandler+0x51e>
 8007e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb0f 	bl	80084a4 <UART_EndTransmit_IT>
    return;
 8007e86:	e004      	b.n	8007e92 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e88:	bf00      	nop
 8007e8a:	e002      	b.n	8007e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e90:	bf00      	nop
  }
}
 8007e92:	37e8      	adds	r7, #232	@ 0xe8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr

08007eaa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bc80      	pop	{r7}
 8007ecc:	4770      	bx	lr

08007ece <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b090      	sub	sp, #64	@ 0x40
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d137      	bne.n	8007f70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f02:	2200      	movs	r2, #0
 8007f04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3314      	adds	r3, #20
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	623b      	str	r3, [r7, #32]
   return(result);
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3314      	adds	r3, #20
 8007f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f5a:	61fa      	str	r2, [r7, #28]
 8007f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	617b      	str	r3, [r7, #20]
   return(result);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f6e:	e002      	b.n	8007f76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007f72:	f7fb f8d1 	bl	8003118 <HAL_UART_TxCpltCallback>
}
 8007f76:	bf00      	nop
 8007f78:	3740      	adds	r7, #64	@ 0x40
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff ff83 	bl	8007e98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b09c      	sub	sp, #112	@ 0x70
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d172      	bne.n	800809c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb8:	2200      	movs	r2, #0
 8007fba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007fdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007fde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	667b      	str	r3, [r7, #100]	@ 0x64
 8008008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3314      	adds	r3, #20
 800800e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008010:	647a      	str	r2, [r7, #68]	@ 0x44
 8008012:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800801e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e5      	bne.n	8007ff0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3314      	adds	r3, #20
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	623b      	str	r3, [r7, #32]
   return(result);
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800803a:	663b      	str	r3, [r7, #96]	@ 0x60
 800803c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3314      	adds	r3, #20
 8008042:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008044:	633a      	str	r2, [r7, #48]	@ 0x30
 8008046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800804a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e5      	bne.n	8008024 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	2220      	movs	r2, #32
 800805c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d119      	bne.n	800809c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	60fb      	str	r3, [r7, #12]
   return(result);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0310 	bic.w	r3, r3, #16
 800807e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	330c      	adds	r3, #12
 8008086:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008088:	61fa      	str	r2, [r7, #28]
 800808a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	69b9      	ldr	r1, [r7, #24]
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	617b      	str	r3, [r7, #20]
   return(result);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800809c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800809e:	2200      	movs	r2, #0
 80080a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d106      	bne.n	80080b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080ae:	4619      	mov	r1, r3
 80080b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080b2:	f7ff ff0c 	bl	8007ece <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080b6:	e002      	b.n	80080be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80080b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080ba:	f7fb f83b 	bl	8003134 <HAL_UART_RxCpltCallback>
}
 80080be:	bf00      	nop
 80080c0:	3770      	adds	r7, #112	@ 0x70
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d108      	bne.n	80080f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4619      	mov	r1, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff feee 	bl	8007ece <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080f2:	e002      	b.n	80080fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fed8 	bl	8007eaa <HAL_UART_RxHalfCpltCallback>
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	bf14      	ite	ne
 8008122:	2301      	movne	r3, #1
 8008124:	2300      	moveq	r3, #0
 8008126:	b2db      	uxtb	r3, r3
 8008128:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b21      	cmp	r3, #33	@ 0x21
 8008134:	d108      	bne.n	8008148 <UART_DMAError+0x46>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008142:	68b8      	ldr	r0, [r7, #8]
 8008144:	f000 f8c2 	bl	80082cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf14      	ite	ne
 8008156:	2301      	movne	r3, #1
 8008158:	2300      	moveq	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b22      	cmp	r3, #34	@ 0x22
 8008168:	d108      	bne.n	800817c <UART_DMAError+0x7a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008176:	68b8      	ldr	r0, [r7, #8]
 8008178:	f000 f8cf 	bl	800831a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008180:	f043 0210 	orr.w	r2, r3, #16
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f7ff fe97 	bl	8007ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b098      	sub	sp, #96	@ 0x60
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	88fa      	ldrh	r2, [r7, #6]
 80081b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2222      	movs	r2, #34	@ 0x22
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	4a3e      	ldr	r2, [pc, #248]	@ (80082c0 <UART_Start_Receive_DMA+0x128>)
 80081c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	4a3d      	ldr	r2, [pc, #244]	@ (80082c4 <UART_Start_Receive_DMA+0x12c>)
 80081ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d4:	4a3c      	ldr	r2, [pc, #240]	@ (80082c8 <UART_Start_Receive_DMA+0x130>)
 80081d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081dc:	2200      	movs	r2, #0
 80081de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80081e0:	f107 0308 	add.w	r3, r7, #8
 80081e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	88fb      	ldrh	r3, [r7, #6]
 80081f8:	f7fc fe1c 	bl	8004e34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d019      	beq.n	800824e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008230:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800823a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800823c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e5      	bne.n	800821a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800825e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	657b      	str	r3, [r7, #84]	@ 0x54
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3314      	adds	r3, #20
 800826c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800826e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3314      	adds	r3, #20
 8008288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	617b      	str	r3, [r7, #20]
   return(result);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008298:	653b      	str	r3, [r7, #80]	@ 0x50
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80082a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6a39      	ldr	r1, [r7, #32]
 80082a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3760      	adds	r7, #96	@ 0x60
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08007f9b 	.word	0x08007f9b
 80082c4:	080080c7 	.word	0x080080c7
 80082c8:	08008103 	.word	0x08008103

080082cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	@ 0x24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	61ba      	str	r2, [r7, #24]
 80082f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6979      	ldr	r1, [r7, #20]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	613b      	str	r3, [r7, #16]
   return(result);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008310:	bf00      	nop
 8008312:	3724      	adds	r7, #36	@ 0x24
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr

0800831a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800831a:	b480      	push	{r7}
 800831c:	b095      	sub	sp, #84	@ 0x54
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	330c      	adds	r3, #12
 8008340:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008342:	643a      	str	r2, [r7, #64]	@ 0x40
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008348:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3314      	adds	r3, #20
 800835c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	61fb      	str	r3, [r7, #28]
   return(result);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3314      	adds	r3, #20
 8008374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008378:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800837c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e5      	bne.n	8008356 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838e:	2b01      	cmp	r3, #1
 8008390:	d119      	bne.n	80083c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f023 0310 	bic.w	r3, r3, #16
 80083a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083b2:	61ba      	str	r2, [r7, #24]
 80083b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	613b      	str	r3, [r7, #16]
   return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e5      	bne.n	8008392 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083d4:	bf00      	nop
 80083d6:	3754      	adds	r7, #84	@ 0x54
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7ff fd5f 	bl	8007ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b21      	cmp	r3, #33	@ 0x21
 8008418:	d13e      	bne.n	8008498 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008422:	d114      	bne.n	800844e <UART_Transmit_IT+0x48>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d110      	bne.n	800844e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008440:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	1c9a      	adds	r2, r3, #2
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]
 800844c:	e008      	b.n	8008460 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	1c59      	adds	r1, r3, #1
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6211      	str	r1, [r2, #32]
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29b      	uxth	r3, r3
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4619      	mov	r1, r3
 800846e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10f      	bne.n	8008494 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008482:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008492:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008498:	2302      	movs	r3, #2
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fa fe27 	bl	8003118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	@ 0x30
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b22      	cmp	r3, #34	@ 0x22
 80084e6:	f040 80ae 	bne.w	8008646 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f2:	d117      	bne.n	8008524 <UART_Receive_IT+0x50>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d113      	bne.n	8008524 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008512:	b29a      	uxth	r2, r3
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	1c9a      	adds	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	629a      	str	r2, [r3, #40]	@ 0x28
 8008522:	e026      	b.n	8008572 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008536:	d007      	beq.n	8008548 <UART_Receive_IT+0x74>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <UART_Receive_IT+0x82>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	b2da      	uxtb	r2, r3
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e008      	b.n	8008568 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008566:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29b      	uxth	r3, r3
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	4619      	mov	r1, r3
 8008580:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008582:	2b00      	cmp	r3, #0
 8008584:	d15d      	bne.n	8008642 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0220 	bic.w	r2, r2, #32
 8008594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d135      	bne.n	8008638 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	613b      	str	r3, [r7, #16]
   return(result);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f023 0310 	bic.w	r3, r3, #16
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	330c      	adds	r3, #12
 80085f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f2:	623a      	str	r2, [r7, #32]
 80085f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	69f9      	ldr	r1, [r7, #28]
 80085f8:	6a3a      	ldr	r2, [r7, #32]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b10      	cmp	r3, #16
 8008612:	d10a      	bne.n	800862a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff fc4c 	bl	8007ece <HAL_UARTEx_RxEventCallback>
 8008636:	e002      	b.n	800863e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7fa fd7b 	bl	8003134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e002      	b.n	8008648 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	e000      	b.n	8008648 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008646:	2302      	movs	r3, #2
  }
}
 8008648:	4618      	mov	r0, r3
 800864a:	3730      	adds	r7, #48	@ 0x30
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800868a:	f023 030c 	bic.w	r3, r3, #12
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	430b      	orrs	r3, r1
 8008696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008764 <UART_SetConfig+0x114>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d103      	bne.n	80086c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086b8:	f7fd fd54 	bl	8006164 <HAL_RCC_GetPCLK2Freq>
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	e002      	b.n	80086c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086c0:	f7fd fd3c 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 80086c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009a      	lsls	r2, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086dc:	4a22      	ldr	r2, [pc, #136]	@ (8008768 <UART_SetConfig+0x118>)
 80086de:	fba2 2303 	umull	r2, r3, r2, r3
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	0119      	lsls	r1, r3, #4
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009a      	lsls	r2, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80086fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008768 <UART_SetConfig+0x118>)
 80086fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	2064      	movs	r0, #100	@ 0x64
 8008706:	fb00 f303 	mul.w	r3, r0, r3
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	3332      	adds	r3, #50	@ 0x32
 8008710:	4a15      	ldr	r2, [pc, #84]	@ (8008768 <UART_SetConfig+0x118>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800871c:	4419      	add	r1, r3
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009a      	lsls	r2, r3, #2
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	fbb2 f2f3 	udiv	r2, r2, r3
 8008734:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <UART_SetConfig+0x118>)
 8008736:	fba3 0302 	umull	r0, r3, r3, r2
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	2064      	movs	r0, #100	@ 0x64
 800873e:	fb00 f303 	mul.w	r3, r0, r3
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	3332      	adds	r3, #50	@ 0x32
 8008748:	4a07      	ldr	r2, [pc, #28]	@ (8008768 <UART_SetConfig+0x118>)
 800874a:	fba2 2303 	umull	r2, r3, r2, r3
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	440a      	add	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40013800 	.word	0x40013800
 8008768:	51eb851f 	.word	0x51eb851f

0800876c <calloc>:
 800876c:	4b02      	ldr	r3, [pc, #8]	@ (8008778 <calloc+0xc>)
 800876e:	460a      	mov	r2, r1
 8008770:	4601      	mov	r1, r0
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	f000 b802 	b.w	800877c <_calloc_r>
 8008778:	20000010 	.word	0x20000010

0800877c <_calloc_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	fba1 5402 	umull	r5, r4, r1, r2
 8008782:	b93c      	cbnz	r4, 8008794 <_calloc_r+0x18>
 8008784:	4629      	mov	r1, r5
 8008786:	f000 f82f 	bl	80087e8 <_malloc_r>
 800878a:	4606      	mov	r6, r0
 800878c:	b928      	cbnz	r0, 800879a <_calloc_r+0x1e>
 800878e:	2600      	movs	r6, #0
 8008790:	4630      	mov	r0, r6
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	220c      	movs	r2, #12
 8008796:	6002      	str	r2, [r0, #0]
 8008798:	e7f9      	b.n	800878e <_calloc_r+0x12>
 800879a:	462a      	mov	r2, r5
 800879c:	4621      	mov	r1, r4
 800879e:	f000 f8e5 	bl	800896c <memset>
 80087a2:	e7f5      	b.n	8008790 <_calloc_r+0x14>

080087a4 <sbrk_aligned>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0f      	ldr	r6, [pc, #60]	@ (80087e4 <sbrk_aligned+0x40>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	4605      	mov	r5, r0
 80087ae:	b911      	cbnz	r1, 80087b6 <sbrk_aligned+0x12>
 80087b0:	f000 f8e4 	bl	800897c <_sbrk_r>
 80087b4:	6030      	str	r0, [r6, #0]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 f8df 	bl	800897c <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d103      	bne.n	80087ca <sbrk_aligned+0x26>
 80087c2:	f04f 34ff 	mov.w	r4, #4294967295
 80087c6:	4620      	mov	r0, r4
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	1cc4      	adds	r4, r0, #3
 80087cc:	f024 0403 	bic.w	r4, r4, #3
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d0f8      	beq.n	80087c6 <sbrk_aligned+0x22>
 80087d4:	1a21      	subs	r1, r4, r0
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f8d0 	bl	800897c <_sbrk_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	d1f2      	bne.n	80087c6 <sbrk_aligned+0x22>
 80087e0:	e7ef      	b.n	80087c2 <sbrk_aligned+0x1e>
 80087e2:	bf00      	nop
 80087e4:	20008398 	.word	0x20008398

080087e8 <_malloc_r>:
 80087e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ec:	1ccd      	adds	r5, r1, #3
 80087ee:	f025 0503 	bic.w	r5, r5, #3
 80087f2:	3508      	adds	r5, #8
 80087f4:	2d0c      	cmp	r5, #12
 80087f6:	bf38      	it	cc
 80087f8:	250c      	movcc	r5, #12
 80087fa:	2d00      	cmp	r5, #0
 80087fc:	4606      	mov	r6, r0
 80087fe:	db01      	blt.n	8008804 <_malloc_r+0x1c>
 8008800:	42a9      	cmp	r1, r5
 8008802:	d904      	bls.n	800880e <_malloc_r+0x26>
 8008804:	230c      	movs	r3, #12
 8008806:	6033      	str	r3, [r6, #0]
 8008808:	2000      	movs	r0, #0
 800880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088e4 <_malloc_r+0xfc>
 8008812:	f000 f869 	bl	80088e8 <__malloc_lock>
 8008816:	f8d8 3000 	ldr.w	r3, [r8]
 800881a:	461c      	mov	r4, r3
 800881c:	bb44      	cbnz	r4, 8008870 <_malloc_r+0x88>
 800881e:	4629      	mov	r1, r5
 8008820:	4630      	mov	r0, r6
 8008822:	f7ff ffbf 	bl	80087a4 <sbrk_aligned>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	4604      	mov	r4, r0
 800882a:	d158      	bne.n	80088de <_malloc_r+0xf6>
 800882c:	f8d8 4000 	ldr.w	r4, [r8]
 8008830:	4627      	mov	r7, r4
 8008832:	2f00      	cmp	r7, #0
 8008834:	d143      	bne.n	80088be <_malloc_r+0xd6>
 8008836:	2c00      	cmp	r4, #0
 8008838:	d04b      	beq.n	80088d2 <_malloc_r+0xea>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	4639      	mov	r1, r7
 800883e:	4630      	mov	r0, r6
 8008840:	eb04 0903 	add.w	r9, r4, r3
 8008844:	f000 f89a 	bl	800897c <_sbrk_r>
 8008848:	4581      	cmp	r9, r0
 800884a:	d142      	bne.n	80088d2 <_malloc_r+0xea>
 800884c:	6821      	ldr	r1, [r4, #0]
 800884e:	4630      	mov	r0, r6
 8008850:	1a6d      	subs	r5, r5, r1
 8008852:	4629      	mov	r1, r5
 8008854:	f7ff ffa6 	bl	80087a4 <sbrk_aligned>
 8008858:	3001      	adds	r0, #1
 800885a:	d03a      	beq.n	80088d2 <_malloc_r+0xea>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	442b      	add	r3, r5
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	f8d8 3000 	ldr.w	r3, [r8]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	bb62      	cbnz	r2, 80088c4 <_malloc_r+0xdc>
 800886a:	f8c8 7000 	str.w	r7, [r8]
 800886e:	e00f      	b.n	8008890 <_malloc_r+0xa8>
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	1b52      	subs	r2, r2, r5
 8008874:	d420      	bmi.n	80088b8 <_malloc_r+0xd0>
 8008876:	2a0b      	cmp	r2, #11
 8008878:	d917      	bls.n	80088aa <_malloc_r+0xc2>
 800887a:	1961      	adds	r1, r4, r5
 800887c:	42a3      	cmp	r3, r4
 800887e:	6025      	str	r5, [r4, #0]
 8008880:	bf18      	it	ne
 8008882:	6059      	strne	r1, [r3, #4]
 8008884:	6863      	ldr	r3, [r4, #4]
 8008886:	bf08      	it	eq
 8008888:	f8c8 1000 	streq.w	r1, [r8]
 800888c:	5162      	str	r2, [r4, r5]
 800888e:	604b      	str	r3, [r1, #4]
 8008890:	4630      	mov	r0, r6
 8008892:	f000 f82f 	bl	80088f4 <__malloc_unlock>
 8008896:	f104 000b 	add.w	r0, r4, #11
 800889a:	1d23      	adds	r3, r4, #4
 800889c:	f020 0007 	bic.w	r0, r0, #7
 80088a0:	1ac2      	subs	r2, r0, r3
 80088a2:	bf1c      	itt	ne
 80088a4:	1a1b      	subne	r3, r3, r0
 80088a6:	50a3      	strne	r3, [r4, r2]
 80088a8:	e7af      	b.n	800880a <_malloc_r+0x22>
 80088aa:	6862      	ldr	r2, [r4, #4]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	bf0c      	ite	eq
 80088b0:	f8c8 2000 	streq.w	r2, [r8]
 80088b4:	605a      	strne	r2, [r3, #4]
 80088b6:	e7eb      	b.n	8008890 <_malloc_r+0xa8>
 80088b8:	4623      	mov	r3, r4
 80088ba:	6864      	ldr	r4, [r4, #4]
 80088bc:	e7ae      	b.n	800881c <_malloc_r+0x34>
 80088be:	463c      	mov	r4, r7
 80088c0:	687f      	ldr	r7, [r7, #4]
 80088c2:	e7b6      	b.n	8008832 <_malloc_r+0x4a>
 80088c4:	461a      	mov	r2, r3
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d1fb      	bne.n	80088c4 <_malloc_r+0xdc>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6053      	str	r3, [r2, #4]
 80088d0:	e7de      	b.n	8008890 <_malloc_r+0xa8>
 80088d2:	230c      	movs	r3, #12
 80088d4:	4630      	mov	r0, r6
 80088d6:	6033      	str	r3, [r6, #0]
 80088d8:	f000 f80c 	bl	80088f4 <__malloc_unlock>
 80088dc:	e794      	b.n	8008808 <_malloc_r+0x20>
 80088de:	6005      	str	r5, [r0, #0]
 80088e0:	e7d6      	b.n	8008890 <_malloc_r+0xa8>
 80088e2:	bf00      	nop
 80088e4:	2000839c 	.word	0x2000839c

080088e8 <__malloc_lock>:
 80088e8:	4801      	ldr	r0, [pc, #4]	@ (80088f0 <__malloc_lock+0x8>)
 80088ea:	f000 b881 	b.w	80089f0 <__retarget_lock_acquire_recursive>
 80088ee:	bf00      	nop
 80088f0:	200084dc 	.word	0x200084dc

080088f4 <__malloc_unlock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	@ (80088fc <__malloc_unlock+0x8>)
 80088f6:	f000 b87c 	b.w	80089f2 <__retarget_lock_release_recursive>
 80088fa:	bf00      	nop
 80088fc:	200084dc 	.word	0x200084dc

08008900 <realloc>:
 8008900:	4b02      	ldr	r3, [pc, #8]	@ (800890c <realloc+0xc>)
 8008902:	460a      	mov	r2, r1
 8008904:	4601      	mov	r1, r0
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	f000 b802 	b.w	8008910 <_realloc_r>
 800890c:	20000010 	.word	0x20000010

08008910 <_realloc_r>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	4680      	mov	r8, r0
 8008916:	4615      	mov	r5, r2
 8008918:	460c      	mov	r4, r1
 800891a:	b921      	cbnz	r1, 8008926 <_realloc_r+0x16>
 800891c:	4611      	mov	r1, r2
 800891e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008922:	f7ff bf61 	b.w	80087e8 <_malloc_r>
 8008926:	b92a      	cbnz	r2, 8008934 <_realloc_r+0x24>
 8008928:	f000 f872 	bl	8008a10 <_free_r>
 800892c:	2400      	movs	r4, #0
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	f000 f8b4 	bl	8008aa0 <_malloc_usable_size_r>
 8008938:	4285      	cmp	r5, r0
 800893a:	4606      	mov	r6, r0
 800893c:	d802      	bhi.n	8008944 <_realloc_r+0x34>
 800893e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008942:	d8f4      	bhi.n	800892e <_realloc_r+0x1e>
 8008944:	4629      	mov	r1, r5
 8008946:	4640      	mov	r0, r8
 8008948:	f7ff ff4e 	bl	80087e8 <_malloc_r>
 800894c:	4607      	mov	r7, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d0ec      	beq.n	800892c <_realloc_r+0x1c>
 8008952:	42b5      	cmp	r5, r6
 8008954:	462a      	mov	r2, r5
 8008956:	4621      	mov	r1, r4
 8008958:	bf28      	it	cs
 800895a:	4632      	movcs	r2, r6
 800895c:	f000 f84a 	bl	80089f4 <memcpy>
 8008960:	4621      	mov	r1, r4
 8008962:	4640      	mov	r0, r8
 8008964:	f000 f854 	bl	8008a10 <_free_r>
 8008968:	463c      	mov	r4, r7
 800896a:	e7e0      	b.n	800892e <_realloc_r+0x1e>

0800896c <memset>:
 800896c:	4603      	mov	r3, r0
 800896e:	4402      	add	r2, r0
 8008970:	4293      	cmp	r3, r2
 8008972:	d100      	bne.n	8008976 <memset+0xa>
 8008974:	4770      	bx	lr
 8008976:	f803 1b01 	strb.w	r1, [r3], #1
 800897a:	e7f9      	b.n	8008970 <memset+0x4>

0800897c <_sbrk_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	2300      	movs	r3, #0
 8008980:	4d05      	ldr	r5, [pc, #20]	@ (8008998 <_sbrk_r+0x1c>)
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7fb ffe0 	bl	800494c <_sbrk>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_sbrk_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_sbrk_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200084d8 	.word	0x200084d8

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	@ (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000010 	.word	0x20000010

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	2600      	movs	r6, #0
 80089ac:	4d0c      	ldr	r5, [pc, #48]	@ (80089e0 <__libc_init_array+0x38>)
 80089ae:	4c0d      	ldr	r4, [pc, #52]	@ (80089e4 <__libc_init_array+0x3c>)
 80089b0:	1b64      	subs	r4, r4, r5
 80089b2:	10a4      	asrs	r4, r4, #2
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	f000 f87a 	bl	8008ab0 <_init>
 80089bc:	2600      	movs	r6, #0
 80089be:	4d0a      	ldr	r5, [pc, #40]	@ (80089e8 <__libc_init_array+0x40>)
 80089c0:	4c0a      	ldr	r4, [pc, #40]	@ (80089ec <__libc_init_array+0x44>)
 80089c2:	1b64      	subs	r4, r4, r5
 80089c4:	10a4      	asrs	r4, r4, #2
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	08008e80 	.word	0x08008e80
 80089e4:	08008e80 	.word	0x08008e80
 80089e8:	08008e80 	.word	0x08008e80
 80089ec:	08008e88 	.word	0x08008e88

080089f0 <__retarget_lock_acquire_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_release_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <memcpy>:
 80089f4:	440a      	add	r2, r1
 80089f6:	4291      	cmp	r1, r2
 80089f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089fc:	d100      	bne.n	8008a00 <memcpy+0xc>
 80089fe:	4770      	bx	lr
 8008a00:	b510      	push	{r4, lr}
 8008a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a06:	4291      	cmp	r1, r2
 8008a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a0c:	d1f9      	bne.n	8008a02 <memcpy+0xe>
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <_free_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4605      	mov	r5, r0
 8008a14:	2900      	cmp	r1, #0
 8008a16:	d040      	beq.n	8008a9a <_free_r+0x8a>
 8008a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1c:	1f0c      	subs	r4, r1, #4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb8      	it	lt
 8008a22:	18e4      	addlt	r4, r4, r3
 8008a24:	f7ff ff60 	bl	80088e8 <__malloc_lock>
 8008a28:	4a1c      	ldr	r2, [pc, #112]	@ (8008a9c <_free_r+0x8c>)
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	b933      	cbnz	r3, 8008a3c <_free_r+0x2c>
 8008a2e:	6063      	str	r3, [r4, #4]
 8008a30:	6014      	str	r4, [r2, #0]
 8008a32:	4628      	mov	r0, r5
 8008a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a38:	f7ff bf5c 	b.w	80088f4 <__malloc_unlock>
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	d908      	bls.n	8008a52 <_free_r+0x42>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	1821      	adds	r1, r4, r0
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf01      	itttt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	1809      	addeq	r1, r1, r0
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	e7ed      	b.n	8008a2e <_free_r+0x1e>
 8008a52:	461a      	mov	r2, r3
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b10b      	cbz	r3, 8008a5c <_free_r+0x4c>
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d9fa      	bls.n	8008a52 <_free_r+0x42>
 8008a5c:	6811      	ldr	r1, [r2, #0]
 8008a5e:	1850      	adds	r0, r2, r1
 8008a60:	42a0      	cmp	r0, r4
 8008a62:	d10b      	bne.n	8008a7c <_free_r+0x6c>
 8008a64:	6820      	ldr	r0, [r4, #0]
 8008a66:	4401      	add	r1, r0
 8008a68:	1850      	adds	r0, r2, r1
 8008a6a:	4283      	cmp	r3, r0
 8008a6c:	6011      	str	r1, [r2, #0]
 8008a6e:	d1e0      	bne.n	8008a32 <_free_r+0x22>
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4408      	add	r0, r1
 8008a76:	6010      	str	r0, [r2, #0]
 8008a78:	6053      	str	r3, [r2, #4]
 8008a7a:	e7da      	b.n	8008a32 <_free_r+0x22>
 8008a7c:	d902      	bls.n	8008a84 <_free_r+0x74>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	e7d6      	b.n	8008a32 <_free_r+0x22>
 8008a84:	6820      	ldr	r0, [r4, #0]
 8008a86:	1821      	adds	r1, r4, r0
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf01      	itttt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	1809      	addeq	r1, r1, r0
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6054      	str	r4, [r2, #4]
 8008a98:	e7cb      	b.n	8008a32 <_free_r+0x22>
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	2000839c 	.word	0x2000839c

08008aa0 <_malloc_usable_size_r>:
 8008aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa4:	1f18      	subs	r0, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	bfbc      	itt	lt
 8008aaa:	580b      	ldrlt	r3, [r1, r0]
 8008aac:	18c0      	addlt	r0, r0, r3
 8008aae:	4770      	bx	lr

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
