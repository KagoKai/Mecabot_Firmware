
control_board_motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a8  080088a8  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088b0  080088b0  000098b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080088b4  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004490  20000070  08008920  0000a070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004500  08008920  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d6f  00000000  00000000  0000a095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0d  00000000  00000000  0001fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00022d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc1  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c059  00000000  00000000  00024a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138ab  00000000  00000000  00040a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fad2  00000000  00000000  00054345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000f3e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f8974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080084f4 	.word	0x080084f4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080084f4 	.word	0x080084f4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	@ 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_frsub>:
 8000b80:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b84:	e002      	b.n	8000b8c <__addsf3>
 8000b86:	bf00      	nop

08000b88 <__aeabi_fsub>:
 8000b88:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b8c <__addsf3>:
 8000b8c:	0042      	lsls	r2, r0, #1
 8000b8e:	bf1f      	itttt	ne
 8000b90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b94:	ea92 0f03 	teqne	r2, r3
 8000b98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba0:	d06a      	beq.n	8000c78 <__addsf3+0xec>
 8000ba2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000baa:	bfc1      	itttt	gt
 8000bac:	18d2      	addgt	r2, r2, r3
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	4048      	eorgt	r0, r1
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	2b19      	cmp	r3, #25
 8000bba:	bf88      	it	hi
 8000bbc:	4770      	bxhi	lr
 8000bbe:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4249      	negne	r1, r1
 8000bde:	ea92 0f03 	teq	r2, r3
 8000be2:	d03f      	beq.n	8000c64 <__addsf3+0xd8>
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bec:	eb10 000c 	adds.w	r0, r0, ip
 8000bf0:	f1c3 0320 	rsb	r3, r3, #32
 8000bf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfc:	d502      	bpl.n	8000c04 <__addsf3+0x78>
 8000bfe:	4249      	negs	r1, r1
 8000c00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c04:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c08:	d313      	bcc.n	8000c32 <__addsf3+0xa6>
 8000c0a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0e:	d306      	bcc.n	8000c1e <__addsf3+0x92>
 8000c10:	0840      	lsrs	r0, r0, #1
 8000c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c16:	f102 0201 	add.w	r2, r2, #1
 8000c1a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c1c:	d251      	bcs.n	8000cc2 <__addsf3+0x136>
 8000c1e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	ea40 0003 	orr.w	r0, r0, r3
 8000c30:	4770      	bx	lr
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	eb40 0000 	adc.w	r0, r0, r0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c40:	d2ed      	bcs.n	8000c1e <__addsf3+0x92>
 8000c42:	fab0 fc80 	clz	ip, r0
 8000c46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c52:	bfaa      	itet	ge
 8000c54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c58:	4252      	neglt	r2, r2
 8000c5a:	4318      	orrge	r0, r3
 8000c5c:	bfbc      	itt	lt
 8000c5e:	40d0      	lsrlt	r0, r2
 8000c60:	4318      	orrlt	r0, r3
 8000c62:	4770      	bx	lr
 8000c64:	f092 0f00 	teq	r2, #0
 8000c68:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c6c:	bf06      	itte	eq
 8000c6e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c72:	3201      	addeq	r2, #1
 8000c74:	3b01      	subne	r3, #1
 8000c76:	e7b5      	b.n	8000be4 <__addsf3+0x58>
 8000c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c86:	d021      	beq.n	8000ccc <__addsf3+0x140>
 8000c88:	ea92 0f03 	teq	r2, r3
 8000c8c:	d004      	beq.n	8000c98 <__addsf3+0x10c>
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	bf08      	it	eq
 8000c94:	4608      	moveq	r0, r1
 8000c96:	4770      	bx	lr
 8000c98:	ea90 0f01 	teq	r0, r1
 8000c9c:	bf1c      	itt	ne
 8000c9e:	2000      	movne	r0, #0
 8000ca0:	4770      	bxne	lr
 8000ca2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca6:	d104      	bne.n	8000cb2 <__addsf3+0x126>
 8000ca8:	0040      	lsls	r0, r0, #1
 8000caa:	bf28      	it	cs
 8000cac:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb6:	bf3c      	itt	cc
 8000cb8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bxcc	lr
 8000cbe:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cca:	4770      	bx	lr
 8000ccc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd0:	bf16      	itet	ne
 8000cd2:	4608      	movne	r0, r1
 8000cd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd8:	4601      	movne	r1, r0
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	bf06      	itte	eq
 8000cde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce2:	ea90 0f01 	teqeq	r0, r1
 8000ce6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cea:	4770      	bx	lr

08000cec <__aeabi_ui2f>:
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e004      	b.n	8000cfc <__aeabi_i2f+0x8>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_i2f>:
 8000cf4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf8:	bf48      	it	mi
 8000cfa:	4240      	negmi	r0, r0
 8000cfc:	ea5f 0c00 	movs.w	ip, r0
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d08:	4601      	mov	r1, r0
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	e01c      	b.n	8000d4a <__aeabi_l2f+0x2a>

08000d10 <__aeabi_ul2f>:
 8000d10:	ea50 0201 	orrs.w	r2, r0, r1
 8000d14:	bf08      	it	eq
 8000d16:	4770      	bxeq	lr
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e00a      	b.n	8000d34 <__aeabi_l2f+0x14>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_l2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__aeabi_l2f+0x14>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	ea5f 0c01 	movs.w	ip, r1
 8000d38:	bf02      	ittt	eq
 8000d3a:	4684      	moveq	ip, r0
 8000d3c:	4601      	moveq	r1, r0
 8000d3e:	2000      	moveq	r0, #0
 8000d40:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d44:	bf08      	it	eq
 8000d46:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4e:	fabc f28c 	clz	r2, ip
 8000d52:	3a08      	subs	r2, #8
 8000d54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d58:	db10      	blt.n	8000d7c <__aeabi_l2f+0x5c>
 8000d5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5e:	4463      	add	r3, ip
 8000d60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	f020 0001 	biceq.w	r0, r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	f102 0220 	add.w	r2, r2, #32
 8000d80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_fmul>:
 8000d9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000da0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da4:	bf1e      	ittt	ne
 8000da6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000daa:	ea92 0f0c 	teqne	r2, ip
 8000dae:	ea93 0f0c 	teqne	r3, ip
 8000db2:	d06f      	beq.n	8000e94 <__aeabi_fmul+0xf8>
 8000db4:	441a      	add	r2, r3
 8000db6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dba:	0240      	lsls	r0, r0, #9
 8000dbc:	bf18      	it	ne
 8000dbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dc2:	d01e      	beq.n	8000e02 <__aeabi_fmul+0x66>
 8000dc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ddc:	bf3e      	ittt	cc
 8000dde:	0049      	lslcc	r1, r1, #1
 8000de0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de4:	005b      	lslcc	r3, r3, #1
 8000de6:	ea40 0001 	orr.w	r0, r0, r1
 8000dea:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dee:	2afd      	cmp	r2, #253	@ 0xfd
 8000df0:	d81d      	bhi.n	8000e2e <__aeabi_fmul+0x92>
 8000df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dfa:	bf08      	it	eq
 8000dfc:	f020 0001 	biceq.w	r0, r0, #1
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e0a:	bf08      	it	eq
 8000e0c:	0249      	lsleq	r1, r1, #9
 8000e0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e16:	3a7f      	subs	r2, #127	@ 0x7f
 8000e18:	bfc2      	ittt	gt
 8000e1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e22:	4770      	bxgt	lr
 8000e24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	dc5d      	bgt.n	8000eec <__aeabi_fmul+0x150>
 8000e30:	f112 0f19 	cmn.w	r2, #25
 8000e34:	bfdc      	itt	le
 8000e36:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e3a:	4770      	bxle	lr
 8000e3c:	f1c2 0200 	rsb	r2, r2, #0
 8000e40:	0041      	lsls	r1, r0, #1
 8000e42:	fa21 f102 	lsr.w	r1, r1, r2
 8000e46:	f1c2 0220 	rsb	r2, r2, #32
 8000e4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e52:	f140 0000 	adc.w	r0, r0, #0
 8000e56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e5a:	bf08      	it	eq
 8000e5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e60:	4770      	bx	lr
 8000e62:	f092 0f00 	teq	r2, #0
 8000e66:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0040      	lsleq	r0, r0, #1
 8000e6e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e72:	3a01      	subeq	r2, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xce>
 8000e76:	ea40 000c 	orr.w	r0, r0, ip
 8000e7a:	f093 0f00 	teq	r3, #0
 8000e7e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0049      	lsleq	r1, r1, #1
 8000e86:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e8a:	3b01      	subeq	r3, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xe6>
 8000e8e:	ea41 010c 	orr.w	r1, r1, ip
 8000e92:	e78f      	b.n	8000db4 <__aeabi_fmul+0x18>
 8000e94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	bf18      	it	ne
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d00a      	beq.n	8000eba <__aeabi_fmul+0x11e>
 8000ea4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea8:	bf18      	it	ne
 8000eaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eae:	d1d8      	bne.n	8000e62 <__aeabi_fmul+0xc6>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	bf17      	itett	ne
 8000ec0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec4:	4608      	moveq	r0, r1
 8000ec6:	f091 0f00 	teqne	r1, #0
 8000eca:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ece:	d014      	beq.n	8000efa <__aeabi_fmul+0x15e>
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d101      	bne.n	8000eda <__aeabi_fmul+0x13e>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	d10f      	bne.n	8000efa <__aeabi_fmul+0x15e>
 8000eda:	ea93 0f0c 	teq	r3, ip
 8000ede:	d103      	bne.n	8000ee8 <__aeabi_fmul+0x14c>
 8000ee0:	024b      	lsls	r3, r1, #9
 8000ee2:	bf18      	it	ne
 8000ee4:	4608      	movne	r0, r1
 8000ee6:	d108      	bne.n	8000efa <__aeabi_fmul+0x15e>
 8000ee8:	ea80 0001 	eor.w	r0, r0, r1
 8000eec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ef0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef8:	4770      	bx	lr
 8000efa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_fdiv>:
 8000f04:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f0c:	bf1e      	ittt	ne
 8000f0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f12:	ea92 0f0c 	teqne	r2, ip
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d069      	beq.n	8000ff0 <__aeabi_fdiv+0xec>
 8000f1c:	eba2 0203 	sub.w	r2, r2, r3
 8000f20:	ea80 0c01 	eor.w	ip, r0, r1
 8000f24:	0249      	lsls	r1, r1, #9
 8000f26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f2a:	d037      	beq.n	8000f9c <__aeabi_fdiv+0x98>
 8000f2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f38:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	bf38      	it	cc
 8000f40:	005b      	lslcc	r3, r3, #1
 8000f42:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f46:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	bf24      	itt	cs
 8000f4e:	1a5b      	subcs	r3, r3, r1
 8000f50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f66:	bf24      	itt	cs
 8000f68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	bf18      	it	ne
 8000f82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f86:	d1e0      	bne.n	8000f4a <__aeabi_fdiv+0x46>
 8000f88:	2afd      	cmp	r2, #253	@ 0xfd
 8000f8a:	f63f af50 	bhi.w	8000e2e <__aeabi_fmul+0x92>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f94:	bf08      	it	eq
 8000f96:	f020 0001 	biceq.w	r0, r0, #1
 8000f9a:	4770      	bx	lr
 8000f9c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa4:	327f      	adds	r2, #127	@ 0x7f
 8000fa6:	bfc2      	ittt	gt
 8000fa8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb0:	4770      	bxgt	lr
 8000fb2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	3a01      	subs	r2, #1
 8000fbc:	e737      	b.n	8000e2e <__aeabi_fmul+0x92>
 8000fbe:	f092 0f00 	teq	r2, #0
 8000fc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0040      	lsleq	r0, r0, #1
 8000fca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fce:	3a01      	subeq	r2, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xc2>
 8000fd2:	ea40 000c 	orr.w	r0, r0, ip
 8000fd6:	f093 0f00 	teq	r3, #0
 8000fda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0049      	lsleq	r1, r1, #1
 8000fe2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe6:	3b01      	subeq	r3, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xda>
 8000fea:	ea41 010c 	orr.w	r1, r1, ip
 8000fee:	e795      	b.n	8000f1c <__aeabi_fdiv+0x18>
 8000ff0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff4:	ea92 0f0c 	teq	r2, ip
 8000ff8:	d108      	bne.n	800100c <__aeabi_fdiv+0x108>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	f47f af7d 	bne.w	8000efa <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	f47f af70 	bne.w	8000ee8 <__aeabi_fmul+0x14c>
 8001008:	4608      	mov	r0, r1
 800100a:	e776      	b.n	8000efa <__aeabi_fmul+0x15e>
 800100c:	ea93 0f0c 	teq	r3, ip
 8001010:	d104      	bne.n	800101c <__aeabi_fdiv+0x118>
 8001012:	024b      	lsls	r3, r1, #9
 8001014:	f43f af4c 	beq.w	8000eb0 <__aeabi_fmul+0x114>
 8001018:	4608      	mov	r0, r1
 800101a:	e76e      	b.n	8000efa <__aeabi_fmul+0x15e>
 800101c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001020:	bf18      	it	ne
 8001022:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001026:	d1ca      	bne.n	8000fbe <__aeabi_fdiv+0xba>
 8001028:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800102c:	f47f af5c 	bne.w	8000ee8 <__aeabi_fmul+0x14c>
 8001030:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001034:	f47f af3c 	bne.w	8000eb0 <__aeabi_fmul+0x114>
 8001038:	e75f      	b.n	8000efa <__aeabi_fmul+0x15e>
 800103a:	bf00      	nop

0800103c <__aeabi_f2uiz>:
 800103c:	0042      	lsls	r2, r0, #1
 800103e:	d20e      	bcs.n	800105e <__aeabi_f2uiz+0x22>
 8001040:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001044:	d30b      	bcc.n	800105e <__aeabi_f2uiz+0x22>
 8001046:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800104a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104e:	d409      	bmi.n	8001064 <__aeabi_f2uiz+0x28>
 8001050:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001054:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	4770      	bx	lr
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4770      	bx	lr
 8001064:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001068:	d101      	bne.n	800106e <__aeabi_f2uiz+0x32>
 800106a:	0242      	lsls	r2, r0, #9
 800106c:	d102      	bne.n	8001074 <__aeabi_f2uiz+0x38>
 800106e:	f04f 30ff 	mov.w	r0, #4294967295
 8001072:	4770      	bx	lr
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, float *b_coefficient, float *a_coefficient)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e015      	b.n	80010ba <FO_IIR_Init+0x3e>
    {
        instance->b[i] = b_coefficient[i];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	6819      	ldr	r1, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	3202      	adds	r2, #2
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	dde6      	ble.n	800108e <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
}
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 80010da:	b5b0      	push	{r4, r5, r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff fe52 	bl	8000d9c <__aeabi_fmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461c      	mov	r4, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6839      	ldr	r1, [r7, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe4a 	bl	8000d9c <__aeabi_fmul>
 8001108:	4603      	mov	r3, r0
 800110a:	461d      	mov	r5, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	4619      	mov	r1, r3
 8001116:	4610      	mov	r0, r2
 8001118:	f7ff fe40 	bl	8000d9c <__aeabi_fmul>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	4628      	mov	r0, r5
 8001122:	f7ff fd33 	bl	8000b8c <__addsf3>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fd2e 	bl	8000b8c <__addsf3>
 8001130:	4603      	mov	r3, r0
 8001132:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	615a      	str	r2, [r3, #20]

    return output;
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800114c <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	463c      	mov	r4, r7
 8001154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8001158:	2110      	movs	r1, #16
 800115a:	2001      	movs	r0, #1
 800115c:	f007 f828 	bl	80081b0 <calloc>
 8001160:	4603      	mov	r3, r0
 8001162:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2200      	movs	r2, #0
 800116e:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 800117c:	893a      	ldrh	r2, [r7, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <Motor_Init+0x58>)
 8001186:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f000 f832 	bl	80011f4 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <Motor_Init+0x58>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f807 	bl	80011a8 <Motor_Set_PWM_Frequency>

    return object;
 800119a:	697b      	ldr	r3, [r7, #20]
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	2000008c 	.word	0x2000008c

080011a8 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <Motor_Set_PWM_Frequency+0x40>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <Motor_Set_PWM_Frequency+0x44>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <Motor_Set_PWM_Frequency+0x40>)
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <Motor_Set_PWM_Frequency+0x48>)
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <Motor_Set_PWM_Frequency+0x44>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	20000090 	.word	0x20000090
 80011f0:	01e84800 	.word	0x01e84800

080011f4 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f993 3000 	ldrsb.w	r3, [r3]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00b      	beq.n	8001222 <Motor_Set_PWM_Duty+0x2e>
                      (motor->direction == DIRECTION_BACKWARD) ? (255-duty) : 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d103      	bne.n	800121e <Motor_Set_PWM_Duty+0x2a>
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	43db      	mvns	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	e002      	b.n	8001224 <Motor_Set_PWM_Duty+0x30>
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <Motor_Set_PWM_Duty+0x30>
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	7053      	strb	r3, [r2, #1]

    float duty_percentage = duty / 255.0f;
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fd62 	bl	8000cf4 <__aeabi_i2f>
 8001230:	4603      	mov	r3, r0
 8001232:	491e      	ldr	r1, [pc, #120]	@ (80012ac <Motor_Set_PWM_Duty+0xb8>)
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe65 	bl	8000f04 <__aeabi_fdiv>
 800123a:	4603      	mov	r3, r0
 800123c:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <Motor_Set_PWM_Duty+0xbc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff fd50 	bl	8000cec <__aeabi_ui2f>
 800124c:	4603      	mov	r3, r0
 800124e:	6979      	ldr	r1, [r7, #20]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fda3 	bl	8000d9c <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff feef 	bl	800103c <__aeabi_f2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <Motor_Set_PWM_Duty+0x80>
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <Motor_Set_PWM_Duty+0xbc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
 8001272:	e015      	b.n	80012a0 <Motor_Set_PWM_Duty+0xac>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d104      	bne.n	8001286 <Motor_Set_PWM_Duty+0x92>
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <Motor_Set_PWM_Duty+0xbc>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6393      	str	r3, [r2, #56]	@ 0x38
 8001284:	e00c      	b.n	80012a0 <Motor_Set_PWM_Duty+0xac>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d104      	bne.n	8001298 <Motor_Set_PWM_Duty+0xa4>
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Motor_Set_PWM_Duty+0xbc>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001296:	e003      	b.n	80012a0 <Motor_Set_PWM_Duty+0xac>
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <Motor_Set_PWM_Duty+0xbc>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	437f0000 	.word	0x437f0000
 80012b0:	20000090 	.word	0x20000090

080012b4 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f993 3000 	ldrsb.w	r3, [r3]
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f815 	bl	80012f4 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <Motor_Start+0x3c>)
 80012d2:	f004 fd43 	bl	8005d5c <HAL_TIM_PWM_Start>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <Motor_Start+0x32>
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	e000      	b.n	80012e8 <Motor_Start+0x34>

    return STATUS_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000090 	.word	0x20000090

080012f4 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	701a      	strb	r2, [r3, #0]
    if (direction == DIRECTION_FORWARD)
 8001306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <Motor_SetDirection+0x2a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6898      	ldr	r0, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	899b      	ldrh	r3, [r3, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	f004 f84f 	bl	80053bc <HAL_GPIO_WritePin>
    if (direction == DIRECTION_BACKWARD)
 800131e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	d107      	bne.n	8001338 <Motor_SetDirection+0x44>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6898      	ldr	r0, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	899b      	ldrh	r3, [r3, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f004 f842 	bl	80053bc <HAL_GPIO_WritePin>

    return STATUS_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	463b      	mov	r3, r7
 800134a:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 800134e:	210c      	movs	r1, #12
 8001350:	2001      	movs	r0, #1
 8001352:	f006 ff2d 	bl	80081b0 <calloc>
 8001356:	4603      	mov	r3, r0
 8001358:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	609a      	str	r2, [r3, #8]

    return object;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4619      	mov	r1, r3
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <Encoder_Start+0x30>)
 8001388:	f004 fdfa 	bl	8005f80 <HAL_TIM_IC_Start_IT>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <Encoder_Start+0x24>
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e000      	b.n	800139e <Encoder_Start+0x26>

    return STATUS_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000d8 	.word	0x200000d8

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f003 f87c 	bl	80044ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f80f 	bl	80013d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f000 f9b2 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 80013bc:	f000 f98a 	bl	80016d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013c0:	f000 f95e 	bl	8001680 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80013c4:	f000 f848 	bl	8001458 <MX_TIM1_Init>
  MX_TIM8_Init();
 80013c8:	f000 f8e6 	bl	8001598 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80013cc:	f001 fdf4 	bl	8002fb8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80013d0:	f001 fe60 	bl	8003094 <loop>
 80013d4:	e7fc      	b.n	80013d0 <main+0x24>

080013d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b090      	sub	sp, #64	@ 0x40
 80013da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2228      	movs	r2, #40	@ 0x28
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 ffe3 	bl	80083b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2310      	movs	r3, #16
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800140c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	4618      	mov	r0, r3
 8001418:	f003 ffe8 	bl	80053ec <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001422:	f000 f9e3 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fa56 	bl	80058f0 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800144a:	f000 f9cf 	bl	80017ec <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3740      	adds	r7, #64	@ 0x40
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	@ 0x58
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2220      	movs	r2, #32
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f006 ff8d 	bl	80083b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <MX_TIM1_Init+0x138>)
 8001498:	4a3e      	ldr	r2, [pc, #248]	@ (8001594 <MX_TIM1_Init+0x13c>)
 800149a:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 32-1;
 800149c:	4b3c      	ldr	r3, [pc, #240]	@ (8001590 <MX_TIM1_Init+0x138>)
 800149e:	221f      	movs	r2, #31
 80014a0:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 1000-1;
 80014a8:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ae:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 80014b6:	4b36      	ldr	r3, [pc, #216]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 80014c2:	4833      	ldr	r0, [pc, #204]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014c4:	f004 fba2 	bl	8005c0c <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ce:	f000 f98d 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014dc:	4619      	mov	r1, r3
 80014de:	482c      	ldr	r0, [pc, #176]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014e0:	f005 f8ce 	bl	8006680 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014ea:	f000 f97f 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 80014ee:	4828      	ldr	r0, [pc, #160]	@ (8001590 <MX_TIM1_Init+0x138>)
 80014f0:	f004 fbdb 	bl	8005caa <HAL_TIM_PWM_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014fa:	f000 f977 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8001506:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800150a:	4619      	mov	r1, r3
 800150c:	4820      	ldr	r0, [pc, #128]	@ (8001590 <MX_TIM1_Init+0x138>)
 800150e:	f005 fd9d 	bl	800704c <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001518:	f000 f968 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151c:	2360      	movs	r3, #96	@ 0x60
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	4813      	ldr	r0, [pc, #76]	@ (8001590 <MX_TIM1_Init+0x138>)
 8001542:	f004 ffdb 	bl	80064fc <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800154c:	f000 f94e 	bl	80017ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001564:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <MX_TIM1_Init+0x138>)
 8001574:	f005 fdd6 	bl	8007124 <HAL_TIMEx_ConfigBreakDeadTime>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800157e:	f000 f935 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8001582:	4803      	ldr	r0, [pc, #12]	@ (8001590 <MX_TIM1_Init+0x138>)
 8001584:	f002 fdc4 	bl	8004110 <HAL_TIM_MspPostInit>

}
 8001588:	bf00      	nop
 800158a:	3758      	adds	r7, #88	@ 0x58
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000090 	.word	0x20000090
 8001594:	40012c00 	.word	0x40012c00

08001598 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 80015c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015c4:	4a2d      	ldr	r2, [pc, #180]	@ (800167c <MX_TIM8_Init+0xe4>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 80015d4:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015da:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 80015ee:	4822      	ldr	r0, [pc, #136]	@ (8001678 <MX_TIM8_Init+0xe0>)
 80015f0:	f004 fb0c 	bl	8005c0c <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80015fa:	f000 f8f7 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4619      	mov	r1, r3
 800160a:	481b      	ldr	r0, [pc, #108]	@ (8001678 <MX_TIM8_Init+0xe0>)
 800160c:	f005 f838 	bl	8006680 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001616:	f000 f8e9 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 800161a:	4817      	ldr	r0, [pc, #92]	@ (8001678 <MX_TIM8_Init+0xe0>)
 800161c:	f004 fc58 	bl	8005ed0 <HAL_TIM_IC_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001626:	f000 f8e1 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	480f      	ldr	r0, [pc, #60]	@ (8001678 <MX_TIM8_Init+0xe0>)
 800163a:	f005 fd07 	bl	800704c <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001644:	f000 f8d2 	bl	80017ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800164c:	2301      	movs	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001654:	230f      	movs	r3, #15
 8001656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM8_Init+0xe0>)
 8001660:	f004 feb0 	bl	80063c4 <HAL_TIM_IC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800166a:	f000 f8bf 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000d8 	.word	0x200000d8
 800167c:	40013400 	.word	0x40013400

08001680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_USART1_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 800168c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001690:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016b8:	f005 fd97 	bl	80071ea <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 f893 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000120 	.word	0x20000120
 80016d0:	40013800 	.word	0x40013800

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_DMA_Init+0x48>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <MX_DMA_Init+0x48>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_DMA_Init+0x48>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	200e      	movs	r0, #14
 80016f8:	f003 f811 	bl	800471e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016fc:	200e      	movs	r0, #14
 80016fe:	f003 f82a 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200f      	movs	r0, #15
 8001708:	f003 f809 	bl	800471e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800170c:	200f      	movs	r0, #15
 800170e:	f003 f822 	bl	8004756 <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a24      	ldr	r2, [pc, #144]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a1e      	ldr	r2, [pc, #120]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f242 0108 	movw	r1, #8200	@ 0x2008
 800179a:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_GPIO_Init+0xc8>)
 800179c:	f003 fe0e 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <MX_GPIO_Init+0xc8>)
 80017ba:	f003 fc6b 	bl	8005094 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80017be:	2308      	movs	r3, #8
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <MX_GPIO_Init+0xc8>)
 80017d6:	f003 fc5d 	bl	8005094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40011000 	.word	0x40011000

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <_ZN3ros3MsgC1Ev+0x1c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08008864 	.word	0x08008864

08001838 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
      data()
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffe8 	bl	8001818 <_ZN3ros3MsgC1Ev>
 8001848:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffd0 	bl	80017f8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0800884c 	.word	0x0800884c

08001868 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0a19      	lsrs	r1, r3, #8
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4413      	add	r3, r2
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c19      	lsrs	r1, r3, #16
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3302      	adds	r3, #2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0e19      	lsrs	r1, r3, #24
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3303      	adds	r3, #3
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3304      	adds	r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a19      	lsrs	r1, r3, #8
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	0c19      	lsrs	r1, r3, #16
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3302      	adds	r3, #2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0e19      	lsrs	r1, r3, #24
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3303      	adds	r3, #3
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	b2ca      	uxtb	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3304      	adds	r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
      return offset;
 800190a:	68fb      	ldr	r3, [r7, #12]
    }
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3302      	adds	r3, #2
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	440b      	add	r3, r1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3303      	adds	r3, #3
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	440b      	add	r3, r1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3304      	adds	r3, #4
 8001978:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	440b      	add	r3, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3302      	adds	r3, #2
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	440b      	add	r3, r1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3303      	adds	r3, #3
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	440b      	add	r3, r1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3304      	adds	r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
     return offset;
 80019d0:	68fb      	ldr	r3, [r7, #12]
    }
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4b02      	ldr	r3, [pc, #8]	@ (80019f0 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	0800850c 	.word	0x0800850c

080019f4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	0800851c 	.word	0x0800851c

08001a0c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fefe 	bl	8001818 <_ZN3ros3MsgC1Ev>
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a2c:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a32:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a38:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
    {
    }
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08008834 	.word	0x08008834
 8001a50:	08008540 	.word	0x08008540

08001a54 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	8899      	ldrh	r1, [r3, #4]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b2ca      	uxtb	r2, r1
 8001a6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	b299      	uxth	r1, r3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	3302      	adds	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fbc8 	bl	8000224 <strlen>
 8001a94:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fbee 	bl	8003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	18d0      	adds	r0, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f006 fcbe 	bl	8008438 <memcpy>
      offset += length_topic_name;
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fbab 	bl	8000224 <strlen>
 8001ace:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	6979      	ldr	r1, [r7, #20]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fbd1 	bl	8003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	18d0      	adds	r0, r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f006 fca1 	bl	8008438 <memcpy>
      offset += length_message_type;
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4413      	add	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb8e 	bl	8000224 <strlen>
 8001b08:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fbb4 	bl	8003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	18d0      	adds	r0, r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f006 fc84 	bl	8008438 <memcpy>
      offset += length_md5sum;
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0a19      	lsrs	r1, r3, #8
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	0c19      	lsrs	r1, r3, #16
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3302      	adds	r3, #2
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0e19      	lsrs	r1, r3, #24
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3303      	adds	r3, #3
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b80:	69fb      	ldr	r3, [r7, #28]
    }
 8001b82:	4618      	mov	r0, r3
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08a      	sub	sp, #40	@ 0x28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	889b      	ldrh	r3, [r3, #4]
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	441a      	add	r2, r3
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fb70 	bl	80032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	3304      	adds	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be6:	e00b      	b.n	8001c00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	441a      	add	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4413      	add	r3, r2
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3ed      	bcc.n	8001be8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4413      	add	r3, r2
 8001c12:	3b01      	subs	r3, #1
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	441a      	add	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	441a      	add	r2, r3
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fb3d 	bl	80032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3304      	adds	r3, #4
 8001c46:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	e00b      	b.n	8001c66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	441a      	add	r2, r3
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	3301      	adds	r3, #1
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3ed      	bcc.n	8001c4e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	441a      	add	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	441a      	add	r2, r3
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fb0a 	bl	80032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	3304      	adds	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e00b      	b.n	8001ccc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	441a      	add	r2, r3
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	440b      	add	r3, r1
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3ed      	bcc.n	8001cb4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	441a      	add	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	6839      	ldr	r1, [r7, #0]
 8001d06:	440a      	add	r2, r1
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3301      	adds	r3, #1
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	440b      	add	r3, r1
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	3302      	adds	r3, #2
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	440b      	add	r3, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3303      	adds	r3, #3
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	440b      	add	r3, r1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001d50:	69bb      	ldr	r3, [r7, #24]
    }
 8001d52:	4618      	mov	r0, r3
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4b02      	ldr	r3, [pc, #8]	@ (8001d70 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	08008544 	.word	0x08008544

08001d74 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	08008560 	.word	0x08008560

08001d8c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd3e 	bl	8001818 <_ZN3ros3MsgC1Ev>
 8001d9c:	4a06      	ldr	r2, [pc, #24]	@ (8001db8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
      level(0),
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	711a      	strb	r2, [r3, #4]
      msg("")
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001dac:	609a      	str	r2, [r3, #8]
    {
    }
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800881c 	.word	0x0800881c
 8001dbc:	08008540 	.word	0x08008540

08001dc0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	7912      	ldrb	r2, [r2, #4]
 8001dd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fa1d 	bl	8000224 <strlen>
 8001dea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 fa43 	bl	8003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	18d0      	adds	r0, r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f006 fb13 	bl	8008438 <memcpy>
      offset += length_msg;
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	3301      	adds	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	441a      	add	r2, r3
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fa33 	bl	80032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e00b      	b.n	8001e7a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	441a      	add	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	440b      	add	r3, r1
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3ed      	bcc.n	8001e62 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
     return offset;
 8001eaa:	693b      	ldr	r3, [r7, #16]
    }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4b02      	ldr	r3, [pc, #8]	@ (8001ec8 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	08008584 	.word	0x08008584

08001ecc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4b02      	ldr	r3, [pc, #8]	@ (8001ee0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	08008598 	.word	0x08008598

08001ee4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc92 	bl	8001818 <_ZN3ros3MsgC1Ev>
 8001ef4:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	08008804 	.word	0x08008804

08001f40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0a19      	lsrs	r1, r3, #8
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	3301      	adds	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0c19      	lsrs	r1, r3, #16
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	3302      	adds	r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0e19      	lsrs	r1, r3, #24
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	3303      	adds	r3, #3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	3304      	adds	r3, #4
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	e02a      	b.n	8001ff4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2ca      	uxtb	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	0a19      	lsrs	r1, r3, #8
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2ca      	uxtb	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	0c19      	lsrs	r1, r3, #16
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	3302      	adds	r3, #2
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	0e19      	lsrs	r1, r3, #24
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	3303      	adds	r3, #3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	3304      	adds	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	6a3a      	ldr	r2, [r7, #32]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3cf      	bcc.n	8001f9e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	0a19      	lsrs	r1, r3, #8
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4413      	add	r3, r2
 800201a:	b2ca      	uxtb	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	0c19      	lsrs	r1, r3, #16
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	3302      	adds	r3, #2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4413      	add	r3, r2
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	0e19      	lsrs	r1, r3, #24
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	3303      	adds	r3, #3
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4413      	add	r3, r2
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	3304      	adds	r3, #4
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e02a      	b.n	80020a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	0a19      	lsrs	r1, r3, #8
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	3301      	adds	r3, #1
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0c19      	lsrs	r1, r3, #16
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	3302      	adds	r3, #2
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0e19      	lsrs	r1, r3, #24
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	3303      	adds	r3, #3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4413      	add	r3, r2
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3304      	adds	r3, #4
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3cf      	bcc.n	800204e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69d9      	ldr	r1, [r3, #28]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	0a19      	lsrs	r1, r3, #8
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	0c19      	lsrs	r1, r3, #16
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	3302      	adds	r3, #2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	0e19      	lsrs	r1, r3, #24
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	3303      	adds	r3, #3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	3304      	adds	r3, #4
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e027      	b.n	800214e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f88a 	bl	8000224 <strlen>
 8002110:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f8b0 	bl	8003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	3304      	adds	r3, #4
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	18d0      	adds	r0, r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4619      	mov	r1, r3
 800213c:	f006 f97c 	bl	8008438 <memcpy>
      offset += length_stringsi;
 8002140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4413      	add	r3, r2
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	3301      	adds	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3d2      	bcc.n	80020fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800215a:	4618      	mov	r0, r3
 800215c:	3728      	adds	r7, #40	@ 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002162:	b580      	push	{r7, lr}
 8002164:	b08e      	sub	sp, #56	@ 0x38
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800217a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217c:	3301      	adds	r3, #1
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	4313      	orrs	r3, r2
 800218a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800218c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218e:	3302      	adds	r3, #2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	4313      	orrs	r3, r2
 800219c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	3303      	adds	r3, #3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	6a3a      	ldr	r2, [r7, #32]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	3304      	adds	r3, #4
 80021b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	6a3a      	ldr	r2, [r7, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d90a      	bls.n	80021d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f006 f8ba 	bl	8008344 <realloc>
 80021d0:	4602      	mov	r2, r0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e0:	e035      	b.n	800224e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	440a      	add	r2, r1
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f8:	3301      	adds	r3, #1
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440b      	add	r3, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220a:	3302      	adds	r3, #2
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	440b      	add	r3, r1
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800221c:	3303      	adds	r3, #3
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	440b      	add	r3, r1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002232:	3304      	adds	r3, #4
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224a:	3301      	adds	r3, #1
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002254:	429a      	cmp	r2, r3
 8002256:	d3c4      	bcc.n	80021e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002264:	3301      	adds	r3, #1
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	4313      	orrs	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002276:	3302      	adds	r3, #2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	4313      	orrs	r3, r2
 8002284:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002288:	3303      	adds	r3, #3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	3304      	adds	r3, #4
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d90a      	bls.n	80022be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f006 f846 	bl	8008344 <realloc>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c8:	e035      	b.n	8002336 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	440a      	add	r2, r1
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e0:	3301      	adds	r3, #1
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	440b      	add	r3, r1
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f2:	3302      	adds	r3, #2
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	440b      	add	r3, r1
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002304:	3303      	adds	r3, #3
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	440b      	add	r3, r1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231a:	3304      	adds	r3, #4
 800231c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	3214      	adds	r2, #20
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	3301      	adds	r3, #1
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233c:	429a      	cmp	r2, r3
 800233e:	d3c4      	bcc.n	80022ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800234a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234c:	3301      	adds	r3, #1
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800235c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235e:	3302      	adds	r3, #2
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	3303      	adds	r3, #3
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	3304      	adds	r3, #4
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	429a      	cmp	r2, r3
 800238e:	d90a      	bls.n	80023a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f005 ffd2 	bl	8008344 <realloc>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023b0:	e03e      	b.n	8002430 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80023b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	441a      	add	r2, r3
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 ff7c 	bl	80032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c6:	3304      	adds	r3, #4
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ce:	e00b      	b.n	80023e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	441a      	add	r2, r3
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	3b01      	subs	r3, #1
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	440b      	add	r3, r1
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	3301      	adds	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ed      	bcc.n	80023d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80023f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4413      	add	r3, r2
 80023fa:	3b01      	subs	r3, #1
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002406:	3b01      	subs	r3, #1
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	441a      	add	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	3220      	adds	r2, #32
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	3301      	adds	r3, #1
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002436:	429a      	cmp	r2, r3
 8002438:	d3bb      	bcc.n	80023b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800243c:	4618      	mov	r0, r3
 800243e:	3738      	adds	r7, #56	@ 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	08008728 	.word	0x08008728

0800245c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4b02      	ldr	r3, [pc, #8]	@ (8002470 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	080085bc 	.word	0x080085bc

08002474 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	611a      	str	r2, [r3, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d8      	ldr	r0, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6891      	ldr	r1, [r2, #8]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4798      	blx	r3
 80024be:	4603      	mov	r3, r0
  };
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
  }
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024f4:	2201      	movs	r2, #1
 80024f6:	711a      	strb	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024fe:	2200      	movs	r2, #0
 8002500:	80da      	strh	r2, [r3, #6]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002508:	2200      	movs	r2, #0
 800250a:	811a      	strh	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002512:	2200      	movs	r2, #0
 8002514:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <_ZN10SerialComm4initEv>:

    void init(void)
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f90e 	bl	800274c <_ZN10SerialComm10reset_rbufEv>
    }
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8002550:	b29b      	uxth	r3, r3
 8002552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002556:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800255e:	895b      	ldrh	r3, [r3, #10]
 8002560:	89fa      	ldrh	r2, [r7, #14]
 8002562:	429a      	cmp	r2, r3
 8002564:	d102      	bne.n	800256c <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e01d      	b.n	80025a8 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002572:	895b      	ldrh	r3, [r3, #10]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	b291      	uxth	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800257e:	8151      	strh	r1, [r2, #10]
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258a:	3304      	adds	r3, #4
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002596:	895b      	ldrh	r3, [r3, #10]
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025a4:	815a      	strh	r2, [r3, #10]

        return c;
 80025a6:	68bb      	ldr	r3, [r7, #8]
    }
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c4:	dc46      	bgt.n	8002654 <_ZN10SerialComm5writeEPKhi+0xa2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	dd43      	ble.n	8002654 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80025cc:	bf00      	nop
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f6      	bne.n	80025ce <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025e6:	88db      	ldrh	r3, [r3, #6]
 80025e8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	bfa8      	it	ge
 80025f2:	4613      	movge	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025fc:	88db      	ldrh	r3, [r3, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f005 ff14 	bl	8008438 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002616:	88da      	ldrh	r2, [r3, #6]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	b29b      	uxth	r3, r3
 800261c:	4413      	add	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800262c:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	429a      	cmp	r2, r3
 8002634:	d00a      	beq.n	800264c <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1d18      	adds	r0, r3, #4
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	18d1      	adds	r1, r2, r3
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	461a      	mov	r2, r3
 8002648:	f005 fef6 	bl	8008438 <memcpy>
        }

        // TODO: Start transfering
        flush();
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f805 	bl	800265c <_ZN10SerialComm5flushEv>
 8002652:	e000      	b.n	8002656 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8002654:	bf00      	nop
    }
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002676:	88da      	ldrh	r2, [r3, #6]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800267e:	891b      	ldrh	r3, [r3, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d04c      	beq.n	800271e <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800268e:	891a      	ldrh	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002696:	88db      	ldrh	r3, [r3, #6]
 8002698:	429a      	cmp	r2, r3
 800269a:	d218      	bcs.n	80026ce <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026a2:	88da      	ldrh	r2, [r3, #6]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026aa:	891b      	ldrh	r3, [r3, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026ba:	891b      	ldrh	r3, [r3, #8]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	89fa      	ldrh	r2, [r7, #14]
 80026c6:	4619      	mov	r1, r3
 80026c8:	f004 fde0 	bl	800728c <HAL_UART_Transmit_DMA>
 80026cc:	e01f      	b.n	800270e <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026d4:	891b      	ldrh	r3, [r3, #8]
 80026d6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80026da:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026e6:	891b      	ldrh	r3, [r3, #8]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	3304      	adds	r3, #4
 80026f0:	89fa      	ldrh	r2, [r7, #14]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f004 fdca 	bl	800728c <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1d19      	adds	r1, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002706:	88db      	ldrh	r3, [r3, #6]
 8002708:	461a      	mov	r2, r3
 800270a:	f004 fdbf 	bl	800728c <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002714:	88da      	ldrh	r2, [r3, #6]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800271c:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002724:	2200      	movs	r2, #0
 8002726:	711a      	strb	r2, [r3, #4]
        }
    }
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800273e:	2201      	movs	r2, #1
 8002740:	711a      	strb	r2, [r3, #4]
    }
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800275e:	3304      	adds	r3, #4
 8002760:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002764:	4619      	mov	r1, r3
 8002766:	f004 fe01 	bl	800736c <HAL_UART_Receive_DMA>
    }
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002780:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200001f0 	.word	0x200001f0

08002794 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff febe 	bl	8002522 <_ZN10SerialComm4initEv>
    }
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZN13STM32Hardware4readEv>:

    int read()  
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff febc 	bl	8002538 <_ZN10SerialComm4readEv>
 80027c0:	4603      	mov	r3, r0
    }
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fee7 	bl	80025b2 <_ZN10SerialComm5writeEPKhi>
    }
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 80027f4:	f001 feb2 	bl	800455c <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
    }
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
      data(0)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f802 	bl	8001818 <_ZN3ros3MsgC1Ev>
 8002814:	4a05      	ldr	r2, [pc, #20]	@ (800282c <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	711a      	strb	r2, [r3, #4]
    {
    }
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	080087c0 	.word	0x080087c0

08002830 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	7912      	ldrb	r2, [r2, #4]
 8002848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002850:	68fb      	ldr	r3, [r7, #12]
    }
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4413      	add	r3, r2
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
     return offset;
 800287c:	68fb      	ldr	r3, [r7, #12]
    }
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4b02      	ldr	r3, [pc, #8]	@ (800289c <_ZN8std_msgs5UInt87getTypeEv+0x14>)
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	080085e0 	.word	0x080085e0

080028a0 <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	4b02      	ldr	r3, [pc, #8]	@ (80028b4 <_ZN8std_msgs5UInt86getMD5Ev+0x14>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	080085f0 	.word	0x080085f0

080028b8 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
      data(0)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe ffa8 	bl	8001818 <_ZN3ros3MsgC1Ev>
 80028c8:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <_ZN8std_msgs6UInt32C1Ev+0x28>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
    {
    }
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	080087a8 	.word	0x080087a8

080028e4 <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2ca      	uxtb	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0a19      	lsrs	r1, r3, #8
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0c19      	lsrs	r1, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3302      	adds	r3, #2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0e19      	lsrs	r1, r3, #24
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3303      	adds	r3, #3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	b2ca      	uxtb	r2, r1
 8002934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
      return offset;
 800293c:	68fb      	ldr	r3, [r7, #12]
    }
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	440b      	add	r3, r1
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3302      	adds	r3, #2
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	440b      	add	r3, r1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3303      	adds	r3, #3
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	440b      	add	r3, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3304      	adds	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
     return offset;
 80029ac:	68fb      	ldr	r3, [r7, #12]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	08008614 	.word	0x08008614

080029d0 <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	4b02      	ldr	r3, [pc, #8]	@ (80029e4 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	08008624 	.word	0x08008624

080029e8 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
      data(0)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ff10 	bl	8001818 <_ZN3ros3MsgC1Ev>
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <_ZN8std_msgs7Float64C1Ev+0x30>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08008790 	.word	0x08008790

08002a1c <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a30:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	4401      	add	r1, r0
 8002a3e:	b2d3      	uxtb	r3, r2
 8002a40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	0a02      	lsrs	r2, r0, #8
 8002a50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a54:	0a0b      	lsrs	r3, r1, #8
 8002a56:	6979      	ldr	r1, [r7, #20]
 8002a58:	3101      	adds	r1, #1
 8002a5a:	6838      	ldr	r0, [r7, #0]
 8002a5c:	4401      	add	r1, r0
 8002a5e:	b2d3      	uxtb	r3, r2
 8002a60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002a62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	0c02      	lsrs	r2, r0, #16
 8002a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a74:	0c0b      	lsrs	r3, r1, #16
 8002a76:	6979      	ldr	r1, [r7, #20]
 8002a78:	3102      	adds	r1, #2
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	b2d3      	uxtb	r3, r2
 8002a80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	0e02      	lsrs	r2, r0, #24
 8002a90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a94:	0e0b      	lsrs	r3, r1, #24
 8002a96:	6979      	ldr	r1, [r7, #20]
 8002a98:	3103      	adds	r1, #3
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	4401      	add	r1, r0
 8002a9e:	b2d3      	uxtb	r3, r2
 8002aa0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	000a      	movs	r2, r1
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6979      	ldr	r1, [r7, #20]
 8002ab4:	3104      	adds	r1, #4
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	4401      	add	r1, r0
 8002aba:	b2d3      	uxtb	r3, r2
 8002abc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	0a0a      	lsrs	r2, r1, #8
 8002acc:	2300      	movs	r3, #0
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	3105      	adds	r1, #5
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	4401      	add	r1, r0
 8002ad6:	b2d3      	uxtb	r3, r2
 8002ad8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8002ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	0c0a      	lsrs	r2, r1, #16
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6979      	ldr	r1, [r7, #20]
 8002aec:	3106      	adds	r1, #6
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	4401      	add	r1, r0
 8002af2:	b2d3      	uxtb	r3, r2
 8002af4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	0e0a      	lsrs	r2, r1, #24
 8002b04:	2300      	movs	r3, #0
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	3107      	adds	r1, #7
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	4401      	add	r1, r0
 8002b0e:	b2d3      	uxtb	r3, r2
 8002b10:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3308      	adds	r3, #8
 8002b16:	617b      	str	r3, [r7, #20]
      return offset;
 8002b18:	697b      	ldr	r3, [r7, #20]
    }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b28:	b0a3      	sub	sp, #140	@ 0x8c
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6778      	str	r0, [r7, #116]	@ 0x74
 8002b2e:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b46:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2200      	movs	r2, #0
 8002b54:	461c      	mov	r4, r3
 8002b56:	4615      	mov	r5, r2
 8002b58:	ea40 0804 	orr.w	r8, r0, r4
 8002b5c:	ea41 0905 	orr.w	r9, r1, r5
 8002b60:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	469a      	mov	sl, r3
 8002b7a:	4693      	mov	fp, r2
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b88:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002b8c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002b90:	ea40 0402 	orr.w	r4, r0, r2
 8002b94:	66bc      	str	r4, [r7, #104]	@ 0x68
 8002b96:	430b      	orrs	r3, r1
 8002b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b9a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002b9e:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ba2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bb8:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bc6:	464c      	mov	r4, r9
 8002bc8:	0423      	lsls	r3, r4, #16
 8002bca:	46c4      	mov	ip, r8
 8002bcc:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002bd0:	4644      	mov	r4, r8
 8002bd2:	0422      	lsls	r2, r4, #16
 8002bd4:	ea40 0402 	orr.w	r4, r0, r2
 8002bd8:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bde:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002be2:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002be6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bee:	1cda      	adds	r2, r3, #3
 8002bf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bfc:	657a      	str	r2, [r7, #84]	@ 0x54
 8002bfe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002c02:	4623      	mov	r3, r4
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c08:	4623      	mov	r3, r4
 8002c0a:	061b      	lsls	r3, r3, #24
 8002c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c0e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002c12:	461a      	mov	r2, r3
 8002c14:	4302      	orrs	r2, r0
 8002c16:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c18:	4623      	mov	r3, r4
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002c22:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c26:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002c48:	0023      	movs	r3, r4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	ea40 0402 	orr.w	r4, r0, r2
 8002c50:	633c      	str	r4, [r7, #48]	@ 0x30
 8002c52:	430b      	orrs	r3, r1
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c56:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002c5a:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c5e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c66:	1d5a      	adds	r2, r3, #5
 8002c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002c80:	0223      	lsls	r3, r4, #8
 8002c82:	2200      	movs	r2, #0
 8002c84:	ea40 0402 	orr.w	r4, r0, r2
 8002c88:	623c      	str	r4, [r7, #32]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c92:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c96:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c9e:	3306      	adds	r3, #6
 8002ca0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	61fa      	str	r2, [r7, #28]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	69bc      	ldr	r4, [r7, #24]
 8002cb8:	0423      	lsls	r3, r4, #16
 8002cba:	2200      	movs	r2, #0
 8002cbc:	ea40 0402 	orr.w	r4, r0, r2
 8002cc0:	613c      	str	r4, [r7, #16]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cca:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cd6:	3307      	adds	r3, #7
 8002cd8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	60fa      	str	r2, [r7, #12]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	68bc      	ldr	r4, [r7, #8]
 8002cf0:	0623      	lsls	r3, r4, #24
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	ea40 0402 	orr.w	r4, r0, r2
 8002cf8:	603c      	str	r4, [r7, #0]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d02:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8002d06:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d0a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8002d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d14:	3308      	adds	r3, #8
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8002d1e:	4618      	mov	r0, r3
 8002d20:	378c      	adds	r7, #140	@ 0x8c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d28:	4770      	bx	lr
	...

08002d2c <_ZN8std_msgs7Float647getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float64"; };
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	4b02      	ldr	r3, [pc, #8]	@ (8002d40 <_ZN8std_msgs7Float647getTypeEv+0x14>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	08008648 	.word	0x08008648

08002d44 <_ZN8std_msgs7Float646getMD5Ev>:
    virtual const char * getMD5() override { return "fdb28210bfa9d7c91146260178d9a584"; };
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	4b02      	ldr	r3, [pc, #8]	@ (8002d58 <_ZN8std_msgs7Float646getMD5Ev+0x14>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	0800865c 	.word	0x0800865c

08002d5c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	080087f0 	.word	0x080087f0

08002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffe8 	bl	8002d5c <_ZN3ros15NodeHandleBase_C1Ev>
 8002d8c:	4a41      	ldr	r2, [pc, #260]	@ (8002e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev+0x118>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fcec 	bl	8002774 <_ZN13STM32HardwareC1Ev>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3318      	adds	r3, #24
 8002db8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 faf6 	bl	80083b0 <memset>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dca:	3318      	adds	r3, #24
 8002dcc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 faec 	bl	80083b0 <memset>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002dde:	3318      	adds	r3, #24
 8002de0:	2228      	movs	r2, #40	@ 0x28
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 fae3 	bl	80083b0 <memset>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002df0:	3340      	adds	r3, #64	@ 0x40
 8002df2:	2228      	movs	r2, #40	@ 0x28
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f005 fada 	bl	80083b0 <memset>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e02:	461a      	mov	r2, r3
 8002e04:	2300      	movs	r3, #0
 8002e06:	6693      	str	r3, [r2, #104]	@ 0x68
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6753      	str	r3, [r2, #116]	@ 0x74
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e32:	461a      	mov	r2, r3
 8002e34:	2300      	movs	r3, #0
 8002e36:	6793      	str	r3, [r2, #120]	@ 0x78
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e66:	461a      	mov	r2, r3
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f82e 	bl	8001ee4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	0800877c 	.word	0x0800877c

08002e98 <HAL_UART_TxCpltCallback>:
float rpm_LPF;				// Motor Velocity with First Order IIR Filter

uint8_t duty_pwm = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8002ea0:	4803      	ldr	r0, [pc, #12]	@ (8002eb0 <HAL_UART_TxCpltCallback+0x18>)
 8002ea2:	f7ff fc45 	bl	8002730 <_ZN10SerialComm11set_tx_cpltEv>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200001f0 	.word	0x200001f0

08002eb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8002ebc:	4803      	ldr	r0, [pc, #12]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18>)
 8002ebe:	f7ff fc45 	bl	800274c <_ZN10SerialComm10reset_rbufEv>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200001f0 	.word	0x200001f0

08002ed0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7f1b      	ldrb	r3, [r3, #28]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_TIM_IC_CaptureCallback+0x1c>
	{
		my_encoder->tick++;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_TIM_IC_CaptureCallback+0x28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	3201      	adds	r2, #1
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	801a      	strh	r2, [r3, #0]
	}
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000436c 	.word	0x2000436c

08002efc <_Z16motorVelCallbackRKN8std_msgs5UInt8E>:

void motorVelCallback(const std_msgs::UInt8& motor_speed_msg)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	my_controller->set_point = static_cast<double>(motor_speed_msg.data);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <_Z16motorVelCallbackRKN8std_msgs5UInt8E+0x30>)
 8002f0a:	6814      	ldr	r4, [r2, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fad3 	bl	80004b8 <__aeabi_ui2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	e9c4 2300 	strd	r2, r3, [r4]
	duty_pwm = motor_speed_msg.data;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	791a      	ldrb	r2, [r3, #4]
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <_Z16motorVelCallbackRKN8std_msgs5UInt8E+0x34>)
 8002f20:	701a      	strb	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd90      	pop	{r4, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20004374 	.word	0x20004374
 8002f30:	200043ac 	.word	0x200043ac

08002f34 <_Z13pGainCallbackRKN8std_msgs7Float64E>:
void pGainCallback(const std_msgs::Float64& kp_msg)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	my_controller->kp = static_cast<double>(kp_msg.data);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <_Z13pGainCallbackRKN8std_msgs7Float64E+0x20>)
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f46:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	20004374 	.word	0x20004374

08002f58 <_Z9ros_setupv>:
{
	my_controller->kd = static_cast<double>(kd_msg.data);
}

void ros_setup()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
	nh.initNode();
 8002f5c:	480c      	ldr	r0, [pc, #48]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f5e:	f000 fa2b 	bl	80033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(sub_motor_speed);
 8002f62:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <_Z9ros_setupv+0x3c>)
 8002f64:	480a      	ldr	r0, [pc, #40]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f66:	f000 fa4c 	bl	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_P_gain);
 8002f6a:	490b      	ldr	r1, [pc, #44]	@ (8002f98 <_Z9ros_setupv+0x40>)
 8002f6c:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f6e:	f000 fa48 	bl	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_I_gain);
 8002f72:	490a      	ldr	r1, [pc, #40]	@ (8002f9c <_Z9ros_setupv+0x44>)
 8002f74:	4806      	ldr	r0, [pc, #24]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f76:	f000 fa44 	bl	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_D_gain);
 8002f7a:	4909      	ldr	r1, [pc, #36]	@ (8002fa0 <_Z9ros_setupv+0x48>)
 8002f7c:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f7e:	f000 fa40 	bl	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	nh.advertise(pub_motor_rpm);
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <_Z9ros_setupv+0x4c>)
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <_Z9ros_setupv+0x38>)
 8002f86:	f000 fa66 	bl	8003456 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200021fc 	.word	0x200021fc
 8002f94:	200042bc 	.word	0x200042bc
 8002f98:	200042d8 	.word	0x200042d8
 8002f9c:	20004300 	.word	0x20004300
 8002fa0:	20004328 	.word	0x20004328
 8002fa4:	20004358 	.word	0x20004358

08002fa8 <_Z6millisv>:

uint32_t millis()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002fac:	f001 fad6 	bl	800455c <HAL_GetTick>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <setup>:

void setup()
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b08d      	sub	sp, #52	@ 0x34
 8002fbc:	af02      	add	r7, sp, #8
	ros_setup();
 8002fbe:	f7ff ffcb 	bl	8002f58 <_Z9ros_setupv>

	Encoder_Handle_t encoder_handle =
 8002fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	{
			.max_count = 0xFFFF,
			.tick_read_channel = TIM_CHANNEL_1
	};
	my_encoder = Encoder_Init(encoder_handle);
 8002fcc:	f107 0320 	add.w	r3, r7, #32
 8002fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fd4:	f7fe f9b5 	bl	8001342 <Encoder_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a26      	ldr	r2, [pc, #152]	@ (8003074 <setup+0xbc>)
 8002fdc:	6013      	str	r3, [r2, #0]
	Encoder_Start(my_encoder);
 8002fde:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <setup+0xbc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f9c8 	bl	8001378 <Encoder_Start>

	float b_coeff[] = { 0.7548f, 0.7548f };
 8002fe8:	4a23      	ldr	r2, [pc, #140]	@ (8003078 <setup+0xc0>)
 8002fea:	f107 0318 	add.w	r3, r7, #24
 8002fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff2:	e883 0003 	stmia.w	r3, {r0, r1}
	float a_coeff[] = {    1.0f, 0.5095f };
 8002ff6:	4a21      	ldr	r2, [pc, #132]	@ (800307c <setup+0xc4>)
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003000:	e883 0003 	stmia.w	r3, {r0, r1}
	encoder_filter = reinterpret_cast<FO_IIR_Filter_t*>(calloc(1, sizeof(FO_IIR_Filter_t)));
 8003004:	2118      	movs	r1, #24
 8003006:	2001      	movs	r0, #1
 8003008:	f005 f8d2 	bl	80081b0 <calloc>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <setup+0xc8>)
 8003012:	601a      	str	r2, [r3, #0]
	FO_IIR_Init(encoder_filter, b_coeff, a_coeff);
 8003014:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <setup+0xc8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f107 0210 	add.w	r2, r7, #16
 800301c:	f107 0118 	add.w	r1, r7, #24
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe f82b 	bl	800107c <FO_IIR_Init>

	Motor_Handle_t motor_handle =
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <setup+0xcc>)
 8003028:	463c      	mov	r4, r7
 800302a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800302c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.pwm_channel = TIM_CHANNEL_1,
			.direction_port = GPIOC,
			.direction_pin = GPIO_PIN_3,
			.pwm_frequency = 1000
	};
	my_motor = Motor_Init(motor_handle);
 8003030:	463b      	mov	r3, r7
 8003032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003034:	f7fe f88a 	bl	800114c <Motor_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	4a13      	ldr	r2, [pc, #76]	@ (8003088 <setup+0xd0>)
 800303c:	6013      	str	r3, [r2, #0]
	Motor_Start(my_motor);
 800303e:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <setup+0xd0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f936 	bl	80012b4 <Motor_Start>

	my_controller = PID_Init(KP, KI, KD);
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9cd 2300 	strd	r2, r3, [sp]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	490a      	ldr	r1, [pc, #40]	@ (800308c <setup+0xd4>)
 8003062:	f000 ff93 	bl	8003f8c <PID_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	4a09      	ldr	r2, [pc, #36]	@ (8003090 <setup+0xd8>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bf00      	nop
 800306e:	372c      	adds	r7, #44	@ 0x2c
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	2000436c 	.word	0x2000436c
 8003078:	08008680 	.word	0x08008680
 800307c:	08008688 	.word	0x08008688
 8003080:	20004378 	.word	0x20004378
 8003084:	08008690 	.word	0x08008690
 8003088:	20004370 	.word	0x20004370
 800308c:	40240000 	.word	0x40240000
 8003090:	20004374 	.word	0x20004374

08003094 <loop>:

void loop()
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	t = static_cast<double>(millis());
 8003098:	f7ff ff86 	bl	8002fa8 <_Z6millisv>
 800309c:	4603      	mov	r3, r0
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa0a 	bl	80004b8 <__aeabi_ui2d>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4923      	ldr	r1, [pc, #140]	@ (8003138 <loop+0xa4>)
 80030aa:	e9c1 2300 	strd	r2, r3, [r1]

	if ((t - t_motor_control_prev) >= dt[0])
 80030ae:	4b22      	ldr	r3, [pc, #136]	@ (8003138 <loop+0xa4>)
 80030b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <loop+0xa8>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	f7fd f8bf 	bl	800023c <__aeabi_dsub>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <loop+0xac>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd fcf4 	bl	8000ab8 <__aeabi_dcmpge>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <loop+0x5e>
	{
		//duty_pwm = PID_Compute(my_controller, rpm_data, dt[0]);
		Motor_Set_PWM_Duty(my_motor, duty_pwm);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <loop+0xb0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <loop+0xb4>)
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe f887 	bl	80011f4 <Motor_Set_PWM_Duty>

		t_motor_control_prev = t;
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <loop+0xa4>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	4913      	ldr	r1, [pc, #76]	@ (800313c <loop+0xa8>)
 80030ee:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if ((t - t_motor_rpm_prev) >= dt[1])
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <loop+0xa4>)
 80030f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <loop+0xb8>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f7fd f89d 	bl	800023c <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <loop+0xac>)
 800310c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003110:	f7fd fcd2 	bl	8000ab8 <__aeabi_dcmpge>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <loop+0x9a>
	{
		updateRpm();
 800311a:	f000 f81b 	bl	8003154 <_Z9updateRpmv>
		publishRpmMsg();
 800311e:	f000 f8a3 	bl	8003268 <_Z13publishRpmMsgv>

		t_motor_rpm_prev = t;
 8003122:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <loop+0xa4>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	4908      	ldr	r1, [pc, #32]	@ (800314c <loop+0xb8>)
 800312a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	nh.spinOnce();
 800312e:	4808      	ldr	r0, [pc, #32]	@ (8003150 <loop+0xbc>)
 8003130:	f000 f9be 	bl	80034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20004380 	.word	0x20004380
 800313c:	20004388 	.word	0x20004388
 8003140:	20000000 	.word	0x20000000
 8003144:	20004370 	.word	0x20004370
 8003148:	200043ac 	.word	0x200043ac
 800314c:	20004390 	.word	0x20004390
 8003150:	200021fc 	.word	0x200021fc

08003154 <_Z9updateRpmv>:

void updateRpm()
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	af00      	add	r7, sp, #0
	if (my_encoder->tick < last_tick)
 8003158:	4b38      	ldr	r3, [pc, #224]	@ (800323c <_Z9updateRpmv+0xe8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <_Z9updateRpmv+0xec>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d20f      	bcs.n	8003186 <_Z9updateRpmv+0x32>
	{
		d_tick = my_encoder->tick + (my_encoder->max_count - last_tick);
 8003166:	4b35      	ldr	r3, [pc, #212]	@ (800323c <_Z9updateRpmv+0xe8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	4b33      	ldr	r3, [pc, #204]	@ (800323c <_Z9updateRpmv+0xe8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b299      	uxth	r1, r3
 8003174:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <_Z9updateRpmv+0xec>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	1acb      	subs	r3, r1, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	4413      	add	r3, r2
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <_Z9updateRpmv+0xf0>)
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e008      	b.n	8003198 <_Z9updateRpmv+0x44>
	}
	else
	{
		d_tick = my_encoder->tick - last_tick;
 8003186:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <_Z9updateRpmv+0xe8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <_Z9updateRpmv+0xec>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b2b      	ldr	r3, [pc, #172]	@ (8003244 <_Z9updateRpmv+0xf0>)
 8003196:	801a      	strh	r2, [r3, #0]
	}
	last_tick = my_encoder->tick;
 8003198:	4b28      	ldr	r3, [pc, #160]	@ (800323c <_Z9updateRpmv+0xe8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	4b28      	ldr	r3, [pc, #160]	@ (8003240 <_Z9updateRpmv+0xec>)
 80031a0:	801a      	strh	r2, [r3, #0]

	// Get the number of rotation
	rpm_data = (double)d_tick / ENCODER_RESOLUTION;
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <_Z9updateRpmv+0xf0>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f986 	bl	80004b8 <__aeabi_ui2d>
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <_Z9updateRpmv+0xf4>)
 80031b2:	f7fd fb25 	bl	8000800 <__aeabi_ddiv>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4924      	ldr	r1, [pc, #144]	@ (800324c <_Z9updateRpmv+0xf8>)
 80031bc:	e9c1 2300 	strd	r2, r3, [r1]
	// Get the rotation per second
	rpm_data /= (dt[1] / 1000.0f);
 80031c0:	4b22      	ldr	r3, [pc, #136]	@ (800324c <_Z9updateRpmv+0xf8>)
 80031c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <_Z9updateRpmv+0xfc>)
 80031c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <_Z9updateRpmv+0x100>)
 80031d2:	f7fd fb15 	bl	8000800 <__aeabi_ddiv>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4620      	mov	r0, r4
 80031dc:	4629      	mov	r1, r5
 80031de:	f7fd fb0f 	bl	8000800 <__aeabi_ddiv>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4919      	ldr	r1, [pc, #100]	@ (800324c <_Z9updateRpmv+0xf8>)
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
	// Get the rotation per minute
	rpm_data *= 60;
 80031ec:	4b17      	ldr	r3, [pc, #92]	@ (800324c <_Z9updateRpmv+0xf8>)
 80031ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <_Z9updateRpmv+0x104>)
 80031f8:	f7fd f9d8 	bl	80005ac <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4912      	ldr	r1, [pc, #72]	@ (800324c <_Z9updateRpmv+0xf8>)
 8003202:	e9c1 2300 	strd	r2, r3, [r1]

	// Apply Low Pass filter
	rpm_LPF = FO_IIR_Compute(encoder_filter, rpm_data);
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <_Z9updateRpmv+0x108>)
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <_Z9updateRpmv+0xf8>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc64 	bl	8000ae0 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4619      	mov	r1, r3
 800321c:	4620      	mov	r0, r4
 800321e:	f7fd ff5c 	bl	80010da <FO_IIR_Compute>
 8003222:	4603      	mov	r3, r0
 8003224:	4a0e      	ldr	r2, [pc, #56]	@ (8003260 <_Z9updateRpmv+0x10c>)
 8003226:	6013      	str	r3, [r2, #0]

	rpm_msg.data = rpm_LPF;
 8003228:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <_Z9updateRpmv+0x10c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd ff05 	bl	800103c <__aeabi_f2uiz>
 8003232:	4603      	mov	r3, r0
 8003234:	4a0b      	ldr	r2, [pc, #44]	@ (8003264 <_Z9updateRpmv+0x110>)
 8003236:	6053      	str	r3, [r2, #4]
}
 8003238:	bf00      	nop
 800323a:	bdb0      	pop	{r4, r5, r7, pc}
 800323c:	2000436c 	.word	0x2000436c
 8003240:	20004398 	.word	0x20004398
 8003244:	2000439a 	.word	0x2000439a
 8003248:	40340000 	.word	0x40340000
 800324c:	200043a0 	.word	0x200043a0
 8003250:	20000000 	.word	0x20000000
 8003254:	408f4000 	.word	0x408f4000
 8003258:	404e0000 	.word	0x404e0000
 800325c:	20004378 	.word	0x20004378
 8003260:	200043a8 	.word	0x200043a8
 8003264:	20004350 	.word	0x20004350

08003268 <_Z13publishRpmMsgv>:

void publishRpmMsg()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	pub_motor_rpm.publish(&rpm_msg);
 800326c:	4902      	ldr	r1, [pc, #8]	@ (8003278 <_Z13publishRpmMsgv+0x10>)
 800326e:	4803      	ldr	r0, [pc, #12]	@ (800327c <_Z13publishRpmMsgv+0x14>)
 8003270:	f7ff f916 	bl	80024a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20004350 	.word	0x20004350
 800327c:	20004358 	.word	0x20004358

08003280 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e00c      	b.n	80032aa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	fa22 f103 	lsr.w	r1, r2, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	b2ca      	uxtb	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d9ef      	bls.n	8003290 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e010      	b.n	80032f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	440a      	add	r2, r1
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	4611      	mov	r1, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	00d2      	lsls	r2, r2, #3
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d9eb      	bls.n	80032d2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
	...

08003308 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	080087d8 	.word	0x080087d8

08003328 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffe5 	bl	8003308 <_ZN3ros11Subscriber_C1Ev>
 800333e:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	330c      	adds	r3, #12
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fa5b 	bl	8002804 <_ZN8std_msgs5UInt8C1Ev>
    cb_(cb),
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
  };
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08008764 	.word	0x08008764

08003370 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ffc1 	bl	8003308 <_ZN3ros11Subscriber_C1Ev>
 8003386:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3310      	adds	r3, #16
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fb29 	bl	80029e8 <_ZN8std_msgs7Float64C1Ev>
    cb_(cb),
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]
    endpoint_(endpoint)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	625a      	str	r2, [r3, #36]	@ 0x24
    topic_ = topic_name;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  };
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	0800874c 	.word	0x0800874c

080033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f9e5 	bl	8002794 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033d0:	461a      	mov	r2, r3
 80033d2:	2300      	movs	r3, #0
 80033d4:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033dc:	461a      	mov	r2, r3
 80033de:	2300      	movs	r3, #0
 80033e0:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033f4:	461a      	mov	r2, r3
 80033f6:	2300      	movs	r3, #0
 80033f8:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e018      	b.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 800341a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	605a      	str	r2, [r3, #4]
        return true;
 800343a:	2301      	movs	r3, #1
 800343c:	e006      	b.n	800344c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b09      	cmp	r3, #9
 8003448:	dde3      	ble.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800344a:	2300      	movs	r3, #0
  }
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e01b      	b.n	800349e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
      if (publishers[i] == 0) // empty slot
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 800346e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d110      	bne.n	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
        publishers[i] = &p;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	60da      	str	r2, [r3, #12]
        return true;
 8003494:	2301      	movs	r3, #1
 8003496:	e006      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	dde0      	ble.n	8003466 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 80034a4:	2300      	movs	r3, #0
  }
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff f995 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 80034c2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d905      	bls.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80034ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d905      	bls.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003508:	461a      	mov	r2, r3
 800350a:	2300      	movs	r3, #0
 800350c:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f966 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad2      	subs	r2, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf8c      	ite	hi
 800352e:	2301      	movhi	r3, #1
 8003530:	2300      	movls	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8003538:	f06f 0301 	mvn.w	r3, #1
 800353c:	e1e8      	b.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      int data = hardware_.read();
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f933 	bl	80027ae <_ZN13STM32Hardware4readEv>
 8003548:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f2c0 81c1 	blt.w	80038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x424>
      checksum_ += data;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003558:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4413      	add	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003564:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800356c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800356e:	2b07      	cmp	r3, #7
 8003570:	d124      	bne.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8003582:	674a      	str	r2, [r1, #116]	@ 0x74
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	b2d1      	uxtb	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	460a      	mov	r2, r1
 800358e:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003598:	3b01      	subs	r3, #1
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80035a0:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1af      	bne.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035b4:	461a      	mov	r2, r3
 80035b6:	2308      	movs	r3, #8
 80035b8:	6693      	str	r3, [r2, #104]	@ 0x68
 80035ba:	e7a8      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d12e      	bne.n	8003626 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x176>
        if (data == 0xff)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2bff      	cmp	r3, #255	@ 0xff
 80035cc:	d110      	bne.n	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x140>
          mode_++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d6:	3301      	adds	r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80035de:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3314      	adds	r3, #20
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80035ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80035ee:	e78e      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f8f9 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	bf8c      	ite	hi
 8003608:	2301      	movhi	r3, #1
 800360a:	2300      	movls	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f43f af7d 	beq.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          configured_ = false;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800361a:	2200      	movs	r2, #0
 800361c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 8003620:	f06f 0301 	mvn.w	r3, #1
 8003624:	e174      	b.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800362c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362e:	2b01      	cmp	r3, #1
 8003630:	d11e      	bne.n	8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2bfe      	cmp	r3, #254	@ 0xfe
 8003636:	d109      	bne.n	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x19c>
          mode_++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800363e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003640:	3301      	adds	r3, #1
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003648:	6693      	str	r3, [r2, #104]	@ 0x68
 800364a:	e760      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800365e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f af53 	bne.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f955 	bl	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
 800366e:	e74e      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11b      	bne.n	80036b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x204>
        bytes_ = data;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800368e:	461a      	mov	r2, r3
 8003690:	2300      	movs	r3, #0
 8003692:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	3301      	adds	r3, #1
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80036a4:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6793      	str	r3, [r2, #120]	@ 0x78
 80036b2:	e72c      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d114      	bne.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	4413      	add	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80036d4:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036de:	3301      	adds	r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80036e6:	6693      	str	r3, [r2, #104]	@ 0x68
 80036e8:	e711      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d11b      	bne.n	800372e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80036fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fe:	425a      	negs	r2, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	bf58      	it	pl
 8003706:	4253      	negpl	r3, r2
 8003708:	2bff      	cmp	r3, #255	@ 0xff
 800370a:	d109      	bne.n	8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x270>
          mode_++;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003714:	3301      	adds	r3, #1
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800371c:	6693      	str	r3, [r2, #104]	@ 0x68
 800371e:	e6f6      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6693      	str	r3, [r2, #104]	@ 0x68
 800372c:	e6ef      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003736:	2b05      	cmp	r3, #5
 8003738:	d115      	bne.n	8003766 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x2b6>
        topic_ = data;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800374c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374e:	3301      	adds	r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003756:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6793      	str	r3, [r2, #120]	@ 0x78
 8003764:	e6d3      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800376c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376e:	2b06      	cmp	r3, #6
 8003770:	d11e      	bne.n	80037b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003778:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	4413      	add	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800378e:	461a      	mov	r2, r3
 8003790:	2307      	movs	r3, #7
 8003792:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800379a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379c:	2b00      	cmp	r3, #0
 800379e:	f47f aeb6 	bne.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80037a8:	461a      	mov	r2, r3
 80037aa:	2308      	movs	r3, #8
 80037ac:	6693      	str	r3, [r2, #104]	@ 0x68
 80037ae:	e6ae      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80037b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f47f aea8 	bne.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80037d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d2:	425a      	negs	r2, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	bf58      	it	pl
 80037da:	4253      	negpl	r3, r2
 80037dc:	2bff      	cmp	r3, #255	@ 0xff
 80037de:	f47f ae96 	bne.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36c>
            requestSyncTime();
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f892 	bl	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8ac 	bl	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003800:	461a      	mov	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	e079      	b.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	2b0a      	cmp	r3, #10
 8003826:	d106      	bne.n	8003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x386>
            syncTime(message_in);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3318      	adds	r3, #24
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f968 	bl	8003b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>
 8003834:	e66b      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	2b06      	cmp	r3, #6
 8003840:	d110      	bne.n	8003864 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003848:	3310      	adds	r3, #16
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	3218      	adds	r2, #24
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fc86 	bl	8002162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800385c:	2201      	movs	r2, #1
 800385e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8003862:	e654      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	2b0b      	cmp	r3, #11
 800386e:	d106      	bne.n	800387e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3ce>
            configured_ = false;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003876:	2200      	movs	r2, #0
 8003878:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800387c:	e647      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f43f ae3a 	beq.w	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80038ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	3218      	adds	r2, #24
 80038ce:	4611      	mov	r1, r2
 80038d0:	4798      	blx	r3
    while (true)
 80038d2:	e61c      	b.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        break;
 80038d4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038dc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d909      	bls.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
      requestSyncTime();
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f80c 	bl	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 800390e:	2300      	movs	r3, #0
  }
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd ff87 	bl	8001838 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f107 020c 	add.w	r2, r7, #12
 8003934:	210a      	movs	r1, #10
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
    rt_time = hardware_.time();
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe ff54 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
  }
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003952:	b590      	push	{r4, r7, lr}
 8003954:	b08b      	sub	sp, #44	@ 0x2c
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe f854 	bl	8001a0c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
 8003968:	e05a      	b.n	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	b29b      	uxth	r3, r3
 800398a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80039b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4608      	mov	r0, r1
 80039c0:	4798      	blx	r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039f4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681c      	ldr	r4, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a00:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fd5d 	bl	80024c8 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	461a      	mov	r2, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	2b09      	cmp	r3, #9
 8003a24:	dda1      	ble.n	800396a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2a:	e05e      	b.n	8003aea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x198>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d053      	beq.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x192>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a40:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a62:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4798      	blx	r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4608      	mov	r0, r1
 8003aa4:	4798      	blx	r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681c      	ldr	r4, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003abe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4798      	blx	r3
 8003ad8:	4601      	mov	r1, r0
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	dd9d      	ble.n	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8003afc:	bf00      	nop
 8003afe:	372c      	adds	r7, #44	@ 0x2c
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}

08003b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fe90 	bl	8001838 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fe65 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003b22:	4602      	mov	r2, r0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	6839      	ldr	r1, [r7, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd feef 	bl	8001916 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4915      	ldr	r1, [pc, #84]	@ (8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8003b3e:	fba1 1303 	umull	r1, r3, r1, r3
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	4413      	add	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8003b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b58:	fb00 f303 	mul.w	r3, r0, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	440b      	add	r3, r1
 8003b66:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8b7 	bl	8003ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fe36 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	10624dd3 	.word	0x10624dd3
 8003b98:	000f4240 	.word	0x000f4240

08003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b63      	cmp	r3, #99	@ 0x63
 8003bac:	dd0b      	ble.n	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bb4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e087      	b.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd2:	3318      	adds	r3, #24
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4790      	blx	r2
 8003bdc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be4:	22ff      	movs	r2, #255	@ 0xff
 8003be6:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bee:	22fe      	movs	r2, #254	@ 0xfe
 8003bf0:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfc:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0e:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c16:	7e9a      	ldrb	r2, [r3, #26]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c1e:	7edb      	ldrb	r3, [r3, #27]
 8003c20:	4413      	add	r3, r2
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2e:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	121b      	asrs	r3, r3, #8
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4c:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c52:	2305      	movs	r3, #5
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e00d      	b.n	8003c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c62:	3318      	adds	r3, #24
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3306      	adds	r3, #6
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	ddec      	ble.n	8003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3307      	adds	r3, #7
 8003c82:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	425a      	negs	r2, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	bf58      	it	pl
 8003c8e:	4253      	negpl	r3, r2
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	6179      	str	r1, [r7, #20]
 8003c98:	43d2      	mvns	r2, r2
 8003c9a:	b2d1      	uxtb	r1, r2
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb0:	dc0b      	bgt.n	8003cca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1d18      	adds	r0, r3, #4
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fe fd82 	bl	80027ca <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	e005      	b.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003cca:	4905      	ldr	r1, [pc, #20]	@ (8003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f847 	bl	8003d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	080086a0 	.word	0x080086a0

08003ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fd7a 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003cf8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4914      	ldr	r1, [pc, #80]	@ (8003d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8003d02:	fba1 1303 	umull	r1, r3, r1, r3
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8003d18:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	4a0b      	ldr	r2, [pc, #44]	@ (8003d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	1aca      	subs	r2, r1, r3
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8003d32:	4413      	add	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f103 020c 	add.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3310      	adds	r3, #16
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f000 fb5f 	bl	8004408 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	10624dd3 	.word	0x10624dd3
 8003d58:	000f4240 	.word	0x000f4240
 8003d5c:	3b9aca00 	.word	0x3b9aca00

08003d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	2103      	movs	r1, #3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f804 	bl	8003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>
  }
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	460b      	mov	r3, r1
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd fffc 	bl	8001d8c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f107 0214 	add.w	r2, r7, #20
 8003da6:	2107      	movs	r1, #7
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	4798      	blx	r3
  }
 8003dac:	bf00      	nop
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_Z41__static_initialization_and_destruction_0ii>:
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d12f      	bne.n	8003e24 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12a      	bne.n	8003e24 <_Z41__static_initialization_and_destruction_0ii+0x70>
};

SerialComm comm_rosserial(huart_rosserial);
 8003dce:	4917      	ldr	r1, [pc, #92]	@ (8003e2c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003dd0:	4817      	ldr	r0, [pc, #92]	@ (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003dd2:	f7fe fb84 	bl	80024de <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8003dd6:	4817      	ldr	r0, [pc, #92]	@ (8003e34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003dd8:	f7fe ffd0 	bl	8002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>
ros::Time current_time;
 8003ddc:	4816      	ldr	r0, [pc, #88]	@ (8003e38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003dde:	f7fd fd0b 	bl	80017f8 <_ZN3ros4TimeC1Ev>
 */

/*
 * Subscribers
 */
ros::Subscriber<std_msgs::UInt8> sub_motor_speed("/motor_speed", &motorVelCallback);
 8003de2:	2301      	movs	r3, #1
 8003de4:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003de6:	4916      	ldr	r1, [pc, #88]	@ (8003e40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003de8:	4816      	ldr	r0, [pc, #88]	@ (8003e44 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003dea:	f7ff fa9d 	bl	8003328 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_P_gain("/controller_kp", &pGainCallback);
 8003dee:	2301      	movs	r3, #1
 8003df0:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003df2:	4916      	ldr	r1, [pc, #88]	@ (8003e4c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003df4:	4816      	ldr	r0, [pc, #88]	@ (8003e50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003df6:	f7ff fabb 	bl	8003370 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_I_gain("/controller_ki", &pGainCallback);
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003dfe:	4915      	ldr	r1, [pc, #84]	@ (8003e54 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003e00:	4815      	ldr	r0, [pc, #84]	@ (8003e58 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003e02:	f7ff fab5 	bl	8003370 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_D_gain("/controller_kd", &pGainCallback);
 8003e06:	2301      	movs	r3, #1
 8003e08:	4a0f      	ldr	r2, [pc, #60]	@ (8003e48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003e0a:	4914      	ldr	r1, [pc, #80]	@ (8003e5c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003e0c:	4814      	ldr	r0, [pc, #80]	@ (8003e60 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003e0e:	f7ff faaf 	bl	8003370 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::UInt32 rpm_msg;
 8003e12:	4814      	ldr	r0, [pc, #80]	@ (8003e64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003e14:	f7fe fd50 	bl	80028b8 <_ZN8std_msgs6UInt32C1Ev>
ros::Publisher pub_motor_rpm("/motor_rpm", &rpm_msg);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4a12      	ldr	r2, [pc, #72]	@ (8003e64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003e1c:	4912      	ldr	r1, [pc, #72]	@ (8003e68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003e1e:	4813      	ldr	r0, [pc, #76]	@ (8003e6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003e20:	f7fe fb28 	bl	8002474 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000120 	.word	0x20000120
 8003e30:	200001f0 	.word	0x200001f0
 8003e34:	200021fc 	.word	0x200021fc
 8003e38:	200042b4 	.word	0x200042b4
 8003e3c:	08002efd 	.word	0x08002efd
 8003e40:	080086dc 	.word	0x080086dc
 8003e44:	200042bc 	.word	0x200042bc
 8003e48:	08002f35 	.word	0x08002f35
 8003e4c:	080086ec 	.word	0x080086ec
 8003e50:	200042d8 	.word	0x200042d8
 8003e54:	080086fc 	.word	0x080086fc
 8003e58:	20004300 	.word	0x20004300
 8003e5c:	0800870c 	.word	0x0800870c
 8003e60:	20004328 	.word	0x20004328
 8003e64:	20004350 	.word	0x20004350
 8003e68:	0800871c 	.word	0x0800871c
 8003e6c:	20004358 	.word	0x20004358

08003e70 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fe4f 	bl	8002b24 <_ZN8std_msgs7Float6411deserializeEPh>
    this->cb_(msg);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	3210      	adds	r2, #16
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4798      	blx	r3
  }
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZN3ros10SubscriberIN8std_msgs7Float64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe ff35 	bl	8002d2c <_ZN8std_msgs7Float647getTypeEv>
 8003ec2:	4603      	mov	r3, r0
  }
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN3ros10SubscriberIN8std_msgs7Float64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe ff33 	bl	8002d44 <_ZN8std_msgs7Float646getMD5Ev>
 8003ede:	4603      	mov	r3, r0
  }
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fcaf 	bl	800285c <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	320c      	adds	r2, #12
 8003f06:	4610      	mov	r0, r2
 8003f08:	4798      	blx	r3
  }
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
  }
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	330c      	adds	r3, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fca7 	bl	8002888 <_ZN8std_msgs5UInt87getTypeEv>
 8003f3a:	4603      	mov	r3, r0
  }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fca5 	bl	80028a0 <_ZN8std_msgs5UInt86getMD5Ev>
 8003f56:	4603      	mov	r3, r0
  }
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
    return configured_;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f6e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <_GLOBAL__sub_I_comm_rosserial>:
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7ff ff15 	bl	8003db4 <_Z41__static_initialization_and_destruction_0ii>
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <PID_Init>:
#include "pid.h"

PID_t* PID_Init(double p, double i, double d)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003f96:	e9c7 2300 	strd	r2, r3, [r7]
    PID_t *object = calloc(1, sizeof(PID_t));
 8003f9a:	2130      	movs	r1, #48	@ 0x30
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f004 f907 	bl	80081b0 <calloc>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	617b      	str	r3, [r7, #20]

    object->set_point = 0;
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9c1 2300 	strd	r2, r3, [r1]
    
    object->kp = p;
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fba:	e9c1 2302 	strd	r2, r3, [r1, #8]
    object->ki = i;
 8003fbe:	6979      	ldr	r1, [r7, #20]
 8003fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    object->kd = d;
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fce:	e9c1 2306 	strd	r2, r3, [r1, #24]

    object->integral_sum = 0;
 8003fd2:	6979      	ldr	r1, [r7, #20]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    object->last_input = 0;
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    return object;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <HAL_MspInit+0x5c>)
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	4a14      	ldr	r2, [pc, #80]	@ (8004054 <HAL_MspInit+0x5c>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6193      	str	r3, [r2, #24]
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_MspInit+0x5c>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <HAL_MspInit+0x5c>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <HAL_MspInit+0x5c>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004020:	61d3      	str	r3, [r2, #28]
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <HAL_MspInit+0x5c>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800402e:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_MspInit+0x60>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <HAL_MspInit+0x60>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	40021000 	.word	0x40021000
 8004058:	40010000 	.word	0x40010000

0800405c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0318 	add.w	r3, r7, #24
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a22      	ldr	r2, [pc, #136]	@ (8004100 <HAL_TIM_Base_MspInit+0xa4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10c      	bne.n	8004096 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800407c:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 8004082:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004086:	6193      	str	r3, [r2, #24]
 8004088:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004094:	e030      	b.n	80040f8 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM8)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <HAL_TIM_Base_MspInit+0xac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d12b      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040a0:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	4a17      	ldr	r2, [pc, #92]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040aa:	6193      	str	r3, [r2, #24]
 80040ac:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040be:	f043 0310 	orr.w	r3, r3, #16
 80040c2:	6193      	str	r3, [r2, #24]
 80040c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <HAL_TIM_Base_MspInit+0xa8>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_TICK_Pin;
 80040d0:	2340      	movs	r3, #64	@ 0x40
 80040d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_TICK_GPIO_Port, &GPIO_InitStruct);
 80040dc:	f107 0318 	add.w	r3, r7, #24
 80040e0:	4619      	mov	r1, r3
 80040e2:	480a      	ldr	r0, [pc, #40]	@ (800410c <HAL_TIM_Base_MspInit+0xb0>)
 80040e4:	f000 ffd6 	bl	8005094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	202e      	movs	r0, #46	@ 0x2e
 80040ee:	f000 fb16 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80040f2:	202e      	movs	r0, #46	@ 0x2e
 80040f4:	f000 fb2f 	bl	8004756 <HAL_NVIC_EnableIRQ>
}
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	@ 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40021000 	.word	0x40021000
 8004108:	40013400 	.word	0x40013400
 800410c:	40011000 	.word	0x40011000

08004110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	f107 0310 	add.w	r3, r7, #16
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a10      	ldr	r2, [pc, #64]	@ (800416c <HAL_TIM_MspPostInit+0x5c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d118      	bne.n	8004162 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004130:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_TIM_MspPostInit+0x60>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4a0e      	ldr	r2, [pc, #56]	@ (8004170 <HAL_TIM_MspPostInit+0x60>)
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	6193      	str	r3, [r2, #24]
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <HAL_TIM_MspPostInit+0x60>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8004148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800414c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2302      	movs	r3, #2
 8004154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	4619      	mov	r1, r3
 800415c:	4805      	ldr	r0, [pc, #20]	@ (8004174 <HAL_TIM_MspPostInit+0x64>)
 800415e:	f000 ff99 	bl	8005094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004162:	bf00      	nop
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40021000 	.word	0x40021000
 8004174:	40010800 	.word	0x40010800

08004178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	@ 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <HAL_UART_MspInit+0x150>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f040 8092 	bne.w	80042be <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800419a:	4b4c      	ldr	r3, [pc, #304]	@ (80042cc <HAL_UART_MspInit+0x154>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4a4b      	ldr	r2, [pc, #300]	@ (80042cc <HAL_UART_MspInit+0x154>)
 80041a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a4:	6193      	str	r3, [r2, #24]
 80041a6:	4b49      	ldr	r3, [pc, #292]	@ (80042cc <HAL_UART_MspInit+0x154>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <HAL_UART_MspInit+0x154>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	4a45      	ldr	r2, [pc, #276]	@ (80042cc <HAL_UART_MspInit+0x154>)
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	6193      	str	r3, [r2, #24]
 80041be:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <HAL_UART_MspInit+0x154>)
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041ca:	2340      	movs	r3, #64	@ 0x40
 80041cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ce:	2302      	movs	r3, #2
 80041d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d2:	2303      	movs	r3, #3
 80041d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4619      	mov	r1, r3
 80041dc:	483c      	ldr	r0, [pc, #240]	@ (80042d0 <HAL_UART_MspInit+0x158>)
 80041de:	f000 ff59 	bl	8005094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	4619      	mov	r1, r3
 80041f4:	4836      	ldr	r0, [pc, #216]	@ (80042d0 <HAL_UART_MspInit+0x158>)
 80041f6:	f000 ff4d 	bl	8005094 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_UART_MspInit+0x15c>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <HAL_UART_MspInit+0x15c>)
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004216:	4b30      	ldr	r3, [pc, #192]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004218:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_UART_MspInit+0x164>)
 800421a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800421c:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 800421e:	2200      	movs	r2, #0
 8004220:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004222:	4b2d      	ldr	r3, [pc, #180]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004228:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 800422a:	2280      	movs	r2, #128	@ 0x80
 800422c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800423a:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004246:	4824      	ldr	r0, [pc, #144]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 8004248:	f000 faa0 	bl	800478c <HAL_DMA_Init>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8004252:	f7fd facb 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 800425a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800425c:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <HAL_UART_MspInit+0x160>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004262:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004264:	4a1f      	ldr	r2, [pc, #124]	@ (80042e4 <HAL_UART_MspInit+0x16c>)
 8004266:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 800426a:	2210      	movs	r2, #16
 800426c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426e:	4b1c      	ldr	r3, [pc, #112]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004274:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004276:	2280      	movs	r2, #128	@ 0x80
 8004278:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800427a:	4b19      	ldr	r3, [pc, #100]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004280:	4b17      	ldr	r3, [pc, #92]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004282:	2200      	movs	r2, #0
 8004284:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004286:	4b16      	ldr	r3, [pc, #88]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004292:	4813      	ldr	r0, [pc, #76]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 8004294:	f000 fa7a 	bl	800478c <HAL_DMA_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800429e:	f7fd faa5 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a8:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <HAL_UART_MspInit+0x168>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	2025      	movs	r0, #37	@ 0x25
 80042b4:	f000 fa33 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042b8:	2025      	movs	r0, #37	@ 0x25
 80042ba:	f000 fa4c 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042be:	bf00      	nop
 80042c0:	3728      	adds	r7, #40	@ 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40013800 	.word	0x40013800
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40010c00 	.word	0x40010c00
 80042d4:	40010000 	.word	0x40010000
 80042d8:	20000168 	.word	0x20000168
 80042dc:	40020058 	.word	0x40020058
 80042e0:	200001ac 	.word	0x200001ac
 80042e4:	40020044 	.word	0x40020044

080042e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <NMI_Handler+0x4>

080042f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <HardFault_Handler+0x4>

080042f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <MemManage_Handler+0x4>

08004300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <UsageFault_Handler+0x4>

08004310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004338:	f000 f8fe 	bl	8004538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004344:	4802      	ldr	r0, [pc, #8]	@ (8004350 <DMA1_Channel4_IRQHandler+0x10>)
 8004346:	f000 fc3b 	bl	8004bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200001ac 	.word	0x200001ac

08004354 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004358:	4802      	ldr	r0, [pc, #8]	@ (8004364 <DMA1_Channel5_IRQHandler+0x10>)
 800435a:	f000 fc31 	bl	8004bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000168 	.word	0x20000168

08004368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800436c:	4802      	ldr	r0, [pc, #8]	@ (8004378 <USART1_IRQHandler+0x10>)
 800436e:	f003 f823 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000120 	.word	0x20000120

0800437c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 8004380:	4802      	ldr	r0, [pc, #8]	@ (800438c <TIM8_CC_IRQHandler+0x10>)
 8004382:	f001 ff17 	bl	80061b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200000d8 	.word	0x200000d8

08004390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004398:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <_sbrk+0x5c>)
 800439a:	4b15      	ldr	r3, [pc, #84]	@ (80043f0 <_sbrk+0x60>)
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043a4:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <_sbrk+0x64>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043ac:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <_sbrk+0x64>)
 80043ae:	4a12      	ldr	r2, [pc, #72]	@ (80043f8 <_sbrk+0x68>)
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <_sbrk+0x64>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d207      	bcs.n	80043d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043c0:	f004 f80e 	bl	80083e0 <__errno>
 80043c4:	4603      	mov	r3, r0
 80043c6:	220c      	movs	r2, #12
 80043c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295
 80043ce:	e009      	b.n	80043e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043d0:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043d6:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <_sbrk+0x64>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	4a05      	ldr	r2, [pc, #20]	@ (80043f4 <_sbrk+0x64>)
 80043e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043e2:	68fb      	ldr	r3, [r7, #12]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2000c000 	.word	0x2000c000
 80043f0:	00000400 	.word	0x00000400
 80043f4:	200043b0 	.word	0x200043b0
 80043f8:	20004500 	.word	0x20004500

080043fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0a5a      	lsrs	r2, r3, #9
 8004418:	490f      	ldr	r1, [pc, #60]	@ (8004458 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800441a:	fba1 1202 	umull	r1, r2, r1, r2
 800441e:	09d2      	lsrs	r2, r2, #7
 8004420:	490e      	ldr	r1, [pc, #56]	@ (800445c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004422:	fb01 f202 	mul.w	r2, r1, r2
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0a5b      	lsrs	r3, r3, #9
 8004430:	4a09      	ldr	r2, [pc, #36]	@ (8004458 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	00044b83 	.word	0x00044b83
 800445c:	3b9aca00 	.word	0x3b9aca00

08004460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004460:	f7ff ffcc 	bl	80043fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004464:	480b      	ldr	r0, [pc, #44]	@ (8004494 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004466:	490c      	ldr	r1, [pc, #48]	@ (8004498 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004468:	4a0c      	ldr	r2, [pc, #48]	@ (800449c <LoopFillZerobss+0x16>)
  movs r3, #0
 800446a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800446c:	e002      	b.n	8004474 <LoopCopyDataInit>

0800446e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800446e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004472:	3304      	adds	r3, #4

08004474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004478:	d3f9      	bcc.n	800446e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800447a:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800447c:	4c09      	ldr	r4, [pc, #36]	@ (80044a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800447e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004480:	e001      	b.n	8004486 <LoopFillZerobss>

08004482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004484:	3204      	adds	r2, #4

08004486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004488:	d3fb      	bcc.n	8004482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800448a:	f003 ffaf 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800448e:	f7fc ff8d 	bl	80013ac <main>
  bx lr
 8004492:	4770      	bx	lr
  ldr r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004498:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800449c:	080088b4 	.word	0x080088b4
  ldr r2, =_sbss
 80044a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80044a4:	20004500 	.word	0x20004500

080044a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC1_2_IRQHandler>
	...

080044ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b0:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <HAL_Init+0x28>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <HAL_Init+0x28>)
 80044b6:	f043 0310 	orr.w	r3, r3, #16
 80044ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044bc:	2003      	movs	r0, #3
 80044be:	f000 f923 	bl	8004708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044c2:	200f      	movs	r0, #15
 80044c4:	f000 f808 	bl	80044d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044c8:	f7ff fd96 	bl	8003ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40022000 	.word	0x40022000

080044d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_InitTick+0x54>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_InitTick+0x58>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f93b 	bl	8004772 <HAL_SYSTICK_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e00e      	b.n	8004524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d80a      	bhi.n	8004522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800450c:	2200      	movs	r2, #0
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f000 f903 	bl	800471e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004518:	4a06      	ldr	r2, [pc, #24]	@ (8004534 <HAL_InitTick+0x5c>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000010 	.word	0x20000010
 8004530:	20000018 	.word	0x20000018
 8004534:	20000014 	.word	0x20000014

08004538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_IncTick+0x1c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_IncTick+0x20>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4413      	add	r3, r2
 8004548:	4a03      	ldr	r2, [pc, #12]	@ (8004558 <HAL_IncTick+0x20>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000018 	.word	0x20000018
 8004558:	200043b4 	.word	0x200043b4

0800455c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return uwTick;
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <HAL_GetTick+0x10>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	200043b4 	.word	0x200043b4

08004570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004580:	4b0c      	ldr	r3, [pc, #48]	@ (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800459c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a2:	4a04      	ldr	r2, [pc, #16]	@ (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	60d3      	str	r3, [r2, #12]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <__NVIC_GetPriorityGrouping+0x18>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	f003 0307 	and.w	r3, r3, #7
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db0b      	blt.n	80045fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4906      	ldr	r1, [pc, #24]	@ (8004608 <__NVIC_EnableIRQ+0x34>)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2001      	movs	r0, #1
 80045f6:	fa00 f202 	lsl.w	r2, r0, r2
 80045fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	@ (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	@ (800465c <__NVIC_SetPriority+0x50>)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	@ 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	@ 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d4:	d301      	bcc.n	80046da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046d6:	2301      	movs	r3, #1
 80046d8:	e00f      	b.n	80046fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046da:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <SysTick_Config+0x40>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046e2:	210f      	movs	r1, #15
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	f7ff ff90 	bl	800460c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ec:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <SysTick_Config+0x40>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046f2:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <SysTick_Config+0x40>)
 80046f4:	2207      	movs	r2, #7
 80046f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	e000e010 	.word	0xe000e010

08004708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff2d 	bl	8004570 <__NVIC_SetPriorityGrouping>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	4603      	mov	r3, r0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004730:	f7ff ff42 	bl	80045b8 <__NVIC_GetPriorityGrouping>
 8004734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f7ff ff90 	bl	8004660 <NVIC_EncodePriority>
 8004740:	4602      	mov	r2, r0
 8004742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff5f 	bl	800460c <__NVIC_SetPriority>
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff35 	bl	80045d4 <__NVIC_EnableIRQ>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffa2 	bl	80046c4 <SysTick_Config>
 8004780:	4603      	mov	r3, r0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e059      	b.n	8004856 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004860 <HAL_DMA_Init+0xd4>)
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d80f      	bhi.n	80047ce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_DMA_Init+0xd8>)
 80047b6:	4413      	add	r3, r2
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <HAL_DMA_Init+0xdc>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	009a      	lsls	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_DMA_Init+0xe0>)
 80047ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047cc:	e00e      	b.n	80047ec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <HAL_DMA_Init+0xe4>)
 80047d6:	4413      	add	r3, r2
 80047d8:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <HAL_DMA_Init+0xdc>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	009a      	lsls	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_DMA_Init+0xe8>)
 80047ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004802:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40020407 	.word	0x40020407
 8004864:	bffdfff8 	.word	0xbffdfff8
 8004868:	cccccccd 	.word	0xcccccccd
 800486c:	40020000 	.word	0x40020000
 8004870:	bffdfbf8 	.word	0xbffdfbf8
 8004874:	40020400 	.word	0x40020400

08004878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_DMA_Start_IT+0x20>
 8004894:	2302      	movs	r3, #2
 8004896:	e04b      	b.n	8004930 <HAL_DMA_Start_IT+0xb8>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d13a      	bne.n	8004922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fbb1 	bl	8005038 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 020e 	orr.w	r2, r2, #14
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e00f      	b.n	8004910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 020a 	orr.w	r2, r2, #10
 800490e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e005      	b.n	800492e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800492a:	2302      	movs	r3, #2
 800492c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d008      	beq.n	8004962 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2204      	movs	r2, #4
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e020      	b.n	80049a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 020e 	bic.w	r2, r2, #14
 8004970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f202 	lsl.w	r2, r1, r2
 8004990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d005      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e0d6      	b.n	8004b82 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020e 	bic.w	r2, r2, #14
 80049e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b64      	ldr	r3, [pc, #400]	@ (8004b8c <HAL_DMA_Abort_IT+0x1dc>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d958      	bls.n	8004ab2 <HAL_DMA_Abort_IT+0x102>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a62      	ldr	r2, [pc, #392]	@ (8004b90 <HAL_DMA_Abort_IT+0x1e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04f      	beq.n	8004aaa <HAL_DMA_Abort_IT+0xfa>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a61      	ldr	r2, [pc, #388]	@ (8004b94 <HAL_DMA_Abort_IT+0x1e4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d048      	beq.n	8004aa6 <HAL_DMA_Abort_IT+0xf6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5f      	ldr	r2, [pc, #380]	@ (8004b98 <HAL_DMA_Abort_IT+0x1e8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xf0>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_DMA_Abort_IT+0x1ec>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d038      	beq.n	8004a9a <HAL_DMA_Abort_IT+0xea>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1f0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d030      	beq.n	8004a94 <HAL_DMA_Abort_IT+0xe4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1f4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d028      	beq.n	8004a8e <HAL_DMA_Abort_IT+0xde>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a52      	ldr	r2, [pc, #328]	@ (8004b8c <HAL_DMA_Abort_IT+0x1dc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d020      	beq.n	8004a88 <HAL_DMA_Abort_IT+0xd8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a57      	ldr	r2, [pc, #348]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1f8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d019      	beq.n	8004a84 <HAL_DMA_Abort_IT+0xd4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a55      	ldr	r2, [pc, #340]	@ (8004bac <HAL_DMA_Abort_IT+0x1fc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d012      	beq.n	8004a80 <HAL_DMA_Abort_IT+0xd0>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a54      	ldr	r2, [pc, #336]	@ (8004bb0 <HAL_DMA_Abort_IT+0x200>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00a      	beq.n	8004a7a <HAL_DMA_Abort_IT+0xca>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a52      	ldr	r2, [pc, #328]	@ (8004bb4 <HAL_DMA_Abort_IT+0x204>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d102      	bne.n	8004a74 <HAL_DMA_Abort_IT+0xc4>
 8004a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a72:	e01b      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a78:	e018      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a7e:	e015      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a80:	2310      	movs	r3, #16
 8004a82:	e013      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e011      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a8c:	e00e      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a92:	e00b      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a98:	e008      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a9e:	e005      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aa4:	e002      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	e000      	b.n	8004aac <HAL_DMA_Abort_IT+0xfc>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <HAL_DMA_Abort_IT+0x208>)
 8004aae:	6053      	str	r3, [r2, #4]
 8004ab0:	e057      	b.n	8004b62 <HAL_DMA_Abort_IT+0x1b2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a36      	ldr	r2, [pc, #216]	@ (8004b90 <HAL_DMA_Abort_IT+0x1e0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04f      	beq.n	8004b5c <HAL_DMA_Abort_IT+0x1ac>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a34      	ldr	r2, [pc, #208]	@ (8004b94 <HAL_DMA_Abort_IT+0x1e4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d048      	beq.n	8004b58 <HAL_DMA_Abort_IT+0x1a8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a33      	ldr	r2, [pc, #204]	@ (8004b98 <HAL_DMA_Abort_IT+0x1e8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_Abort_IT+0x1a2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a31      	ldr	r2, [pc, #196]	@ (8004b9c <HAL_DMA_Abort_IT+0x1ec>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d038      	beq.n	8004b4c <HAL_DMA_Abort_IT+0x19c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a30      	ldr	r2, [pc, #192]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1f0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d030      	beq.n	8004b46 <HAL_DMA_Abort_IT+0x196>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1f4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d028      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x190>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <HAL_DMA_Abort_IT+0x1dc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d020      	beq.n	8004b3a <HAL_DMA_Abort_IT+0x18a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1f8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d019      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x186>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a29      	ldr	r2, [pc, #164]	@ (8004bac <HAL_DMA_Abort_IT+0x1fc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d012      	beq.n	8004b32 <HAL_DMA_Abort_IT+0x182>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a27      	ldr	r2, [pc, #156]	@ (8004bb0 <HAL_DMA_Abort_IT+0x200>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00a      	beq.n	8004b2c <HAL_DMA_Abort_IT+0x17c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a26      	ldr	r2, [pc, #152]	@ (8004bb4 <HAL_DMA_Abort_IT+0x204>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d102      	bne.n	8004b26 <HAL_DMA_Abort_IT+0x176>
 8004b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b24:	e01b      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b2a:	e018      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b30:	e015      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b32:	2310      	movs	r3, #16
 8004b34:	e013      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e011      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b3e:	e00e      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b44:	e00b      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b4a:	e008      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b50:	e005      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b56:	e002      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	e000      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1ae>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_DMA_Abort_IT+0x20c>)
 8004b60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
    } 
  }
  return status;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40020080 	.word	0x40020080
 8004b90:	40020008 	.word	0x40020008
 8004b94:	4002001c 	.word	0x4002001c
 8004b98:	40020030 	.word	0x40020030
 8004b9c:	40020044 	.word	0x40020044
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	4002006c 	.word	0x4002006c
 8004ba8:	40020408 	.word	0x40020408
 8004bac:	4002041c 	.word	0x4002041c
 8004bb0:	40020430 	.word	0x40020430
 8004bb4:	40020444 	.word	0x40020444
 8004bb8:	40020400 	.word	0x40020400
 8004bbc:	40020000 	.word	0x40020000

08004bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	2204      	movs	r2, #4
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80f1 	beq.w	8004dcc <HAL_DMA_IRQHandler+0x20c>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80eb 	beq.w	8004dcc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d107      	bne.n	8004c14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d98 <HAL_DMA_IRQHandler+0x1d8>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d958      	bls.n	8004cd2 <HAL_DMA_IRQHandler+0x112>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_DMA_IRQHandler+0x1dc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04f      	beq.n	8004cca <HAL_DMA_IRQHandler+0x10a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8004da0 <HAL_DMA_IRQHandler+0x1e0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d048      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x106>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5a      	ldr	r2, [pc, #360]	@ (8004da4 <HAL_DMA_IRQHandler+0x1e4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d040      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x100>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a59      	ldr	r2, [pc, #356]	@ (8004da8 <HAL_DMA_IRQHandler+0x1e8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d038      	beq.n	8004cba <HAL_DMA_IRQHandler+0xfa>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_DMA_IRQHandler+0x1ec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d030      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0xf4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_DMA_IRQHandler+0x1f0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d028      	beq.n	8004cae <HAL_DMA_IRQHandler+0xee>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a4d      	ldr	r2, [pc, #308]	@ (8004d98 <HAL_DMA_IRQHandler+0x1d8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d020      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0xe8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a52      	ldr	r2, [pc, #328]	@ (8004db4 <HAL_DMA_IRQHandler+0x1f4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d019      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0xe4>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a50      	ldr	r2, [pc, #320]	@ (8004db8 <HAL_DMA_IRQHandler+0x1f8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d012      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0xe0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4f      	ldr	r2, [pc, #316]	@ (8004dbc <HAL_DMA_IRQHandler+0x1fc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00a      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xda>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc0 <HAL_DMA_IRQHandler+0x200>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d102      	bne.n	8004c94 <HAL_DMA_IRQHandler+0xd4>
 8004c8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c92:	e01b      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004c94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004c98:	e018      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c9e:	e015      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004ca0:	2340      	movs	r3, #64	@ 0x40
 8004ca2:	e013      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e011      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004ca8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004cac:	e00e      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cb2:	e00b      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004cb8:	e008      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004cbe:	e005      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc4:	e002      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cc6:	2340      	movs	r3, #64	@ 0x40
 8004cc8:	e000      	b.n	8004ccc <HAL_DMA_IRQHandler+0x10c>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc4 <HAL_DMA_IRQHandler+0x204>)
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e057      	b.n	8004d82 <HAL_DMA_IRQHandler+0x1c2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a31      	ldr	r2, [pc, #196]	@ (8004d9c <HAL_DMA_IRQHandler+0x1dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d04f      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x1bc>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <HAL_DMA_IRQHandler+0x1e0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d048      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x1b8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <HAL_DMA_IRQHandler+0x1e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d040      	beq.n	8004d72 <HAL_DMA_IRQHandler+0x1b2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <HAL_DMA_IRQHandler+0x1e8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d038      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x1ac>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <HAL_DMA_IRQHandler+0x1ec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d030      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x1a6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a29      	ldr	r2, [pc, #164]	@ (8004db0 <HAL_DMA_IRQHandler+0x1f0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d028      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x1a0>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	@ (8004d98 <HAL_DMA_IRQHandler+0x1d8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d020      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x19a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	@ (8004db4 <HAL_DMA_IRQHandler+0x1f4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d019      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x196>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a24      	ldr	r2, [pc, #144]	@ (8004db8 <HAL_DMA_IRQHandler+0x1f8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d012      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x192>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a22      	ldr	r2, [pc, #136]	@ (8004dbc <HAL_DMA_IRQHandler+0x1fc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00a      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x18c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a21      	ldr	r2, [pc, #132]	@ (8004dc0 <HAL_DMA_IRQHandler+0x200>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d102      	bne.n	8004d46 <HAL_DMA_IRQHandler+0x186>
 8004d40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d44:	e01b      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004d4a:	e018      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d50:	e015      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d52:	2340      	movs	r3, #64	@ 0x40
 8004d54:	e013      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d56:	2304      	movs	r3, #4
 8004d58:	e011      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004d5e:	e00e      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d64:	e00b      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d66:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004d6a:	e008      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d70:	e005      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d76:	e002      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d78:	2340      	movs	r3, #64	@ 0x40
 8004d7a:	e000      	b.n	8004d7e <HAL_DMA_IRQHandler+0x1be>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <HAL_DMA_IRQHandler+0x208>)
 8004d80:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8136 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d94:	e130      	b.n	8004ff8 <HAL_DMA_IRQHandler+0x438>
 8004d96:	bf00      	nop
 8004d98:	40020080 	.word	0x40020080
 8004d9c:	40020008 	.word	0x40020008
 8004da0:	4002001c 	.word	0x4002001c
 8004da4:	40020030 	.word	0x40020030
 8004da8:	40020044 	.word	0x40020044
 8004dac:	40020058 	.word	0x40020058
 8004db0:	4002006c 	.word	0x4002006c
 8004db4:	40020408 	.word	0x40020408
 8004db8:	4002041c 	.word	0x4002041c
 8004dbc:	40020430 	.word	0x40020430
 8004dc0:	40020444 	.word	0x40020444
 8004dc4:	40020400 	.word	0x40020400
 8004dc8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80dd 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x3d8>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80d7 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 020a 	bic.w	r2, r2, #10
 8004e06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <HAL_DMA_IRQHandler+0x444>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d958      	bls.n	8004ece <HAL_DMA_IRQHandler+0x30e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a79      	ldr	r2, [pc, #484]	@ (8005008 <HAL_DMA_IRQHandler+0x448>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d04f      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x306>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a78      	ldr	r2, [pc, #480]	@ (800500c <HAL_DMA_IRQHandler+0x44c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d048      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x302>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a76      	ldr	r2, [pc, #472]	@ (8005010 <HAL_DMA_IRQHandler+0x450>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d040      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x2fc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a75      	ldr	r2, [pc, #468]	@ (8005014 <HAL_DMA_IRQHandler+0x454>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d038      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x2f6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a73      	ldr	r2, [pc, #460]	@ (8005018 <HAL_DMA_IRQHandler+0x458>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d030      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2f0>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a72      	ldr	r2, [pc, #456]	@ (800501c <HAL_DMA_IRQHandler+0x45c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d028      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x2ea>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a69      	ldr	r2, [pc, #420]	@ (8005004 <HAL_DMA_IRQHandler+0x444>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d020      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x2e4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6e      	ldr	r2, [pc, #440]	@ (8005020 <HAL_DMA_IRQHandler+0x460>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d019      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2e0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6c      	ldr	r2, [pc, #432]	@ (8005024 <HAL_DMA_IRQHandler+0x464>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d012      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x2dc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6b      	ldr	r2, [pc, #428]	@ (8005028 <HAL_DMA_IRQHandler+0x468>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00a      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x2d6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a69      	ldr	r2, [pc, #420]	@ (800502c <HAL_DMA_IRQHandler+0x46c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d102      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x2d0>
 8004e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e8e:	e01b      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e94:	e018      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e9a:	e015      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	e013      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e011      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004ea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ea8:	e00e      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004eaa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004eae:	e00b      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004eb4:	e008      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004eba:	e005      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ec0:	e002      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e000      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x308>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	4a59      	ldr	r2, [pc, #356]	@ (8005030 <HAL_DMA_IRQHandler+0x470>)
 8004eca:	6053      	str	r3, [r2, #4]
 8004ecc:	e057      	b.n	8004f7e <HAL_DMA_IRQHandler+0x3be>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8005008 <HAL_DMA_IRQHandler+0x448>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d04f      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x3b8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	@ (800500c <HAL_DMA_IRQHandler+0x44c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d048      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x3b4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8005010 <HAL_DMA_IRQHandler+0x450>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d040      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x3ae>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a48      	ldr	r2, [pc, #288]	@ (8005014 <HAL_DMA_IRQHandler+0x454>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d038      	beq.n	8004f68 <HAL_DMA_IRQHandler+0x3a8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <HAL_DMA_IRQHandler+0x458>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d030      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3a2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a45      	ldr	r2, [pc, #276]	@ (800501c <HAL_DMA_IRQHandler+0x45c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d028      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x39c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8005004 <HAL_DMA_IRQHandler+0x444>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d020      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x396>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a41      	ldr	r2, [pc, #260]	@ (8005020 <HAL_DMA_IRQHandler+0x460>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d019      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x392>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a40      	ldr	r2, [pc, #256]	@ (8005024 <HAL_DMA_IRQHandler+0x464>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d012      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x38e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005028 <HAL_DMA_IRQHandler+0x468>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00a      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x388>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3d      	ldr	r2, [pc, #244]	@ (800502c <HAL_DMA_IRQHandler+0x46c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d102      	bne.n	8004f42 <HAL_DMA_IRQHandler+0x382>
 8004f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f40:	e01b      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f46:	e018      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f4c:	e015      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e013      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e011      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f5a:	e00e      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004f60:	e00b      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f66:	e008      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f6c:	e005      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f72:	e002      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f74:	2320      	movs	r3, #32
 8004f76:	e000      	b.n	8004f7a <HAL_DMA_IRQHandler+0x3ba>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <HAL_DMA_IRQHandler+0x474>)
 8004f7c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d034      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f96:	e02f      	b.n	8004ff8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d028      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x43a>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d023      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 020e 	bic.w	r2, r2, #14
 8004fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
    }
  }
  return;
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
}
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40020080 	.word	0x40020080
 8005008:	40020008 	.word	0x40020008
 800500c:	4002001c 	.word	0x4002001c
 8005010:	40020030 	.word	0x40020030
 8005014:	40020044 	.word	0x40020044
 8005018:	40020058 	.word	0x40020058
 800501c:	4002006c 	.word	0x4002006c
 8005020:	40020408 	.word	0x40020408
 8005024:	4002041c 	.word	0x4002041c
 8005028:	40020430 	.word	0x40020430
 800502c:	40020444 	.word	0x40020444
 8005030:	40020400 	.word	0x40020400
 8005034:	40020000 	.word	0x40020000

08005038 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	2101      	movs	r1, #1
 8005050:	fa01 f202 	lsl.w	r2, r1, r2
 8005054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b10      	cmp	r3, #16
 8005064:	d108      	bne.n	8005078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005076:	e007      	b.n	8005088 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
	...

08005094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005094:	b480      	push	{r7}
 8005096:	b08b      	sub	sp, #44	@ 0x2c
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050a2:	2300      	movs	r3, #0
 80050a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a6:	e179      	b.n	800539c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050a8:	2201      	movs	r2, #1
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	f040 8168 	bne.w	8005396 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a96      	ldr	r2, [pc, #600]	@ (8005324 <HAL_GPIO_Init+0x290>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d05e      	beq.n	800518e <HAL_GPIO_Init+0xfa>
 80050d0:	4a94      	ldr	r2, [pc, #592]	@ (8005324 <HAL_GPIO_Init+0x290>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d875      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 80050d6:	4a94      	ldr	r2, [pc, #592]	@ (8005328 <HAL_GPIO_Init+0x294>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d058      	beq.n	800518e <HAL_GPIO_Init+0xfa>
 80050dc:	4a92      	ldr	r2, [pc, #584]	@ (8005328 <HAL_GPIO_Init+0x294>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d86f      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 80050e2:	4a92      	ldr	r2, [pc, #584]	@ (800532c <HAL_GPIO_Init+0x298>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d052      	beq.n	800518e <HAL_GPIO_Init+0xfa>
 80050e8:	4a90      	ldr	r2, [pc, #576]	@ (800532c <HAL_GPIO_Init+0x298>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d869      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 80050ee:	4a90      	ldr	r2, [pc, #576]	@ (8005330 <HAL_GPIO_Init+0x29c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d04c      	beq.n	800518e <HAL_GPIO_Init+0xfa>
 80050f4:	4a8e      	ldr	r2, [pc, #568]	@ (8005330 <HAL_GPIO_Init+0x29c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d863      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 80050fa:	4a8e      	ldr	r2, [pc, #568]	@ (8005334 <HAL_GPIO_Init+0x2a0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d046      	beq.n	800518e <HAL_GPIO_Init+0xfa>
 8005100:	4a8c      	ldr	r2, [pc, #560]	@ (8005334 <HAL_GPIO_Init+0x2a0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d85d      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 8005106:	2b12      	cmp	r3, #18
 8005108:	d82a      	bhi.n	8005160 <HAL_GPIO_Init+0xcc>
 800510a:	2b12      	cmp	r3, #18
 800510c:	d859      	bhi.n	80051c2 <HAL_GPIO_Init+0x12e>
 800510e:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <HAL_GPIO_Init+0x80>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	0800518f 	.word	0x0800518f
 8005118:	08005169 	.word	0x08005169
 800511c:	0800517b 	.word	0x0800517b
 8005120:	080051bd 	.word	0x080051bd
 8005124:	080051c3 	.word	0x080051c3
 8005128:	080051c3 	.word	0x080051c3
 800512c:	080051c3 	.word	0x080051c3
 8005130:	080051c3 	.word	0x080051c3
 8005134:	080051c3 	.word	0x080051c3
 8005138:	080051c3 	.word	0x080051c3
 800513c:	080051c3 	.word	0x080051c3
 8005140:	080051c3 	.word	0x080051c3
 8005144:	080051c3 	.word	0x080051c3
 8005148:	080051c3 	.word	0x080051c3
 800514c:	080051c3 	.word	0x080051c3
 8005150:	080051c3 	.word	0x080051c3
 8005154:	080051c3 	.word	0x080051c3
 8005158:	08005171 	.word	0x08005171
 800515c:	08005185 	.word	0x08005185
 8005160:	4a75      	ldr	r2, [pc, #468]	@ (8005338 <HAL_GPIO_Init+0x2a4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005166:	e02c      	b.n	80051c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	623b      	str	r3, [r7, #32]
          break;
 800516e:	e029      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	3304      	adds	r3, #4
 8005176:	623b      	str	r3, [r7, #32]
          break;
 8005178:	e024      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	3308      	adds	r3, #8
 8005180:	623b      	str	r3, [r7, #32]
          break;
 8005182:	e01f      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	330c      	adds	r3, #12
 800518a:	623b      	str	r3, [r7, #32]
          break;
 800518c:	e01a      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005196:	2304      	movs	r3, #4
 8005198:	623b      	str	r3, [r7, #32]
          break;
 800519a:	e013      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051a4:	2308      	movs	r3, #8
 80051a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	611a      	str	r2, [r3, #16]
          break;
 80051ae:	e009      	b.n	80051c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051b0:	2308      	movs	r3, #8
 80051b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	615a      	str	r2, [r3, #20]
          break;
 80051ba:	e003      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051bc:	2300      	movs	r3, #0
 80051be:	623b      	str	r3, [r7, #32]
          break;
 80051c0:	e000      	b.n	80051c4 <HAL_GPIO_Init+0x130>
          break;
 80051c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2bff      	cmp	r3, #255	@ 0xff
 80051c8:	d801      	bhi.n	80051ce <HAL_GPIO_Init+0x13a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	e001      	b.n	80051d2 <HAL_GPIO_Init+0x13e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2bff      	cmp	r3, #255	@ 0xff
 80051d8:	d802      	bhi.n	80051e0 <HAL_GPIO_Init+0x14c>
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	e002      	b.n	80051e6 <HAL_GPIO_Init+0x152>
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	3b08      	subs	r3, #8
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	210f      	movs	r1, #15
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	6a39      	ldr	r1, [r7, #32]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80c1 	beq.w	8005396 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005214:	4b49      	ldr	r3, [pc, #292]	@ (800533c <HAL_GPIO_Init+0x2a8>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	4a48      	ldr	r2, [pc, #288]	@ (800533c <HAL_GPIO_Init+0x2a8>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6193      	str	r3, [r2, #24]
 8005220:	4b46      	ldr	r3, [pc, #280]	@ (800533c <HAL_GPIO_Init+0x2a8>)
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800522c:	4a44      	ldr	r2, [pc, #272]	@ (8005340 <HAL_GPIO_Init+0x2ac>)
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	3302      	adds	r3, #2
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	220f      	movs	r2, #15
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3c      	ldr	r2, [pc, #240]	@ (8005344 <HAL_GPIO_Init+0x2b0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d01f      	beq.n	8005298 <HAL_GPIO_Init+0x204>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3b      	ldr	r2, [pc, #236]	@ (8005348 <HAL_GPIO_Init+0x2b4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d019      	beq.n	8005294 <HAL_GPIO_Init+0x200>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3a      	ldr	r2, [pc, #232]	@ (800534c <HAL_GPIO_Init+0x2b8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_GPIO_Init+0x1fc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a39      	ldr	r2, [pc, #228]	@ (8005350 <HAL_GPIO_Init+0x2bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00d      	beq.n	800528c <HAL_GPIO_Init+0x1f8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a38      	ldr	r2, [pc, #224]	@ (8005354 <HAL_GPIO_Init+0x2c0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <HAL_GPIO_Init+0x1f4>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a37      	ldr	r2, [pc, #220]	@ (8005358 <HAL_GPIO_Init+0x2c4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_GPIO_Init+0x1f0>
 8005280:	2305      	movs	r3, #5
 8005282:	e00a      	b.n	800529a <HAL_GPIO_Init+0x206>
 8005284:	2306      	movs	r3, #6
 8005286:	e008      	b.n	800529a <HAL_GPIO_Init+0x206>
 8005288:	2304      	movs	r3, #4
 800528a:	e006      	b.n	800529a <HAL_GPIO_Init+0x206>
 800528c:	2303      	movs	r3, #3
 800528e:	e004      	b.n	800529a <HAL_GPIO_Init+0x206>
 8005290:	2302      	movs	r3, #2
 8005292:	e002      	b.n	800529a <HAL_GPIO_Init+0x206>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <HAL_GPIO_Init+0x206>
 8005298:	2300      	movs	r3, #0
 800529a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529c:	f002 0203 	and.w	r2, r2, #3
 80052a0:	0092      	lsls	r2, r2, #2
 80052a2:	4093      	lsls	r3, r2
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052aa:	4925      	ldr	r1, [pc, #148]	@ (8005340 <HAL_GPIO_Init+0x2ac>)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	089b      	lsrs	r3, r3, #2
 80052b0:	3302      	adds	r3, #2
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052c4:	4b25      	ldr	r3, [pc, #148]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4924      	ldr	r1, [pc, #144]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	608b      	str	r3, [r1, #8]
 80052d0:	e006      	b.n	80052e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052d2:	4b22      	ldr	r3, [pc, #136]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	43db      	mvns	r3, r3
 80052da:	4920      	ldr	r1, [pc, #128]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052dc:	4013      	ands	r3, r2
 80052de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80052ec:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	491a      	ldr	r1, [pc, #104]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60cb      	str	r3, [r1, #12]
 80052f8:	e006      	b.n	8005308 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80052fa:	4b18      	ldr	r3, [pc, #96]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	43db      	mvns	r3, r3
 8005302:	4916      	ldr	r1, [pc, #88]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 8005304:	4013      	ands	r3, r2
 8005306:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d025      	beq.n	8005360 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4910      	ldr	r1, [pc, #64]	@ (800535c <HAL_GPIO_Init+0x2c8>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
 8005320:	e025      	b.n	800536e <HAL_GPIO_Init+0x2da>
 8005322:	bf00      	nop
 8005324:	10320000 	.word	0x10320000
 8005328:	10310000 	.word	0x10310000
 800532c:	10220000 	.word	0x10220000
 8005330:	10210000 	.word	0x10210000
 8005334:	10120000 	.word	0x10120000
 8005338:	10110000 	.word	0x10110000
 800533c:	40021000 	.word	0x40021000
 8005340:	40010000 	.word	0x40010000
 8005344:	40010800 	.word	0x40010800
 8005348:	40010c00 	.word	0x40010c00
 800534c:	40011000 	.word	0x40011000
 8005350:	40011400 	.word	0x40011400
 8005354:	40011800 	.word	0x40011800
 8005358:	40011c00 	.word	0x40011c00
 800535c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005360:	4b15      	ldr	r3, [pc, #84]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	43db      	mvns	r3, r3
 8005368:	4913      	ldr	r1, [pc, #76]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 800536a:	4013      	ands	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800537a:	4b0f      	ldr	r3, [pc, #60]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	490e      	ldr	r1, [pc, #56]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
 8005386:	e006      	b.n	8005396 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005388:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	43db      	mvns	r3, r3
 8005390:	4909      	ldr	r1, [pc, #36]	@ (80053b8 <HAL_GPIO_Init+0x324>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	3301      	adds	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f ae7e 	bne.w	80050a8 <HAL_GPIO_Init+0x14>
  }
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	372c      	adds	r7, #44	@ 0x2c
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40010400 	.word	0x40010400

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053d8:	e003      	b.n	80053e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	041a      	lsls	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e272      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8087 	beq.w	800551a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800540c:	4b92      	ldr	r3, [pc, #584]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b04      	cmp	r3, #4
 8005416:	d00c      	beq.n	8005432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005418:	4b8f      	ldr	r3, [pc, #572]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b08      	cmp	r3, #8
 8005422:	d112      	bne.n	800544a <HAL_RCC_OscConfig+0x5e>
 8005424:	4b8c      	ldr	r3, [pc, #560]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	d10b      	bne.n	800544a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005432:	4b89      	ldr	r3, [pc, #548]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d06c      	beq.n	8005518 <HAL_RCC_OscConfig+0x12c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d168      	bne.n	8005518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e24c      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005452:	d106      	bne.n	8005462 <HAL_RCC_OscConfig+0x76>
 8005454:	4b80      	ldr	r3, [pc, #512]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a7f      	ldr	r2, [pc, #508]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800545a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e02e      	b.n	80054c0 <HAL_RCC_OscConfig+0xd4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <HAL_RCC_OscConfig+0x98>
 800546a:	4b7b      	ldr	r3, [pc, #492]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a7a      	ldr	r2, [pc, #488]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b78      	ldr	r3, [pc, #480]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a77      	ldr	r2, [pc, #476]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800547c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e01d      	b.n	80054c0 <HAL_RCC_OscConfig+0xd4>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0xbc>
 800548e:	4b72      	ldr	r3, [pc, #456]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a71      	ldr	r2, [pc, #452]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b6f      	ldr	r3, [pc, #444]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6e      	ldr	r2, [pc, #440]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0xd4>
 80054a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b68      	ldr	r3, [pc, #416]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a67      	ldr	r2, [pc, #412]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7ff f848 	bl	800455c <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d0:	f7ff f844 	bl	800455c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e200      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0xe4>
 80054ee:	e014      	b.n	800551a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7ff f834 	bl	800455c <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f8:	f7ff f830 	bl	800455c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	@ 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e1ec      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x10c>
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d063      	beq.n	80055ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005526:	4b4c      	ldr	r3, [pc, #304]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005532:	4b49      	ldr	r3, [pc, #292]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b08      	cmp	r3, #8
 800553c:	d11c      	bne.n	8005578 <HAL_RCC_OscConfig+0x18c>
 800553e:	4b46      	ldr	r3, [pc, #280]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d116      	bne.n	8005578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554a:	4b43      	ldr	r3, [pc, #268]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_RCC_OscConfig+0x176>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e1c0      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005562:	4b3d      	ldr	r3, [pc, #244]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4939      	ldr	r1, [pc, #228]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	e03a      	b.n	80055ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005580:	4b36      	ldr	r3, [pc, #216]	@ (800565c <HAL_RCC_OscConfig+0x270>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7fe ffe9 	bl	800455c <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558e:	f7fe ffe5 	bl	800455c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e1a1      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4927      	ldr	r1, [pc, #156]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]
 80055c0:	e015      	b.n	80055ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c2:	4b26      	ldr	r3, [pc, #152]	@ (800565c <HAL_RCC_OscConfig+0x270>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fe ffc8 	bl	800455c <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d0:	f7fe ffc4 	bl	800455c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e180      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d03a      	beq.n	8005670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d019      	beq.n	8005636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005602:	4b17      	ldr	r3, [pc, #92]	@ (8005660 <HAL_RCC_OscConfig+0x274>)
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005608:	f7fe ffa8 	bl	800455c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005610:	f7fe ffa4 	bl	800455c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e160      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <HAL_RCC_OscConfig+0x26c>)
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800562e:	2001      	movs	r0, #1
 8005630:	f000 face 	bl	8005bd0 <RCC_Delay>
 8005634:	e01c      	b.n	8005670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <HAL_RCC_OscConfig+0x274>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563c:	f7fe ff8e 	bl	800455c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005642:	e00f      	b.n	8005664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005644:	f7fe ff8a 	bl	800455c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d908      	bls.n	8005664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e146      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000
 800565c:	42420000 	.word	0x42420000
 8005660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	4b92      	ldr	r3, [pc, #584]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e9      	bne.n	8005644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80a6 	beq.w	80057ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b8b      	ldr	r3, [pc, #556]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	4b88      	ldr	r3, [pc, #544]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4a87      	ldr	r2, [pc, #540]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005698:	61d3      	str	r3, [r2, #28]
 800569a:	4b85      	ldr	r3, [pc, #532]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056aa:	4b82      	ldr	r3, [pc, #520]	@ (80058b4 <HAL_RCC_OscConfig+0x4c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d118      	bne.n	80056e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b6:	4b7f      	ldr	r3, [pc, #508]	@ (80058b4 <HAL_RCC_OscConfig+0x4c8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a7e      	ldr	r2, [pc, #504]	@ (80058b4 <HAL_RCC_OscConfig+0x4c8>)
 80056bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fe ff4b 	bl	800455c <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7fe ff47 	bl	800455c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b64      	cmp	r3, #100	@ 0x64
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e103      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b75      	ldr	r3, [pc, #468]	@ (80058b4 <HAL_RCC_OscConfig+0x4c8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d106      	bne.n	80056fe <HAL_RCC_OscConfig+0x312>
 80056f0:	4b6f      	ldr	r3, [pc, #444]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4a6e      	ldr	r2, [pc, #440]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6213      	str	r3, [r2, #32]
 80056fc:	e02d      	b.n	800575a <HAL_RCC_OscConfig+0x36e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <HAL_RCC_OscConfig+0x334>
 8005706:	4b6a      	ldr	r3, [pc, #424]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4a69      	ldr	r2, [pc, #420]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	6213      	str	r3, [r2, #32]
 8005712:	4b67      	ldr	r3, [pc, #412]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4a66      	ldr	r2, [pc, #408]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	6213      	str	r3, [r2, #32]
 800571e:	e01c      	b.n	800575a <HAL_RCC_OscConfig+0x36e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b05      	cmp	r3, #5
 8005726:	d10c      	bne.n	8005742 <HAL_RCC_OscConfig+0x356>
 8005728:	4b61      	ldr	r3, [pc, #388]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4a60      	ldr	r2, [pc, #384]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	6213      	str	r3, [r2, #32]
 8005734:	4b5e      	ldr	r3, [pc, #376]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	4a5d      	ldr	r2, [pc, #372]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6213      	str	r3, [r2, #32]
 8005740:	e00b      	b.n	800575a <HAL_RCC_OscConfig+0x36e>
 8005742:	4b5b      	ldr	r3, [pc, #364]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	4a5a      	ldr	r2, [pc, #360]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	6213      	str	r3, [r2, #32]
 800574e:	4b58      	ldr	r3, [pc, #352]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	4a57      	ldr	r2, [pc, #348]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d015      	beq.n	800578e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005762:	f7fe fefb 	bl	800455c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fe fef7 	bl	800455c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0b1      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	4b4b      	ldr	r3, [pc, #300]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ee      	beq.n	800576a <HAL_RCC_OscConfig+0x37e>
 800578c:	e014      	b.n	80057b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fe fee5 	bl	800455c <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fe fee1 	bl	800455c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e09b      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ac:	4b40      	ldr	r3, [pc, #256]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ee      	bne.n	8005796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057be:	4b3c      	ldr	r3, [pc, #240]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	4a3b      	ldr	r2, [pc, #236]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8087 	beq.w	80058e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d4:	4b36      	ldr	r3, [pc, #216]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d061      	beq.n	80058a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d146      	bne.n	8005876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e8:	4b33      	ldr	r3, [pc, #204]	@ (80058b8 <HAL_RCC_OscConfig+0x4cc>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ee:	f7fe feb5 	bl	800455c <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f6:	f7fe feb1 	bl	800455c <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e06d      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005808:	4b29      	ldr	r3, [pc, #164]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581c:	d108      	bne.n	8005830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800581e:	4b24      	ldr	r3, [pc, #144]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	4921      	ldr	r1, [pc, #132]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005830:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a19      	ldr	r1, [r3, #32]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	430b      	orrs	r3, r1
 8005842:	491b      	ldr	r1, [pc, #108]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005848:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <HAL_RCC_OscConfig+0x4cc>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584e:	f7fe fe85 	bl	800455c <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005856:	f7fe fe81 	bl	800455c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e03d      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f0      	beq.n	8005856 <HAL_RCC_OscConfig+0x46a>
 8005874:	e035      	b.n	80058e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005876:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <HAL_RCC_OscConfig+0x4cc>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7fe fe6e 	bl	800455c <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005884:	f7fe fe6a 	bl	800455c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e026      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005896:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x498>
 80058a2:	e01e      	b.n	80058e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e019      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40007000 	.word	0x40007000
 80058b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_RCC_OscConfig+0x500>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	429a      	cmp	r2, r3
 80058dc:	d001      	beq.n	80058e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000

080058f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0d0      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005904:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d910      	bls.n	8005934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b67      	ldr	r3, [pc, #412]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 0207 	bic.w	r2, r3, #7
 800591a:	4965      	ldr	r1, [pc, #404]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b63      	ldr	r3, [pc, #396]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0b8      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800594c:	4b59      	ldr	r3, [pc, #356]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a58      	ldr	r2, [pc, #352]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005956:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005964:	4b53      	ldr	r3, [pc, #332]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a52      	ldr	r2, [pc, #328]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800596e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b50      	ldr	r3, [pc, #320]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	494d      	ldr	r1, [pc, #308]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d040      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b47      	ldr	r3, [pc, #284]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d115      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b41      	ldr	r3, [pc, #260]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e073      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059be:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06b      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ce:	4b39      	ldr	r3, [pc, #228]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4936      	ldr	r1, [pc, #216]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e0:	f7fe fdbc 	bl	800455c <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e8:	f7fe fdb8 	bl	800455c <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e053      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 020c 	and.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1eb      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a10:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d210      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	4922      	ldr	r1, [pc, #136]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e032      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a4c:	4b19      	ldr	r3, [pc, #100]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4916      	ldr	r1, [pc, #88]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a6a:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	490e      	ldr	r1, [pc, #56]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a7e:	f000 f821 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	490a      	ldr	r1, [pc, #40]	@ (8005ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	5ccb      	ldrb	r3, [r1, r3]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a09      	ldr	r2, [pc, #36]	@ (8005abc <HAL_RCC_ClockConfig+0x1cc>)
 8005a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fd1a 	bl	80044d8 <HAL_InitTick>

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40022000 	.word	0x40022000
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	08008874 	.word	0x08008874
 8005abc:	20000010 	.word	0x20000010
 8005ac0:	20000014 	.word	0x20000014

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d002      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x30>
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d003      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x36>
 8005af2:	e027      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005af6:	613b      	str	r3, [r7, #16]
      break;
 8005af8:	e027      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	0c9b      	lsrs	r3, r3, #18
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b04:	5cd3      	ldrb	r3, [r2, r3]
 8005b06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b12:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	0c5b      	lsrs	r3, r3, #17
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	4a11      	ldr	r2, [pc, #68]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a0d      	ldr	r2, [pc, #52]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b26:	fb03 f202 	mul.w	r2, r3, r2
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e004      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a0c      	ldr	r2, [pc, #48]	@ (8005b68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	613b      	str	r3, [r7, #16]
      break;
 8005b42:	e002      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b46:	613b      	str	r3, [r7, #16]
      break;
 8005b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b4a:	693b      	ldr	r3, [r7, #16]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	007a1200 	.word	0x007a1200
 8005b60:	0800888c 	.word	0x0800888c
 8005b64:	0800889c 	.word	0x0800889c
 8005b68:	003d0900 	.word	0x003d0900

08005b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b70:	4b02      	ldr	r3, [pc, #8]	@ (8005b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	20000010 	.word	0x20000010

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b84:	f7ff fff2 	bl	8005b6c <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4903      	ldr	r1, [pc, #12]	@ (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	08008884 	.word	0x08008884

08005ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bac:	f7ff ffde 	bl	8005b6c <HAL_RCC_GetHCLKFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0adb      	lsrs	r3, r3, #11
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	4903      	ldr	r1, [pc, #12]	@ (8005bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	08008884 	.word	0x08008884

08005bd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c04 <RCC_Delay+0x34>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <RCC_Delay+0x38>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	0a5b      	lsrs	r3, r3, #9
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bec:	bf00      	nop
  }
  while (Delay --);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	60fa      	str	r2, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f9      	bne.n	8005bec <RCC_Delay+0x1c>
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr
 8005c04:	20000010 	.word	0x20000010
 8005c08:	10624dd3 	.word	0x10624dd3

08005c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e041      	b.n	8005ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe fa12 	bl	800405c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f000 fe04 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e041      	b.n	8005d40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f839 	bl	8005d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 fdb5 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x24>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e022      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x6a>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d109      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x3e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e015      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x6a>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x58>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e008      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x6a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e072      	b.n	8005eb4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_PWM_Start+0x82>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ddc:	e013      	b.n	8005e06 <HAL_TIM_PWM_Start+0xaa>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0x92>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dec:	e00b      	b.n	8005e06 <HAL_TIM_PWM_Start+0xaa>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0xa2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dfc:	e003      	b.n	8005e06 <HAL_TIM_PWM_Start+0xaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 f8f7 	bl	8007002 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a28      	ldr	r2, [pc, #160]	@ (8005ebc <HAL_TIM_PWM_Start+0x160>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_PWM_Start+0xcc>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a27      	ldr	r2, [pc, #156]	@ (8005ec0 <HAL_TIM_PWM_Start+0x164>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d101      	bne.n	8005e2c <HAL_TIM_PWM_Start+0xd0>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_TIM_PWM_Start+0xd2>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <HAL_TIM_PWM_Start+0x160>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x122>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <HAL_TIM_PWM_Start+0x164>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x122>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d00e      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x122>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a17      	ldr	r2, [pc, #92]	@ (8005ec4 <HAL_TIM_PWM_Start+0x168>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x122>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_TIM_PWM_Start+0x16c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x122>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <HAL_TIM_PWM_Start+0x170>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d111      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b06      	cmp	r3, #6
 8005e8e:	d010      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea0:	e007      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800
 8005ecc:	40000c00 	.word	0x40000c00

08005ed0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e041      	b.n	8005f66 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f839 	bl	8005f6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f000 fca2 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_IC_Start_IT+0x1e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e013      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x46>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_IC_Start_IT+0x2e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x46>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_IC_Start_IT+0x3e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x46>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_TIM_IC_Start_IT+0x58>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e013      	b.n	8006000 <HAL_TIM_IC_Start_IT+0x80>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d104      	bne.n	8005fe8 <HAL_TIM_IC_Start_IT+0x68>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e00b      	b.n	8006000 <HAL_TIM_IC_Start_IT+0x80>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d104      	bne.n	8005ff8 <HAL_TIM_IC_Start_IT+0x78>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e003      	b.n	8006000 <HAL_TIM_IC_Start_IT+0x80>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006008:	7b7b      	ldrb	r3, [r7, #13]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0c2      	b.n	8006198 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_TIM_IC_Start_IT+0xa2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006020:	e013      	b.n	800604a <HAL_TIM_IC_Start_IT+0xca>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d104      	bne.n	8006032 <HAL_TIM_IC_Start_IT+0xb2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006030:	e00b      	b.n	800604a <HAL_TIM_IC_Start_IT+0xca>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d104      	bne.n	8006042 <HAL_TIM_IC_Start_IT+0xc2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006040:	e003      	b.n	800604a <HAL_TIM_IC_Start_IT+0xca>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_TIM_IC_Start_IT+0xda>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006058:	e013      	b.n	8006082 <HAL_TIM_IC_Start_IT+0x102>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d104      	bne.n	800606a <HAL_TIM_IC_Start_IT+0xea>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006068:	e00b      	b.n	8006082 <HAL_TIM_IC_Start_IT+0x102>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d104      	bne.n	800607a <HAL_TIM_IC_Start_IT+0xfa>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006078:	e003      	b.n	8006082 <HAL_TIM_IC_Start_IT+0x102>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b0c      	cmp	r3, #12
 8006086:	d841      	bhi.n	800610c <HAL_TIM_IC_Start_IT+0x18c>
 8006088:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <HAL_TIM_IC_Start_IT+0x110>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060c5 	.word	0x080060c5
 8006094:	0800610d 	.word	0x0800610d
 8006098:	0800610d 	.word	0x0800610d
 800609c:	0800610d 	.word	0x0800610d
 80060a0:	080060d7 	.word	0x080060d7
 80060a4:	0800610d 	.word	0x0800610d
 80060a8:	0800610d 	.word	0x0800610d
 80060ac:	0800610d 	.word	0x0800610d
 80060b0:	080060e9 	.word	0x080060e9
 80060b4:	0800610d 	.word	0x0800610d
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	080060fb 	.word	0x080060fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0202 	orr.w	r2, r2, #2
 80060d2:	60da      	str	r2, [r3, #12]
      break;
 80060d4:	e01d      	b.n	8006112 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0204 	orr.w	r2, r2, #4
 80060e4:	60da      	str	r2, [r3, #12]
      break;
 80060e6:	e014      	b.n	8006112 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	60da      	str	r2, [r3, #12]
      break;
 80060f8:	e00b      	b.n	8006112 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0210 	orr.w	r2, r2, #16
 8006108:	60da      	str	r2, [r3, #12]
      break;
 800610a:	e002      	b.n	8006112 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	bf00      	nop
  }

  if (status == HAL_OK)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d13e      	bne.n	8006196 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 ff6e 	bl	8007002 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <HAL_TIM_IC_Start_IT+0x220>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <HAL_TIM_IC_Start_IT+0x1e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	@ (80061a4 <HAL_TIM_IC_Start_IT+0x224>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_TIM_IC_Start_IT+0x1e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006142:	d00e      	beq.n	8006162 <HAL_TIM_IC_Start_IT+0x1e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a17      	ldr	r2, [pc, #92]	@ (80061a8 <HAL_TIM_IC_Start_IT+0x228>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_TIM_IC_Start_IT+0x1e2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a16      	ldr	r2, [pc, #88]	@ (80061ac <HAL_TIM_IC_Start_IT+0x22c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_TIM_IC_Start_IT+0x1e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <HAL_TIM_IC_Start_IT+0x230>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b06      	cmp	r3, #6
 8006172:	d010      	beq.n	8006196 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	e007      	b.n	8006196 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40013400 	.word	0x40013400
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00

080061b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0202 	mvn.w	r2, #2
 80061e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc fe6a 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fb0e 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fb14 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b04      	cmp	r3, #4
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0204 	mvn.w	r2, #4
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fe40 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fae4 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 faea 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b08      	cmp	r3, #8
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0208 	mvn.w	r2, #8
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2204      	movs	r2, #4
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fc fe16 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 faba 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fac0 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d122      	bne.n	800630c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0210 	mvn.w	r2, #16
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2208      	movs	r2, #8
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc fdec 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa90 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa96 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d107      	bne.n	8006338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0201 	mvn.w	r2, #1
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa6b 	bl	800680e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b80      	cmp	r3, #128	@ 0x80
 8006344:	d10e      	bne.n	8006364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	2b80      	cmp	r3, #128	@ 0x80
 8006352:	d107      	bne.n	8006364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800635c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 ff3a 	bl	80071d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d10e      	bne.n	8006390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d107      	bne.n	8006390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa5a 	bl	8006844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b20      	cmp	r3, #32
 800639c:	d10e      	bne.n	80063bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d107      	bne.n	80063bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0220 	mvn.w	r2, #32
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 ff05 	bl	80071c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80063de:	2302      	movs	r3, #2
 80063e0:	e088      	b.n	80064f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006400:	f000 fc50 	bl	8006ca4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 020c 	bic.w	r2, r2, #12
 8006412:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6999      	ldr	r1, [r3, #24]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	619a      	str	r2, [r3, #24]
 8006426:	e060      	b.n	80064ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d11c      	bne.n	8006468 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800643e:	f000 fcc5 	bl	8006dcc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006450:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6999      	ldr	r1, [r3, #24]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	021a      	lsls	r2, r3, #8
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	619a      	str	r2, [r3, #24]
 8006466:	e040      	b.n	80064ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b08      	cmp	r3, #8
 800646c:	d11b      	bne.n	80064a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800647e:	f000 fd10 	bl	8006ea2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 020c 	bic.w	r2, r2, #12
 8006490:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69d9      	ldr	r1, [r3, #28]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]
 80064a4:	e021      	b.n	80064ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d11c      	bne.n	80064e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80064bc:	f000 fd2c 	bl	8006f18 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80064ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69d9      	ldr	r1, [r3, #28]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	61da      	str	r2, [r3, #28]
 80064e4:	e001      	b.n	80064ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006516:	2302      	movs	r3, #2
 8006518:	e0ae      	b.n	8006678 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b0c      	cmp	r3, #12
 8006526:	f200 809f 	bhi.w	8006668 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006565 	.word	0x08006565
 8006534:	08006669 	.word	0x08006669
 8006538:	08006669 	.word	0x08006669
 800653c:	08006669 	.word	0x08006669
 8006540:	080065a5 	.word	0x080065a5
 8006544:	08006669 	.word	0x08006669
 8006548:	08006669 	.word	0x08006669
 800654c:	08006669 	.word	0x08006669
 8006550:	080065e7 	.word	0x080065e7
 8006554:	08006669 	.word	0x08006669
 8006558:	08006669 	.word	0x08006669
 800655c:	08006669 	.word	0x08006669
 8006560:	08006627 	.word	0x08006627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f9ee 	bl	800694c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	619a      	str	r2, [r3, #24]
      break;
 80065a2:	e064      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fa3e 	bl	8006a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	619a      	str	r2, [r3, #24]
      break;
 80065e4:	e043      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fa91 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0204 	bic.w	r2, r2, #4
 8006610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]
      break;
 8006624:	e023      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fae5 	bl	8006bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	021a      	lsls	r2, r3, #8
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	61da      	str	r2, [r3, #28]
      break;
 8006666:	e002      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
      break;
 800666c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIM_ConfigClockSource+0x1c>
 8006698:	2302      	movs	r3, #2
 800669a:	e0b4      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x186>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d4:	d03e      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0xd4>
 80066d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066da:	f200 8087 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e2:	f000 8086 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x172>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ea:	d87f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b70      	cmp	r3, #112	@ 0x70
 80066ee:	d01a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xa6>
 80066f0:	2b70      	cmp	r3, #112	@ 0x70
 80066f2:	d87b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b60      	cmp	r3, #96	@ 0x60
 80066f6:	d050      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x11a>
 80066f8:	2b60      	cmp	r3, #96	@ 0x60
 80066fa:	d877      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b50      	cmp	r3, #80	@ 0x50
 80066fe:	d03c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0xfa>
 8006700:	2b50      	cmp	r3, #80	@ 0x50
 8006702:	d873      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b40      	cmp	r3, #64	@ 0x40
 8006706:	d058      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x13a>
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d86f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b30      	cmp	r3, #48	@ 0x30
 800670e:	d064      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b30      	cmp	r3, #48	@ 0x30
 8006712:	d86b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d060      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d867      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	2b10      	cmp	r3, #16
 8006722:	d05a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	e062      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006736:	f000 fc45 	bl	8006fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	609a      	str	r2, [r3, #8]
      break;
 8006752:	e04f      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006764:	f000 fc2e 	bl	8006fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e03c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	461a      	mov	r2, r3
 8006788:	f000 faf2 	bl	8006d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2150      	movs	r1, #80	@ 0x50
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fbfc 	bl	8006f90 <TIM_ITRx_SetConfig>
      break;
 8006798:	e02c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 fb4c 	bl	8006e44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2160      	movs	r1, #96	@ 0x60
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fbec 	bl	8006f90 <TIM_ITRx_SetConfig>
      break;
 80067b8:	e01c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 fad2 	bl	8006d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2140      	movs	r1, #64	@ 0x40
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fbdc 	bl	8006f90 <TIM_ITRx_SetConfig>
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 fbd3 	bl	8006f90 <TIM_ITRx_SetConfig>
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
	...

08006858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <TIM_Base_SetConfig+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a32      	ldr	r2, [pc, #200]	@ (800693c <TIM_Base_SetConfig+0xe4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00f      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687e:	d00b      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2f      	ldr	r2, [pc, #188]	@ (8006940 <TIM_Base_SetConfig+0xe8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d007      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <TIM_Base_SetConfig+0xec>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2d      	ldr	r2, [pc, #180]	@ (8006948 <TIM_Base_SetConfig+0xf0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d108      	bne.n	80068aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a22      	ldr	r2, [pc, #136]	@ (8006938 <TIM_Base_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <TIM_Base_SetConfig+0x82>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a21      	ldr	r2, [pc, #132]	@ (800693c <TIM_Base_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00f      	beq.n	80068da <TIM_Base_SetConfig+0x82>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c0:	d00b      	beq.n	80068da <TIM_Base_SetConfig+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006940 <TIM_Base_SetConfig+0xe8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_Base_SetConfig+0x82>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <TIM_Base_SetConfig+0xec>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_Base_SetConfig+0x82>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006948 <TIM_Base_SetConfig+0xf0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d108      	bne.n	80068ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <TIM_Base_SetConfig+0xe0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_Base_SetConfig+0xc8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a08      	ldr	r2, [pc, #32]	@ (800693c <TIM_Base_SetConfig+0xe4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d103      	bne.n	8006928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	615a      	str	r2, [r3, #20]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00

0800694c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 0201 	bic.w	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0302 	bic.w	r3, r3, #2
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a20      	ldr	r2, [pc, #128]	@ (8006a24 <TIM_OC1_SetConfig+0xd8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC1_SetConfig+0x64>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <TIM_OC1_SetConfig+0xdc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10c      	bne.n	80069ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0308 	bic.w	r3, r3, #8
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <TIM_OC1_SetConfig+0xd8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC1_SetConfig+0x8e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a14      	ldr	r2, [pc, #80]	@ (8006a28 <TIM_OC1_SetConfig+0xdc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d111      	bne.n	80069fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400

08006a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0320 	bic.w	r3, r3, #32
 8006a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a21      	ldr	r2, [pc, #132]	@ (8006b0c <TIM_OC2_SetConfig+0xe0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC2_SetConfig+0x68>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a20      	ldr	r2, [pc, #128]	@ (8006b10 <TIM_OC2_SetConfig+0xe4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d10d      	bne.n	8006ab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <TIM_OC2_SetConfig+0xe0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC2_SetConfig+0x94>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a15      	ldr	r2, [pc, #84]	@ (8006b10 <TIM_OC2_SetConfig+0xe4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a21      	ldr	r2, [pc, #132]	@ (8006bf4 <TIM_OC3_SetConfig+0xe0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_OC3_SetConfig+0x66>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a20      	ldr	r2, [pc, #128]	@ (8006bf8 <TIM_OC3_SetConfig+0xe4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10d      	bne.n	8006b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a16      	ldr	r2, [pc, #88]	@ (8006bf4 <TIM_OC3_SetConfig+0xe0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_OC3_SetConfig+0x92>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	@ (8006bf8 <TIM_OC3_SetConfig+0xe4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d113      	bne.n	8006bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40013400 	.word	0x40013400

08006bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	031b      	lsls	r3, r3, #12
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a11      	ldr	r2, [pc, #68]	@ (8006c9c <TIM_OC4_SetConfig+0xa0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC4_SetConfig+0x68>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <TIM_OC4_SetConfig+0xa4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d109      	bne.n	8006c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400

08006ca4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 0201 	bic.w	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	@ (8006d5c <TIM_TI1_SetConfig+0xb8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <TIM_TI1_SetConfig+0x56>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a22      	ldr	r2, [pc, #136]	@ (8006d60 <TIM_TI1_SetConfig+0xbc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_TI1_SetConfig+0x56>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce0:	d00b      	beq.n	8006cfa <TIM_TI1_SetConfig+0x56>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d64 <TIM_TI1_SetConfig+0xc0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_TI1_SetConfig+0x56>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a1e      	ldr	r2, [pc, #120]	@ (8006d68 <TIM_TI1_SetConfig+0xc4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_TI1_SetConfig+0x56>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d6c <TIM_TI1_SetConfig+0xc8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <TIM_TI1_SetConfig+0x5a>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <TIM_TI1_SetConfig+0x5c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e003      	b.n	8006d1e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f003 030a 	and.w	r3, r3, #10
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	40012c00 	.word	0x40012c00
 8006d60:	40013400 	.word	0x40013400
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00

08006d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0201 	bic.w	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 030a 	bic.w	r3, r3, #10
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f023 0210 	bic.w	r2, r3, #16
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	031b      	lsls	r3, r3, #12
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0210 	bic.w	r2, r3, #16
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	031b      	lsls	r3, r3, #12
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	031b      	lsls	r3, r3, #12
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	031b      	lsls	r3, r3, #12
 8006f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f043 0307 	orr.w	r3, r3, #7
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	609a      	str	r2, [r3, #8]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	021a      	lsls	r2, r3, #8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	371c      	adds	r7, #28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	2201      	movs	r2, #1
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	43db      	mvns	r3, r3
 8007024:	401a      	ands	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
	...

0800704c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007060:	2302      	movs	r3, #2
 8007062:	e050      	b.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d018      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a19      	ldr	r2, [pc, #100]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ba:	d00e      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a15      	ldr	r2, [pc, #84]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d009      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a14      	ldr	r2, [pc, #80]	@ (800711c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a12      	ldr	r2, [pc, #72]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10c      	bne.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00

08007124 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800713c:	2302      	movs	r3, #2
 800713e:	e03d      	b.n	80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e042      	b.n	8007282 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fc ffb1 	bl	8004178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2224      	movs	r2, #36	@ 0x24
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800722c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 ff30 	bl	8008094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007242:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695a      	ldr	r2, [r3, #20]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007252:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007262:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08c      	sub	sp, #48	@ 0x30
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d156      	bne.n	8007354 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_UART_Transmit_DMA+0x26>
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e04f      	b.n	8007356 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2221      	movs	r2, #33	@ 0x21
 80072d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <HAL_UART_Transmit_DMA+0xd4>)
 80072dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <HAL_UART_Transmit_DMA+0xd8>)
 80072e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007368 <HAL_UART_Transmit_DMA+0xdc>)
 80072ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	2200      	movs	r2, #0
 80072f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3304      	adds	r3, #4
 800730a:	461a      	mov	r2, r3
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	f7fd fab3 	bl	8004878 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800731a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3314      	adds	r3, #20
 8007322:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	617b      	str	r3, [r7, #20]
   return(result);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733c:	627a      	str	r2, [r7, #36]	@ 0x24
 800733e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6a39      	ldr	r1, [r7, #32]
 8007342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	61fb      	str	r3, [r7, #28]
   return(result);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3730      	adds	r7, #48	@ 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	08007929 	.word	0x08007929
 8007364:	080079c3 	.word	0x080079c3
 8007368:	08007b47 	.word	0x08007b47

0800736c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b20      	cmp	r3, #32
 8007384:	d112      	bne.n	80073ac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_UART_Receive_DMA+0x26>
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e00b      	b.n	80073ae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	461a      	mov	r2, r3
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fc1a 	bl	8007bdc <UART_Start_Receive_DMA>
 80073a8:	4603      	mov	r3, r0
 80073aa:	e000      	b.n	80073ae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b0ba      	sub	sp, #232	@ 0xe8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073de:	2300      	movs	r3, #0
 80073e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fd7e 	bl	8007f18 <UART_Receive_IT>
      return;
 800741c:	e25b      	b.n	80078d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800741e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80de 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
 8007428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80d1 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	f043 0201 	orr.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
 8007472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
 8007496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d011      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
 80074ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	f043 0208 	orr.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 81f2 	beq.w	80078cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fd09 	bl	8007f18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <HAL_UART_IRQHandler+0x17a>
 800752a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04f      	beq.n	80075d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fc13 	bl	8007d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d041      	beq.n	80075ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800755c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800757e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1d9      	bne.n	8007546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d013      	beq.n	80075c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759e:	4a7e      	ldr	r2, [pc, #504]	@ (8007798 <HAL_UART_IRQHandler+0x3e0>)
 80075a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fa02 	bl	80049b0 <HAL_DMA_Abort_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e00e      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f99c 	bl	8007900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	e00a      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f998 	bl	8007900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	e006      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f994 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80075de:	e175      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	bf00      	nop
    return;
 80075e2:	e173      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 814f 	bne.w	800788c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8148 	beq.w	800788c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8141 	beq.w	800788c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80b6 	beq.w	800779c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8145 	beq.w	80078d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800764a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800764e:	429a      	cmp	r2, r3
 8007650:	f080 813e 	bcs.w	80078d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800765a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b20      	cmp	r3, #32
 8007664:	f000 8088 	beq.w	8007778 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800767e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007694:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007698:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1d9      	bne.n	8007668 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3314      	adds	r3, #20
 80076ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3314      	adds	r3, #20
 80076d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e1      	bne.n	80076b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3314      	adds	r3, #20
 80076f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3314      	adds	r3, #20
 8007710:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007714:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007716:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800771a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e3      	bne.n	80076f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007748:	f023 0310 	bic.w	r3, r3, #16
 800774c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800775a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800775c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007772:	4618      	mov	r0, r3
 8007774:	f7fd f8e0 	bl	8004938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007786:	b29b      	uxth	r3, r3
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	b29b      	uxth	r3, r3
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8bf 	bl	8007912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007794:	e09c      	b.n	80078d0 <HAL_UART_IRQHandler+0x518>
 8007796:	bf00      	nop
 8007798:	08007e23 	.word	0x08007e23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 808e 	beq.w	80078d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80077b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8089 	beq.w	80078d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80077e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e3      	bne.n	80077c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3314      	adds	r3, #20
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	623b      	str	r3, [r7, #32]
   return(result);
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3314      	adds	r3, #20
 800781a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800781e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e3      	bne.n	80077fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007864:	61fa      	str	r2, [r7, #28]
 8007866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	69b9      	ldr	r1, [r7, #24]
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	617b      	str	r3, [r7, #20]
   return(result);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e3      	bne.n	8007840 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800787e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f844 	bl	8007912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800788a:	e023      	b.n	80078d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <HAL_UART_IRQHandler+0x4f4>
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800789c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fad0 	bl	8007e4a <UART_Transmit_IT>
    return;
 80078aa:	e014      	b.n	80078d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00e      	beq.n	80078d6 <HAL_UART_IRQHandler+0x51e>
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb0f 	bl	8007ee8 <UART_EndTransmit_IT>
    return;
 80078ca:	e004      	b.n	80078d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80078cc:	bf00      	nop
 80078ce:	e002      	b.n	80078d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80078d0:	bf00      	nop
 80078d2:	e000      	b.n	80078d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80078d4:	bf00      	nop
  }
}
 80078d6:	37e8      	adds	r7, #232	@ 0xe8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bc80      	pop	{r7}
 80078ec:	4770      	bx	lr

080078ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr

08007912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr

08007928 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b090      	sub	sp, #64	@ 0x40
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d137      	bne.n	80079b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007946:	2200      	movs	r2, #0
 8007948:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800794a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3314      	adds	r3, #20
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	623b      	str	r3, [r7, #32]
   return(result);
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3314      	adds	r3, #20
 8007968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800796a:	633a      	str	r2, [r7, #48]	@ 0x30
 800796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800797e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	60fb      	str	r3, [r7, #12]
   return(result);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
 8007996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	69b9      	ldr	r1, [r7, #24]
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	617b      	str	r3, [r7, #20]
   return(result);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079b2:	e002      	b.n	80079ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80079b6:	f7fb fa6f 	bl	8002e98 <HAL_UART_TxCpltCallback>
}
 80079ba:	bf00      	nop
 80079bc:	3740      	adds	r7, #64	@ 0x40
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff ff83 	bl	80078dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b09c      	sub	sp, #112	@ 0x70
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d172      	bne.n	8007ae0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80079fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079fc:	2200      	movs	r2, #0
 80079fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e5      	bne.n	8007a00 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3314      	adds	r3, #20
 8007a52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a54:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e5      	bne.n	8007a34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	623b      	str	r3, [r7, #32]
   return(result);
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3314      	adds	r3, #20
 8007a86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a88:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d119      	bne.n	8007ae0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0310 	bic.w	r3, r3, #16
 8007ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007acc:	61fa      	str	r2, [r7, #28]
 8007ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d106      	bne.n	8007afc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007af2:	4619      	mov	r1, r3
 8007af4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007af6:	f7ff ff0c 	bl	8007912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007afa:	e002      	b.n	8007b02 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007afc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007afe:	f7fb f9d9 	bl	8002eb4 <HAL_UART_RxCpltCallback>
}
 8007b02:	bf00      	nop
 8007b04:	3770      	adds	r7, #112	@ 0x70
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d108      	bne.n	8007b38 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff feee 	bl	8007912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b36:	e002      	b.n	8007b3e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fed8 	bl	80078ee <HAL_UART_RxHalfCpltCallback>
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b21      	cmp	r3, #33	@ 0x21
 8007b78:	d108      	bne.n	8007b8c <UART_DMAError+0x46>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007b86:	68b8      	ldr	r0, [r7, #8]
 8007b88:	f000 f8c2 	bl	8007d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf14      	ite	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	2300      	moveq	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b22      	cmp	r3, #34	@ 0x22
 8007bac:	d108      	bne.n	8007bc0 <UART_DMAError+0x7a>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007bba:	68b8      	ldr	r0, [r7, #8]
 8007bbc:	f000 f8cf 	bl	8007d5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc4:	f043 0210 	orr.w	r2, r3, #16
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bcc:	68b8      	ldr	r0, [r7, #8]
 8007bce:	f7ff fe97 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b098      	sub	sp, #96	@ 0x60
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2222      	movs	r2, #34	@ 0x22
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c08:	4a3e      	ldr	r2, [pc, #248]	@ (8007d04 <UART_Start_Receive_DMA+0x128>)
 8007c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	4a3d      	ldr	r2, [pc, #244]	@ (8007d08 <UART_Start_Receive_DMA+0x12c>)
 8007c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c18:	4a3c      	ldr	r2, [pc, #240]	@ (8007d0c <UART_Start_Receive_DMA+0x130>)
 8007c1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c20:	2200      	movs	r2, #0
 8007c22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c24:	f107 0308 	add.w	r3, r7, #8
 8007c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	f7fc fe1c 	bl	8004878 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d019      	beq.n	8007c92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007c80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e5      	bne.n	8007c5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3314      	adds	r3, #20
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3314      	adds	r3, #20
 8007cb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007cb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e5      	bne.n	8007c92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3314      	adds	r3, #20
 8007ce4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ce6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6a39      	ldr	r1, [r7, #32]
 8007cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3760      	adds	r7, #96	@ 0x60
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	080079df 	.word	0x080079df
 8007d08:	08007b0b 	.word	0x08007b0b
 8007d0c:	08007b47 	.word	0x08007b47

08007d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	@ 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	330c      	adds	r3, #12
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	61ba      	str	r2, [r7, #24]
 8007d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	613b      	str	r3, [r7, #16]
   return(result);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007d54:	bf00      	nop
 8007d56:	3724      	adds	r7, #36	@ 0x24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b095      	sub	sp, #84	@ 0x54
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d86:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e5      	bne.n	8007d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3314      	adds	r3, #20
 8007da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d119      	bne.n	8007e0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f023 0310 	bic.w	r3, r3, #16
 8007dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007df6:	61ba      	str	r2, [r7, #24]
 8007df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	613b      	str	r3, [r7, #16]
   return(result);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e5      	bne.n	8007dd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e18:	bf00      	nop
 8007e1a:	3754      	adds	r7, #84	@ 0x54
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr

08007e22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff fd5f 	bl	8007900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b21      	cmp	r3, #33	@ 0x21
 8007e5c:	d13e      	bne.n	8007edc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e66:	d114      	bne.n	8007e92 <UART_Transmit_IT+0x48>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d110      	bne.n	8007e92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]
 8007e90:	e008      	b.n	8007ea4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6211      	str	r1, [r2, #32]
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10f      	bne.n	8007ed8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ec6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ed6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e000      	b.n	8007ede <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007edc:	2302      	movs	r3, #2
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007efe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fa ffc5 	bl	8002e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08c      	sub	sp, #48	@ 0x30
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b22      	cmp	r3, #34	@ 0x22
 8007f2a:	f040 80ae 	bne.w	800808a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	d117      	bne.n	8007f68 <UART_Receive_IT+0x50>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d113      	bne.n	8007f68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	1c9a      	adds	r2, r3, #2
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f66:	e026      	b.n	8007fb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7a:	d007      	beq.n	8007f8c <UART_Receive_IT+0x74>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <UART_Receive_IT+0x82>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	e008      	b.n	8007fac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d15d      	bne.n	8008086 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0220 	bic.w	r2, r2, #32
 8007fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0201 	bic.w	r2, r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	d135      	bne.n	800807c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	613b      	str	r3, [r7, #16]
   return(result);
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f023 0310 	bic.w	r3, r3, #16
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008036:	623a      	str	r2, [r7, #32]
 8008038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	69f9      	ldr	r1, [r7, #28]
 800803c:	6a3a      	ldr	r2, [r7, #32]
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	61bb      	str	r3, [r7, #24]
   return(result);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e5      	bne.n	8008016 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d10a      	bne.n	800806e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fc4c 	bl	8007912 <HAL_UARTEx_RxEventCallback>
 800807a:	e002      	b.n	8008082 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7fa ff19 	bl	8002eb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	e002      	b.n	800808c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	e000      	b.n	800808c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800808a:	2302      	movs	r3, #2
  }
}
 800808c:	4618      	mov	r0, r3
 800808e:	3730      	adds	r7, #48	@ 0x30
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80080ce:	f023 030c 	bic.w	r3, r3, #12
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	68b9      	ldr	r1, [r7, #8]
 80080d8:	430b      	orrs	r3, r1
 80080da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <UART_SetConfig+0x114>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d103      	bne.n	8008104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080fc:	f7fd fd54 	bl	8005ba8 <HAL_RCC_GetPCLK2Freq>
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	e002      	b.n	800810a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fd fd3c 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8008108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009a      	lsls	r2, r3, #2
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	4a22      	ldr	r2, [pc, #136]	@ (80081ac <UART_SetConfig+0x118>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	0119      	lsls	r1, r3, #4
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009a      	lsls	r2, r3, #2
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008140:	4b1a      	ldr	r3, [pc, #104]	@ (80081ac <UART_SetConfig+0x118>)
 8008142:	fba3 0302 	umull	r0, r3, r3, r2
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	2064      	movs	r0, #100	@ 0x64
 800814a:	fb00 f303 	mul.w	r3, r0, r3
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	3332      	adds	r3, #50	@ 0x32
 8008154:	4a15      	ldr	r2, [pc, #84]	@ (80081ac <UART_SetConfig+0x118>)
 8008156:	fba2 2303 	umull	r2, r3, r2, r3
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008160:	4419      	add	r1, r3
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009a      	lsls	r2, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	fbb2 f2f3 	udiv	r2, r2, r3
 8008178:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <UART_SetConfig+0x118>)
 800817a:	fba3 0302 	umull	r0, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	2064      	movs	r0, #100	@ 0x64
 8008182:	fb00 f303 	mul.w	r3, r0, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	3332      	adds	r3, #50	@ 0x32
 800818c:	4a07      	ldr	r2, [pc, #28]	@ (80081ac <UART_SetConfig+0x118>)
 800818e:	fba2 2303 	umull	r2, r3, r2, r3
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	f003 020f 	and.w	r2, r3, #15
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	440a      	add	r2, r1
 800819e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40013800 	.word	0x40013800
 80081ac:	51eb851f 	.word	0x51eb851f

080081b0 <calloc>:
 80081b0:	4b02      	ldr	r3, [pc, #8]	@ (80081bc <calloc+0xc>)
 80081b2:	460a      	mov	r2, r1
 80081b4:	4601      	mov	r1, r0
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	f000 b802 	b.w	80081c0 <_calloc_r>
 80081bc:	2000001c 	.word	0x2000001c

080081c0 <_calloc_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	fba1 5402 	umull	r5, r4, r1, r2
 80081c6:	b93c      	cbnz	r4, 80081d8 <_calloc_r+0x18>
 80081c8:	4629      	mov	r1, r5
 80081ca:	f000 f82f 	bl	800822c <_malloc_r>
 80081ce:	4606      	mov	r6, r0
 80081d0:	b928      	cbnz	r0, 80081de <_calloc_r+0x1e>
 80081d2:	2600      	movs	r6, #0
 80081d4:	4630      	mov	r0, r6
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	220c      	movs	r2, #12
 80081da:	6002      	str	r2, [r0, #0]
 80081dc:	e7f9      	b.n	80081d2 <_calloc_r+0x12>
 80081de:	462a      	mov	r2, r5
 80081e0:	4621      	mov	r1, r4
 80081e2:	f000 f8e5 	bl	80083b0 <memset>
 80081e6:	e7f5      	b.n	80081d4 <_calloc_r+0x14>

080081e8 <sbrk_aligned>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008228 <sbrk_aligned+0x40>)
 80081ec:	460c      	mov	r4, r1
 80081ee:	6831      	ldr	r1, [r6, #0]
 80081f0:	4605      	mov	r5, r0
 80081f2:	b911      	cbnz	r1, 80081fa <sbrk_aligned+0x12>
 80081f4:	f000 f8e4 	bl	80083c0 <_sbrk_r>
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f8df 	bl	80083c0 <_sbrk_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d103      	bne.n	800820e <sbrk_aligned+0x26>
 8008206:	f04f 34ff 	mov.w	r4, #4294967295
 800820a:	4620      	mov	r0, r4
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	f024 0403 	bic.w	r4, r4, #3
 8008214:	42a0      	cmp	r0, r4
 8008216:	d0f8      	beq.n	800820a <sbrk_aligned+0x22>
 8008218:	1a21      	subs	r1, r4, r0
 800821a:	4628      	mov	r0, r5
 800821c:	f000 f8d0 	bl	80083c0 <_sbrk_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d1f2      	bne.n	800820a <sbrk_aligned+0x22>
 8008224:	e7ef      	b.n	8008206 <sbrk_aligned+0x1e>
 8008226:	bf00      	nop
 8008228:	200043b8 	.word	0x200043b8

0800822c <_malloc_r>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	1ccd      	adds	r5, r1, #3
 8008232:	f025 0503 	bic.w	r5, r5, #3
 8008236:	3508      	adds	r5, #8
 8008238:	2d0c      	cmp	r5, #12
 800823a:	bf38      	it	cc
 800823c:	250c      	movcc	r5, #12
 800823e:	2d00      	cmp	r5, #0
 8008240:	4606      	mov	r6, r0
 8008242:	db01      	blt.n	8008248 <_malloc_r+0x1c>
 8008244:	42a9      	cmp	r1, r5
 8008246:	d904      	bls.n	8008252 <_malloc_r+0x26>
 8008248:	230c      	movs	r3, #12
 800824a:	6033      	str	r3, [r6, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008252:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008328 <_malloc_r+0xfc>
 8008256:	f000 f869 	bl	800832c <__malloc_lock>
 800825a:	f8d8 3000 	ldr.w	r3, [r8]
 800825e:	461c      	mov	r4, r3
 8008260:	bb44      	cbnz	r4, 80082b4 <_malloc_r+0x88>
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff ffbf 	bl	80081e8 <sbrk_aligned>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	4604      	mov	r4, r0
 800826e:	d158      	bne.n	8008322 <_malloc_r+0xf6>
 8008270:	f8d8 4000 	ldr.w	r4, [r8]
 8008274:	4627      	mov	r7, r4
 8008276:	2f00      	cmp	r7, #0
 8008278:	d143      	bne.n	8008302 <_malloc_r+0xd6>
 800827a:	2c00      	cmp	r4, #0
 800827c:	d04b      	beq.n	8008316 <_malloc_r+0xea>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	4639      	mov	r1, r7
 8008282:	4630      	mov	r0, r6
 8008284:	eb04 0903 	add.w	r9, r4, r3
 8008288:	f000 f89a 	bl	80083c0 <_sbrk_r>
 800828c:	4581      	cmp	r9, r0
 800828e:	d142      	bne.n	8008316 <_malloc_r+0xea>
 8008290:	6821      	ldr	r1, [r4, #0]
 8008292:	4630      	mov	r0, r6
 8008294:	1a6d      	subs	r5, r5, r1
 8008296:	4629      	mov	r1, r5
 8008298:	f7ff ffa6 	bl	80081e8 <sbrk_aligned>
 800829c:	3001      	adds	r0, #1
 800829e:	d03a      	beq.n	8008316 <_malloc_r+0xea>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	442b      	add	r3, r5
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	f8d8 3000 	ldr.w	r3, [r8]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	bb62      	cbnz	r2, 8008308 <_malloc_r+0xdc>
 80082ae:	f8c8 7000 	str.w	r7, [r8]
 80082b2:	e00f      	b.n	80082d4 <_malloc_r+0xa8>
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	1b52      	subs	r2, r2, r5
 80082b8:	d420      	bmi.n	80082fc <_malloc_r+0xd0>
 80082ba:	2a0b      	cmp	r2, #11
 80082bc:	d917      	bls.n	80082ee <_malloc_r+0xc2>
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	6025      	str	r5, [r4, #0]
 80082c4:	bf18      	it	ne
 80082c6:	6059      	strne	r1, [r3, #4]
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	bf08      	it	eq
 80082cc:	f8c8 1000 	streq.w	r1, [r8]
 80082d0:	5162      	str	r2, [r4, r5]
 80082d2:	604b      	str	r3, [r1, #4]
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f82f 	bl	8008338 <__malloc_unlock>
 80082da:	f104 000b 	add.w	r0, r4, #11
 80082de:	1d23      	adds	r3, r4, #4
 80082e0:	f020 0007 	bic.w	r0, r0, #7
 80082e4:	1ac2      	subs	r2, r0, r3
 80082e6:	bf1c      	itt	ne
 80082e8:	1a1b      	subne	r3, r3, r0
 80082ea:	50a3      	strne	r3, [r4, r2]
 80082ec:	e7af      	b.n	800824e <_malloc_r+0x22>
 80082ee:	6862      	ldr	r2, [r4, #4]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	bf0c      	ite	eq
 80082f4:	f8c8 2000 	streq.w	r2, [r8]
 80082f8:	605a      	strne	r2, [r3, #4]
 80082fa:	e7eb      	b.n	80082d4 <_malloc_r+0xa8>
 80082fc:	4623      	mov	r3, r4
 80082fe:	6864      	ldr	r4, [r4, #4]
 8008300:	e7ae      	b.n	8008260 <_malloc_r+0x34>
 8008302:	463c      	mov	r4, r7
 8008304:	687f      	ldr	r7, [r7, #4]
 8008306:	e7b6      	b.n	8008276 <_malloc_r+0x4a>
 8008308:	461a      	mov	r2, r3
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	42a3      	cmp	r3, r4
 800830e:	d1fb      	bne.n	8008308 <_malloc_r+0xdc>
 8008310:	2300      	movs	r3, #0
 8008312:	6053      	str	r3, [r2, #4]
 8008314:	e7de      	b.n	80082d4 <_malloc_r+0xa8>
 8008316:	230c      	movs	r3, #12
 8008318:	4630      	mov	r0, r6
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f000 f80c 	bl	8008338 <__malloc_unlock>
 8008320:	e794      	b.n	800824c <_malloc_r+0x20>
 8008322:	6005      	str	r5, [r0, #0]
 8008324:	e7d6      	b.n	80082d4 <_malloc_r+0xa8>
 8008326:	bf00      	nop
 8008328:	200043bc 	.word	0x200043bc

0800832c <__malloc_lock>:
 800832c:	4801      	ldr	r0, [pc, #4]	@ (8008334 <__malloc_lock+0x8>)
 800832e:	f000 b881 	b.w	8008434 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	200044fc 	.word	0x200044fc

08008338 <__malloc_unlock>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__malloc_unlock+0x8>)
 800833a:	f000 b87c 	b.w	8008436 <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	200044fc 	.word	0x200044fc

08008344 <realloc>:
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <realloc+0xc>)
 8008346:	460a      	mov	r2, r1
 8008348:	4601      	mov	r1, r0
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	f000 b802 	b.w	8008354 <_realloc_r>
 8008350:	2000001c 	.word	0x2000001c

08008354 <_realloc_r>:
 8008354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008358:	4680      	mov	r8, r0
 800835a:	4615      	mov	r5, r2
 800835c:	460c      	mov	r4, r1
 800835e:	b921      	cbnz	r1, 800836a <_realloc_r+0x16>
 8008360:	4611      	mov	r1, r2
 8008362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	f7ff bf61 	b.w	800822c <_malloc_r>
 800836a:	b92a      	cbnz	r2, 8008378 <_realloc_r+0x24>
 800836c:	f000 f872 	bl	8008454 <_free_r>
 8008370:	2400      	movs	r4, #0
 8008372:	4620      	mov	r0, r4
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	f000 f8b4 	bl	80084e4 <_malloc_usable_size_r>
 800837c:	4285      	cmp	r5, r0
 800837e:	4606      	mov	r6, r0
 8008380:	d802      	bhi.n	8008388 <_realloc_r+0x34>
 8008382:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008386:	d8f4      	bhi.n	8008372 <_realloc_r+0x1e>
 8008388:	4629      	mov	r1, r5
 800838a:	4640      	mov	r0, r8
 800838c:	f7ff ff4e 	bl	800822c <_malloc_r>
 8008390:	4607      	mov	r7, r0
 8008392:	2800      	cmp	r0, #0
 8008394:	d0ec      	beq.n	8008370 <_realloc_r+0x1c>
 8008396:	42b5      	cmp	r5, r6
 8008398:	462a      	mov	r2, r5
 800839a:	4621      	mov	r1, r4
 800839c:	bf28      	it	cs
 800839e:	4632      	movcs	r2, r6
 80083a0:	f000 f84a 	bl	8008438 <memcpy>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4640      	mov	r0, r8
 80083a8:	f000 f854 	bl	8008454 <_free_r>
 80083ac:	463c      	mov	r4, r7
 80083ae:	e7e0      	b.n	8008372 <_realloc_r+0x1e>

080083b0 <memset>:
 80083b0:	4603      	mov	r3, r0
 80083b2:	4402      	add	r2, r0
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d100      	bne.n	80083ba <memset+0xa>
 80083b8:	4770      	bx	lr
 80083ba:	f803 1b01 	strb.w	r1, [r3], #1
 80083be:	e7f9      	b.n	80083b4 <memset+0x4>

080083c0 <_sbrk_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	2300      	movs	r3, #0
 80083c4:	4d05      	ldr	r5, [pc, #20]	@ (80083dc <_sbrk_r+0x1c>)
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7fb ffe0 	bl	8004390 <_sbrk>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_sbrk_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_sbrk_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	200044f8 	.word	0x200044f8

080083e0 <__errno>:
 80083e0:	4b01      	ldr	r3, [pc, #4]	@ (80083e8 <__errno+0x8>)
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	2000001c 	.word	0x2000001c

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	2600      	movs	r6, #0
 80083f0:	4d0c      	ldr	r5, [pc, #48]	@ (8008424 <__libc_init_array+0x38>)
 80083f2:	4c0d      	ldr	r4, [pc, #52]	@ (8008428 <__libc_init_array+0x3c>)
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	f000 f87a 	bl	80084f4 <_init>
 8008400:	2600      	movs	r6, #0
 8008402:	4d0a      	ldr	r5, [pc, #40]	@ (800842c <__libc_init_array+0x40>)
 8008404:	4c0a      	ldr	r4, [pc, #40]	@ (8008430 <__libc_init_array+0x44>)
 8008406:	1b64      	subs	r4, r4, r5
 8008408:	10a4      	asrs	r4, r4, #2
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f855 3b04 	ldr.w	r3, [r5], #4
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f855 3b04 	ldr.w	r3, [r5], #4
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	080088a8 	.word	0x080088a8
 8008428:	080088a8 	.word	0x080088a8
 800842c:	080088a8 	.word	0x080088a8
 8008430:	080088b0 	.word	0x080088b0

08008434 <__retarget_lock_acquire_recursive>:
 8008434:	4770      	bx	lr

08008436 <__retarget_lock_release_recursive>:
 8008436:	4770      	bx	lr

08008438 <memcpy>:
 8008438:	440a      	add	r2, r1
 800843a:	4291      	cmp	r1, r2
 800843c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008440:	d100      	bne.n	8008444 <memcpy+0xc>
 8008442:	4770      	bx	lr
 8008444:	b510      	push	{r4, lr}
 8008446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800844a:	4291      	cmp	r1, r2
 800844c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008450:	d1f9      	bne.n	8008446 <memcpy+0xe>
 8008452:	bd10      	pop	{r4, pc}

08008454 <_free_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4605      	mov	r5, r0
 8008458:	2900      	cmp	r1, #0
 800845a:	d040      	beq.n	80084de <_free_r+0x8a>
 800845c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008460:	1f0c      	subs	r4, r1, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	bfb8      	it	lt
 8008466:	18e4      	addlt	r4, r4, r3
 8008468:	f7ff ff60 	bl	800832c <__malloc_lock>
 800846c:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <_free_r+0x8c>)
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	b933      	cbnz	r3, 8008480 <_free_r+0x2c>
 8008472:	6063      	str	r3, [r4, #4]
 8008474:	6014      	str	r4, [r2, #0]
 8008476:	4628      	mov	r0, r5
 8008478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847c:	f7ff bf5c 	b.w	8008338 <__malloc_unlock>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d908      	bls.n	8008496 <_free_r+0x42>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	1821      	adds	r1, r4, r0
 8008488:	428b      	cmp	r3, r1
 800848a:	bf01      	itttt	eq
 800848c:	6819      	ldreq	r1, [r3, #0]
 800848e:	685b      	ldreq	r3, [r3, #4]
 8008490:	1809      	addeq	r1, r1, r0
 8008492:	6021      	streq	r1, [r4, #0]
 8008494:	e7ed      	b.n	8008472 <_free_r+0x1e>
 8008496:	461a      	mov	r2, r3
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b10b      	cbz	r3, 80084a0 <_free_r+0x4c>
 800849c:	42a3      	cmp	r3, r4
 800849e:	d9fa      	bls.n	8008496 <_free_r+0x42>
 80084a0:	6811      	ldr	r1, [r2, #0]
 80084a2:	1850      	adds	r0, r2, r1
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d10b      	bne.n	80084c0 <_free_r+0x6c>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4401      	add	r1, r0
 80084ac:	1850      	adds	r0, r2, r1
 80084ae:	4283      	cmp	r3, r0
 80084b0:	6011      	str	r1, [r2, #0]
 80084b2:	d1e0      	bne.n	8008476 <_free_r+0x22>
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4408      	add	r0, r1
 80084ba:	6010      	str	r0, [r2, #0]
 80084bc:	6053      	str	r3, [r2, #4]
 80084be:	e7da      	b.n	8008476 <_free_r+0x22>
 80084c0:	d902      	bls.n	80084c8 <_free_r+0x74>
 80084c2:	230c      	movs	r3, #12
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	e7d6      	b.n	8008476 <_free_r+0x22>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	1821      	adds	r1, r4, r0
 80084cc:	428b      	cmp	r3, r1
 80084ce:	bf01      	itttt	eq
 80084d0:	6819      	ldreq	r1, [r3, #0]
 80084d2:	685b      	ldreq	r3, [r3, #4]
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	6054      	str	r4, [r2, #4]
 80084dc:	e7cb      	b.n	8008476 <_free_r+0x22>
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200043bc 	.word	0x200043bc

080084e4 <_malloc_usable_size_r>:
 80084e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e8:	1f18      	subs	r0, r3, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bfbc      	itt	lt
 80084ee:	580b      	ldrlt	r3, [r1, r0]
 80084f0:	18c0      	addlt	r0, r0, r3
 80084f2:	4770      	bx	lr

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
