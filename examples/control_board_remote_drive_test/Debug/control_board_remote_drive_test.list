
control_board_remote_drive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d30  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007f14  08007f14  00008f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  080082d0  080082d0  000092d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d8  080082d8  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082e0  080082e0  000092e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080082e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000849c  20000068  08008348  0000a068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008504  08008348  0000a504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ebf  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312a  00000000  00000000  00021f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00025078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce1  00000000  00000000  00026108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c47a  00000000  00000000  00026de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148a6  00000000  00000000  00043263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03df  00000000  00000000  00057b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7ee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  000f7f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000fc944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08007efc 	.word	0x08007efc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08007efc 	.word	0x08007efc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_d2f>:
 8000234:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800023c:	bf24      	itt	cs
 800023e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000246:	d90d      	bls.n	8000264 <__aeabi_d2f+0x30>
 8000248:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800024c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000254:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800025c:	bf08      	it	eq
 800025e:	f020 0001 	biceq.w	r0, r0, #1
 8000262:	4770      	bx	lr
 8000264:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000268:	d121      	bne.n	80002ae <__aeabi_d2f+0x7a>
 800026a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800026e:	bfbc      	itt	lt
 8000270:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000274:	4770      	bxlt	lr
 8000276:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800027a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800027e:	f1c2 0218 	rsb	r2, r2, #24
 8000282:	f1c2 0c20 	rsb	ip, r2, #32
 8000286:	fa10 f30c 	lsls.w	r3, r0, ip
 800028a:	fa20 f002 	lsr.w	r0, r0, r2
 800028e:	bf18      	it	ne
 8000290:	f040 0001 	orrne.w	r0, r0, #1
 8000294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800029c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80002a0:	ea40 000c 	orr.w	r0, r0, ip
 80002a4:	fa23 f302 	lsr.w	r3, r3, r2
 80002a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80002ac:	e7cc      	b.n	8000248 <__aeabi_d2f+0x14>
 80002ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80002b2:	d107      	bne.n	80002c4 <__aeabi_d2f+0x90>
 80002b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80002b8:	bf1e      	ittt	ne
 80002ba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bxne	lr
 80002c4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop

080002d4 <__aeabi_frsub>:
 80002d4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002d8:	e002      	b.n	80002e0 <__addsf3>
 80002da:	bf00      	nop

080002dc <__aeabi_fsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e0 <__addsf3>:
 80002e0:	0042      	lsls	r2, r0, #1
 80002e2:	bf1f      	itttt	ne
 80002e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002e8:	ea92 0f03 	teqne	r2, r3
 80002ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f4:	d06a      	beq.n	80003cc <__addsf3+0xec>
 80002f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002fe:	bfc1      	itttt	gt
 8000300:	18d2      	addgt	r2, r2, r3
 8000302:	4041      	eorgt	r1, r0
 8000304:	4048      	eorgt	r0, r1
 8000306:	4041      	eorgt	r1, r0
 8000308:	bfb8      	it	lt
 800030a:	425b      	neglt	r3, r3
 800030c:	2b19      	cmp	r3, #25
 800030e:	bf88      	it	hi
 8000310:	4770      	bxhi	lr
 8000312:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000316:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4240      	negne	r0, r0
 8000322:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000326:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4249      	negne	r1, r1
 8000332:	ea92 0f03 	teq	r2, r3
 8000336:	d03f      	beq.n	80003b8 <__addsf3+0xd8>
 8000338:	f1a2 0201 	sub.w	r2, r2, #1
 800033c:	fa41 fc03 	asr.w	ip, r1, r3
 8000340:	eb10 000c 	adds.w	r0, r0, ip
 8000344:	f1c3 0320 	rsb	r3, r3, #32
 8000348:	fa01 f103 	lsl.w	r1, r1, r3
 800034c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000350:	d502      	bpl.n	8000358 <__addsf3+0x78>
 8000352:	4249      	negs	r1, r1
 8000354:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000358:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800035c:	d313      	bcc.n	8000386 <__addsf3+0xa6>
 800035e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000362:	d306      	bcc.n	8000372 <__addsf3+0x92>
 8000364:	0840      	lsrs	r0, r0, #1
 8000366:	ea4f 0131 	mov.w	r1, r1, rrx
 800036a:	f102 0201 	add.w	r2, r2, #1
 800036e:	2afe      	cmp	r2, #254	@ 0xfe
 8000370:	d251      	bcs.n	8000416 <__addsf3+0x136>
 8000372:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000376:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037a:	bf08      	it	eq
 800037c:	f020 0001 	biceq.w	r0, r0, #1
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	4770      	bx	lr
 8000386:	0049      	lsls	r1, r1, #1
 8000388:	eb40 0000 	adc.w	r0, r0, r0
 800038c:	3a01      	subs	r2, #1
 800038e:	bf28      	it	cs
 8000390:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000394:	d2ed      	bcs.n	8000372 <__addsf3+0x92>
 8000396:	fab0 fc80 	clz	ip, r0
 800039a:	f1ac 0c08 	sub.w	ip, ip, #8
 800039e:	ebb2 020c 	subs.w	r2, r2, ip
 80003a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003a6:	bfaa      	itet	ge
 80003a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003ac:	4252      	neglt	r2, r2
 80003ae:	4318      	orrge	r0, r3
 80003b0:	bfbc      	itt	lt
 80003b2:	40d0      	lsrlt	r0, r2
 80003b4:	4318      	orrlt	r0, r3
 80003b6:	4770      	bx	lr
 80003b8:	f092 0f00 	teq	r2, #0
 80003bc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c0:	bf06      	itte	eq
 80003c2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003c6:	3201      	addeq	r2, #1
 80003c8:	3b01      	subne	r3, #1
 80003ca:	e7b5      	b.n	8000338 <__addsf3+0x58>
 80003cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d4:	bf18      	it	ne
 80003d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003da:	d021      	beq.n	8000420 <__addsf3+0x140>
 80003dc:	ea92 0f03 	teq	r2, r3
 80003e0:	d004      	beq.n	80003ec <__addsf3+0x10c>
 80003e2:	f092 0f00 	teq	r2, #0
 80003e6:	bf08      	it	eq
 80003e8:	4608      	moveq	r0, r1
 80003ea:	4770      	bx	lr
 80003ec:	ea90 0f01 	teq	r0, r1
 80003f0:	bf1c      	itt	ne
 80003f2:	2000      	movne	r0, #0
 80003f4:	4770      	bxne	lr
 80003f6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fa:	d104      	bne.n	8000406 <__addsf3+0x126>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	bf28      	it	cs
 8000400:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000404:	4770      	bx	lr
 8000406:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040a:	bf3c      	itt	cc
 800040c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000410:	4770      	bxcc	lr
 8000412:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000416:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800041e:	4770      	bx	lr
 8000420:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000424:	bf16      	itet	ne
 8000426:	4608      	movne	r0, r1
 8000428:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800042c:	4601      	movne	r1, r0
 800042e:	0242      	lsls	r2, r0, #9
 8000430:	bf06      	itte	eq
 8000432:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000436:	ea90 0f01 	teqeq	r0, r1
 800043a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800043e:	4770      	bx	lr

08000440 <__aeabi_ui2f>:
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	e004      	b.n	8000450 <__aeabi_i2f+0x8>
 8000446:	bf00      	nop

08000448 <__aeabi_i2f>:
 8000448:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	ea5f 0c00 	movs.w	ip, r0
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800045c:	4601      	mov	r1, r0
 800045e:	f04f 0000 	mov.w	r0, #0
 8000462:	e01c      	b.n	800049e <__aeabi_l2f+0x2a>

08000464 <__aeabi_ul2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	e00a      	b.n	8000488 <__aeabi_l2f+0x14>
 8000472:	bf00      	nop

08000474 <__aeabi_l2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000480:	d502      	bpl.n	8000488 <__aeabi_l2f+0x14>
 8000482:	4240      	negs	r0, r0
 8000484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000488:	ea5f 0c01 	movs.w	ip, r1
 800048c:	bf02      	ittt	eq
 800048e:	4684      	moveq	ip, r0
 8000490:	4601      	moveq	r1, r0
 8000492:	2000      	moveq	r0, #0
 8000494:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000498:	bf08      	it	eq
 800049a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800049e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a2:	fabc f28c 	clz	r2, ip
 80004a6:	3a08      	subs	r2, #8
 80004a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004ac:	db10      	blt.n	80004d0 <__aeabi_l2f+0x5c>
 80004ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b2:	4463      	add	r3, ip
 80004b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	fa20 f202 	lsr.w	r2, r0, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	f020 0001 	biceq.w	r0, r0, #1
 80004ce:	4770      	bx	lr
 80004d0:	f102 0220 	add.w	r2, r2, #32
 80004d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004d8:	f1c2 0220 	rsb	r2, r2, #32
 80004dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e0:	fa21 f202 	lsr.w	r2, r1, r2
 80004e4:	eb43 0002 	adc.w	r0, r3, r2
 80004e8:	bf08      	it	eq
 80004ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ee:	4770      	bx	lr

080004f0 <__aeabi_fmul>:
 80004f0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f8:	bf1e      	ittt	ne
 80004fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004fe:	ea92 0f0c 	teqne	r2, ip
 8000502:	ea93 0f0c 	teqne	r3, ip
 8000506:	d06f      	beq.n	80005e8 <__aeabi_fmul+0xf8>
 8000508:	441a      	add	r2, r3
 800050a:	ea80 0c01 	eor.w	ip, r0, r1
 800050e:	0240      	lsls	r0, r0, #9
 8000510:	bf18      	it	ne
 8000512:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000516:	d01e      	beq.n	8000556 <__aeabi_fmul+0x66>
 8000518:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800051c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000520:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000524:	fba0 3101 	umull	r3, r1, r0, r1
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000530:	bf3e      	ittt	cc
 8000532:	0049      	lslcc	r1, r1, #1
 8000534:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000538:	005b      	lslcc	r3, r3, #1
 800053a:	ea40 0001 	orr.w	r0, r0, r1
 800053e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000542:	2afd      	cmp	r2, #253	@ 0xfd
 8000544:	d81d      	bhi.n	8000582 <__aeabi_fmul+0x92>
 8000546:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800054a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800054e:	bf08      	it	eq
 8000550:	f020 0001 	biceq.w	r0, r0, #1
 8000554:	4770      	bx	lr
 8000556:	f090 0f00 	teq	r0, #0
 800055a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800055e:	bf08      	it	eq
 8000560:	0249      	lsleq	r1, r1, #9
 8000562:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000566:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800056a:	3a7f      	subs	r2, #127	@ 0x7f
 800056c:	bfc2      	ittt	gt
 800056e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000572:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000576:	4770      	bxgt	lr
 8000578:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800057c:	f04f 0300 	mov.w	r3, #0
 8000580:	3a01      	subs	r2, #1
 8000582:	dc5d      	bgt.n	8000640 <__aeabi_fmul+0x150>
 8000584:	f112 0f19 	cmn.w	r2, #25
 8000588:	bfdc      	itt	le
 800058a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800058e:	4770      	bxle	lr
 8000590:	f1c2 0200 	rsb	r2, r2, #0
 8000594:	0041      	lsls	r1, r0, #1
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	f1c2 0220 	rsb	r2, r2, #32
 800059e:	fa00 fc02 	lsl.w	ip, r0, r2
 80005a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80005a6:	f140 0000 	adc.w	r0, r0, #0
 80005aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80005ae:	bf08      	it	eq
 80005b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005b4:	4770      	bx	lr
 80005b6:	f092 0f00 	teq	r2, #0
 80005ba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0040      	lsleq	r0, r0, #1
 80005c2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005c6:	3a01      	subeq	r2, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fmul+0xce>
 80005ca:	ea40 000c 	orr.w	r0, r0, ip
 80005ce:	f093 0f00 	teq	r3, #0
 80005d2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0049      	lsleq	r1, r1, #1
 80005da:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005de:	3b01      	subeq	r3, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fmul+0xe6>
 80005e2:	ea41 010c 	orr.w	r1, r1, ip
 80005e6:	e78f      	b.n	8000508 <__aeabi_fmul+0x18>
 80005e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005ec:	ea92 0f0c 	teq	r2, ip
 80005f0:	bf18      	it	ne
 80005f2:	ea93 0f0c 	teqne	r3, ip
 80005f6:	d00a      	beq.n	800060e <__aeabi_fmul+0x11e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1d8      	bne.n	80005b6 <__aeabi_fmul+0xc6>
 8000604:	ea80 0001 	eor.w	r0, r0, r1
 8000608:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800060c:	4770      	bx	lr
 800060e:	f090 0f00 	teq	r0, #0
 8000612:	bf17      	itett	ne
 8000614:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000618:	4608      	moveq	r0, r1
 800061a:	f091 0f00 	teqne	r1, #0
 800061e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000622:	d014      	beq.n	800064e <__aeabi_fmul+0x15e>
 8000624:	ea92 0f0c 	teq	r2, ip
 8000628:	d101      	bne.n	800062e <__aeabi_fmul+0x13e>
 800062a:	0242      	lsls	r2, r0, #9
 800062c:	d10f      	bne.n	800064e <__aeabi_fmul+0x15e>
 800062e:	ea93 0f0c 	teq	r3, ip
 8000632:	d103      	bne.n	800063c <__aeabi_fmul+0x14c>
 8000634:	024b      	lsls	r3, r1, #9
 8000636:	bf18      	it	ne
 8000638:	4608      	movne	r0, r1
 800063a:	d108      	bne.n	800064e <__aeabi_fmul+0x15e>
 800063c:	ea80 0001 	eor.w	r0, r0, r1
 8000640:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000644:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000648:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800064c:	4770      	bx	lr
 800064e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000652:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000656:	4770      	bx	lr

08000658 <__aeabi_fdiv>:
 8000658:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000660:	bf1e      	ittt	ne
 8000662:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000666:	ea92 0f0c 	teqne	r2, ip
 800066a:	ea93 0f0c 	teqne	r3, ip
 800066e:	d069      	beq.n	8000744 <__aeabi_fdiv+0xec>
 8000670:	eba2 0203 	sub.w	r2, r2, r3
 8000674:	ea80 0c01 	eor.w	ip, r0, r1
 8000678:	0249      	lsls	r1, r1, #9
 800067a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800067e:	d037      	beq.n	80006f0 <__aeabi_fdiv+0x98>
 8000680:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000684:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000688:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800068c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000690:	428b      	cmp	r3, r1
 8000692:	bf38      	it	cc
 8000694:	005b      	lslcc	r3, r3, #1
 8000696:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800069a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800069e:	428b      	cmp	r3, r1
 80006a0:	bf24      	itt	cs
 80006a2:	1a5b      	subcs	r3, r3, r1
 80006a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80006a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80006ac:	bf24      	itt	cs
 80006ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80006b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006ba:	bf24      	itt	cs
 80006bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006c8:	bf24      	itt	cs
 80006ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	bf18      	it	ne
 80006d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006da:	d1e0      	bne.n	800069e <__aeabi_fdiv+0x46>
 80006dc:	2afd      	cmp	r2, #253	@ 0xfd
 80006de:	f63f af50 	bhi.w	8000582 <__aeabi_fmul+0x92>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e8:	bf08      	it	eq
 80006ea:	f020 0001 	biceq.w	r0, r0, #1
 80006ee:	4770      	bx	lr
 80006f0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80006f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006f8:	327f      	adds	r2, #127	@ 0x7f
 80006fa:	bfc2      	ittt	gt
 80006fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000700:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000704:	4770      	bxgt	lr
 8000706:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	3a01      	subs	r2, #1
 8000710:	e737      	b.n	8000582 <__aeabi_fmul+0x92>
 8000712:	f092 0f00 	teq	r2, #0
 8000716:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800071a:	bf02      	ittt	eq
 800071c:	0040      	lsleq	r0, r0, #1
 800071e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000722:	3a01      	subeq	r2, #1
 8000724:	d0f9      	beq.n	800071a <__aeabi_fdiv+0xc2>
 8000726:	ea40 000c 	orr.w	r0, r0, ip
 800072a:	f093 0f00 	teq	r3, #0
 800072e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000732:	bf02      	ittt	eq
 8000734:	0049      	lsleq	r1, r1, #1
 8000736:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800073a:	3b01      	subeq	r3, #1
 800073c:	d0f9      	beq.n	8000732 <__aeabi_fdiv+0xda>
 800073e:	ea41 010c 	orr.w	r1, r1, ip
 8000742:	e795      	b.n	8000670 <__aeabi_fdiv+0x18>
 8000744:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000748:	ea92 0f0c 	teq	r2, ip
 800074c:	d108      	bne.n	8000760 <__aeabi_fdiv+0x108>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	f47f af7d 	bne.w	800064e <__aeabi_fmul+0x15e>
 8000754:	ea93 0f0c 	teq	r3, ip
 8000758:	f47f af70 	bne.w	800063c <__aeabi_fmul+0x14c>
 800075c:	4608      	mov	r0, r1
 800075e:	e776      	b.n	800064e <__aeabi_fmul+0x15e>
 8000760:	ea93 0f0c 	teq	r3, ip
 8000764:	d104      	bne.n	8000770 <__aeabi_fdiv+0x118>
 8000766:	024b      	lsls	r3, r1, #9
 8000768:	f43f af4c 	beq.w	8000604 <__aeabi_fmul+0x114>
 800076c:	4608      	mov	r0, r1
 800076e:	e76e      	b.n	800064e <__aeabi_fmul+0x15e>
 8000770:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000774:	bf18      	it	ne
 8000776:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800077a:	d1ca      	bne.n	8000712 <__aeabi_fdiv+0xba>
 800077c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000780:	f47f af5c 	bne.w	800063c <__aeabi_fmul+0x14c>
 8000784:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000788:	f47f af3c 	bne.w	8000604 <__aeabi_fmul+0x114>
 800078c:	e75f      	b.n	800064e <__aeabi_fmul+0x15e>
 800078e:	bf00      	nop

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, float *b_coefficient, float *a_coefficient)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e015      	b.n	800080e <FO_IIR_Init+0x3e>
    {
        instance->b[i] = b_coefficient[i];
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	6819      	ldr	r1, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	3202      	adds	r2, #2
 8000804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b01      	cmp	r3, #1
 8000812:	dde6      	ble.n	80007e2 <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
}
 8000824:	bf00      	nop
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 800082e:	b5b0      	push	{r4, r5, r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4619      	mov	r1, r3
 8000846:	4610      	mov	r0, r2
 8000848:	f7ff fe52 	bl	80004f0 <__aeabi_fmul>
 800084c:	4603      	mov	r3, r0
 800084e:	461c      	mov	r4, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6839      	ldr	r1, [r7, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe4a 	bl	80004f0 <__aeabi_fmul>
 800085c:	4603      	mov	r3, r0
 800085e:	461d      	mov	r5, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4619      	mov	r1, r3
 800086a:	4610      	mov	r0, r2
 800086c:	f7ff fe40 	bl	80004f0 <__aeabi_fmul>
 8000870:	4603      	mov	r3, r0
 8000872:	4619      	mov	r1, r3
 8000874:	4628      	mov	r0, r5
 8000876:	f7ff fd33 	bl	80002e0 <__addsf3>
 800087a:	4603      	mov	r3, r0
 800087c:	4619      	mov	r1, r3
 800087e:	4620      	mov	r0, r4
 8000880:	f7ff fd2e 	bl	80002e0 <__addsf3>
 8000884:	4603      	mov	r3, r0
 8000886:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	615a      	str	r2, [r3, #20]

    return output;
 8000894:	68fb      	ldr	r3, [r7, #12]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008a0 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	463c      	mov	r4, r7
 80008a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 80008ac:	2110      	movs	r1, #16
 80008ae:	2001      	movs	r0, #1
 80008b0:	f007 f982 	bl	8007bb8 <calloc>
 80008b4:	4603      	mov	r3, r0
 80008b6:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2200      	movs	r2, #0
 80008c2:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 80008d0:	893a      	ldrh	r2, [r7, #8]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <Motor_Init+0x58>)
 80008da:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 80008dc:	2100      	movs	r1, #0
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f000 f832 	bl	8000948 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <Motor_Init+0x58>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f807 	bl	80008fc <Motor_Set_PWM_Frequency>

    return object;
 80008ee:	697b      	ldr	r3, [r7, #20]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	20000084 	.word	0x20000084

080008fc <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <Motor_Set_PWM_Frequency+0x40>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <Motor_Set_PWM_Frequency+0x44>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000910:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <Motor_Set_PWM_Frequency+0x40>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <Motor_Set_PWM_Frequency+0x48>)
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <Motor_Set_PWM_Frequency+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000084 	.word	0x20000084
 8000940:	20000088 	.word	0x20000088
 8000944:	01e84800 	.word	0x01e84800

08000948 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f993 3000 	ldrsb.w	r3, [r3]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d00b      	beq.n	8000976 <Motor_Set_PWM_Duty+0x2e>
                      (motor->direction == DIRECTION_BACKWARD) ? (255-duty) : 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d103      	bne.n	8000972 <Motor_Set_PWM_Duty+0x2a>
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	43db      	mvns	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	e002      	b.n	8000978 <Motor_Set_PWM_Duty+0x30>
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <Motor_Set_PWM_Duty+0x30>
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7053      	strb	r3, [r2, #1]

    float duty_percentage = duty / 255.0f;
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd62 	bl	8000448 <__aeabi_i2f>
 8000984:	4603      	mov	r3, r0
 8000986:	491e      	ldr	r1, [pc, #120]	@ (8000a00 <Motor_Set_PWM_Duty+0xb8>)
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe65 	bl	8000658 <__aeabi_fdiv>
 800098e:	4603      	mov	r3, r0
 8000990:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <Motor_Set_PWM_Duty+0xbc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000998:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 800099a:	6938      	ldr	r0, [r7, #16]
 800099c:	f7ff fd50 	bl	8000440 <__aeabi_ui2f>
 80009a0:	4603      	mov	r3, r0
 80009a2:	6979      	ldr	r1, [r7, #20]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fda3 	bl	80004f0 <__aeabi_fmul>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff feef 	bl	8000790 <__aeabi_f2uiz>
 80009b2:	4603      	mov	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d104      	bne.n	80009c8 <Motor_Set_PWM_Duty+0x80>
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <Motor_Set_PWM_Duty+0xbc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c6:	e015      	b.n	80009f4 <Motor_Set_PWM_Duty+0xac>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d104      	bne.n	80009da <Motor_Set_PWM_Duty+0x92>
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <Motor_Set_PWM_Duty+0xbc>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80009d8:	e00c      	b.n	80009f4 <Motor_Set_PWM_Duty+0xac>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d104      	bne.n	80009ec <Motor_Set_PWM_Duty+0xa4>
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <Motor_Set_PWM_Duty+0xbc>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009ea:	e003      	b.n	80009f4 <Motor_Set_PWM_Duty+0xac>
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <Motor_Set_PWM_Duty+0xbc>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	437f0000 	.word	0x437f0000
 8000a04:	20000088 	.word	0x20000088

08000a08 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f993 3000 	ldrsb.w	r3, [r3]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f815 	bl	8000a48 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <Motor_Start+0x3c>)
 8000a26:	f005 f8f5 	bl	8005c14 <HAL_TIM_PWM_Start>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <Motor_Start+0x32>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e000      	b.n	8000a3c <Motor_Start+0x34>

    return STATUS_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000088 	.word	0x20000088

08000a48 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	78fa      	ldrb	r2, [r7, #3]
 8000a58:	701a      	strb	r2, [r3, #0]
    if (direction == DIRECTION_FORWARD)
 8000a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d107      	bne.n	8000a72 <Motor_SetDirection+0x2a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6898      	ldr	r0, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	899b      	ldrh	r3, [r3, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f004 fc01 	bl	8005274 <HAL_GPIO_WritePin>
    if (direction == DIRECTION_BACKWARD)
 8000a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7a:	d107      	bne.n	8000a8c <Motor_SetDirection+0x44>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6898      	ldr	r0, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	899b      	ldrh	r3, [r3, #12]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	f004 fbf4 	bl	8005274 <HAL_GPIO_WritePin>

    return STATUS_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 8000aa2:	210c      	movs	r1, #12
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f007 f887 	bl	8007bb8 <calloc>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	609a      	str	r2, [r3, #8]

    return object;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f003 fc48 	bl	8004364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f80f 	bl	8000af6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 f9f6 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000adc:	f000 f9ce 	bl	8000e7c <MX_DMA_Init>
  MX_TIM1_Init();
 8000ae0:	f000 f84a 	bl	8000b78 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ae4:	f000 f90c 	bl	8000d00 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000ae8:	f000 f99e 	bl	8000e28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000aec:	f002 f9aa 	bl	8002e44 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000af0:	f002 f9c8 	bl	8002e84 <loop>
 8000af4:	e7fc      	b.n	8000af0 <main+0x24>

08000af6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b090      	sub	sp, #64	@ 0x40
 8000afa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	2228      	movs	r2, #40	@ 0x28
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 f957 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b2c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fbb4 	bl	80052a4 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b42:	f000 fa27 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 fe22 	bl	80057a8 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b6a:	f000 fa13 	bl	8000f94 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	@ 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b096      	sub	sp, #88	@ 0x58
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 f901 	bl	8007db8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 8000bb6:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bb8:	4a50      	ldr	r2, [pc, #320]	@ (8000cfc <MX_TIM1_Init+0x184>)
 8000bba:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8-1;
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 100-1;
 8000bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bca:	2263      	movs	r2, #99	@ 0x63
 8000bcc:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 8000bd4:	4b48      	ldr	r3, [pc, #288]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 8000be0:	4845      	ldr	r0, [pc, #276]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000be2:	f004 ff6f 	bl	8005ac4 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000bec:	f000 f9d2 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483e      	ldr	r0, [pc, #248]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000bfe:	f005 fa79 	bl	80060f4 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c08:	f000 f9c4 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 8000c0c:	483a      	ldr	r0, [pc, #232]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000c0e:	f004 ffa8 	bl	8005b62 <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c18:	f000 f9bc 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8000c24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4833      	ldr	r0, [pc, #204]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000c2c:	f005 ff24 	bl	8006a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000c36:	f000 f9ad 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	@ 0x60
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4826      	ldr	r0, [pc, #152]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000c60:	f005 f986 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000c6a:	f000 f993 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	2204      	movs	r2, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000c78:	f005 f97a 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000c82:	f000 f987 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481a      	ldr	r0, [pc, #104]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000c90:	f005 f96e 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000c9a:	f000 f97b 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4814      	ldr	r0, [pc, #80]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000ca8:	f005 f962 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000cb2:	f000 f96f 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000cda:	f005 ff39 	bl	8006b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000ce4:	f000 f956 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM1_Init+0x180>)
 8000cea:	f003 f977 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3758      	adds	r7, #88	@ 0x58
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000088 	.word	0x20000088
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d2c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e24 <MX_TIM8_Init+0x124>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b3a      	ldr	r3, [pc, #232]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 8000d3c:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d42:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b36      	ldr	r3, [pc, #216]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 8000d4a:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 8000d56:	4832      	ldr	r0, [pc, #200]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d58:	f004 feb4 	bl	8005ac4 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8000d62:	f000 f917 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4619      	mov	r1, r3
 8000d72:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d74:	f005 f9be 	bl	80060f4 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000d7e:	f000 f909 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 8000d82:	4827      	ldr	r0, [pc, #156]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000d84:	f005 f800 	bl	8005d88 <HAL_TIM_IC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000d8e:	f000 f901 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000da2:	f005 fe69 	bl	8006a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8000dac:	f000 f8f2 	bl	8000f94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4816      	ldr	r0, [pc, #88]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000dc8:	f005 f836 	bl	8005e38 <HAL_TIM_IC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000dd2:	f000 f8df 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000dde:	f005 f82b 	bl	8005e38 <HAL_TIM_IC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8000de8:	f000 f8d4 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	2208      	movs	r2, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000df4:	f005 f820 	bl	8005e38 <HAL_TIM_IC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8000dfe:	f000 f8c9 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e02:	463b      	mov	r3, r7
 8000e04:	220c      	movs	r2, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM8_Init+0x120>)
 8000e0a:	f005 f815 	bl	8005e38 <HAL_TIM_IC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8000e14:	f000 f8be 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	@ 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000d0 	.word	0x200000d0
 8000e24:	40013400 	.word	0x40013400

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000e38:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f005 fec7 	bl	8006bf2 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f893 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000118 	.word	0x20000118
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200e      	movs	r0, #14
 8000ea0:	f003 fb99 	bl	80045d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ea4:	200e      	movs	r0, #14
 8000ea6:	f003 fbb2 	bl	800460e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f003 fb91 	bl	80045d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f003 fbaa 	bl	800460e <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a24      	ldr	r2, [pc, #144]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a18      	ldr	r2, [pc, #96]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_GPIO_Init+0xc4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|MOTOR_DIR_BL_Pin|MOTOR_DIR_BR_Pin|MOTOR_DIR_FL_Pin
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f242 010f 	movw	r1, #8207	@ 0x200f
 8000f42:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <MX_GPIO_Init+0xc8>)
 8000f44:	f004 f996 	bl	8005274 <HAL_GPIO_WritePin>
                          |MOTOR_DIR_FR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <MX_GPIO_Init+0xc8>)
 8000f62:	f003 fff3 	bl	8004f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_BL_Pin MOTOR_DIR_BR_Pin MOTOR_DIR_FL_Pin MOTOR_DIR_FR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_BL_Pin|MOTOR_DIR_BR_Pin|MOTOR_DIR_FL_Pin|MOTOR_DIR_FR_Pin;
 8000f66:	230f      	movs	r3, #15
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <MX_GPIO_Init+0xc8>)
 8000f7e:	f003 ffe5 	bl	8004f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40011000 	.word	0x40011000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <_ZN3ros3MsgC1Ev+0x1c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08008294 	.word	0x08008294

08000fe0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
      data()
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffe8 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffd0 	bl	8000fa0 <_ZN3ros4TimeC1Ev>
    {
    }
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800827c 	.word	0x0800827c

08001010 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6859      	ldr	r1, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	0a19      	lsrs	r1, r3, #8
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	0c19      	lsrs	r1, r3, #16
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3302      	adds	r3, #2
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	b2ca      	uxtb	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	0e19      	lsrs	r1, r3, #24
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3303      	adds	r3, #3
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	4413      	add	r3, r2
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6899      	ldr	r1, [r3, #8]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	0a19      	lsrs	r1, r3, #8
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	0c19      	lsrs	r1, r3, #16
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3302      	adds	r3, #2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	0e19      	lsrs	r1, r3, #24
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3303      	adds	r3, #3
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3304      	adds	r3, #4
 80010b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80010b2:	68fb      	ldr	r3, [r7, #12]
    }
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	440b      	add	r3, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3302      	adds	r3, #2
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	440b      	add	r3, r1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	041b      	lsls	r3, r3, #16
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3303      	adds	r3, #3
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	440b      	add	r3, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	061b      	lsls	r3, r3, #24
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3304      	adds	r3, #4
 8001120:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	440b      	add	r3, r1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3302      	adds	r3, #2
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	440b      	add	r3, r1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3303      	adds	r3, #3
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	440b      	add	r3, r1
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	061b      	lsls	r3, r3, #24
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
     return offset;
 8001178:	68fb      	ldr	r3, [r7, #12]
    }
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	08007f14 	.word	0x08007f14

0800119c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	08007f24 	.word	0x08007f24

080011b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fefe 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011d4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011da:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011e0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
    {
    }
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08008264 	.word	0x08008264
 80011f8:	08007f48 	.word	0x08007f48

080011fc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8899      	ldrh	r1, [r3, #4]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	b2ca      	uxtb	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b299      	uxth	r1, r3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	b2ca      	uxtb	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3302      	adds	r3, #2
 8001230:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4618      	mov	r0, r3
 8001238:	f7fe fff4 	bl	8000224 <strlen>
 800123c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	69b9      	ldr	r1, [r7, #24]
 8001246:	4618      	mov	r0, r3
 8001248:	f001 ff2c 	bl	80030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3304      	adds	r3, #4
 8001250:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	18d0      	adds	r0, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4619      	mov	r1, r3
 8001260:	f006 fdee 	bl	8007e40 <memcpy>
      offset += length_topic_name;
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe ffd7 	bl	8000224 <strlen>
 8001276:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	6979      	ldr	r1, [r7, #20]
 8001280:	4618      	mov	r0, r3
 8001282:	f001 ff0f 	bl	80030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	18d0      	adds	r0, r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4619      	mov	r1, r3
 800129a:	f006 fdd1 	bl	8007e40 <memcpy>
      offset += length_message_type;
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ffba 	bl	8000224 <strlen>
 80012b0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	6939      	ldr	r1, [r7, #16]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fef2 	bl	80030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	3304      	adds	r3, #4
 80012c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	18d0      	adds	r0, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4619      	mov	r1, r3
 80012d4:	f006 fdb4 	bl	8007e40 <memcpy>
      offset += length_md5sum;
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4413      	add	r3, r2
 80012de:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	0a19      	lsrs	r1, r3, #8
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	0c19      	lsrs	r1, r3, #16
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3302      	adds	r3, #2
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	0e19      	lsrs	r1, r3, #24
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3303      	adds	r3, #3
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	61fb      	str	r3, [r7, #28]
      return offset;
 8001328:	69fb      	ldr	r3, [r7, #28]
    }
 800132a:	4618      	mov	r0, r3
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001332:	b580      	push	{r7, lr}
 8001334:	b08a      	sub	sp, #40	@ 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	b21a      	sxth	r2, r3
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21b      	sxth	r3, r3
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	3302      	adds	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	441a      	add	r2, r3
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 feae 	bl	80030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3304      	adds	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	e00b      	b.n	80013a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	441a      	add	r2, r3
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	3b01      	subs	r3, #1
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	440b      	add	r3, r1
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4413      	add	r3, r2
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d3ed      	bcc.n	8001390 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4413      	add	r3, r2
 80013ba:	3b01      	subs	r3, #1
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	441a      	add	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	441a      	add	r2, r3
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fe7b 	bl	80030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3304      	adds	r3, #4
 80013ee:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	441a      	add	r2, r3
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	440b      	add	r3, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	3301      	adds	r3, #1
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4413      	add	r3, r2
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3ed      	bcc.n	80013f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4413      	add	r3, r2
 8001420:	3b01      	subs	r3, #1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	3b01      	subs	r3, #1
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	441a      	add	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4413      	add	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	441a      	add	r2, r3
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fe48 	bl	80030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3304      	adds	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e00b      	b.n	8001474 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	441a      	add	r2, r3
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b01      	subs	r3, #1
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	440b      	add	r3, r1
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3ed      	bcc.n	800145c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	3b01      	subs	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3b01      	subs	r3, #1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	441a      	add	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	440a      	add	r2, r1
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3302      	adds	r3, #2
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	440b      	add	r3, r1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	3303      	adds	r3, #3
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	440b      	add	r3, r1
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	3304      	adds	r3, #4
 80014f6:	61bb      	str	r3, [r7, #24]
     return offset;
 80014f8:	69bb      	ldr	r3, [r7, #24]
    }
 80014fa:	4618      	mov	r0, r3
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	4b02      	ldr	r3, [pc, #8]	@ (8001518 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	08007f4c 	.word	0x08007f4c

0800151c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	4b02      	ldr	r3, [pc, #8]	@ (8001530 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	08007f68 	.word	0x08007f68

08001534 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd3e 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 8001544:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
      level(0),
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	711a      	strb	r2, [r3, #4]
      msg("")
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001554:	609a      	str	r2, [r3, #8]
    {
    }
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	0800824c 	.word	0x0800824c
 8001564:	08007f48 	.word	0x08007f48

08001568 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	7912      	ldrb	r2, [r2, #4]
 8001580:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fe49 	bl	8000224 <strlen>
 8001592:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fd81 	bl	80030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	18d0      	adds	r0, r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f006 fc43 	bl	8007e40 <memcpy>
      offset += length_msg;
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80015c2:	68fb      	ldr	r3, [r7, #12]
    }
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3301      	adds	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	441a      	add	r2, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fd71 	bl	80030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	3304      	adds	r3, #4
 8001602:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e00b      	b.n	8001622 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	441a      	add	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3b01      	subs	r3, #1
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	440b      	add	r3, r1
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	429a      	cmp	r2, r3
 800162c:	d3ed      	bcc.n	800160a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	3b01      	subs	r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3b01      	subs	r3, #1
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	441a      	add	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
     return offset;
 8001652:	693b      	ldr	r3, [r7, #16]
    }
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	4b02      	ldr	r3, [pc, #8]	@ (8001670 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	08007f8c 	.word	0x08007f8c

08001674 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4b02      	ldr	r3, [pc, #8]	@ (8001688 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	08007fa0 	.word	0x08007fa0

0800168c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fc92 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	08008234 	.word	0x08008234

080016e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0c19      	lsrs	r1, r3, #16
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	3302      	adds	r3, #2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	0e19      	lsrs	r1, r3, #24
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	3303      	adds	r3, #3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	3304      	adds	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	e02a      	b.n	800179c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	0a19      	lsrs	r1, r3, #8
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	3301      	adds	r3, #1
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	0c19      	lsrs	r1, r3, #16
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	3302      	adds	r3, #2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	4413      	add	r3, r2
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	0e19      	lsrs	r1, r3, #24
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	3303      	adds	r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	b2ca      	uxtb	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	3304      	adds	r3, #4
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	3301      	adds	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3cf      	bcc.n	8001746 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	0a19      	lsrs	r1, r3, #8
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	0c19      	lsrs	r1, r3, #16
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	3302      	adds	r3, #2
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	0e19      	lsrs	r1, r3, #24
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	3303      	adds	r3, #3
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	3304      	adds	r3, #4
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e02a      	b.n	800184c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	b2ca      	uxtb	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	0a19      	lsrs	r1, r3, #8
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	3301      	adds	r3, #1
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0c19      	lsrs	r1, r3, #16
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	3302      	adds	r3, #2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b2ca      	uxtb	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	0e19      	lsrs	r1, r3, #24
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	3303      	adds	r3, #3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	3304      	adds	r3, #4
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3cf      	bcc.n	80017f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69d9      	ldr	r1, [r3, #28]
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	0a19      	lsrs	r1, r3, #8
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	3301      	adds	r3, #1
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	0c19      	lsrs	r1, r3, #16
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	3302      	adds	r3, #2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	0e19      	lsrs	r1, r3, #24
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	3303      	adds	r3, #3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	3304      	adds	r3, #4
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	e027      	b.n	80018f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fcb6 	bl	8000224 <strlen>
 80018b8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fbee 	bl	80030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	3304      	adds	r3, #4
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	18d0      	adds	r0, r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4619      	mov	r1, r3
 80018e4:	f006 faac 	bl	8007e40 <memcpy>
      offset += length_stringsi;
 80018e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3d2      	bcc.n	80018a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001902:	4618      	mov	r0, r3
 8001904:	3728      	adds	r7, #40	@ 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800190a:	b580      	push	{r7, lr}
 800190c:	b08e      	sub	sp, #56	@ 0x38
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001924:	3301      	adds	r3, #1
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	6a3a      	ldr	r2, [r7, #32]
 8001930:	4313      	orrs	r3, r2
 8001932:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001936:	3302      	adds	r3, #2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	4313      	orrs	r3, r2
 8001944:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001948:	3303      	adds	r3, #3
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	4313      	orrs	r3, r2
 8001956:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195a:	3304      	adds	r3, #4
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	429a      	cmp	r2, r3
 8001966:	d90a      	bls.n	800197e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f006 f9ea 	bl	8007d4c <realloc>
 8001978:	4602      	mov	r2, r0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a3a      	ldr	r2, [r7, #32]
 8001982:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
 8001988:	e035      	b.n	80019f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	440a      	add	r2, r1
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a0:	3301      	adds	r3, #1
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	440b      	add	r3, r1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b2:	3302      	adds	r3, #2
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	440b      	add	r3, r1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	3303      	adds	r3, #3
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80019d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019da:	3304      	adds	r3, #4
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f2:	3301      	adds	r3, #1
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3c4      	bcc.n	800198a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1e:	3302      	adds	r3, #2
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a30:	3303      	adds	r3, #3
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a42:	3304      	adds	r3, #4
 8001a44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d90a      	bls.n	8001a66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f006 f976 	bl	8007d4c <realloc>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a70:	e035      	b.n	8001ade <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	440a      	add	r2, r1
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	3301      	adds	r3, #1
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	3303      	adds	r3, #3
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	3214      	adds	r2, #20
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ada:	3301      	adds	r3, #1
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3c4      	bcc.n	8001a72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af4:	3301      	adds	r3, #1
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b06:	3302      	adds	r3, #2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b18:	3303      	adds	r3, #3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90a      	bls.n	8001b4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f006 f902 	bl	8007d4c <realloc>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b58:	e03e      	b.n	8001bd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	441a      	add	r2, r3
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 faba 	bl	80030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6e:	3304      	adds	r3, #4
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	e00b      	b.n	8001b90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	441a      	add	r2, r3
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	3b01      	subs	r3, #1
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	440b      	add	r3, r1
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3ed      	bcc.n	8001b78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001bb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	3220      	adds	r2, #32
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3bb      	bcc.n	8001b5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001be4:	4618      	mov	r0, r3
 8001be6:	3738      	adds	r7, #56	@ 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4b02      	ldr	r3, [pc, #8]	@ (8001c00 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	08008140 	.word	0x08008140

08001c04 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4b02      	ldr	r3, [pc, #8]	@ (8001c18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	08007fc4 	.word	0x08007fc4

08001c1c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
  }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c48:	2201      	movs	r2, #1
 8001c4a:	711a      	strb	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c52:	2200      	movs	r2, #0
 8001c54:	80da      	strh	r2, [r3, #6]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	811a      	strh	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c66:	2200      	movs	r2, #0
 8001c68:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <_ZN10SerialComm4initEv>:

    void init(void)
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f90e 	bl	8001ea0 <_ZN10SerialComm10reset_rbufEv>
    }
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001caa:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cb2:	895b      	ldrh	r3, [r3, #10]
 8001cb4:	89fa      	ldrh	r2, [r7, #14]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e01d      	b.n	8001cfc <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cc6:	895b      	ldrh	r3, [r3, #10]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	b291      	uxth	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001cd2:	8151      	strh	r1, [r2, #10]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cde:	3304      	adds	r3, #4
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cea:	895b      	ldrh	r3, [r3, #10]
 8001cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cf8:	815a      	strh	r2, [r3, #10]

        return c;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d18:	dc46      	bgt.n	8001da8 <_ZN10SerialComm5writeEPKhi+0xa2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dd43      	ble.n	8001da8 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8001d20:	bf00      	nop
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d28:	791b      	ldrb	r3, [r3, #4]
 8001d2a:	f083 0301 	eor.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f6      	bne.n	8001d22 <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d3a:	88db      	ldrh	r3, [r3, #6]
 8001d3c:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4293      	cmp	r3, r2
 8001d44:	bfa8      	it	ge
 8001d46:	4613      	movge	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d50:	88db      	ldrh	r3, [r3, #6]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f006 f86e 	bl	8007e40 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d6a:	88da      	ldrh	r2, [r3, #6]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d80:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d00a      	beq.n	8001da0 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1d18      	adds	r0, r3, #4
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	18d1      	adds	r1, r2, r3
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f006 f850 	bl	8007e40 <memcpy>
        }

        // TODO: Start transfering
        flush();
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f805 	bl	8001db0 <_ZN10SerialComm5flushEv>
 8001da6:	e000      	b.n	8001daa <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8001da8:	bf00      	nop
    }
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d05b      	beq.n	8001e7c <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001dca:	88da      	ldrh	r2, [r3, #6]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d04c      	beq.n	8001e72 <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001de2:	891a      	ldrh	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001dea:	88db      	ldrh	r3, [r3, #6]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d218      	bcs.n	8001e22 <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001df6:	88da      	ldrh	r2, [r3, #6]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001dfe:	891b      	ldrh	r3, [r3, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e0e:	891b      	ldrh	r3, [r3, #8]
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f004 ff3a 	bl	8006c94 <HAL_UART_Transmit_DMA>
 8001e20:	e01f      	b.n	8001e62 <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e28:	891b      	ldrh	r3, [r3, #8]
 8001e2a:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8001e2e:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e3a:	891b      	ldrh	r3, [r3, #8]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	89fa      	ldrh	r2, [r7, #14]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f004 ff24 	bl	8006c94 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1d19      	adds	r1, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e5a:	88db      	ldrh	r3, [r3, #6]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f004 ff19 	bl	8006c94 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e68:	88da      	ldrh	r2, [r3, #6]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e70:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e78:	2200      	movs	r2, #0
 8001e7a:	711a      	strb	r2, [r3, #4]
        }
    }
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e92:	2201      	movs	r2, #1
 8001e94:	711a      	strb	r2, [r3, #4]
    }
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f004 ff5b 	bl	8006d74 <HAL_UART_Receive_DMA>
    }
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <_ZN13STM32HardwareC1Ev+0x1c>)
 8001ed4:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200001e8 	.word	0x200001e8

08001ee8 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff febe 	bl	8001c76 <_ZN10SerialComm4initEv>
    }
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_ZN13STM32Hardware4readEv>:

    int read()  
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff febc 	bl	8001c8c <_ZN10SerialComm4readEv>
 8001f14:	4603      	mov	r3, r0
    }
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fee7 	bl	8001d06 <_ZN10SerialComm5writeEPKhi>
    }
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8001f48:	f002 fa64 	bl	8004414 <HAL_GetTick>
 8001f4c:	4603      	mov	r3, r0
    }
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
      data(0)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f82c 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	711a      	strb	r2, [r3, #4]
    {
    }
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	080081f0 	.word	0x080081f0

08001f84 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	7912      	ldrb	r2, [r2, #4]
 8001f9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    }
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <_ZN8std_msgs5UInt87getTypeEv+0x14>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	08007fe8 	.word	0x08007fe8

08001ff4 <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <_ZN8std_msgs5UInt86getMD5Ev+0x14>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	08007ff8 	.word	0x08007ff8

0800200c <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
      data(0)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe ffd2 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 800201c:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	809a      	strh	r2, [r3, #4]
    {
    }
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	080081d8 	.word	0x080081d8

08002038 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8899      	ldrh	r1, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b299      	uxth	r1, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3302      	adds	r3, #2
 800206c:	60fb      	str	r3, [r7, #12]
      return offset;
 800206e:	68fb      	ldr	r3, [r7, #12]
    }
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	889b      	ldrh	r3, [r3, #4]
 800209a:	b21a      	sxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3301      	adds	r3, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3302      	adds	r3, #2
 80020b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80020ba:	68fb      	ldr	r3, [r7, #12]
    }
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
	...

080020c8 <_ZN8std_msgs6UInt167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt16"; };
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	4b02      	ldr	r3, [pc, #8]	@ (80020dc <_ZN8std_msgs6UInt167getTypeEv+0x14>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	0800801c 	.word	0x0800801c

080020e0 <_ZN8std_msgs6UInt166getMD5Ev>:
    virtual const char * getMD5() override { return "1df79edf208b629fe6b81923a544552d"; };
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <_ZN8std_msgs6UInt166getMD5Ev+0x14>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	0800802c 	.word	0x0800802c

080020f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ff5c 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 8002108:	4a0e      	ldr	r2, [pc, #56]	@ (8002144 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
      x(0),
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	080081c0 	.word	0x080081c0

08002148 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	@ 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800215c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	4401      	add	r1, r0
 800216a:	b2d3      	uxtb	r3, r2
 800216c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800216e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	0a02      	lsrs	r2, r0, #8
 800217c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002180:	0a0b      	lsrs	r3, r1, #8
 8002182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002184:	3101      	adds	r1, #1
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	4401      	add	r1, r0
 800218a:	b2d3      	uxtb	r3, r2
 800218c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800218e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	0c02      	lsrs	r2, r0, #16
 800219c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021a0:	0c0b      	lsrs	r3, r1, #16
 80021a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021a4:	3102      	adds	r1, #2
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	4401      	add	r1, r0
 80021aa:	b2d3      	uxtb	r3, r2
 80021ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80021ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	0e02      	lsrs	r2, r0, #24
 80021bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c0:	0e0b      	lsrs	r3, r1, #24
 80021c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021c4:	3103      	adds	r1, #3
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	4401      	add	r1, r0
 80021ca:	b2d3      	uxtb	r3, r2
 80021cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80021ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	000a      	movs	r2, r1
 80021dc:	2300      	movs	r3, #0
 80021de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021e0:	3104      	adds	r1, #4
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	4401      	add	r1, r0
 80021e6:	b2d3      	uxtb	r3, r2
 80021e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80021ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	0a0a      	lsrs	r2, r1, #8
 80021f8:	2300      	movs	r3, #0
 80021fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021fc:	3105      	adds	r1, #5
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	4401      	add	r1, r0
 8002202:	b2d3      	uxtb	r3, r2
 8002204:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002206:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	0c0a      	lsrs	r2, r1, #16
 8002214:	2300      	movs	r3, #0
 8002216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002218:	3106      	adds	r1, #6
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	4401      	add	r1, r0
 800221e:	b2d3      	uxtb	r3, r2
 8002220:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002222:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	0e0a      	lsrs	r2, r1, #24
 8002230:	2300      	movs	r3, #0
 8002232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002234:	3107      	adds	r1, #7
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	4401      	add	r1, r0
 800223a:	b2d3      	uxtb	r3, r2
 800223c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	3308      	adds	r3, #8
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800224a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800224e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	4401      	add	r1, r0
 8002258:	b2d3      	uxtb	r3, r2
 800225a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800225c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	0a02      	lsrs	r2, r0, #8
 800226a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800226e:	0a0b      	lsrs	r3, r1, #8
 8002270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002272:	3101      	adds	r1, #1
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	4401      	add	r1, r0
 8002278:	b2d3      	uxtb	r3, r2
 800227a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800227c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	0c02      	lsrs	r2, r0, #16
 800228a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800228e:	0c0b      	lsrs	r3, r1, #16
 8002290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002292:	3102      	adds	r1, #2
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	4401      	add	r1, r0
 8002298:	b2d3      	uxtb	r3, r2
 800229a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800229c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	0e02      	lsrs	r2, r0, #24
 80022aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022ae:	0e0b      	lsrs	r3, r1, #24
 80022b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022b2:	3103      	adds	r1, #3
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	4401      	add	r1, r0
 80022b8:	b2d3      	uxtb	r3, r2
 80022ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80022bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	000a      	movs	r2, r1
 80022ca:	2300      	movs	r3, #0
 80022cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022ce:	3104      	adds	r1, #4
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	4401      	add	r1, r0
 80022d4:	b2d3      	uxtb	r3, r2
 80022d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80022d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	0a0a      	lsrs	r2, r1, #8
 80022e6:	2300      	movs	r3, #0
 80022e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022ea:	3105      	adds	r1, #5
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	4401      	add	r1, r0
 80022f0:	b2d3      	uxtb	r3, r2
 80022f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80022f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	0c0a      	lsrs	r2, r1, #16
 8002302:	2300      	movs	r3, #0
 8002304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002306:	3106      	adds	r1, #6
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	4401      	add	r1, r0
 800230c:	b2d3      	uxtb	r3, r2
 800230e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002310:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	0e0a      	lsrs	r2, r1, #24
 800231e:	2300      	movs	r3, #0
 8002320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002322:	3107      	adds	r1, #7
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	4401      	add	r1, r0
 8002328:	b2d3      	uxtb	r3, r2
 800232a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	3308      	adds	r3, #8
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002338:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800233c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	4401      	add	r1, r0
 8002346:	b2d3      	uxtb	r3, r2
 8002348:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800234a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	0a02      	lsrs	r2, r0, #8
 8002358:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800235c:	0a0b      	lsrs	r3, r1, #8
 800235e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002360:	3101      	adds	r1, #1
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	4401      	add	r1, r0
 8002366:	b2d3      	uxtb	r3, r2
 8002368:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800236a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	0c02      	lsrs	r2, r0, #16
 8002378:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800237c:	0c0b      	lsrs	r3, r1, #16
 800237e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002380:	3102      	adds	r1, #2
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	4401      	add	r1, r0
 8002386:	b2d3      	uxtb	r3, r2
 8002388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800238a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	0e02      	lsrs	r2, r0, #24
 8002398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800239c:	0e0b      	lsrs	r3, r1, #24
 800239e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023a0:	3103      	adds	r1, #3
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	4401      	add	r1, r0
 80023a6:	b2d3      	uxtb	r3, r2
 80023a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80023aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	000a      	movs	r2, r1
 80023b8:	2300      	movs	r3, #0
 80023ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023bc:	3104      	adds	r1, #4
 80023be:	6838      	ldr	r0, [r7, #0]
 80023c0:	4401      	add	r1, r0
 80023c2:	b2d3      	uxtb	r3, r2
 80023c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80023c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	0a0a      	lsrs	r2, r1, #8
 80023d4:	2300      	movs	r3, #0
 80023d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d8:	3105      	adds	r1, #5
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	4401      	add	r1, r0
 80023de:	b2d3      	uxtb	r3, r2
 80023e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80023e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	0c0a      	lsrs	r2, r1, #16
 80023f0:	2300      	movs	r3, #0
 80023f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f4:	3106      	adds	r1, #6
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	4401      	add	r1, r0
 80023fa:	b2d3      	uxtb	r3, r2
 80023fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80023fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	0e0a      	lsrs	r2, r1, #24
 800240c:	2300      	movs	r3, #0
 800240e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002410:	3107      	adds	r1, #7
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	4401      	add	r1, r0
 8002416:	b2d3      	uxtb	r3, r2
 8002418:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3308      	adds	r3, #8
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002422:	4618      	mov	r0, r3
 8002424:	372c      	adds	r7, #44	@ 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800242c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002430:	b0eb      	sub	sp, #428	@ 0x1ac
 8002432:	af00      	add	r7, sp, #0
 8002434:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8002438:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800244e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002452:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002456:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	461c      	mov	r4, r3
 8002464:	4615      	mov	r5, r2
 8002466:	ea40 0804 	orr.w	r8, r0, r4
 800246a:	ea41 0905 	orr.w	r9, r1, r5
 800246e:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002472:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002476:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2200      	movs	r2, #0
 8002488:	469a      	mov	sl, r3
 800248a:	4693      	mov	fp, r2
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002498:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800249c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80024a0:	ea40 0402 	orr.w	r4, r0, r2
 80024a4:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80024a8:	430b      	orrs	r3, r1
 80024aa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024ae:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80024b2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024b6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80024ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80024d0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80024e0:	464c      	mov	r4, r9
 80024e2:	0423      	lsls	r3, r4, #16
 80024e4:	46c4      	mov	ip, r8
 80024e6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80024ea:	4644      	mov	r4, r8
 80024ec:	0422      	lsls	r2, r4, #16
 80024ee:	ea40 0402 	orr.w	r4, r0, r2
 80024f2:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80024f6:	430b      	orrs	r3, r1
 80024f8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80024fc:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8002500:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002504:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002508:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800250c:	1cda      	adds	r2, r3, #3
 800250e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800251e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002522:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002526:	4623      	mov	r3, r4
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800252e:	4623      	mov	r3, r4
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002536:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 800253a:	461a      	mov	r2, r3
 800253c:	4302      	orrs	r2, r0
 800253e:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8002542:	4623      	mov	r3, r4
 8002544:	430b      	orrs	r3, r1
 8002546:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800254a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 800254e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002552:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002556:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800256c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 800257c:	0023      	movs	r3, r4
 800257e:	2200      	movs	r2, #0
 8002580:	ea40 0402 	orr.w	r4, r0, r2
 8002584:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8002588:	430b      	orrs	r3, r1
 800258a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800258e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8002592:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002596:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800259a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800259e:	1d5a      	adds	r2, r3, #5
 80025a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025a4:	4413      	add	r3, r2
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80025b0:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80025c0:	0223      	lsls	r3, r4, #8
 80025c2:	2200      	movs	r2, #0
 80025c4:	ea40 0402 	orr.w	r4, r0, r2
 80025c8:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80025cc:	430b      	orrs	r3, r1
 80025ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80025d2:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80025d6:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80025da:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80025de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80025e2:	1d9a      	adds	r2, r3, #6
 80025e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2200      	movs	r2, #0
 80025f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80025f4:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8002604:	0423      	lsls	r3, r4, #16
 8002606:	2200      	movs	r2, #0
 8002608:	ea40 0402 	orr.w	r4, r0, r2
 800260c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8002610:	430b      	orrs	r3, r1
 8002612:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002616:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 800261a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800261e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002622:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002626:	1dda      	adds	r2, r3, #7
 8002628:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2200      	movs	r2, #0
 8002634:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002638:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8002648:	0623      	lsls	r3, r4, #24
 800264a:	2200      	movs	r2, #0
 800264c:	ea40 0402 	orr.w	r4, r0, r2
 8002650:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8002654:	430b      	orrs	r3, r1
 8002656:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800265a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 800265e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8002662:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002666:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800266a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800266e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002672:	3308      	adds	r3, #8
 8002674:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002684:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002688:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800268c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800269c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80026a0:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 80026a4:	461a      	mov	r2, r3
 80026a6:	4302      	orrs	r2, r0
 80026a8:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80026ac:	4623      	mov	r3, r4
 80026ae:	430b      	orrs	r3, r1
 80026b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80026b4:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80026b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80026c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80026d6:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80026e6:	464c      	mov	r4, r9
 80026e8:	0223      	lsls	r3, r4, #8
 80026ea:	46c4      	mov	ip, r8
 80026ec:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80026f0:	4644      	mov	r4, r8
 80026f2:	0222      	lsls	r2, r4, #8
 80026f4:	ea40 0402 	orr.w	r4, r0, r2
 80026f8:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80026fc:	430b      	orrs	r3, r1
 80026fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002702:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8002706:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800270a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800270e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002724:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002734:	464c      	mov	r4, r9
 8002736:	0423      	lsls	r3, r4, #16
 8002738:	46c4      	mov	ip, r8
 800273a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800273e:	4644      	mov	r4, r8
 8002740:	0422      	lsls	r2, r4, #16
 8002742:	ea40 0402 	orr.w	r4, r0, r2
 8002746:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 800274a:	430b      	orrs	r3, r1
 800274c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002750:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8002754:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002758:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800275c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002760:	1cda      	adds	r2, r3, #3
 8002762:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002772:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002776:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800277a:	4623      	mov	r3, r4
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002782:	4623      	mov	r3, r4
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800278a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800278e:	461a      	mov	r2, r3
 8002790:	4302      	orrs	r2, r0
 8002792:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002796:	4623      	mov	r3, r4
 8002798:	430b      	orrs	r3, r1
 800279a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800279e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80027a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80027a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80027aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80027ae:	1d1a      	adds	r2, r3, #4
 80027b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80027d0:	0023      	movs	r3, r4
 80027d2:	2200      	movs	r2, #0
 80027d4:	ea40 0402 	orr.w	r4, r0, r2
 80027d8:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80027dc:	430b      	orrs	r3, r1
 80027de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80027e2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80027e6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80027ea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80027ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80027f2:	1d5a      	adds	r2, r3, #5
 80027f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80027f8:	4413      	add	r3, r2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002804:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8002814:	0223      	lsls	r3, r4, #8
 8002816:	2200      	movs	r2, #0
 8002818:	ea40 0402 	orr.w	r4, r0, r2
 800281c:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8002820:	430b      	orrs	r3, r1
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002826:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 800282a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800282e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002832:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002836:	1d9a      	adds	r2, r3, #6
 8002838:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002848:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8002858:	0423      	lsls	r3, r4, #16
 800285a:	2200      	movs	r2, #0
 800285c:	ea40 0402 	orr.w	r4, r0, r2
 8002860:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8002864:	430b      	orrs	r3, r1
 8002866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800286a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800286e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002872:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002876:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800287a:	1dda      	adds	r2, r3, #7
 800287c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800288c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800289c:	0623      	lsls	r3, r4, #24
 800289e:	2200      	movs	r2, #0
 80028a0:	ea40 0402 	orr.w	r4, r0, r2
 80028a4:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80028a8:	430b      	orrs	r3, r1
 80028aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028ae:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80028b2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 80028b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80028ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80028be:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80028c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80028c6:	3308      	adds	r3, #8
 80028c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028d8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80028dc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80028e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028f4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80028f8:	461a      	mov	r2, r3
 80028fa:	4302      	orrs	r2, r0
 80028fc:	67ba      	str	r2, [r7, #120]	@ 0x78
 80028fe:	4623      	mov	r3, r4
 8002900:	430b      	orrs	r3, r1
 8002902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002904:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8002908:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800290c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002910:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	673b      	str	r3, [r7, #112]	@ 0x70
 8002924:	677a      	str	r2, [r7, #116]	@ 0x74
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002932:	464c      	mov	r4, r9
 8002934:	0223      	lsls	r3, r4, #8
 8002936:	46c4      	mov	ip, r8
 8002938:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 800293c:	4644      	mov	r4, r8
 800293e:	0222      	lsls	r2, r4, #8
 8002940:	ea40 0402 	orr.w	r4, r0, r2
 8002944:	66bc      	str	r4, [r7, #104]	@ 0x68
 8002946:	430b      	orrs	r3, r1
 8002948:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800294a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800294e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002952:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002956:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800295a:	1c9a      	adds	r2, r3, #2
 800295c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002960:	4413      	add	r3, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2200      	movs	r2, #0
 8002968:	663b      	str	r3, [r7, #96]	@ 0x60
 800296a:	667a      	str	r2, [r7, #100]	@ 0x64
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002978:	464c      	mov	r4, r9
 800297a:	0423      	lsls	r3, r4, #16
 800297c:	46c4      	mov	ip, r8
 800297e:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002982:	4644      	mov	r4, r8
 8002984:	0422      	lsls	r2, r4, #16
 8002986:	ea40 0402 	orr.w	r4, r0, r2
 800298a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800298c:	430b      	orrs	r3, r1
 800298e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002990:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002994:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002998:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800299c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80029a0:	1cda      	adds	r2, r3, #3
 80029a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80029b2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80029b6:	4623      	mov	r3, r4
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029bc:	4623      	mov	r3, r4
 80029be:	061b      	lsls	r3, r3, #24
 80029c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80029c6:	461a      	mov	r2, r3
 80029c8:	4302      	orrs	r2, r0
 80029ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80029cc:	4623      	mov	r3, r4
 80029ce:	430b      	orrs	r3, r1
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80029d6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80029de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80029fe:	0023      	movs	r3, r4
 8002a00:	2200      	movs	r2, #0
 8002a02:	ea40 0402 	orr.w	r4, r0, r2
 8002a06:	633c      	str	r4, [r7, #48]	@ 0x30
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a0c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002a10:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a1c:	1d5a      	adds	r2, r3, #5
 8002a1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002a38:	0223      	lsls	r3, r4, #8
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	ea40 0402 	orr.w	r4, r0, r2
 8002a40:	623c      	str	r4, [r7, #32]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a56:	3306      	adds	r3, #6
 8002a58:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	69bc      	ldr	r4, [r7, #24]
 8002a72:	0423      	lsls	r3, r4, #16
 8002a74:	2200      	movs	r2, #0
 8002a76:	ea40 0402 	orr.w	r4, r0, r2
 8002a7a:	613c      	str	r4, [r7, #16]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a84:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a88:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a90:	3307      	adds	r3, #7
 8002a92:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	60fa      	str	r2, [r7, #12]
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	68bc      	ldr	r4, [r7, #8]
 8002aac:	0623      	lsls	r3, r4, #24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	ea40 0402 	orr.w	r4, r0, r2
 8002ab4:	603c      	str	r4, [r7, #0]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002abe:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8002ac2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002ac6:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8002aca:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002ace:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8002ad8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8002adc:	4618      	mov	r0, r3
 8002ade:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ae8:	4770      	bx	lr
	...

08002aec <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	4b02      	ldr	r3, [pc, #8]	@ (8002b00 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	08008050 	.word	0x08008050

08002b04 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	08008068 	.word	0x08008068

08002b1c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fa4a 	bl	8000fc0 <_ZN3ros3MsgC1Ev>
 8002b2c:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
      linear(),
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3308      	adds	r3, #8
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fade 	bl	80020f8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3328      	adds	r3, #40	@ 0x28
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fad9 	bl	80020f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	080081a8 	.word	0x080081a8

08002b54 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 0008 	add.w	r0, r3, #8
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7ff faea 	bl	8002148 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f7ff fadd 	bl	8002148 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b96:	68fb      	ldr	r3, [r7, #12]
    }
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f103 0008 	add.w	r0, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7ff fc36 	bl	800242c <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7ff fc29 	bl	800242c <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
     return offset;
 8002be2:	68fb      	ldr	r3, [r7, #12]
    }
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4b02      	ldr	r3, [pc, #8]	@ (8002c00 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	0800808c 	.word	0x0800808c

08002c04 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4b02      	ldr	r3, [pc, #8]	@ (8002c18 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	080080a0 	.word	0x080080a0

08002c1c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	08008220 	.word	0x08008220

08002c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ffe8 	bl	8002c1c <_ZN3ros15NodeHandleBase_C1Ev>
 8002c4c:	4a41      	ldr	r2, [pc, #260]	@ (8002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev+0x118>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f936 	bl	8001ec8 <_ZN13STM32HardwareC1Ev>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3318      	adds	r3, #24
 8002c78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f005 f89a 	bl	8007db8 <memset>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 f890 	bl	8007db8 <memset>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	2228      	movs	r2, #40	@ 0x28
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 f887 	bl	8007db8 <memset>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cb0:	3340      	adds	r3, #64	@ 0x40
 8002cb2:	2228      	movs	r2, #40	@ 0x28
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 f87e 	bl	8007db8 <memset>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6693      	str	r3, [r2, #104]	@ 0x68
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6753      	str	r3, [r2, #116]	@ 0x74
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6793      	str	r3, [r2, #120]	@ 0x78
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8002d40:	3310      	adds	r3, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fca2 	bl	800168c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	08008194 	.word	0x08008194

08002d58 <HAL_UART_TxCpltCallback>:

uint16_t prev_tick[NUM_OF_MOTOR] = { 0, 0, 0, 0 };
float rpm[NUM_OF_MOTOR] = { 0.0f };

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8002d60:	4803      	ldr	r0, [pc, #12]	@ (8002d70 <HAL_UART_TxCpltCallback+0x18>)
 8002d62:	f7ff f88f 	bl	8001e84 <_ZN10SerialComm11set_tx_cpltEv>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200001e8 	.word	0x200001e8

08002d74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8002d7c:	4803      	ldr	r0, [pc, #12]	@ (8002d8c <HAL_UART_RxCpltCallback+0x18>)
 8002d7e:	f7ff f88f 	bl	8001ea0 <_ZN10SerialComm10reset_rbufEv>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200001e8 	.word	0x200001e8

08002d90 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
	}
}

/* CALLBACK FUNCTIONS START */
void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	goal_vel[linear_x] = cmd_vel_msg.linear.x;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fa47 	bl	8000234 <__aeabi_d2f>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ddc <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8002daa:	6013      	str	r3, [r2, #0]
	goal_vel[linear_y] = cmd_vel_msg.linear.y;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fa3d 	bl	8000234 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8002dbe:	6053      	str	r3, [r2, #4]
	goal_vel[angular_z] = cmd_vel_msg.angular.z;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7fd fa33 	bl	8000234 <__aeabi_d2f>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a02      	ldr	r2, [pc, #8]	@ (8002ddc <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8002dd2:	6093      	str	r3, [r2, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	2000834c 	.word	0x2000834c

08002de0 <_Z17motorDutyCallbackRKN8std_msgs5UInt8E>:
uint8_t duty[NUM_OF_MOTOR] = { 0 };
void motorDutyCallback(const std_msgs::UInt8& motor_duty_msg)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e009      	b.n	8002e02 <_Z17motorDutyCallbackRKN8std_msgs5UInt8E+0x22>
	{
		duty[i] = motor_duty_msg.data;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7919      	ldrb	r1, [r3, #4]
 8002df2:	4a08      	ldr	r2, [pc, #32]	@ (8002e14 <_Z17motorDutyCallbackRKN8std_msgs5UInt8E+0x34>)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	ddf2      	ble.n	8002dee <_Z17motorDutyCallbackRKN8std_msgs5UInt8E+0xe>
	}
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20008380 	.word	0x20008380

08002e18 <_Z9ros_setupv>:
/* CALLBACK FUNCTIONS END */

void ros_setup()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	nh.initNode();
 8002e1c:	4806      	ldr	r0, [pc, #24]	@ (8002e38 <_Z9ros_setupv+0x20>)
 8002e1e:	f000 f9dd 	bl	80031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 8002e22:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <_Z9ros_setupv+0x24>)
 8002e24:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <_Z9ros_setupv+0x20>)
 8002e26:	f000 f9fe 	bl	8003226 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_duty);
 8002e2a:	4905      	ldr	r1, [pc, #20]	@ (8002e40 <_Z9ros_setupv+0x28>)
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <_Z9ros_setupv+0x20>)
 8002e2e:	f000 f9fa 	bl	8003226 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>

	//nh.advertise(pub_FL_rpm);
	//nh.advertise(pub_FR_rpm);
	//nh.advertise(pub_BL_rpm);
	//nh.advertise(pub_BR_rpm);
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200041f4 	.word	0x200041f4
 8002e3c:	200082b0 	.word	0x200082b0
 8002e40:	20008310 	.word	0x20008310

08002e44 <setup>:

void setup()
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
	ros_setup();
 8002e4a:	f7ff ffe5 	bl	8002e18 <_Z9ros_setupv>

	mecabot_motor_init();
 8002e4e:	f000 ff83 	bl	8003d58 <_Z18mecabot_motor_initv>
	mecabot_encoder_init();
 8002e52:	f000 ffc3 	bl	8003ddc <_Z20mecabot_encoder_initv>

	for (int i=0; i<NUM_OF_MOTOR; i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	e009      	b.n	8002e70 <setup+0x2c>
	{
		mecabot_motor_start(mecabot_motor[i]);
 8002e5c:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <setup+0x3c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 f827 	bl	8003eb8 <_Z19mecabot_motor_startP7Motor_t>
	for (int i=0; i<NUM_OF_MOTOR; i++)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	ddf2      	ble.n	8002e5c <setup+0x18>
	}
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20008384 	.word	0x20008384

08002e84 <loop>:

void loop()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	t = millis();
 8002e88:	f000 ff5e 	bl	8003d48 <_Z6millisv>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <loop+0x58>)
 8002e90:	6013      	str	r3, [r2, #0]

	/* Motor control */
	if ((t - t_previous[motor_control_event]) >= dt[motor_control_event])
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <loop+0x58>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <loop+0x5c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <loop+0x60>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d305      	bcc.n	8002eb0 <loop+0x2c>
	{
		//calculateWheelVelocity();
		controlMotors();
 8002ea4:	f000 f8d6 	bl	8003054 <_Z13controlMotorsv>
		t_previous[motor_control_event] = t;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <loop+0x58>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <loop+0x5c>)
 8002eae:	6013      	str	r3, [r2, #0]
	}
	/* Wheel velocity feedback */
    if ((t - t_previous[wheel_velocity_feedback_event]) >= dt[wheel_velocity_feedback_event])
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <loop+0x58>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <loop+0x5c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	1ad2      	subs	r2, r2, r3
 8002eba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <loop+0x60>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d307      	bcc.n	8002ed2 <loop+0x4e>
	{
    	calculateRpm();
 8002ec2:	f000 f813 	bl	8002eec <_Z12calculateRpmv>
    	publishRpm();
 8002ec6:	f000 f8e7 	bl	8003098 <_Z10publishRpmv>
		t_previous[wheel_velocity_feedback_event] = t;
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <loop+0x58>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <loop+0x5c>)
 8002ed0:	6053      	str	r3, [r2, #4]
	}

	nh.spinOnce();
 8002ed2:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <loop+0x64>)
 8002ed4:	f000 f9d3 	bl	800327e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20008360 	.word	0x20008360
 8002ee0:	20008358 	.word	0x20008358
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	200041f4 	.word	0x200041f4

08002eec <_Z12calculateRpmv>:
									(goal_vel[linear_x] + goal_vel[linear_y] - C * goal_vel[angular_z]);
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] + C * goal_vel[angular_z]);
}
void calculateRpm(void)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e090      	b.n	800301a <_Z12calculateRpmv+0x12e>
	{
		if (encoder[i]->tick < prev_tick[i])
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <_Z12calculateRpmv+0x140>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	494b      	ldr	r1, [pc, #300]	@ (8003030 <_Z12calculateRpmv+0x144>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d215      	bcs.n	8002f3a <_Z12calculateRpmv+0x4e>
		{
			d_tick = encoder[i]->tick + (encoder[i]->max_count - prev_tick[i]);
 8002f0e:	4a47      	ldr	r2, [pc, #284]	@ (800302c <_Z12calculateRpmv+0x140>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	4944      	ldr	r1, [pc, #272]	@ (800302c <_Z12calculateRpmv+0x140>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b299      	uxth	r1, r3
 8002f24:	4842      	ldr	r0, [pc, #264]	@ (8003030 <_Z12calculateRpmv+0x144>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002f2c:	1acb      	subs	r3, r1, r3
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <_Z12calculateRpmv+0x148>)
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	e00c      	b.n	8002f54 <_Z12calculateRpmv+0x68>
		}
		else
		{
			d_tick = encoder[i]->tick - prev_tick[i];
 8002f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800302c <_Z12calculateRpmv+0x140>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	493a      	ldr	r1, [pc, #232]	@ (8003030 <_Z12calculateRpmv+0x144>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <_Z12calculateRpmv+0x148>)
 8002f52:	801a      	strh	r2, [r3, #0]
		}
		prev_tick[i] = encoder[i]->tick;
 8002f54:	4a35      	ldr	r2, [pc, #212]	@ (800302c <_Z12calculateRpmv+0x140>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5c:	8819      	ldrh	r1, [r3, #0]
 8002f5e:	4a34      	ldr	r2, [pc, #208]	@ (8003030 <_Z12calculateRpmv+0x144>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		rpm[i] = (float)d_tick / ENCODER_RESOLUTION;
 8002f66:	4b33      	ldr	r3, [pc, #204]	@ (8003034 <_Z12calculateRpmv+0x148>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fa68 	bl	8000440 <__aeabi_ui2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4931      	ldr	r1, [pc, #196]	@ (8003038 <_Z12calculateRpmv+0x14c>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fb6f 	bl	8000658 <__aeabi_fdiv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per second
		rpm[i] /= (dt[wheel_velocity_feedback_event] / 1000.0f);
 8002f86:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003040 <_Z12calculateRpmv+0x154>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fa54 	bl	8000440 <__aeabi_ui2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	492a      	ldr	r1, [pc, #168]	@ (8003044 <_Z12calculateRpmv+0x158>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fb5b 	bl	8000658 <__aeabi_fdiv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f7fd fb56 	bl	8000658 <__aeabi_fdiv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4a22      	ldr	r2, [pc, #136]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per minute
		rpm[i] *= 60;
 8002fb8:	4a20      	ldr	r2, [pc, #128]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	4921      	ldr	r1, [pc, #132]	@ (8003048 <_Z12calculateRpmv+0x15c>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa94 	bl	80004f0 <__aeabi_fmul>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Apply Low Pass filter
		rpm[i] = FO_IIR_Compute(filter[i], rpm[i]);
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <_Z12calculateRpmv+0x160>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fdc:	4917      	ldr	r1, [pc, #92]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7fd fc21 	bl	800082e <FO_IIR_Compute>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4913      	ldr	r1, [pc, #76]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		rpm_msg[i].data = static_cast<uint16_t>(rpm[i]);
 8002ff6:	4a11      	ldr	r2, [pc, #68]	@ (800303c <_Z12calculateRpmv+0x150>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fbc6 	bl	8000790 <__aeabi_f2uiz>
 8003004:	4603      	mov	r3, r0
 8003006:	b299      	uxth	r1, r3
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <_Z12calculateRpmv+0x164>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	460a      	mov	r2, r1
 8003012:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 1; i++)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3301      	adds	r3, #1
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f77f af6b 	ble.w	8002ef8 <_Z12calculateRpmv+0xc>
	}
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	20008394 	.word	0x20008394
 8003030:	20008368 	.word	0x20008368
 8003034:	20008364 	.word	0x20008364
 8003038:	41a00000 	.word	0x41a00000
 800303c:	20008370 	.word	0x20008370
 8003040:	20000000 	.word	0x20000000
 8003044:	447a0000 	.word	0x447a0000
 8003048:	42700000 	.word	0x42700000
 800304c:	200083a4 	.word	0x200083a4
 8003050:	2000832c 	.word	0x2000832c

08003054 <_Z13controlMotorsv>:
/* DATA HANDLE FUNCTIONS END */

/* CONTROL FUNCTIONS START */
void controlMotors(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	e00e      	b.n	800307e <_Z13controlMotorsv+0x2a>
	{
		//wheel_angular_vel[i] = constraint(wheel_angular_vel[i], WHEEL_MIN_ANGULAR_VELOCITY, WHEEL_MAX_ANGULAR_VELOCITY);
		//mecabot_motor_set_angular_velocity(mecabot_motor[i], wheel_angular_vel[i]);
		Motor_Set_PWM_Duty(mecabot_motor[i], duty[i]);
 8003060:	4a0b      	ldr	r2, [pc, #44]	@ (8003090 <_Z13controlMotorsv+0x3c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003068:	490a      	ldr	r1, [pc, #40]	@ (8003094 <_Z13controlMotorsv+0x40>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	440b      	add	r3, r1
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7fd fc68 	bl	8000948 <Motor_Set_PWM_Duty>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3301      	adds	r3, #1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b03      	cmp	r3, #3
 8003082:	dded      	ble.n	8003060 <_Z13controlMotorsv+0xc>
	}
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20008384 	.word	0x20008384
 8003094:	20008380 	.word	0x20008380

08003098 <_Z10publishRpmv>:
/* CONTROL FUNCTIONS END */

/* PUBLISH FUNCTIONS START */
void publishRpm(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
	//pub_FL_rpm.publish(&rpm_msg[front_left]);
	//pub_FR_rpm.publish(&rpm_msg[front_right]);
	//pub_BL_rpm.publish(&rpm_msg[back_left]);
	//pub_BR_rpm.publish(&rpm_msg[back_right]);
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e00c      	b.n	80030ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	fa22 f103 	lsr.w	r1, r2, r3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	b2ca      	uxtb	r2, r1
 80030c6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d9ef      	bls.n	80030b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e010      	b.n	8003118 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	440a      	add	r2, r1
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	4611      	mov	r1, r2
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3301      	adds	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d9eb      	bls.n	80030f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	08008208 	.word	0x08008208

0800314c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ffe5 	bl	800312c <_ZN3ros11Subscriber_C1Ev>
 8003162:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3310      	adds	r3, #16
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fcd5 	bl	8002b1c <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
  };
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	0800817c 	.word	0x0800817c

08003194 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ffc1 	bl	800312c <_ZN3ros11Subscriber_C1Ev>
 80031aa:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	330c      	adds	r3, #12
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fecf 	bl	8001f58 <_ZN8std_msgs5UInt8C1Ev>
    cb_(cb),
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
  };
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	08008164 	.word	0x08008164

080031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fe7d 	bl	8001ee8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80031f4:	461a      	mov	r2, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003200:	461a      	mov	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800320c:	461a      	mov	r2, r3
 800320e:	2300      	movs	r3, #0
 8003210:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003218:	461a      	mov	r2, r3
 800321a:	2300      	movs	r3, #0
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e01a      	b.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800323e:	3310      	adds	r3, #16
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10e      	bne.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003250:	3310      	adds	r3, #16
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	605a      	str	r2, [r3, #4]
        return true;
 8003262:	2301      	movs	r3, #1
 8003264:	e006      	b.n	8003274 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b09      	cmp	r3, #9
 8003270:	dde1      	ble.n	8003236 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8003272:	2300      	movs	r3, #0
  }
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fe58 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 8003290:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d905      	bls.n	80032b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d905      	bls.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032d6:	461a      	mov	r2, r3
 80032d8:	2300      	movs	r3, #0
 80032da:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fe29 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad2      	subs	r2, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	bf8c      	ite	hi
 80032fc:	2301      	movhi	r3, #1
 80032fe:	2300      	movls	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8003306:	f06f 0301 	mvn.w	r3, #1
 800330a:	e1e8      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      int data = hardware_.read();
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fdf6 	bl	8001f02 <_ZN13STM32Hardware4readEv>
 8003316:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f2c0 81c1 	blt.w	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x424>
      checksum_ += data;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003326:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4413      	add	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003332:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800333a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800333c:	2b07      	cmp	r3, #7
 800333e:	d124      	bne.n	800338a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8003350:	674a      	str	r2, [r1, #116]	@ 0x74
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	b2d1      	uxtb	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	460a      	mov	r2, r1
 800335c:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003366:	3b01      	subs	r3, #1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800336e:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1af      	bne.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003382:	461a      	mov	r2, r3
 8003384:	2308      	movs	r3, #8
 8003386:	6693      	str	r3, [r2, #104]	@ 0x68
 8003388:	e7a8      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003392:	2b00      	cmp	r3, #0
 8003394:	d12e      	bne.n	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x176>
        if (data == 0xff)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2bff      	cmp	r3, #255	@ 0xff
 800339a:	d110      	bne.n	80033be <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x140>
          mode_++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80033a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033a4:	3301      	adds	r3, #1
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80033ac:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3314      	adds	r3, #20
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80033bc:	e78e      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fdbc 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	bf8c      	ite	hi
 80033d6:	2301      	movhi	r3, #1
 80033d8:	2300      	movls	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f43f af7d 	beq.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          configured_ = false;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 80033ee:	f06f 0301 	mvn.w	r3, #1
 80033f2:	e174      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80033fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11e      	bne.n	800343e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2bfe      	cmp	r3, #254	@ 0xfe
 8003404:	d109      	bne.n	800341a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x19c>
          mode_++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800340c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800340e:	3301      	adds	r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003416:	6693      	str	r3, [r2, #104]	@ 0x68
 8003418:	e760      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003420:	461a      	mov	r2, r3
 8003422:	2300      	movs	r3, #0
 8003424:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800342c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f af53 	bne.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f955 	bl	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
 800343c:	e74e      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003446:	2b02      	cmp	r3, #2
 8003448:	d11b      	bne.n	8003482 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x204>
        bytes_ = data;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800345c:	461a      	mov	r2, r3
 800345e:	2300      	movs	r3, #0
 8003460:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800346a:	3301      	adds	r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003472:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6793      	str	r3, [r2, #120]	@ 0x78
 8003480:	e72c      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800348a:	2b03      	cmp	r3, #3
 800348c:	d114      	bne.n	80034b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003494:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	4413      	add	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80034a2:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80034aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ac:	3301      	adds	r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80034b4:	6693      	str	r3, [r2, #104]	@ 0x68
 80034b6:	e711      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80034be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80034ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034cc:	425a      	negs	r2, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	bf58      	it	pl
 80034d4:	4253      	negpl	r3, r2
 80034d6:	2bff      	cmp	r3, #255	@ 0xff
 80034d8:	d109      	bne.n	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x270>
          mode_++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80034e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80034ea:	6693      	str	r3, [r2, #104]	@ 0x68
 80034ec:	e6f6      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	6693      	str	r3, [r2, #104]	@ 0x68
 80034fa:	e6ef      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003504:	2b05      	cmp	r3, #5
 8003506:	d115      	bne.n	8003534 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x2b6>
        topic_ = data;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800351a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800351c:	3301      	adds	r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003524:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6793      	str	r3, [r2, #120]	@ 0x78
 8003532:	e6d3      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800353a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800353c:	2b06      	cmp	r3, #6
 800353e:	d11e      	bne.n	800357e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003546:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003554:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800355c:	461a      	mov	r2, r3
 800355e:	2307      	movs	r3, #7
 8003560:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f aeb6 	bne.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003576:	461a      	mov	r2, r3
 8003578:	2308      	movs	r3, #8
 800357a:	6693      	str	r3, [r2, #104]	@ 0x68
 800357c:	e6ae      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003586:	2b08      	cmp	r3, #8
 8003588:	f47f aea8 	bne.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800359e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a0:	425a      	negs	r2, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	bf58      	it	pl
 80035a8:	4253      	negpl	r3, r2
 80035aa:	2bff      	cmp	r3, #255	@ 0xff
 80035ac:	f47f ae96 	bne.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36c>
            requestSyncTime();
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f892 	bl	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8ac 	bl	8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80035dc:	461a      	mov	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	e079      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d106      	bne.n	8003604 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x386>
            syncTime(message_in);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3318      	adds	r3, #24
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f979 	bl	80038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>
 8003602:	e66b      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	2b06      	cmp	r3, #6
 800360e:	d110      	bne.n	8003632 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8003616:	3310      	adds	r3, #16
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	3218      	adds	r2, #24
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f973 	bl	800190a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800362a:	2201      	movs	r2, #1
 800362c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8003630:	e654      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	2b0b      	cmp	r3, #11
 800363c:	d106      	bne.n	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3ce>
            configured_ = false;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003644:	2200      	movs	r2, #0
 8003646:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800364a:	e647      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	3b64      	subs	r3, #100	@ 0x64
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800365c:	3310      	adds	r3, #16
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f43f ae3a 	beq.w	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	3b64      	subs	r3, #100	@ 0x64
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003678:	3310      	adds	r3, #16
 800367a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	3b64      	subs	r3, #100	@ 0x64
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368e:	3310      	adds	r3, #16
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	3218      	adds	r2, #24
 800369c:	4611      	mov	r1, r2
 800369e:	4798      	blx	r3
    while (true)
 80036a0:	e61c      	b.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        break;
 80036a2:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80036aa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d909      	bls.n	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
      requestSyncTime();
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f80c 	bl	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80036d4:	461a      	mov	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 80036dc:	2300      	movs	r3, #0
  }
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fc74 	bl	8000fe0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f107 020c 	add.w	r2, r7, #12
 8003702:	210a      	movs	r1, #10
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
    rt_time = hardware_.time();
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fc17 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
  }
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b08b      	sub	sp, #44	@ 0x2c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fd41 	bl	80011b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e062      	b.n	80037fe <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003740:	3306      	adds	r3, #6
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d056      	beq.n	80037f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	3306      	adds	r3, #6
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	b29b      	uxth	r3, r3
 800375c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003766:	3306      	adds	r3, #6
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003778:	3306      	adds	r3, #6
 800377a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003788:	3306      	adds	r3, #6
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4608      	mov	r0, r1
 8003798:	4798      	blx	r3
 800379a:	4603      	mov	r3, r0
 800379c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a6:	3306      	adds	r3, #6
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b6:	3306      	adds	r3, #6
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4608      	mov	r0, r1
 80037c6:	4798      	blx	r3
 80037c8:	4603      	mov	r3, r0
 80037ca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80037cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037d0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681c      	ldr	r4, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e0:	3306      	adds	r3, #6
 80037e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fa18 	bl	8001c1c <_ZN3ros9Publisher15getEndpointTypeEv>
 80037ec:	4601      	mov	r1, r0
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	461a      	mov	r2, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b09      	cmp	r3, #9
 8003802:	dd99      	ble.n	8003738 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	e067      	b.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003812:	3310      	adds	r3, #16
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003824:	3310      	adds	r3, #16
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b29b      	uxth	r3, r3
 800382e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003838:	3310      	adds	r3, #16
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800384a:	3310      	adds	r3, #16
 800384c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003858:	3310      	adds	r3, #16
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4608      	mov	r0, r1
 8003866:	4798      	blx	r3
 8003868:	4603      	mov	r3, r0
 800386a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003874:	3310      	adds	r3, #16
 8003876:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003882:	3310      	adds	r3, #16
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4608      	mov	r0, r1
 8003890:	4798      	blx	r3
 8003892:	4603      	mov	r3, r0
 8003894:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800389a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038aa:	3310      	adds	r3, #16
 80038ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b8:	3310      	adds	r3, #16
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4798      	blx	r3
 80038c8:	4601      	mov	r1, r0
 80038ca:	f107 030c 	add.w	r3, r7, #12
 80038ce:	461a      	mov	r2, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	2b09      	cmp	r3, #9
 80038de:	dd94      	ble.n	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 80038ec:	bf00      	nop
 80038ee:	372c      	adds	r7, #44	@ 0x2c
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd90      	pop	{r4, r7, pc}

080038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80038fe:	f107 0308 	add.w	r3, r7, #8
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fb6c 	bl	8000fe0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fb17 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fbcb 	bl	80010be <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4915      	ldr	r1, [pc, #84]	@ (8003984 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 800392e:	fba1 1303 	umull	r1, r3, r1, r3
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	4413      	add	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003938:	6939      	ldr	r1, [r7, #16]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 800393e:	fba3 0302 	umull	r0, r3, r3, r2
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003948:	fb00 f303 	mul.w	r3, r0, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	4a0e      	ldr	r2, [pc, #56]	@ (8003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x94>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	440b      	add	r3, r1
 8003956:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8b7 	bl	8003ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fae8 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	10624dd3 	.word	0x10624dd3
 8003988:	000f4240 	.word	0x000f4240

0800398c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b63      	cmp	r3, #99	@ 0x63
 800399c:	dd0b      	ble.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039a4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80039a8:	f083 0301 	eor.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e087      	b.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80039c2:	3318      	adds	r3, #24
 80039c4:	3307      	adds	r3, #7
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4790      	blx	r2
 80039cc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80039d4:	22ff      	movs	r2, #255	@ 0xff
 80039d6:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80039de:	22fe      	movs	r2, #254	@ 0xfe
 80039e0:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80039ec:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80039fe:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a06:	7e9a      	ldrb	r2, [r3, #26]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a0e:	7edb      	ldrb	r3, [r3, #27]
 8003a10:	4413      	add	r3, r2
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a1e:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a2a:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	121b      	asrs	r3, r3, #8
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a3c:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a42:	2305      	movs	r3, #5
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e00d      	b.n	8003a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a52:	3318      	adds	r3, #24
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3306      	adds	r3, #6
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	ddec      	ble.n	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3307      	adds	r3, #7
 8003a72:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	425a      	negs	r2, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	bf58      	it	pl
 8003a7e:	4253      	negpl	r3, r2
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	6179      	str	r1, [r7, #20]
 8003a88:	43d2      	mvns	r2, r2
 8003a8a:	b2d1      	uxtb	r1, r2
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a94:	3318      	adds	r3, #24
 8003a96:	460a      	mov	r2, r1
 8003a98:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa0:	dc0b      	bgt.n	8003aba <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1d18      	adds	r0, r3, #4
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003aac:	3318      	adds	r3, #24
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f7fe fa34 	bl	8001f1e <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	e005      	b.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003aba:	4905      	ldr	r1, [pc, #20]	@ (8003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x144>)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f847 	bl	8003b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>
      return -1;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	080080c4 	.word	0x080080c4

08003ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fa2c 	bl	8001f40 <_ZN13STM32Hardware4timeEv>
 8003ae8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4914      	ldr	r1, [pc, #80]	@ (8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8003af2:	fba1 1303 	umull	r1, r3, r1, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8003b08:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x74>)
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	1aca      	subs	r2, r1, r3
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x78>)
 8003b22:	4413      	add	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f103 020c 	add.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3310      	adds	r3, #16
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f000 fbc3 	bl	80042c0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	10624dd3 	.word	0x10624dd3
 8003b48:	000f4240 	.word	0x000f4240
 8003b4c:	3b9aca00 	.word	0x3b9aca00

08003b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f804 	bl	8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>
  }
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	460b      	mov	r3, r1
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fcd8 	bl	8001534 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003b84:	7afb      	ldrb	r3, [r7, #11]
 8003b86:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f107 0214 	add.w	r2, r7, #20
 8003b96:	2107      	movs	r1, #7
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	4798      	blx	r3
  }
 8003b9c:	bf00      	nop
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_Z41__static_initialization_and_destruction_0ii>:
 8003ba4:	b5b0      	push	{r4, r5, r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d122      	bne.n	8003bfa <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d11d      	bne.n	8003bfa <_Z41__static_initialization_and_destruction_0ii+0x56>
};

SerialComm comm_rosserial(huart_rosserial);
 8003bbe:	4911      	ldr	r1, [pc, #68]	@ (8003c04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003bc0:	4811      	ldr	r0, [pc, #68]	@ (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003bc2:	f7fe f836 	bl	8001c32 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8003bc6:	4811      	ldr	r0, [pc, #68]	@ (8003c0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003bc8:	f7ff f838 	bl	8002c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>
 */

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4a10      	ldr	r2, [pc, #64]	@ (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003bd0:	4910      	ldr	r1, [pc, #64]	@ (8003c14 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003bd2:	4811      	ldr	r0, [pc, #68]	@ (8003c18 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003bd4:	f7ff faba 	bl	800314c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> sub_duty("/motor_duty", &motorDutyCallback);
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4a10      	ldr	r2, [pc, #64]	@ (8003c1c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003bdc:	4910      	ldr	r1, [pc, #64]	@ (8003c20 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003bde:	4811      	ldr	r0, [pc, #68]	@ (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003be0:	f7ff fad8 	bl	8003194 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
/*
 * Publishers
 */
std_msgs::UInt16 rpm_msg[NUM_OF_MOTOR];
 8003be4:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003be6:	2403      	movs	r4, #3
 8003be8:	461d      	mov	r5, r3
 8003bea:	e004      	b.n	8003bf6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8003bec:	4628      	mov	r0, r5
 8003bee:	f7fe fa0d 	bl	800200c <_ZN8std_msgs6UInt16C1Ev>
 8003bf2:	3c01      	subs	r4, #1
 8003bf4:	3508      	adds	r5, #8
 8003bf6:	2c00      	cmp	r4, #0
 8003bf8:	daf8      	bge.n	8003bec <_Z41__static_initialization_and_destruction_0ii+0x48>
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bdb0      	pop	{r4, r5, r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000118 	.word	0x20000118
 8003c08:	200001e8 	.word	0x200001e8
 8003c0c:	200041f4 	.word	0x200041f4
 8003c10:	08002d91 	.word	0x08002d91
 8003c14:	08008100 	.word	0x08008100
 8003c18:	200082b0 	.word	0x200082b0
 8003c1c:	08002de1 	.word	0x08002de1
 8003c20:	0800810c 	.word	0x0800810c
 8003c24:	20008310 	.word	0x20008310
 8003c28:	2000832c 	.word	0x2000832c

08003c2c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe f9b7 	bl	8001fb0 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	320c      	adds	r2, #12
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4798      	blx	r3
  }
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
  }
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	330c      	adds	r3, #12
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe f9af 	bl	8001fdc <_ZN8std_msgs5UInt87getTypeEv>
 8003c7e:	4603      	mov	r3, r0
  }
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	330c      	adds	r3, #12
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe f9ad 	bl	8001ff4 <_ZN8std_msgs5UInt86getMD5Ev>
 8003c9a:	4603      	mov	r3, r0
  }
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe ff73 	bl	8002ba0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	3210      	adds	r2, #16
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4798      	blx	r3
  }
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3310      	adds	r3, #16
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff7b 	bl	8002bec <_ZN13geometry_msgs5Twist7getTypeEv>
 8003cf6:	4603      	mov	r3, r0
  }
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe ff79 	bl	8002c04 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003d12:	4603      	mov	r3, r0
  }
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9connectedEv>:
  virtual bool connected() override
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003d2a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <_GLOBAL__sub_I_comm_rosserial>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d40:	2001      	movs	r0, #1
 8003d42:	f7ff ff2f 	bl	8003ba4 <_Z41__static_initialization_and_destruction_0ii>
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_Z6millisv>:
Motor mecabot_motor[4] = { NULL, NULL, NULL, NULL };
Encoder encoder[4] = { NULL, NULL, NULL, NULL };
FO_IIR_Filter_t *filter[4] = { NULL, NULL, NULL, NULL };

uint32_t millis(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003d4c:	f000 fb62 	bl	8004414 <HAL_GetTick>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <_Z18mecabot_motor_initv>:

status_t mecabot_motor_init(void)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <_Z18mecabot_motor_initv+0x78>)
 8003d60:	463c      	mov	r4, r7
 8003d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 8003d68:	463b      	mov	r3, r7
 8003d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d6c:	f7fc fd98 	bl	80008a0 <Motor_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <_Z18mecabot_motor_initv+0x7c>)
 8003d74:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 8003d76:	2300      	movs	r3, #0
 8003d78:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8003d7a:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <_Z18mecabot_motor_initv+0x80>)
 8003d7c:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 8003d7e:	2308      	movs	r3, #8
 8003d80:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 8003d82:	463b      	mov	r3, r7
 8003d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d86:	f7fc fd8b 	bl	80008a0 <Motor_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <_Z18mecabot_motor_initv+0x7c>)
 8003d8e:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 8003d90:	230c      	movs	r3, #12
 8003d92:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8003d94:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <_Z18mecabot_motor_initv+0x80>)
 8003d96:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003da0:	f7fc fd7e 	bl	80008a0 <Motor_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <_Z18mecabot_motor_initv+0x7c>)
 8003da8:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 8003daa:	2304      	movs	r3, #4
 8003dac:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <_Z18mecabot_motor_initv+0x80>)
 8003db0:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 8003db2:	2302      	movs	r3, #2
 8003db4:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 8003db6:	463b      	mov	r3, r7
 8003db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dba:	f7fc fd71 	bl	80008a0 <Motor_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <_Z18mecabot_motor_initv+0x7c>)
 8003dc2:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	08008118 	.word	0x08008118
 8003dd4:	20008384 	.word	0x20008384
 8003dd8:	40011000 	.word	0x40011000

08003ddc <_Z20mecabot_encoder_initv>:

status_t mecabot_encoder_init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 8003de2:	4a30      	ldr	r2, [pc, #192]	@ (8003ea4 <_Z20mecabot_encoder_initv+0xc8>)
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dec:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003df8:	f7fc fe4d 	bl	8000a96 <Encoder_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea8 <_Z20mecabot_encoder_initv+0xcc>)
 8003e00:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 8003e02:	2300      	movs	r3, #0
 8003e04:	833b      	strh	r3, [r7, #24]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8003e06:	f107 0314 	add.w	r3, r7, #20
 8003e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e0e:	f7fc fe42 	bl	8000a96 <Encoder_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <_Z20mecabot_encoder_initv+0xcc>)
 8003e16:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 8003e18:	230c      	movs	r3, #12
 8003e1a:	833b      	strh	r3, [r7, #24]
    encoder[back_left] = Encoder_Init(handle_encoder);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e24:	f7fc fe37 	bl	8000a96 <Encoder_Init>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <_Z20mecabot_encoder_initv+0xcc>)
 8003e2c:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 8003e2e:	2304      	movs	r3, #4
 8003e30:	833b      	strh	r3, [r7, #24]
    encoder[back_right] = Encoder_Init(handle_encoder);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e3a:	f7fc fe2c 	bl	8000a96 <Encoder_Init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <_Z20mecabot_encoder_initv+0xcc>)
 8003e42:	60d3      	str	r3, [r2, #12]

    // Initialize the rpm filter
    float b_coeff[] = { 0.7548f, 0.7548f };
 8003e44:	4a19      	ldr	r2, [pc, #100]	@ (8003eac <_Z20mecabot_encoder_initv+0xd0>)
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e4e:	e883 0003 	stmia.w	r3, {r0, r1}
    float a_coeff[] = {    1.0f, 0.5095f };
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <_Z20mecabot_encoder_initv+0xd4>)
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e5a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < NUM_OF_MOTOR; i++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e016      	b.n	8003e92 <_Z20mecabot_encoder_initv+0xb6>
    {
    	filter[i] = reinterpret_cast<FO_IIR_Filter_t*>(calloc(1, sizeof(FO_IIR_Filter_t)));
 8003e64:	2118      	movs	r1, #24
 8003e66:	2001      	movs	r0, #1
 8003e68:	f003 fea6 	bl	8007bb8 <calloc>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <_Z20mecabot_encoder_initv+0xd8>)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	FO_IIR_Init(filter[i], b_coeff, a_coeff);
 8003e78:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <_Z20mecabot_encoder_initv+0xd8>)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	1d3a      	adds	r2, r7, #4
 8003e82:	f107 010c 	add.w	r1, r7, #12
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fca2 	bl	80007d0 <FO_IIR_Init>
    for (int i = 0; i < NUM_OF_MOTOR; i++)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	dde5      	ble.n	8003e64 <_Z20mecabot_encoder_initv+0x88>
    }

    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	08008128 	.word	0x08008128
 8003ea8:	20008394 	.word	0x20008394
 8003eac:	08008130 	.word	0x08008130
 8003eb0:	08008138 	.word	0x08008138
 8003eb4:	200083a4 	.word	0x200083a4

08003eb8 <_Z19mecabot_motor_startP7Motor_t>:

status_t mecabot_motor_start(Motor motor)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    return Motor_Start(motor);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fc fda1 	bl	8000a08 <Motor_Start>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6193      	str	r3, [r2, #24]
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	61d3      	str	r3, [r2, #28]
 8003efa:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <HAL_MspInit+0x5c>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_MspInit+0x60>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	@ (8003f30 <HAL_MspInit+0x60>)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40010000 	.word	0x40010000

08003f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 0318 	add.w	r3, r7, #24
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fcc <HAL_TIM_Base_MspInit+0x98>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10c      	bne.n	8003f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f54:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f6c:	e029      	b.n	8003fc2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d124      	bne.n	8003fc2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f78:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	4a14      	ldr	r2, [pc, #80]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f82:	6193      	str	r3, [r2, #24]
 8003f84:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f96:	f043 0310 	orr.w	r3, r3, #16
 8003f9a:	6193      	str	r3, [r2, #24]
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_FR_Pin|ENCODER_BR_Pin|ENCODER_FL_Pin|ENCODER_BL_Pin;
 8003fa8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb6:	f107 0318 	add.w	r3, r7, #24
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4806      	ldr	r0, [pc, #24]	@ (8003fd8 <HAL_TIM_Base_MspInit+0xa4>)
 8003fbe:	f000 ffc5 	bl	8004f4c <HAL_GPIO_Init>
}
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	@ 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40011000 	.word	0x40011000

08003fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 0310 	add.w	r3, r7, #16
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	@ (8004038 <HAL_TIM_MspPostInit+0x5c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d118      	bne.n	800402e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <HAL_TIM_MspPostInit+0x60>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <HAL_TIM_MspPostInit+0x60>)
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6193      	str	r3, [r2, #24]
 8004008:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <HAL_TIM_MspPostInit+0x60>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_FR_Pin|MOTOR_PWM_BR_Pin|MOTOR_PWM_FL_Pin|MOTOR_PWM_BL_Pin;
 8004014:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	2302      	movs	r3, #2
 800401c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401e:	2302      	movs	r3, #2
 8004020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	4619      	mov	r1, r3
 8004028:	4805      	ldr	r0, [pc, #20]	@ (8004040 <HAL_TIM_MspPostInit+0x64>)
 800402a:	f000 ff8f 	bl	8004f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800402e:	bf00      	nop
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40010800 	.word	0x40010800

08004044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4d      	ldr	r2, [pc, #308]	@ (8004194 <HAL_UART_MspInit+0x150>)
 8004060:	4293      	cmp	r3, r2
 8004062:	f040 8092 	bne.w	800418a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004066:	4b4c      	ldr	r3, [pc, #304]	@ (8004198 <HAL_UART_MspInit+0x154>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_UART_MspInit+0x154>)
 800406c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004070:	6193      	str	r3, [r2, #24]
 8004072:	4b49      	ldr	r3, [pc, #292]	@ (8004198 <HAL_UART_MspInit+0x154>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	4b46      	ldr	r3, [pc, #280]	@ (8004198 <HAL_UART_MspInit+0x154>)
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4a45      	ldr	r2, [pc, #276]	@ (8004198 <HAL_UART_MspInit+0x154>)
 8004084:	f043 0308 	orr.w	r3, r3, #8
 8004088:	6193      	str	r3, [r2, #24]
 800408a:	4b43      	ldr	r3, [pc, #268]	@ (8004198 <HAL_UART_MspInit+0x154>)
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004096:	2340      	movs	r3, #64	@ 0x40
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	483c      	ldr	r0, [pc, #240]	@ (800419c <HAL_UART_MspInit+0x158>)
 80040aa:	f000 ff4f 	bl	8004f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	4619      	mov	r1, r3
 80040c0:	4836      	ldr	r0, [pc, #216]	@ (800419c <HAL_UART_MspInit+0x158>)
 80040c2:	f000 ff43 	bl	8004f4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80040c6:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <HAL_UART_MspInit+0x15c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
 80040dc:	4a30      	ldr	r2, [pc, #192]	@ (80041a0 <HAL_UART_MspInit+0x15c>)
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040e2:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <HAL_UART_MspInit+0x164>)
 80040e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e8:	4b2e      	ldr	r3, [pc, #184]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ee:	4b2d      	ldr	r3, [pc, #180]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f4:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 80040f6:	2280      	movs	r2, #128	@ 0x80
 80040f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fa:	4b2a      	ldr	r3, [pc, #168]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004100:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 8004102:	2200      	movs	r2, #0
 8004104:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004106:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800410c:	4b25      	ldr	r3, [pc, #148]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004112:	4824      	ldr	r0, [pc, #144]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 8004114:	f000 fa96 	bl	8004644 <HAL_DMA_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800411e:	f7fc ff39 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 8004126:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004128:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <HAL_UART_MspInit+0x160>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004130:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_UART_MspInit+0x16c>)
 8004132:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004134:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004136:	2210      	movs	r2, #16
 8004138:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800413a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <HAL_UART_MspInit+0x168>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004146:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800414c:	4b17      	ldr	r3, [pc, #92]	@ (80041ac <HAL_UART_MspInit+0x168>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004152:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004158:	4b14      	ldr	r3, [pc, #80]	@ (80041ac <HAL_UART_MspInit+0x168>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800415e:	4813      	ldr	r0, [pc, #76]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004160:	f000 fa70 	bl	8004644 <HAL_DMA_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800416a:	f7fc ff13 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <HAL_UART_MspInit+0x168>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2025      	movs	r0, #37	@ 0x25
 8004180:	f000 fa29 	bl	80045d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004184:	2025      	movs	r0, #37	@ 0x25
 8004186:	f000 fa42 	bl	800460e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	3728      	adds	r7, #40	@ 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40013800 	.word	0x40013800
 8004198:	40021000 	.word	0x40021000
 800419c:	40010c00 	.word	0x40010c00
 80041a0:	40010000 	.word	0x40010000
 80041a4:	20000160 	.word	0x20000160
 80041a8:	40020058 	.word	0x40020058
 80041ac:	200001a4 	.word	0x200001a4
 80041b0:	40020044 	.word	0x40020044

080041b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <NMI_Handler+0x4>

080041bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <HardFault_Handler+0x4>

080041c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <MemManage_Handler+0x4>

080041cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <UsageFault_Handler+0x4>

080041dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004204:	f000 f8f4 	bl	80043f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}

0800420c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004210:	4802      	ldr	r0, [pc, #8]	@ (800421c <DMA1_Channel4_IRQHandler+0x10>)
 8004212:	f000 fc31 	bl	8004a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200001a4 	.word	0x200001a4

08004220 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004224:	4802      	ldr	r0, [pc, #8]	@ (8004230 <DMA1_Channel5_IRQHandler+0x10>)
 8004226:	f000 fc27 	bl	8004a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000160 	.word	0x20000160

08004234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8004238:	4802      	ldr	r0, [pc, #8]	@ (8004244 <USART1_IRQHandler+0x10>)
 800423a:	f002 fdc1 	bl	8006dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000118 	.word	0x20000118

08004248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <_sbrk+0x5c>)
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <_sbrk+0x60>)
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004278:	f003 fdb6 	bl	8007de8 <__errno>
 800427c:	4603      	mov	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <_sbrk+0x64>)
 8004298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000c000 	.word	0x2000c000
 80042a8:	00000400 	.word	0x00000400
 80042ac:	200083b4 	.word	0x200083b4
 80042b0:	20008508 	.word	0x20008508

080042b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0a5a      	lsrs	r2, r3, #9
 80042d0:	490f      	ldr	r1, [pc, #60]	@ (8004310 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80042d2:	fba1 1202 	umull	r1, r2, r1, r2
 80042d6:	09d2      	lsrs	r2, r2, #7
 80042d8:	490e      	ldr	r1, [pc, #56]	@ (8004314 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80042da:	fb01 f202 	mul.w	r2, r1, r2
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0a5b      	lsrs	r3, r3, #9
 80042e8:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	00044b83 	.word	0x00044b83
 8004314:	3b9aca00 	.word	0x3b9aca00

08004318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004318:	f7ff ffcc 	bl	80042b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800431c:	480b      	ldr	r0, [pc, #44]	@ (800434c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800431e:	490c      	ldr	r1, [pc, #48]	@ (8004350 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004320:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004324:	e002      	b.n	800432c <LoopCopyDataInit>

08004326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800432a:	3304      	adds	r3, #4

0800432c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800432c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800432e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004330:	d3f9      	bcc.n	8004326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004332:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004334:	4c09      	ldr	r4, [pc, #36]	@ (800435c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004338:	e001      	b.n	800433e <LoopFillZerobss>

0800433a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800433a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800433c:	3204      	adds	r2, #4

0800433e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800433e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004340:	d3fb      	bcc.n	800433a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004342:	f003 fd57 	bl	8007df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004346:	f7fc fbc1 	bl	8000acc <main>
  bx lr
 800434a:	4770      	bx	lr
  ldr r0, =_sdata
 800434c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004350:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004354:	080082e4 	.word	0x080082e4
  ldr r2, =_sbss
 8004358:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800435c:	20008504 	.word	0x20008504

08004360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004360:	e7fe      	b.n	8004360 <ADC1_2_IRQHandler>
	...

08004364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004368:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_Init+0x28>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a07      	ldr	r2, [pc, #28]	@ (800438c <HAL_Init+0x28>)
 800436e:	f043 0310 	orr.w	r3, r3, #16
 8004372:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004374:	2003      	movs	r0, #3
 8004376:	f000 f923 	bl	80045c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800437a:	2000      	movs	r0, #0
 800437c:	f000 f808 	bl	8004390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004380:	f7ff fda6 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000

08004390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004398:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_InitTick+0x54>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <HAL_InitTick+0x58>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f93b 	bl	800462a <HAL_SYSTICK_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00e      	b.n	80043dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b0f      	cmp	r3, #15
 80043c2:	d80a      	bhi.n	80043da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043c4:	2200      	movs	r2, #0
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f000 f903 	bl	80045d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043d0:	4a06      	ldr	r2, [pc, #24]	@ (80043ec <HAL_InitTick+0x5c>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000008 	.word	0x20000008
 80043e8:	20000010 	.word	0x20000010
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043f4:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_IncTick+0x1c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_IncTick+0x20>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	4a03      	ldr	r2, [pc, #12]	@ (8004410 <HAL_IncTick+0x20>)
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	20000010 	.word	0x20000010
 8004410:	200083b8 	.word	0x200083b8

08004414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return uwTick;
 8004418:	4b02      	ldr	r3, [pc, #8]	@ (8004424 <HAL_GetTick+0x10>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	200083b8 	.word	0x200083b8

08004428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004438:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <__NVIC_SetPriorityGrouping+0x44>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004444:	4013      	ands	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800445a:	4a04      	ldr	r2, [pc, #16]	@ (800446c <__NVIC_SetPriorityGrouping+0x44>)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	60d3      	str	r3, [r2, #12]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004474:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <__NVIC_GetPriorityGrouping+0x18>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	f003 0307 	and.w	r3, r3, #7
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	2b00      	cmp	r3, #0
 800449c:	db0b      	blt.n	80044b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	f003 021f 	and.w	r2, r3, #31
 80044a4:	4906      	ldr	r1, [pc, #24]	@ (80044c0 <__NVIC_EnableIRQ+0x34>)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2001      	movs	r0, #1
 80044ae:	fa00 f202 	lsl.w	r2, r0, r2
 80044b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100

080044c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	db0a      	blt.n	80044ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	490c      	ldr	r1, [pc, #48]	@ (8004510 <__NVIC_SetPriority+0x4c>)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	0112      	lsls	r2, r2, #4
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	440b      	add	r3, r1
 80044e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044ec:	e00a      	b.n	8004504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	4908      	ldr	r1, [pc, #32]	@ (8004514 <__NVIC_SetPriority+0x50>)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	3b04      	subs	r3, #4
 80044fc:	0112      	lsls	r2, r2, #4
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	440b      	add	r3, r1
 8004502:	761a      	strb	r2, [r3, #24]
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e100 	.word	0xe000e100
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004518:	b480      	push	{r7}
 800451a:	b089      	sub	sp, #36	@ 0x24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f1c3 0307 	rsb	r3, r3, #7
 8004532:	2b04      	cmp	r3, #4
 8004534:	bf28      	it	cs
 8004536:	2304      	movcs	r3, #4
 8004538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3304      	adds	r3, #4
 800453e:	2b06      	cmp	r3, #6
 8004540:	d902      	bls.n	8004548 <NVIC_EncodePriority+0x30>
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3b03      	subs	r3, #3
 8004546:	e000      	b.n	800454a <NVIC_EncodePriority+0x32>
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43da      	mvns	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	401a      	ands	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004560:	f04f 31ff 	mov.w	r1, #4294967295
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	43d9      	mvns	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	4313      	orrs	r3, r2
         );
}
 8004572:	4618      	mov	r0, r3
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800458c:	d301      	bcc.n	8004592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800458e:	2301      	movs	r3, #1
 8004590:	e00f      	b.n	80045b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004592:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <SysTick_Config+0x40>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800459a:	210f      	movs	r1, #15
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	f7ff ff90 	bl	80044c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SysTick_Config+0x40>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045aa:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <SysTick_Config+0x40>)
 80045ac:	2207      	movs	r2, #7
 80045ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	e000e010 	.word	0xe000e010

080045c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff2d 	bl	8004428 <__NVIC_SetPriorityGrouping>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045e8:	f7ff ff42 	bl	8004470 <__NVIC_GetPriorityGrouping>
 80045ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7ff ff90 	bl	8004518 <NVIC_EncodePriority>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff5f 	bl	80044c4 <__NVIC_SetPriority>
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff35 	bl	800448c <__NVIC_EnableIRQ>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ffa2 	bl	800457c <SysTick_Config>
 8004638:	4603      	mov	r3, r0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e059      	b.n	800470e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <HAL_DMA_Init+0xd4>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d80f      	bhi.n	8004686 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	4b2b      	ldr	r3, [pc, #172]	@ (800471c <HAL_DMA_Init+0xd8>)
 800466e:	4413      	add	r3, r2
 8004670:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <HAL_DMA_Init+0xdc>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	009a      	lsls	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a28      	ldr	r2, [pc, #160]	@ (8004724 <HAL_DMA_Init+0xe0>)
 8004682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004684:	e00e      	b.n	80046a4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	4b26      	ldr	r3, [pc, #152]	@ (8004728 <HAL_DMA_Init+0xe4>)
 800468e:	4413      	add	r3, r2
 8004690:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_DMA_Init+0xdc>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	009a      	lsls	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	@ (800472c <HAL_DMA_Init+0xe8>)
 80046a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80046be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80046c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	40020407 	.word	0x40020407
 800471c:	bffdfff8 	.word	0xbffdfff8
 8004720:	cccccccd 	.word	0xcccccccd
 8004724:	40020000 	.word	0x40020000
 8004728:	bffdfbf8 	.word	0xbffdfbf8
 800472c:	40020400 	.word	0x40020400

08004730 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_DMA_Start_IT+0x20>
 800474c:	2302      	movs	r3, #2
 800474e:	e04b      	b.n	80047e8 <HAL_DMA_Start_IT+0xb8>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d13a      	bne.n	80047da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fbb1 	bl	8004ef0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 020e 	orr.w	r2, r2, #14
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e00f      	b.n	80047c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0204 	bic.w	r2, r2, #4
 80047b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 020a 	orr.w	r2, r2, #10
 80047c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e005      	b.n	80047e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d008      	beq.n	800481a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2204      	movs	r2, #4
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e020      	b.n	800485c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 020e 	bic.w	r2, r2, #14
 8004828:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f202 	lsl.w	r2, r1, r2
 8004848:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
	...

08004868 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d005      	beq.n	800488c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
 800488a:	e0d6      	b.n	8004a3a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020e 	bic.w	r2, r2, #14
 800489a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	4b64      	ldr	r3, [pc, #400]	@ (8004a44 <HAL_DMA_Abort_IT+0x1dc>)
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d958      	bls.n	800496a <HAL_DMA_Abort_IT+0x102>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a62      	ldr	r2, [pc, #392]	@ (8004a48 <HAL_DMA_Abort_IT+0x1e0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d04f      	beq.n	8004962 <HAL_DMA_Abort_IT+0xfa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a61      	ldr	r2, [pc, #388]	@ (8004a4c <HAL_DMA_Abort_IT+0x1e4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d048      	beq.n	800495e <HAL_DMA_Abort_IT+0xf6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004a50 <HAL_DMA_Abort_IT+0x1e8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d040      	beq.n	8004958 <HAL_DMA_Abort_IT+0xf0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a5e      	ldr	r2, [pc, #376]	@ (8004a54 <HAL_DMA_Abort_IT+0x1ec>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d038      	beq.n	8004952 <HAL_DMA_Abort_IT+0xea>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a58 <HAL_DMA_Abort_IT+0x1f0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d030      	beq.n	800494c <HAL_DMA_Abort_IT+0xe4>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5b      	ldr	r2, [pc, #364]	@ (8004a5c <HAL_DMA_Abort_IT+0x1f4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d028      	beq.n	8004946 <HAL_DMA_Abort_IT+0xde>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_DMA_Abort_IT+0x1dc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d020      	beq.n	8004940 <HAL_DMA_Abort_IT+0xd8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a57      	ldr	r2, [pc, #348]	@ (8004a60 <HAL_DMA_Abort_IT+0x1f8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d019      	beq.n	800493c <HAL_DMA_Abort_IT+0xd4>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a55      	ldr	r2, [pc, #340]	@ (8004a64 <HAL_DMA_Abort_IT+0x1fc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d012      	beq.n	8004938 <HAL_DMA_Abort_IT+0xd0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a54      	ldr	r2, [pc, #336]	@ (8004a68 <HAL_DMA_Abort_IT+0x200>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00a      	beq.n	8004932 <HAL_DMA_Abort_IT+0xca>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a52      	ldr	r2, [pc, #328]	@ (8004a6c <HAL_DMA_Abort_IT+0x204>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d102      	bne.n	800492c <HAL_DMA_Abort_IT+0xc4>
 8004926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800492a:	e01b      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 800492c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004930:	e018      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004936:	e015      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004938:	2310      	movs	r3, #16
 800493a:	e013      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 800493c:	2301      	movs	r3, #1
 800493e:	e011      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004944:	e00e      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004946:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800494a:	e00b      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 800494c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004950:	e008      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004956:	e005      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800495c:	e002      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 800495e:	2310      	movs	r3, #16
 8004960:	e000      	b.n	8004964 <HAL_DMA_Abort_IT+0xfc>
 8004962:	2301      	movs	r3, #1
 8004964:	4a42      	ldr	r2, [pc, #264]	@ (8004a70 <HAL_DMA_Abort_IT+0x208>)
 8004966:	6053      	str	r3, [r2, #4]
 8004968:	e057      	b.n	8004a1a <HAL_DMA_Abort_IT+0x1b2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <HAL_DMA_Abort_IT+0x1e0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04f      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x1ac>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a34      	ldr	r2, [pc, #208]	@ (8004a4c <HAL_DMA_Abort_IT+0x1e4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d048      	beq.n	8004a10 <HAL_DMA_Abort_IT+0x1a8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a33      	ldr	r2, [pc, #204]	@ (8004a50 <HAL_DMA_Abort_IT+0x1e8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_Abort_IT+0x1a2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a31      	ldr	r2, [pc, #196]	@ (8004a54 <HAL_DMA_Abort_IT+0x1ec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d038      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x19c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a30      	ldr	r2, [pc, #192]	@ (8004a58 <HAL_DMA_Abort_IT+0x1f0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d030      	beq.n	80049fe <HAL_DMA_Abort_IT+0x196>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <HAL_DMA_Abort_IT+0x1f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d028      	beq.n	80049f8 <HAL_DMA_Abort_IT+0x190>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a26      	ldr	r2, [pc, #152]	@ (8004a44 <HAL_DMA_Abort_IT+0x1dc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d020      	beq.n	80049f2 <HAL_DMA_Abort_IT+0x18a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a60 <HAL_DMA_Abort_IT+0x1f8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d019      	beq.n	80049ee <HAL_DMA_Abort_IT+0x186>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a29      	ldr	r2, [pc, #164]	@ (8004a64 <HAL_DMA_Abort_IT+0x1fc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d012      	beq.n	80049ea <HAL_DMA_Abort_IT+0x182>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a27      	ldr	r2, [pc, #156]	@ (8004a68 <HAL_DMA_Abort_IT+0x200>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00a      	beq.n	80049e4 <HAL_DMA_Abort_IT+0x17c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <HAL_DMA_Abort_IT+0x204>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d102      	bne.n	80049de <HAL_DMA_Abort_IT+0x176>
 80049d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049dc:	e01b      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049e2:	e018      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049e8:	e015      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049ea:	2310      	movs	r3, #16
 80049ec:	e013      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e011      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049f6:	e00e      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049fc:	e00b      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 80049fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a02:	e008      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 8004a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a08:	e005      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 8004a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a0e:	e002      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 8004a10:	2310      	movs	r3, #16
 8004a12:	e000      	b.n	8004a16 <HAL_DMA_Abort_IT+0x1ae>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <HAL_DMA_Abort_IT+0x20c>)
 8004a18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
    } 
  }
  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40020080 	.word	0x40020080
 8004a48:	40020008 	.word	0x40020008
 8004a4c:	4002001c 	.word	0x4002001c
 8004a50:	40020030 	.word	0x40020030
 8004a54:	40020044 	.word	0x40020044
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	4002006c 	.word	0x4002006c
 8004a60:	40020408 	.word	0x40020408
 8004a64:	4002041c 	.word	0x4002041c
 8004a68:	40020430 	.word	0x40020430
 8004a6c:	40020444 	.word	0x40020444
 8004a70:	40020400 	.word	0x40020400
 8004a74:	40020000 	.word	0x40020000

08004a78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	2204      	movs	r2, #4
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80f1 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x20c>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80eb 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0204 	bic.w	r2, r2, #4
 8004aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c50 <HAL_DMA_IRQHandler+0x1d8>)
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d958      	bls.n	8004b8a <HAL_DMA_IRQHandler+0x112>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c54 <HAL_DMA_IRQHandler+0x1dc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d04f      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x10a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c58 <HAL_DMA_IRQHandler+0x1e0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d048      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x106>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c5c <HAL_DMA_IRQHandler+0x1e4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d040      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x100>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a59      	ldr	r2, [pc, #356]	@ (8004c60 <HAL_DMA_IRQHandler+0x1e8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d038      	beq.n	8004b72 <HAL_DMA_IRQHandler+0xfa>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a57      	ldr	r2, [pc, #348]	@ (8004c64 <HAL_DMA_IRQHandler+0x1ec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d030      	beq.n	8004b6c <HAL_DMA_IRQHandler+0xf4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a56      	ldr	r2, [pc, #344]	@ (8004c68 <HAL_DMA_IRQHandler+0x1f0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d028      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xee>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a4d      	ldr	r2, [pc, #308]	@ (8004c50 <HAL_DMA_IRQHandler+0x1d8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d020      	beq.n	8004b60 <HAL_DMA_IRQHandler+0xe8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a52      	ldr	r2, [pc, #328]	@ (8004c6c <HAL_DMA_IRQHandler+0x1f4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d019      	beq.n	8004b5c <HAL_DMA_IRQHandler+0xe4>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a50      	ldr	r2, [pc, #320]	@ (8004c70 <HAL_DMA_IRQHandler+0x1f8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d012      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xe0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a4f      	ldr	r2, [pc, #316]	@ (8004c74 <HAL_DMA_IRQHandler+0x1fc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00a      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xda>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a4d      	ldr	r2, [pc, #308]	@ (8004c78 <HAL_DMA_IRQHandler+0x200>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d102      	bne.n	8004b4c <HAL_DMA_IRQHandler+0xd4>
 8004b46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b4a:	e01b      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b50:	e018      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b56:	e015      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b58:	2340      	movs	r3, #64	@ 0x40
 8004b5a:	e013      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e011      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b64:	e00e      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b6a:	e00b      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b70:	e008      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b76:	e005      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b7c:	e002      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b7e:	2340      	movs	r3, #64	@ 0x40
 8004b80:	e000      	b.n	8004b84 <HAL_DMA_IRQHandler+0x10c>
 8004b82:	2304      	movs	r3, #4
 8004b84:	4a3d      	ldr	r2, [pc, #244]	@ (8004c7c <HAL_DMA_IRQHandler+0x204>)
 8004b86:	6053      	str	r3, [r2, #4]
 8004b88:	e057      	b.n	8004c3a <HAL_DMA_IRQHandler+0x1c2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a31      	ldr	r2, [pc, #196]	@ (8004c54 <HAL_DMA_IRQHandler+0x1dc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d04f      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x1bc>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2f      	ldr	r2, [pc, #188]	@ (8004c58 <HAL_DMA_IRQHandler+0x1e0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d048      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x1b8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8004c5c <HAL_DMA_IRQHandler+0x1e4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d040      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x1b2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2c      	ldr	r2, [pc, #176]	@ (8004c60 <HAL_DMA_IRQHandler+0x1e8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d038      	beq.n	8004c24 <HAL_DMA_IRQHandler+0x1ac>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <HAL_DMA_IRQHandler+0x1ec>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d030      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x1a6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a29      	ldr	r2, [pc, #164]	@ (8004c68 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d028      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x1a0>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	@ (8004c50 <HAL_DMA_IRQHandler+0x1d8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d020      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x19a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	@ (8004c6c <HAL_DMA_IRQHandler+0x1f4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x196>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a24      	ldr	r2, [pc, #144]	@ (8004c70 <HAL_DMA_IRQHandler+0x1f8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d012      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x192>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	@ (8004c74 <HAL_DMA_IRQHandler+0x1fc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00a      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x18c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	@ (8004c78 <HAL_DMA_IRQHandler+0x200>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <HAL_DMA_IRQHandler+0x186>
 8004bf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bfc:	e01b      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004bfe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004c02:	e018      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c08:	e015      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c0a:	2340      	movs	r3, #64	@ 0x40
 8004c0c:	e013      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c0e:	2304      	movs	r3, #4
 8004c10:	e011      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c16:	e00e      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c1c:	e00b      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c1e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004c22:	e008      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c28:	e005      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c2e:	e002      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c30:	2340      	movs	r3, #64	@ 0x40
 8004c32:	e000      	b.n	8004c36 <HAL_DMA_IRQHandler+0x1be>
 8004c34:	2304      	movs	r3, #4
 8004c36:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <HAL_DMA_IRQHandler+0x208>)
 8004c38:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8136 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c4c:	e130      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x438>
 8004c4e:	bf00      	nop
 8004c50:	40020080 	.word	0x40020080
 8004c54:	40020008 	.word	0x40020008
 8004c58:	4002001c 	.word	0x4002001c
 8004c5c:	40020030 	.word	0x40020030
 8004c60:	40020044 	.word	0x40020044
 8004c64:	40020058 	.word	0x40020058
 8004c68:	4002006c 	.word	0x4002006c
 8004c6c:	40020408 	.word	0x40020408
 8004c70:	4002041c 	.word	0x4002041c
 8004c74:	40020430 	.word	0x40020430
 8004c78:	40020444 	.word	0x40020444
 8004c7c:	40020400 	.word	0x40020400
 8004c80:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	2202      	movs	r2, #2
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80dd 	beq.w	8004e50 <HAL_DMA_IRQHandler+0x3d8>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80d7 	beq.w	8004e50 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 020a 	bic.w	r2, r2, #10
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b7b      	ldr	r3, [pc, #492]	@ (8004ebc <HAL_DMA_IRQHandler+0x444>)
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d958      	bls.n	8004d86 <HAL_DMA_IRQHandler+0x30e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a79      	ldr	r2, [pc, #484]	@ (8004ec0 <HAL_DMA_IRQHandler+0x448>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x306>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a78      	ldr	r2, [pc, #480]	@ (8004ec4 <HAL_DMA_IRQHandler+0x44c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d048      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x302>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a76      	ldr	r2, [pc, #472]	@ (8004ec8 <HAL_DMA_IRQHandler+0x450>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d040      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x2fc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_DMA_IRQHandler+0x454>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d038      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2f6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a73      	ldr	r2, [pc, #460]	@ (8004ed0 <HAL_DMA_IRQHandler+0x458>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d030      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2f0>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a72      	ldr	r2, [pc, #456]	@ (8004ed4 <HAL_DMA_IRQHandler+0x45c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d028      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x2ea>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a69      	ldr	r2, [pc, #420]	@ (8004ebc <HAL_DMA_IRQHandler+0x444>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d020      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x2e4>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed8 <HAL_DMA_IRQHandler+0x460>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d019      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x2e0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a6c      	ldr	r2, [pc, #432]	@ (8004edc <HAL_DMA_IRQHandler+0x464>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d012      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x2dc>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6b      	ldr	r2, [pc, #428]	@ (8004ee0 <HAL_DMA_IRQHandler+0x468>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00a      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x2d6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a69      	ldr	r2, [pc, #420]	@ (8004ee4 <HAL_DMA_IRQHandler+0x46c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d102      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x2d0>
 8004d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d46:	e01b      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d4c:	e018      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d52:	e015      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d54:	2320      	movs	r3, #32
 8004d56:	e013      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e011      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d60:	e00e      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d62:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d66:	e00b      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d6c:	e008      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d72:	e005      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d78:	e002      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e000      	b.n	8004d80 <HAL_DMA_IRQHandler+0x308>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	4a59      	ldr	r2, [pc, #356]	@ (8004ee8 <HAL_DMA_IRQHandler+0x470>)
 8004d82:	6053      	str	r3, [r2, #4]
 8004d84:	e057      	b.n	8004e36 <HAL_DMA_IRQHandler+0x3be>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec0 <HAL_DMA_IRQHandler+0x448>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04f      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x3b8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec4 <HAL_DMA_IRQHandler+0x44c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d048      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x3b4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_DMA_IRQHandler+0x450>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d040      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x3ae>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a48      	ldr	r2, [pc, #288]	@ (8004ecc <HAL_DMA_IRQHandler+0x454>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d038      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x3a8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a47      	ldr	r2, [pc, #284]	@ (8004ed0 <HAL_DMA_IRQHandler+0x458>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d030      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3a2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a45      	ldr	r2, [pc, #276]	@ (8004ed4 <HAL_DMA_IRQHandler+0x45c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d028      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x39c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <HAL_DMA_IRQHandler+0x444>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d020      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x396>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a41      	ldr	r2, [pc, #260]	@ (8004ed8 <HAL_DMA_IRQHandler+0x460>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d019      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x392>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a40      	ldr	r2, [pc, #256]	@ (8004edc <HAL_DMA_IRQHandler+0x464>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d012      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x38e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ee0 <HAL_DMA_IRQHandler+0x468>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00a      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x388>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee4 <HAL_DMA_IRQHandler+0x46c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d102      	bne.n	8004dfa <HAL_DMA_IRQHandler+0x382>
 8004df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004df8:	e01b      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dfe:	e018      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e04:	e015      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e06:	2320      	movs	r3, #32
 8004e08:	e013      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e011      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e12:	e00e      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e18:	e00b      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e1e:	e008      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e24:	e005      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e2a:	e002      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e000      	b.n	8004e32 <HAL_DMA_IRQHandler+0x3ba>
 8004e30:	2302      	movs	r3, #2
 8004e32:	4a2e      	ldr	r2, [pc, #184]	@ (8004eec <HAL_DMA_IRQHandler+0x474>)
 8004e34:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d034      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e4e:	e02f      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	2208      	movs	r2, #8
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d028      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x43a>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d023      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 020e 	bic.w	r2, r2, #14
 8004e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
    }
  }
  return;
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
}
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40020080 	.word	0x40020080
 8004ec0:	40020008 	.word	0x40020008
 8004ec4:	4002001c 	.word	0x4002001c
 8004ec8:	40020030 	.word	0x40020030
 8004ecc:	40020044 	.word	0x40020044
 8004ed0:	40020058 	.word	0x40020058
 8004ed4:	4002006c 	.word	0x4002006c
 8004ed8:	40020408 	.word	0x40020408
 8004edc:	4002041c 	.word	0x4002041c
 8004ee0:	40020430 	.word	0x40020430
 8004ee4:	40020444 	.word	0x40020444
 8004ee8:	40020400 	.word	0x40020400
 8004eec:	40020000 	.word	0x40020000

08004ef0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d108      	bne.n	8004f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f2e:	e007      	b.n	8004f40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b08b      	sub	sp, #44	@ 0x2c
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f5e:	e179      	b.n	8005254 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f60:	2201      	movs	r2, #1
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f040 8168 	bne.w	800524e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a96      	ldr	r2, [pc, #600]	@ (80051dc <HAL_GPIO_Init+0x290>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d05e      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
 8004f88:	4a94      	ldr	r2, [pc, #592]	@ (80051dc <HAL_GPIO_Init+0x290>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d875      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004f8e:	4a94      	ldr	r2, [pc, #592]	@ (80051e0 <HAL_GPIO_Init+0x294>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d058      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
 8004f94:	4a92      	ldr	r2, [pc, #584]	@ (80051e0 <HAL_GPIO_Init+0x294>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d86f      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004f9a:	4a92      	ldr	r2, [pc, #584]	@ (80051e4 <HAL_GPIO_Init+0x298>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d052      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
 8004fa0:	4a90      	ldr	r2, [pc, #576]	@ (80051e4 <HAL_GPIO_Init+0x298>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d869      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004fa6:	4a90      	ldr	r2, [pc, #576]	@ (80051e8 <HAL_GPIO_Init+0x29c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04c      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
 8004fac:	4a8e      	ldr	r2, [pc, #568]	@ (80051e8 <HAL_GPIO_Init+0x29c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d863      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004fb2:	4a8e      	ldr	r2, [pc, #568]	@ (80051ec <HAL_GPIO_Init+0x2a0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d046      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
 8004fb8:	4a8c      	ldr	r2, [pc, #560]	@ (80051ec <HAL_GPIO_Init+0x2a0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d85d      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004fbe:	2b12      	cmp	r3, #18
 8004fc0:	d82a      	bhi.n	8005018 <HAL_GPIO_Init+0xcc>
 8004fc2:	2b12      	cmp	r3, #18
 8004fc4:	d859      	bhi.n	800507a <HAL_GPIO_Init+0x12e>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_GPIO_Init+0x80>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005047 	.word	0x08005047
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	08005033 	.word	0x08005033
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	0800507b 	.word	0x0800507b
 8004fe0:	0800507b 	.word	0x0800507b
 8004fe4:	0800507b 	.word	0x0800507b
 8004fe8:	0800507b 	.word	0x0800507b
 8004fec:	0800507b 	.word	0x0800507b
 8004ff0:	0800507b 	.word	0x0800507b
 8004ff4:	0800507b 	.word	0x0800507b
 8004ff8:	0800507b 	.word	0x0800507b
 8004ffc:	0800507b 	.word	0x0800507b
 8005000:	0800507b 	.word	0x0800507b
 8005004:	0800507b 	.word	0x0800507b
 8005008:	0800507b 	.word	0x0800507b
 800500c:	0800507b 	.word	0x0800507b
 8005010:	08005029 	.word	0x08005029
 8005014:	0800503d 	.word	0x0800503d
 8005018:	4a75      	ldr	r2, [pc, #468]	@ (80051f0 <HAL_GPIO_Init+0x2a4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800501e:	e02c      	b.n	800507a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	623b      	str	r3, [r7, #32]
          break;
 8005026:	e029      	b.n	800507c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	623b      	str	r3, [r7, #32]
          break;
 8005030:	e024      	b.n	800507c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	3308      	adds	r3, #8
 8005038:	623b      	str	r3, [r7, #32]
          break;
 800503a:	e01f      	b.n	800507c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	330c      	adds	r3, #12
 8005042:	623b      	str	r3, [r7, #32]
          break;
 8005044:	e01a      	b.n	800507c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800504e:	2304      	movs	r3, #4
 8005050:	623b      	str	r3, [r7, #32]
          break;
 8005052:	e013      	b.n	800507c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800505c:	2308      	movs	r3, #8
 800505e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	611a      	str	r2, [r3, #16]
          break;
 8005066:	e009      	b.n	800507c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005068:	2308      	movs	r3, #8
 800506a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	615a      	str	r2, [r3, #20]
          break;
 8005072:	e003      	b.n	800507c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005074:	2300      	movs	r3, #0
 8005076:	623b      	str	r3, [r7, #32]
          break;
 8005078:	e000      	b.n	800507c <HAL_GPIO_Init+0x130>
          break;
 800507a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2bff      	cmp	r3, #255	@ 0xff
 8005080:	d801      	bhi.n	8005086 <HAL_GPIO_Init+0x13a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	e001      	b.n	800508a <HAL_GPIO_Init+0x13e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2bff      	cmp	r3, #255	@ 0xff
 8005090:	d802      	bhi.n	8005098 <HAL_GPIO_Init+0x14c>
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	e002      	b.n	800509e <HAL_GPIO_Init+0x152>
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	3b08      	subs	r3, #8
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	210f      	movs	r1, #15
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	431a      	orrs	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80c1 	beq.w	800524e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80050cc:	4b49      	ldr	r3, [pc, #292]	@ (80051f4 <HAL_GPIO_Init+0x2a8>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	4a48      	ldr	r2, [pc, #288]	@ (80051f4 <HAL_GPIO_Init+0x2a8>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6193      	str	r3, [r2, #24]
 80050d8:	4b46      	ldr	r3, [pc, #280]	@ (80051f4 <HAL_GPIO_Init+0x2a8>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80050e4:	4a44      	ldr	r2, [pc, #272]	@ (80051f8 <HAL_GPIO_Init+0x2ac>)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	3302      	adds	r3, #2
 80050ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	220f      	movs	r2, #15
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3c      	ldr	r2, [pc, #240]	@ (80051fc <HAL_GPIO_Init+0x2b0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01f      	beq.n	8005150 <HAL_GPIO_Init+0x204>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3b      	ldr	r2, [pc, #236]	@ (8005200 <HAL_GPIO_Init+0x2b4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d019      	beq.n	800514c <HAL_GPIO_Init+0x200>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3a      	ldr	r2, [pc, #232]	@ (8005204 <HAL_GPIO_Init+0x2b8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_GPIO_Init+0x1fc>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a39      	ldr	r2, [pc, #228]	@ (8005208 <HAL_GPIO_Init+0x2bc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00d      	beq.n	8005144 <HAL_GPIO_Init+0x1f8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a38      	ldr	r2, [pc, #224]	@ (800520c <HAL_GPIO_Init+0x2c0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <HAL_GPIO_Init+0x1f4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a37      	ldr	r2, [pc, #220]	@ (8005210 <HAL_GPIO_Init+0x2c4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_GPIO_Init+0x1f0>
 8005138:	2305      	movs	r3, #5
 800513a:	e00a      	b.n	8005152 <HAL_GPIO_Init+0x206>
 800513c:	2306      	movs	r3, #6
 800513e:	e008      	b.n	8005152 <HAL_GPIO_Init+0x206>
 8005140:	2304      	movs	r3, #4
 8005142:	e006      	b.n	8005152 <HAL_GPIO_Init+0x206>
 8005144:	2303      	movs	r3, #3
 8005146:	e004      	b.n	8005152 <HAL_GPIO_Init+0x206>
 8005148:	2302      	movs	r3, #2
 800514a:	e002      	b.n	8005152 <HAL_GPIO_Init+0x206>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <HAL_GPIO_Init+0x206>
 8005150:	2300      	movs	r3, #0
 8005152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005154:	f002 0203 	and.w	r2, r2, #3
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	4093      	lsls	r3, r2
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005162:	4925      	ldr	r1, [pc, #148]	@ (80051f8 <HAL_GPIO_Init+0x2ac>)
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	3302      	adds	r3, #2
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d006      	beq.n	800518a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4924      	ldr	r1, [pc, #144]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]
 8005188:	e006      	b.n	8005198 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	43db      	mvns	r3, r3
 8005192:	4920      	ldr	r1, [pc, #128]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 8005194:	4013      	ands	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80051a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	491a      	ldr	r1, [pc, #104]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
 80051b0:	e006      	b.n	80051c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051b2:	4b18      	ldr	r3, [pc, #96]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	4916      	ldr	r1, [pc, #88]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d025      	beq.n	8005218 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80051cc:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4910      	ldr	r1, [pc, #64]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]
 80051d8:	e025      	b.n	8005226 <HAL_GPIO_Init+0x2da>
 80051da:	bf00      	nop
 80051dc:	10320000 	.word	0x10320000
 80051e0:	10310000 	.word	0x10310000
 80051e4:	10220000 	.word	0x10220000
 80051e8:	10210000 	.word	0x10210000
 80051ec:	10120000 	.word	0x10120000
 80051f0:	10110000 	.word	0x10110000
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010800 	.word	0x40010800
 8005200:	40010c00 	.word	0x40010c00
 8005204:	40011000 	.word	0x40011000
 8005208:	40011400 	.word	0x40011400
 800520c:	40011800 	.word	0x40011800
 8005210:	40011c00 	.word	0x40011c00
 8005214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <HAL_GPIO_Init+0x324>)
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	43db      	mvns	r3, r3
 8005220:	4913      	ldr	r1, [pc, #76]	@ (8005270 <HAL_GPIO_Init+0x324>)
 8005222:	4013      	ands	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005232:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <HAL_GPIO_Init+0x324>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	490e      	ldr	r1, [pc, #56]	@ (8005270 <HAL_GPIO_Init+0x324>)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]
 800523e:	e006      	b.n	800524e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_GPIO_Init+0x324>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	43db      	mvns	r3, r3
 8005248:	4909      	ldr	r1, [pc, #36]	@ (8005270 <HAL_GPIO_Init+0x324>)
 800524a:	4013      	ands	r3, r2
 800524c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	3301      	adds	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f47f ae7e 	bne.w	8004f60 <HAL_GPIO_Init+0x14>
  }
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	372c      	adds	r7, #44	@ 0x2c
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	40010400 	.word	0x40010400

08005274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
 8005280:	4613      	mov	r3, r2
 8005282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005284:	787b      	ldrb	r3, [r7, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005290:	e003      	b.n	800529a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	041a      	lsls	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e272      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8087 	beq.w	80053d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c4:	4b92      	ldr	r3, [pc, #584]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d00c      	beq.n	80052ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d112      	bne.n	8005302 <HAL_RCC_OscConfig+0x5e>
 80052dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e8:	d10b      	bne.n	8005302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ea:	4b89      	ldr	r3, [pc, #548]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d06c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x12c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d168      	bne.n	80053d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e24c      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x76>
 800530c:	4b80      	ldr	r3, [pc, #512]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7f      	ldr	r2, [pc, #508]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e02e      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x98>
 8005322:	4b7b      	ldr	r3, [pc, #492]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7a      	ldr	r2, [pc, #488]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b78      	ldr	r3, [pc, #480]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a77      	ldr	r2, [pc, #476]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e01d      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0xbc>
 8005346:	4b72      	ldr	r3, [pc, #456]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a71      	ldr	r2, [pc, #452]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6e      	ldr	r2, [pc, #440]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 8005360:	4b6b      	ldr	r3, [pc, #428]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6a      	ldr	r2, [pc, #424]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b68      	ldr	r3, [pc, #416]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a67      	ldr	r2, [pc, #412]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7ff f848 	bl	8004414 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7ff f844 	bl	8004414 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e200      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b5d      	ldr	r3, [pc, #372]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0xe4>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7ff f834 	bl	8004414 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7ff f830 	bl	8004414 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	@ 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1ec      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	4b53      	ldr	r3, [pc, #332]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x10c>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d063      	beq.n	80054a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053de:	4b4c      	ldr	r3, [pc, #304]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053ea:	4b49      	ldr	r3, [pc, #292]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11c      	bne.n	8005430 <HAL_RCC_OscConfig+0x18c>
 80053f6:	4b46      	ldr	r3, [pc, #280]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	4b43      	ldr	r3, [pc, #268]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCC_OscConfig+0x176>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d001      	beq.n	800541a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e1c0      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4939      	ldr	r1, [pc, #228]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542e:	e03a      	b.n	80054a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005438:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe ffe9 	bl	8004414 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7fe ffe5 	bl	8004414 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1a1      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	4b2d      	ldr	r3, [pc, #180]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b2a      	ldr	r3, [pc, #168]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4927      	ldr	r1, [pc, #156]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b26      	ldr	r3, [pc, #152]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fe ffc8 	bl	8004414 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7fe ffc4 	bl	8004414 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e180      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03a      	beq.n	8005528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d019      	beq.n	80054ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	4b17      	ldr	r3, [pc, #92]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c0:	f7fe ffa8 	bl	8004414 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fe ffa4 	bl	8004414 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e160      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 face 	bl	8005a88 <RCC_Delay>
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fe ff8e 	bl	8004414 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fa:	e00f      	b.n	800551c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fe ff8a 	bl	8004414 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d908      	bls.n	800551c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e146      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
 8005514:	42420000 	.word	0x42420000
 8005518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	4b92      	ldr	r3, [pc, #584]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e9      	bne.n	80054fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80a6 	beq.w	8005682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553a:	4b8b      	ldr	r3, [pc, #556]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	4b88      	ldr	r3, [pc, #544]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a87      	ldr	r2, [pc, #540]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005550:	61d3      	str	r3, [r2, #28]
 8005552:	4b85      	ldr	r3, [pc, #532]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005562:	4b82      	ldr	r3, [pc, #520]	@ (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556e:	4b7f      	ldr	r3, [pc, #508]	@ (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7e      	ldr	r2, [pc, #504]	@ (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fe ff4b 	bl	8004414 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fe ff47 	bl	8004414 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b64      	cmp	r3, #100	@ 0x64
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e103      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b75      	ldr	r3, [pc, #468]	@ (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <HAL_RCC_OscConfig+0x312>
 80055a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6213      	str	r3, [r2, #32]
 80055b4:	e02d      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x334>
 80055be:	4b6a      	ldr	r3, [pc, #424]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4a69      	ldr	r2, [pc, #420]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	6213      	str	r3, [r2, #32]
 80055ca:	4b67      	ldr	r3, [pc, #412]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	4a66      	ldr	r2, [pc, #408]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	6213      	str	r3, [r2, #32]
 80055d6:	e01c      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b05      	cmp	r3, #5
 80055de:	d10c      	bne.n	80055fa <HAL_RCC_OscConfig+0x356>
 80055e0:	4b61      	ldr	r3, [pc, #388]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4a60      	ldr	r2, [pc, #384]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	f043 0304 	orr.w	r3, r3, #4
 80055ea:	6213      	str	r3, [r2, #32]
 80055ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6213      	str	r3, [r2, #32]
 80055f8:	e00b      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	6213      	str	r3, [r2, #32]
 8005606:	4b58      	ldr	r3, [pc, #352]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	4a57      	ldr	r2, [pc, #348]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	f023 0304 	bic.w	r3, r3, #4
 8005610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d015      	beq.n	8005646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561a:	f7fe fefb 	bl	8004414 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	e00a      	b.n	8005638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fe fef7 	bl	8004414 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e0b1      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005638:	4b4b      	ldr	r3, [pc, #300]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ee      	beq.n	8005622 <HAL_RCC_OscConfig+0x37e>
 8005644:	e014      	b.n	8005670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005646:	f7fe fee5 	bl	8004414 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fe fee1 	bl	8004414 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e09b      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005664:	4b40      	ldr	r3, [pc, #256]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ee      	bne.n	800564e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005676:	4b3c      	ldr	r3, [pc, #240]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4a3b      	ldr	r2, [pc, #236]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8087 	beq.w	800579a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800568c:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 030c 	and.w	r3, r3, #12
 8005694:	2b08      	cmp	r3, #8
 8005696:	d061      	beq.n	800575c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d146      	bne.n	800572e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCC_OscConfig+0x4cc>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a6:	f7fe feb5 	bl	8004414 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fe feb1 	bl	8004414 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e06d      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c0:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d4:	d108      	bne.n	80056e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056d6:	4b24      	ldr	r3, [pc, #144]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4921      	ldr	r1, [pc, #132]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a19      	ldr	r1, [r3, #32]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	430b      	orrs	r3, r1
 80056fa:	491b      	ldr	r1, [pc, #108]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x4cc>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fe fe85 	bl	8004414 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fe fe81 	bl	8004414 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e03d      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x46a>
 800572c:	e035      	b.n	800579a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <HAL_RCC_OscConfig+0x4cc>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fe fe6e 	bl	8004414 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fe fe6a 	bl	8004414 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e026      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x498>
 800575a:	e01e      	b.n	800579a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e019      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
 8005768:	40021000 	.word	0x40021000
 800576c:	40007000 	.word	0x40007000
 8005770:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <HAL_RCC_OscConfig+0x500>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d001      	beq.n	800579a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000

080057a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0d0      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d910      	bls.n	80057ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b67      	ldr	r3, [pc, #412]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f023 0207 	bic.w	r2, r3, #7
 80057d2:	4965      	ldr	r1, [pc, #404]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b63      	ldr	r3, [pc, #396]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0b8      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005804:	4b59      	ldr	r3, [pc, #356]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a58      	ldr	r2, [pc, #352]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800580e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800581c:	4b53      	ldr	r3, [pc, #332]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a52      	ldr	r2, [pc, #328]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005826:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b50      	ldr	r3, [pc, #320]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	494d      	ldr	r1, [pc, #308]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d040      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b47      	ldr	r3, [pc, #284]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d115      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07f      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	4b41      	ldr	r3, [pc, #260]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e073      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005876:	4b3d      	ldr	r3, [pc, #244]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e06b      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005886:	4b39      	ldr	r3, [pc, #228]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f023 0203 	bic.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4936      	ldr	r1, [pc, #216]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005898:	f7fe fdbc 	bl	8004414 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a0:	f7fe fdb8 	bl	8004414 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e053      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b6:	4b2d      	ldr	r3, [pc, #180]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 020c 	and.w	r2, r3, #12
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d1eb      	bne.n	80058a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058c8:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d210      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 0207 	bic.w	r2, r3, #7
 80058de:	4922      	ldr	r1, [pc, #136]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	@ (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e032      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005904:	4b19      	ldr	r3, [pc, #100]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4916      	ldr	r1, [pc, #88]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	490e      	ldr	r1, [pc, #56]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005936:	f000 f821 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800593a:	4602      	mov	r2, r0
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	490a      	ldr	r1, [pc, #40]	@ (8005970 <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	5ccb      	ldrb	r3, [r1, r3]
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a09      	ldr	r2, [pc, #36]	@ (8005974 <HAL_RCC_ClockConfig+0x1cc>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005952:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <HAL_RCC_ClockConfig+0x1d0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fd1a 	bl	8004390 <HAL_InitTick>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40022000 	.word	0x40022000
 800596c:	40021000 	.word	0x40021000
 8005970:	080082a4 	.word	0x080082a4
 8005974:	20000008 	.word	0x20000008
 8005978:	2000000c 	.word	0x2000000c

0800597c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005996:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x30>
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x36>
 80059aa:	e027      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059ac:	4b19      	ldr	r3, [pc, #100]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059ae:	613b      	str	r3, [r7, #16]
      break;
 80059b0:	e027      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	0c9b      	lsrs	r3, r3, #18
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059bc:	5cd3      	ldrb	r3, [r2, r3]
 80059be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x94>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	0c5b      	lsrs	r3, r3, #17
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	4a11      	ldr	r2, [pc, #68]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059de:	fb03 f202 	mul.w	r2, r3, r2
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e004      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	613b      	str	r3, [r7, #16]
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059fe:	613b      	str	r3, [r7, #16]
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	693b      	ldr	r3, [r7, #16]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	007a1200 	.word	0x007a1200
 8005a18:	080082bc 	.word	0x080082bc
 8005a1c:	080082cc 	.word	0x080082cc
 8005a20:	003d0900 	.word	0x003d0900

08005a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a28:	4b02      	ldr	r3, [pc, #8]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	20000008 	.word	0x20000008

08005a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a3c:	f7ff fff2 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4903      	ldr	r1, [pc, #12]	@ (8005a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	080082b4 	.word	0x080082b4

08005a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a64:	f7ff ffde 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	0adb      	lsrs	r3, r3, #11
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	@ (8005a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	080082b4 	.word	0x080082b4

08005a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a90:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <RCC_Delay+0x34>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac0 <RCC_Delay+0x38>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	0a5b      	lsrs	r3, r3, #9
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005aa4:	bf00      	nop
  }
  while (Delay --);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	60fa      	str	r2, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f9      	bne.n	8005aa4 <RCC_Delay+0x1c>
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr
 8005abc:	20000008 	.word	0x20000008
 8005ac0:	10624dd3 	.word	0x10624dd3

08005ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e041      	b.n	8005b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fe fa22 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fbbe 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e041      	b.n	8005bf8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f839 	bl	8005c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 fb6f 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_PWM_Start+0x24>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e022      	b.n	8005c7e <HAL_TIM_PWM_Start+0x6a>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d109      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x3e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	bf14      	ite	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2300      	moveq	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	e015      	b.n	8005c7e <HAL_TIM_PWM_Start+0x6a>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d109      	bne.n	8005c6c <HAL_TIM_PWM_Start+0x58>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e008      	b.n	8005c7e <HAL_TIM_PWM_Start+0x6a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e072      	b.n	8005d6c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0x82>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c94:	e013      	b.n	8005cbe <HAL_TIM_PWM_Start+0xaa>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0x92>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ca4:	e00b      	b.n	8005cbe <HAL_TIM_PWM_Start+0xaa>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xa2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cb4:	e003      	b.n	8005cbe <HAL_TIM_PWM_Start+0xaa>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 feb1 	bl	8006a2e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a28      	ldr	r2, [pc, #160]	@ (8005d74 <HAL_TIM_PWM_Start+0x160>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0xcc>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a27      	ldr	r2, [pc, #156]	@ (8005d78 <HAL_TIM_PWM_Start+0x164>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_PWM_Start+0xd0>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_PWM_Start+0xd2>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8005d74 <HAL_TIM_PWM_Start+0x160>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x122>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1b      	ldr	r2, [pc, #108]	@ (8005d78 <HAL_TIM_PWM_Start+0x164>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x122>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x122>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a17      	ldr	r2, [pc, #92]	@ (8005d7c <HAL_TIM_PWM_Start+0x168>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x122>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <HAL_TIM_PWM_Start+0x16c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x122>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a14      	ldr	r2, [pc, #80]	@ (8005d84 <HAL_TIM_PWM_Start+0x170>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d111      	bne.n	8005d5a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b06      	cmp	r3, #6
 8005d46:	d010      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	e007      	b.n	8005d6a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00

08005d88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e041      	b.n	8005e1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f839 	bl	8005e26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f000 fa5c 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e088      	b.n	8005f68 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e74:	f000 fc2c 	bl	80066d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 020c 	bic.w	r2, r2, #12
 8005e86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6999      	ldr	r1, [r3, #24]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	619a      	str	r2, [r3, #24]
 8005e9a:	e060      	b.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d11c      	bne.n	8005edc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005eb2:	f000 fca1 	bl	80067f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ec4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6999      	ldr	r1, [r3, #24]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	619a      	str	r2, [r3, #24]
 8005eda:	e040      	b.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11b      	bne.n	8005f1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ef2:	f000 fcec 	bl	80068ce <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 020c 	bic.w	r2, r2, #12
 8005f04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69d9      	ldr	r1, [r3, #28]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	61da      	str	r2, [r3, #28]
 8005f18:	e021      	b.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b0c      	cmp	r3, #12
 8005f1e:	d11c      	bne.n	8005f5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005f30:	f000 fd08 	bl	8006944 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69d9      	ldr	r1, [r3, #28]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	61da      	str	r2, [r3, #28]
 8005f58:	e001      	b.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0ae      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	f200 809f 	bhi.w	80060dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fd9 	.word	0x08005fd9
 8005fa8:	080060dd 	.word	0x080060dd
 8005fac:	080060dd 	.word	0x080060dd
 8005fb0:	080060dd 	.word	0x080060dd
 8005fb4:	08006019 	.word	0x08006019
 8005fb8:	080060dd 	.word	0x080060dd
 8005fbc:	080060dd 	.word	0x080060dd
 8005fc0:	080060dd 	.word	0x080060dd
 8005fc4:	0800605b 	.word	0x0800605b
 8005fc8:	080060dd 	.word	0x080060dd
 8005fcc:	080060dd 	.word	0x080060dd
 8005fd0:	080060dd 	.word	0x080060dd
 8005fd4:	0800609b 	.word	0x0800609b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f9ca 	bl	8006378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0208 	orr.w	r2, r2, #8
 8005ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6999      	ldr	r1, [r3, #24]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
      break;
 8006016:	e064      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fa1a 	bl	8006458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6999      	ldr	r1, [r3, #24]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	619a      	str	r2, [r3, #24]
      break;
 8006058:	e043      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fa6d 	bl	8006540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0208 	orr.w	r2, r2, #8
 8006074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0204 	bic.w	r2, r2, #4
 8006084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69d9      	ldr	r1, [r3, #28]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	61da      	str	r2, [r3, #28]
      break;
 8006098:	e023      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fac1 	bl	8006628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69d9      	ldr	r1, [r3, #28]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	021a      	lsls	r2, r3, #8
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	61da      	str	r2, [r3, #28]
      break;
 80060da:	e002      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
      break;
 80060e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIM_ConfigClockSource+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e0b4      	b.n	800627a <HAL_TIM_ConfigClockSource+0x186>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006148:	d03e      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0xd4>
 800614a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614e:	f200 8087 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	f000 8086 	beq.w	8006266 <HAL_TIM_ConfigClockSource+0x172>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	d87f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b70      	cmp	r3, #112	@ 0x70
 8006162:	d01a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xa6>
 8006164:	2b70      	cmp	r3, #112	@ 0x70
 8006166:	d87b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b60      	cmp	r3, #96	@ 0x60
 800616a:	d050      	beq.n	800620e <HAL_TIM_ConfigClockSource+0x11a>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d877      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b50      	cmp	r3, #80	@ 0x50
 8006172:	d03c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0xfa>
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d873      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d058      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x13a>
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d86f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b30      	cmp	r3, #48	@ 0x30
 8006182:	d064      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006184:	2b30      	cmp	r3, #48	@ 0x30
 8006186:	d86b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d060      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d867      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05c      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d05a      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006198:	e062      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	f000 fc21 	bl	80069f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	609a      	str	r2, [r3, #8]
      break;
 80061c6:	e04f      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	f000 fc0a 	bl	80069f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ea:	609a      	str	r2, [r3, #8]
      break;
 80061ec:	e03c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	461a      	mov	r2, r3
 80061fc:	f000 face 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2150      	movs	r1, #80	@ 0x50
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fbd8 	bl	80069bc <TIM_ITRx_SetConfig>
      break;
 800620c:	e02c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fb28 	bl	8006870 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2160      	movs	r1, #96	@ 0x60
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fbc8 	bl	80069bc <TIM_ITRx_SetConfig>
      break;
 800622c:	e01c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 faae 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fbb8 	bl	80069bc <TIM_ITRx_SetConfig>
      break;
 800624c:	e00c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f000 fbaf 	bl	80069bc <TIM_ITRx_SetConfig>
      break;
 800625e:	e003      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e000      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <TIM_Base_SetConfig+0xe0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a32      	ldr	r2, [pc, #200]	@ (8006368 <TIM_Base_SetConfig+0xe4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00f      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062aa:	d00b      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a2f      	ldr	r2, [pc, #188]	@ (800636c <TIM_Base_SetConfig+0xe8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006370 <TIM_Base_SetConfig+0xec>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2d      	ldr	r2, [pc, #180]	@ (8006374 <TIM_Base_SetConfig+0xf0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <TIM_Base_SetConfig+0xe0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0x82>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a21      	ldr	r2, [pc, #132]	@ (8006368 <TIM_Base_SetConfig+0xe4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0x82>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0x82>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1e      	ldr	r2, [pc, #120]	@ (800636c <TIM_Base_SetConfig+0xe8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0x82>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <TIM_Base_SetConfig+0xec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1c      	ldr	r2, [pc, #112]	@ (8006374 <TIM_Base_SetConfig+0xf0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a09      	ldr	r2, [pc, #36]	@ (8006364 <TIM_Base_SetConfig+0xe0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xc8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a08      	ldr	r2, [pc, #32]	@ (8006368 <TIM_Base_SetConfig+0xe4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40013400 	.word	0x40013400
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00

08006378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0201 	bic.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0302 	bic.w	r3, r3, #2
 80063c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a20      	ldr	r2, [pc, #128]	@ (8006450 <TIM_OC1_SetConfig+0xd8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC1_SetConfig+0x64>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <TIM_OC1_SetConfig+0xdc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10c      	bne.n	80063f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0308 	bic.w	r3, r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0304 	bic.w	r3, r3, #4
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <TIM_OC1_SetConfig+0xd8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC1_SetConfig+0x8e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a14      	ldr	r2, [pc, #80]	@ (8006454 <TIM_OC1_SetConfig+0xdc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d111      	bne.n	800642a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40013400 	.word	0x40013400

08006458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f023 0210 	bic.w	r2, r3, #16
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0320 	bic.w	r3, r3, #32
 80064a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a21      	ldr	r2, [pc, #132]	@ (8006538 <TIM_OC2_SetConfig+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC2_SetConfig+0x68>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a20      	ldr	r2, [pc, #128]	@ (800653c <TIM_OC2_SetConfig+0xe4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10d      	bne.n	80064dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <TIM_OC2_SetConfig+0xe0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC2_SetConfig+0x94>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a15      	ldr	r2, [pc, #84]	@ (800653c <TIM_OC2_SetConfig+0xe4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d113      	bne.n	8006514 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40013400 	.word	0x40013400

08006540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a21      	ldr	r2, [pc, #132]	@ (8006620 <TIM_OC3_SetConfig+0xe0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_OC3_SetConfig+0x66>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a20      	ldr	r2, [pc, #128]	@ (8006624 <TIM_OC3_SetConfig+0xe4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10d      	bne.n	80065c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a16      	ldr	r2, [pc, #88]	@ (8006620 <TIM_OC3_SetConfig+0xe0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC3_SetConfig+0x92>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a15      	ldr	r2, [pc, #84]	@ (8006624 <TIM_OC3_SetConfig+0xe4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d113      	bne.n	80065fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40013400 	.word	0x40013400

08006628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a11      	ldr	r2, [pc, #68]	@ (80066c8 <TIM_OC4_SetConfig+0xa0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC4_SetConfig+0x68>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <TIM_OC4_SetConfig+0xa4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	019b      	lsls	r3, r3, #6
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40013400 	.word	0x40013400

080066d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 0201 	bic.w	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <TIM_TI1_SetConfig+0xb8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <TIM_TI1_SetConfig+0x56>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a22      	ldr	r2, [pc, #136]	@ (800678c <TIM_TI1_SetConfig+0xbc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00f      	beq.n	8006726 <TIM_TI1_SetConfig+0x56>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670c:	d00b      	beq.n	8006726 <TIM_TI1_SetConfig+0x56>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <TIM_TI1_SetConfig+0xc0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_TI1_SetConfig+0x56>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a1e      	ldr	r2, [pc, #120]	@ (8006794 <TIM_TI1_SetConfig+0xc4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_TI1_SetConfig+0x56>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <TIM_TI1_SetConfig+0xc8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <TIM_TI1_SetConfig+0x5a>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <TIM_TI1_SetConfig+0x5c>
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e003      	b.n	800674a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	b2db      	uxtb	r3, r3
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f023 030a 	bic.w	r3, r3, #10
 8006764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f003 030a 	and.w	r3, r3, #10
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40013400 	.word	0x40013400
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 0210 	bic.w	r2, r3, #16
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	b29b      	uxth	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800684a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	b2db      	uxtb	r3, r3
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800691e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006970:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006982:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	031b      	lsls	r3, r3, #12
 8006988:	b29b      	uxth	r3, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006996:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	031b      	lsls	r3, r3, #12
 800699c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	f043 0307 	orr.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	609a      	str	r2, [r3, #8]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	021a      	lsls	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	2201      	movs	r2, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	401a      	ands	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	431a      	orrs	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
	...

08006a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e050      	b.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d018      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae6:	d00e      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a15      	ldr	r2, [pc, #84]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d009      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a14      	ldr	r2, [pc, #80]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d004      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a12      	ldr	r2, [pc, #72]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d10c      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800
 8006b4c:	40000c00 	.word	0x40000c00

08006b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e03d      	b.n	8006be8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e042      	b.n	8006c8a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fd fa13 	bl	8004044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	@ 0x24
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ff30 	bl	8007a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08c      	sub	sp, #48	@ 0x30
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d156      	bne.n	8006d5c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_UART_Transmit_DMA+0x26>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e04f      	b.n	8006d5e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2221      	movs	r2, #33	@ 0x21
 8006cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	4a21      	ldr	r2, [pc, #132]	@ (8006d68 <HAL_UART_Transmit_DMA+0xd4>)
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	4a20      	ldr	r2, [pc, #128]	@ (8006d6c <HAL_UART_Transmit_DMA+0xd8>)
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d70 <HAL_UART_Transmit_DMA+0xdc>)
 8006cf4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006cfe:	f107 0308 	add.w	r3, r7, #8
 8006d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3304      	adds	r3, #4
 8006d12:	461a      	mov	r2, r3
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	f7fd fd0b 	bl	8004730 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3314      	adds	r3, #20
 8006d2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	617b      	str	r3, [r7, #20]
   return(result);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6a39      	ldr	r1, [r7, #32]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e5      	bne.n	8006d24 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	@ 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08007331 	.word	0x08007331
 8006d6c:	080073cb 	.word	0x080073cb
 8006d70:	0800754f 	.word	0x0800754f

08006d74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d112      	bne.n	8006db4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_UART_Receive_DMA+0x26>
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00b      	b.n	8006db6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	461a      	mov	r2, r3
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fc1a 	bl	80075e4 <UART_Start_Receive_DMA>
 8006db0:	4603      	mov	r3, r0
 8006db2:	e000      	b.n	8006db6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_UART_IRQHandler+0x66>
 8006e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fd7e 	bl	8007920 <UART_Receive_IT>
      return;
 8006e24:	e25b      	b.n	80072de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 80de 	beq.w	8006fec <HAL_UART_IRQHandler+0x22c>
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80d1 	beq.w	8006fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_UART_IRQHandler+0xae>
 8006e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	f043 0201 	orr.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <HAL_UART_IRQHandler+0xd2>
 8006e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8a:	f043 0202 	orr.w	r2, r3, #2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <HAL_UART_IRQHandler+0xf6>
 8006e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eae:	f043 0204 	orr.w	r2, r3, #4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d011      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x126>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d105      	bne.n	8006eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	f043 0208 	orr.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 81f2 	beq.w	80072d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <HAL_UART_IRQHandler+0x14e>
 8006efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fd09 	bl	8007920 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <HAL_UART_IRQHandler+0x17a>
 8006f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d04f      	beq.n	8006fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fc13 	bl	8007766 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d041      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3314      	adds	r3, #20
 8006f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3314      	adds	r3, #20
 8006f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1d9      	bne.n	8006f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d013      	beq.n	8006fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80071a0 <HAL_UART_IRQHandler+0x3e0>)
 8006fa8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fd fc5a 	bl	8004868 <HAL_DMA_Abort_IT>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc8:	e00e      	b.n	8006fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f99c 	bl	8007308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	e00a      	b.n	8006fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f998 	bl	8007308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	e006      	b.n	8006fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f994 	bl	8007308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006fe6:	e175      	b.n	80072d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	bf00      	nop
    return;
 8006fea:	e173      	b.n	80072d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	f040 814f 	bne.w	8007294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8148 	beq.w	8007294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8141 	beq.w	8007294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007012:	2300      	movs	r3, #0
 8007014:	60bb      	str	r3, [r7, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80b6 	beq.w	80071a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8145 	beq.w	80072d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007056:	429a      	cmp	r2, r3
 8007058:	f080 813e 	bcs.w	80072d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007062:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	2b20      	cmp	r3, #32
 800706c:	f000 8088 	beq.w	8007180 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800708a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800708e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800709c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1d9      	bne.n	8007070 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3314      	adds	r3, #20
 80070c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070c6:	e853 3f00 	ldrex	r3, [r3]
 80070ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e1      	bne.n	80070bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3314      	adds	r3, #20
 80070fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800710a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800711c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800711e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007122:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800712a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e3      	bne.n	80070f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800714e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007164:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e3      	bne.n	800713e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	4618      	mov	r0, r3
 800717c:	f7fd fb38 	bl	80047f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800718e:	b29b      	uxth	r3, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8bf 	bl	800731a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800719c:	e09c      	b.n	80072d8 <HAL_UART_IRQHandler+0x518>
 800719e:	bf00      	nop
 80071a0:	0800782b 	.word	0x0800782b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 808e 	beq.w	80072dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8089 	beq.w	80072dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80071ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80071f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e3      	bne.n	80071ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	623b      	str	r3, [r7, #32]
   return(result);
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3314      	adds	r3, #20
 8007222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007226:	633a      	str	r2, [r7, #48]	@ 0x30
 8007228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800722c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e3      	bne.n	8007202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	60fb      	str	r3, [r7, #12]
   return(result);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0310 	bic.w	r3, r3, #16
 800725e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800726c:	61fa      	str	r2, [r7, #28]
 800726e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	69b9      	ldr	r1, [r7, #24]
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	617b      	str	r3, [r7, #20]
   return(result);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e3      	bne.n	8007248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f844 	bl	800731a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007292:	e023      	b.n	80072dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d009      	beq.n	80072b4 <HAL_UART_IRQHandler+0x4f4>
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fad0 	bl	8007852 <UART_Transmit_IT>
    return;
 80072b2:	e014      	b.n	80072de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00e      	beq.n	80072de <HAL_UART_IRQHandler+0x51e>
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb0f 	bl	80078f0 <UART_EndTransmit_IT>
    return;
 80072d2:	e004      	b.n	80072de <HAL_UART_IRQHandler+0x51e>
    return;
 80072d4:	bf00      	nop
 80072d6:	e002      	b.n	80072de <HAL_UART_IRQHandler+0x51e>
      return;
 80072d8:	bf00      	nop
 80072da:	e000      	b.n	80072de <HAL_UART_IRQHandler+0x51e>
      return;
 80072dc:	bf00      	nop
  }
}
 80072de:	37e8      	adds	r7, #232	@ 0xe8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b090      	sub	sp, #64	@ 0x40
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d137      	bne.n	80073bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	2200      	movs	r2, #0
 8007350:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3314      	adds	r3, #20
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	623b      	str	r3, [r7, #32]
   return(result);
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007372:	633a      	str	r2, [r7, #48]	@ 0x30
 8007374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	60fb      	str	r3, [r7, #12]
   return(result);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073a6:	61fa      	str	r2, [r7, #28]
 80073a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	69b9      	ldr	r1, [r7, #24]
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	617b      	str	r3, [r7, #20]
   return(result);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073ba:	e002      	b.n	80073c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80073bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80073be:	f7fb fccb 	bl	8002d58 <HAL_UART_TxCpltCallback>
}
 80073c2:	bf00      	nop
 80073c4:	3740      	adds	r7, #64	@ 0x40
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff ff83 	bl	80072e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b09c      	sub	sp, #112	@ 0x70
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d172      	bne.n	80074e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007404:	2200      	movs	r2, #0
 8007406:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	330c      	adds	r3, #12
 800740e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800741a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800741e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007428:	65ba      	str	r2, [r7, #88]	@ 0x58
 800742a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800742e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800744c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	667b      	str	r3, [r7, #100]	@ 0x64
 8007454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800745c:	647a      	str	r2, [r7, #68]	@ 0x44
 800745e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800746a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	623b      	str	r3, [r7, #32]
   return(result);
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007486:	663b      	str	r3, [r7, #96]	@ 0x60
 8007488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007490:	633a      	str	r2, [r7, #48]	@ 0x30
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d119      	bne.n	80074e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0310 	bic.w	r3, r3, #16
 80074ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074d4:	61fa      	str	r2, [r7, #28]
 80074d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	69b9      	ldr	r1, [r7, #24]
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	617b      	str	r3, [r7, #20]
   return(result);
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e5      	bne.n	80074b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ea:	2200      	movs	r2, #0
 80074ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d106      	bne.n	8007504 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074fa:	4619      	mov	r1, r3
 80074fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074fe:	f7ff ff0c 	bl	800731a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007502:	e002      	b.n	800750a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007504:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007506:	f7fb fc35 	bl	8002d74 <HAL_UART_RxCpltCallback>
}
 800750a:	bf00      	nop
 800750c:	3770      	adds	r7, #112	@ 0x70
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	2b01      	cmp	r3, #1
 800752c:	d108      	bne.n	8007540 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	b29b      	uxth	r3, r3
 8007536:	4619      	mov	r1, r3
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff feee 	bl	800731a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800753e:	e002      	b.n	8007546 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fed8 	bl	80072f6 <HAL_UART_RxHalfCpltCallback>
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b21      	cmp	r3, #33	@ 0x21
 8007580:	d108      	bne.n	8007594 <UART_DMAError+0x46>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800758e:	68b8      	ldr	r0, [r7, #8]
 8007590:	f000 f8c2 	bl	8007718 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bf14      	ite	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	2300      	moveq	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b22      	cmp	r3, #34	@ 0x22
 80075b4:	d108      	bne.n	80075c8 <UART_DMAError+0x7a>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80075c2:	68b8      	ldr	r0, [r7, #8]
 80075c4:	f000 f8cf 	bl	8007766 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075cc:	f043 0210 	orr.w	r2, r3, #16
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d4:	68b8      	ldr	r0, [r7, #8]
 80075d6:	f7ff fe97 	bl	8007308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b098      	sub	sp, #96	@ 0x60
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2222      	movs	r2, #34	@ 0x22
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007610:	4a3e      	ldr	r2, [pc, #248]	@ (800770c <UART_Start_Receive_DMA+0x128>)
 8007612:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007618:	4a3d      	ldr	r2, [pc, #244]	@ (8007710 <UART_Start_Receive_DMA+0x12c>)
 800761a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	4a3c      	ldr	r2, [pc, #240]	@ (8007714 <UART_Start_Receive_DMA+0x130>)
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007628:	2200      	movs	r2, #0
 800762a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800762c:	f107 0308 	add.w	r3, r7, #8
 8007630:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	f7fd f874 	bl	8004730 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007648:	2300      	movs	r3, #0
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d019      	beq.n	800769a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800767c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007686:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007688:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800768c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	f043 0301 	orr.w	r3, r3, #1
 80076b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80076c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e5      	bne.n	800769a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3314      	adds	r3, #20
 80076d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	617b      	str	r3, [r7, #20]
   return(result);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80076f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6a39      	ldr	r1, [r7, #32]
 80076f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e5      	bne.n	80076ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3760      	adds	r7, #96	@ 0x60
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	080073e7 	.word	0x080073e7
 8007710:	08007513 	.word	0x08007513
 8007714:	0800754f 	.word	0x0800754f

08007718 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b089      	sub	sp, #36	@ 0x24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	61ba      	str	r2, [r7, #24]
 8007742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6979      	ldr	r1, [r7, #20]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	613b      	str	r3, [r7, #16]
   return(result);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800775c:	bf00      	nop
 800775e:	3724      	adds	r7, #36	@ 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr

08007766 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007766:	b480      	push	{r7}
 8007768:	b095      	sub	sp, #84	@ 0x54
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800778e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d119      	bne.n	8007812 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	330c      	adds	r3, #12
 80077fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fe:	61ba      	str	r2, [r7, #24]
 8007800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6979      	ldr	r1, [r7, #20]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	613b      	str	r3, [r7, #16]
   return(result);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007820:	bf00      	nop
 8007822:	3754      	adds	r7, #84	@ 0x54
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff fd5f 	bl	8007308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b21      	cmp	r3, #33	@ 0x21
 8007864:	d13e      	bne.n	80078e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786e:	d114      	bne.n	800789a <UART_Transmit_IT+0x48>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d110      	bne.n	800789a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800788c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	1c9a      	adds	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	621a      	str	r2, [r3, #32]
 8007898:	e008      	b.n	80078ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6211      	str	r1, [r2, #32]
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4619      	mov	r1, r3
 80078ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10f      	bne.n	80078e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e000      	b.n	80078e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078e4:	2302      	movs	r3, #2
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007906:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fb fa21 	bl	8002d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08c      	sub	sp, #48	@ 0x30
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b22      	cmp	r3, #34	@ 0x22
 8007932:	f040 80ae 	bne.w	8007a92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793e:	d117      	bne.n	8007970 <UART_Receive_IT+0x50>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d113      	bne.n	8007970 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	b29a      	uxth	r2, r3
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	629a      	str	r2, [r3, #40]	@ 0x28
 800796e:	e026      	b.n	80079be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007982:	d007      	beq.n	8007994 <UART_Receive_IT+0x74>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <UART_Receive_IT+0x82>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e008      	b.n	80079b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d15d      	bne.n	8007a8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0220 	bic.w	r2, r2, #32
 80079e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695a      	ldr	r2, [r3, #20]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d135      	bne.n	8007a84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f023 0310 	bic.w	r3, r3, #16
 8007a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a3e:	623a      	str	r2, [r7, #32]
 8007a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	69f9      	ldr	r1, [r7, #28]
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d10a      	bne.n	8007a76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fc4c 	bl	800731a <HAL_UARTEx_RxEventCallback>
 8007a82:	e002      	b.n	8007a8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fb f975 	bl	8002d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e002      	b.n	8007a94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e000      	b.n	8007a94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a92:	2302      	movs	r3, #2
  }
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3730      	adds	r7, #48	@ 0x30
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007ad6:	f023 030c 	bic.w	r3, r3, #12
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <UART_SetConfig+0x114>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d103      	bne.n	8007b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b04:	f7fd ffac 	bl	8005a60 <HAL_RCC_GetPCLK2Freq>
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	e002      	b.n	8007b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b0c:	f7fd ff94 	bl	8005a38 <HAL_RCC_GetPCLK1Freq>
 8007b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009a      	lsls	r2, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	4a22      	ldr	r2, [pc, #136]	@ (8007bb4 <UART_SetConfig+0x118>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	0119      	lsls	r1, r3, #4
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009a      	lsls	r2, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b48:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb4 <UART_SetConfig+0x118>)
 8007b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2064      	movs	r0, #100	@ 0x64
 8007b52:	fb00 f303 	mul.w	r3, r0, r3
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	3332      	adds	r3, #50	@ 0x32
 8007b5c:	4a15      	ldr	r2, [pc, #84]	@ (8007bb4 <UART_SetConfig+0x118>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b68:	4419      	add	r1, r3
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009a      	lsls	r2, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b80:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb4 <UART_SetConfig+0x118>)
 8007b82:	fba3 0302 	umull	r0, r3, r3, r2
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2064      	movs	r0, #100	@ 0x64
 8007b8a:	fb00 f303 	mul.w	r3, r0, r3
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	3332      	adds	r3, #50	@ 0x32
 8007b94:	4a07      	ldr	r2, [pc, #28]	@ (8007bb4 <UART_SetConfig+0x118>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	40013800 	.word	0x40013800
 8007bb4:	51eb851f 	.word	0x51eb851f

08007bb8 <calloc>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	@ (8007bc4 <calloc+0xc>)
 8007bba:	460a      	mov	r2, r1
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	f000 b802 	b.w	8007bc8 <_calloc_r>
 8007bc4:	20000014 	.word	0x20000014

08007bc8 <_calloc_r>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	fba1 5402 	umull	r5, r4, r1, r2
 8007bce:	b93c      	cbnz	r4, 8007be0 <_calloc_r+0x18>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f000 f82f 	bl	8007c34 <_malloc_r>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <_calloc_r+0x1e>
 8007bda:	2600      	movs	r6, #0
 8007bdc:	4630      	mov	r0, r6
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	220c      	movs	r2, #12
 8007be2:	6002      	str	r2, [r0, #0]
 8007be4:	e7f9      	b.n	8007bda <_calloc_r+0x12>
 8007be6:	462a      	mov	r2, r5
 8007be8:	4621      	mov	r1, r4
 8007bea:	f000 f8e5 	bl	8007db8 <memset>
 8007bee:	e7f5      	b.n	8007bdc <_calloc_r+0x14>

08007bf0 <sbrk_aligned>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8007c30 <sbrk_aligned+0x40>)
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	6831      	ldr	r1, [r6, #0]
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	b911      	cbnz	r1, 8007c02 <sbrk_aligned+0x12>
 8007bfc:	f000 f8e4 	bl	8007dc8 <_sbrk_r>
 8007c00:	6030      	str	r0, [r6, #0]
 8007c02:	4621      	mov	r1, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f8df 	bl	8007dc8 <_sbrk_r>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d103      	bne.n	8007c16 <sbrk_aligned+0x26>
 8007c0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c12:	4620      	mov	r0, r4
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	1cc4      	adds	r4, r0, #3
 8007c18:	f024 0403 	bic.w	r4, r4, #3
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d0f8      	beq.n	8007c12 <sbrk_aligned+0x22>
 8007c20:	1a21      	subs	r1, r4, r0
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 f8d0 	bl	8007dc8 <_sbrk_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d1f2      	bne.n	8007c12 <sbrk_aligned+0x22>
 8007c2c:	e7ef      	b.n	8007c0e <sbrk_aligned+0x1e>
 8007c2e:	bf00      	nop
 8007c30:	200083bc 	.word	0x200083bc

08007c34 <_malloc_r>:
 8007c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c38:	1ccd      	adds	r5, r1, #3
 8007c3a:	f025 0503 	bic.w	r5, r5, #3
 8007c3e:	3508      	adds	r5, #8
 8007c40:	2d0c      	cmp	r5, #12
 8007c42:	bf38      	it	cc
 8007c44:	250c      	movcc	r5, #12
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	4606      	mov	r6, r0
 8007c4a:	db01      	blt.n	8007c50 <_malloc_r+0x1c>
 8007c4c:	42a9      	cmp	r1, r5
 8007c4e:	d904      	bls.n	8007c5a <_malloc_r+0x26>
 8007c50:	230c      	movs	r3, #12
 8007c52:	6033      	str	r3, [r6, #0]
 8007c54:	2000      	movs	r0, #0
 8007c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d30 <_malloc_r+0xfc>
 8007c5e:	f000 f869 	bl	8007d34 <__malloc_lock>
 8007c62:	f8d8 3000 	ldr.w	r3, [r8]
 8007c66:	461c      	mov	r4, r3
 8007c68:	bb44      	cbnz	r4, 8007cbc <_malloc_r+0x88>
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff ffbf 	bl	8007bf0 <sbrk_aligned>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	4604      	mov	r4, r0
 8007c76:	d158      	bne.n	8007d2a <_malloc_r+0xf6>
 8007c78:	f8d8 4000 	ldr.w	r4, [r8]
 8007c7c:	4627      	mov	r7, r4
 8007c7e:	2f00      	cmp	r7, #0
 8007c80:	d143      	bne.n	8007d0a <_malloc_r+0xd6>
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	d04b      	beq.n	8007d1e <_malloc_r+0xea>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	eb04 0903 	add.w	r9, r4, r3
 8007c90:	f000 f89a 	bl	8007dc8 <_sbrk_r>
 8007c94:	4581      	cmp	r9, r0
 8007c96:	d142      	bne.n	8007d1e <_malloc_r+0xea>
 8007c98:	6821      	ldr	r1, [r4, #0]
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	1a6d      	subs	r5, r5, r1
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7ff ffa6 	bl	8007bf0 <sbrk_aligned>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d03a      	beq.n	8007d1e <_malloc_r+0xea>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	442b      	add	r3, r5
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	bb62      	cbnz	r2, 8007d10 <_malloc_r+0xdc>
 8007cb6:	f8c8 7000 	str.w	r7, [r8]
 8007cba:	e00f      	b.n	8007cdc <_malloc_r+0xa8>
 8007cbc:	6822      	ldr	r2, [r4, #0]
 8007cbe:	1b52      	subs	r2, r2, r5
 8007cc0:	d420      	bmi.n	8007d04 <_malloc_r+0xd0>
 8007cc2:	2a0b      	cmp	r2, #11
 8007cc4:	d917      	bls.n	8007cf6 <_malloc_r+0xc2>
 8007cc6:	1961      	adds	r1, r4, r5
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	6025      	str	r5, [r4, #0]
 8007ccc:	bf18      	it	ne
 8007cce:	6059      	strne	r1, [r3, #4]
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	bf08      	it	eq
 8007cd4:	f8c8 1000 	streq.w	r1, [r8]
 8007cd8:	5162      	str	r2, [r4, r5]
 8007cda:	604b      	str	r3, [r1, #4]
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f000 f82f 	bl	8007d40 <__malloc_unlock>
 8007ce2:	f104 000b 	add.w	r0, r4, #11
 8007ce6:	1d23      	adds	r3, r4, #4
 8007ce8:	f020 0007 	bic.w	r0, r0, #7
 8007cec:	1ac2      	subs	r2, r0, r3
 8007cee:	bf1c      	itt	ne
 8007cf0:	1a1b      	subne	r3, r3, r0
 8007cf2:	50a3      	strne	r3, [r4, r2]
 8007cf4:	e7af      	b.n	8007c56 <_malloc_r+0x22>
 8007cf6:	6862      	ldr	r2, [r4, #4]
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	bf0c      	ite	eq
 8007cfc:	f8c8 2000 	streq.w	r2, [r8]
 8007d00:	605a      	strne	r2, [r3, #4]
 8007d02:	e7eb      	b.n	8007cdc <_malloc_r+0xa8>
 8007d04:	4623      	mov	r3, r4
 8007d06:	6864      	ldr	r4, [r4, #4]
 8007d08:	e7ae      	b.n	8007c68 <_malloc_r+0x34>
 8007d0a:	463c      	mov	r4, r7
 8007d0c:	687f      	ldr	r7, [r7, #4]
 8007d0e:	e7b6      	b.n	8007c7e <_malloc_r+0x4a>
 8007d10:	461a      	mov	r2, r3
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d1fb      	bne.n	8007d10 <_malloc_r+0xdc>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6053      	str	r3, [r2, #4]
 8007d1c:	e7de      	b.n	8007cdc <_malloc_r+0xa8>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	4630      	mov	r0, r6
 8007d22:	6033      	str	r3, [r6, #0]
 8007d24:	f000 f80c 	bl	8007d40 <__malloc_unlock>
 8007d28:	e794      	b.n	8007c54 <_malloc_r+0x20>
 8007d2a:	6005      	str	r5, [r0, #0]
 8007d2c:	e7d6      	b.n	8007cdc <_malloc_r+0xa8>
 8007d2e:	bf00      	nop
 8007d30:	200083c0 	.word	0x200083c0

08007d34 <__malloc_lock>:
 8007d34:	4801      	ldr	r0, [pc, #4]	@ (8007d3c <__malloc_lock+0x8>)
 8007d36:	f000 b881 	b.w	8007e3c <__retarget_lock_acquire_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	20008500 	.word	0x20008500

08007d40 <__malloc_unlock>:
 8007d40:	4801      	ldr	r0, [pc, #4]	@ (8007d48 <__malloc_unlock+0x8>)
 8007d42:	f000 b87c 	b.w	8007e3e <__retarget_lock_release_recursive>
 8007d46:	bf00      	nop
 8007d48:	20008500 	.word	0x20008500

08007d4c <realloc>:
 8007d4c:	4b02      	ldr	r3, [pc, #8]	@ (8007d58 <realloc+0xc>)
 8007d4e:	460a      	mov	r2, r1
 8007d50:	4601      	mov	r1, r0
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	f000 b802 	b.w	8007d5c <_realloc_r>
 8007d58:	20000014 	.word	0x20000014

08007d5c <_realloc_r>:
 8007d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d60:	4680      	mov	r8, r0
 8007d62:	4615      	mov	r5, r2
 8007d64:	460c      	mov	r4, r1
 8007d66:	b921      	cbnz	r1, 8007d72 <_realloc_r+0x16>
 8007d68:	4611      	mov	r1, r2
 8007d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6e:	f7ff bf61 	b.w	8007c34 <_malloc_r>
 8007d72:	b92a      	cbnz	r2, 8007d80 <_realloc_r+0x24>
 8007d74:	f000 f872 	bl	8007e5c <_free_r>
 8007d78:	2400      	movs	r4, #0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d80:	f000 f8b4 	bl	8007eec <_malloc_usable_size_r>
 8007d84:	4285      	cmp	r5, r0
 8007d86:	4606      	mov	r6, r0
 8007d88:	d802      	bhi.n	8007d90 <_realloc_r+0x34>
 8007d8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d8e:	d8f4      	bhi.n	8007d7a <_realloc_r+0x1e>
 8007d90:	4629      	mov	r1, r5
 8007d92:	4640      	mov	r0, r8
 8007d94:	f7ff ff4e 	bl	8007c34 <_malloc_r>
 8007d98:	4607      	mov	r7, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d0ec      	beq.n	8007d78 <_realloc_r+0x1c>
 8007d9e:	42b5      	cmp	r5, r6
 8007da0:	462a      	mov	r2, r5
 8007da2:	4621      	mov	r1, r4
 8007da4:	bf28      	it	cs
 8007da6:	4632      	movcs	r2, r6
 8007da8:	f000 f84a 	bl	8007e40 <memcpy>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4640      	mov	r0, r8
 8007db0:	f000 f854 	bl	8007e5c <_free_r>
 8007db4:	463c      	mov	r4, r7
 8007db6:	e7e0      	b.n	8007d7a <_realloc_r+0x1e>

08007db8 <memset>:
 8007db8:	4603      	mov	r3, r0
 8007dba:	4402      	add	r2, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <_sbrk_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4d05      	ldr	r5, [pc, #20]	@ (8007de4 <_sbrk_r+0x1c>)
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7fc fa38 	bl	8004248 <_sbrk>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_sbrk_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_sbrk_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200084fc 	.word	0x200084fc

08007de8 <__errno>:
 8007de8:	4b01      	ldr	r3, [pc, #4]	@ (8007df0 <__errno+0x8>)
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000014 	.word	0x20000014

08007df4 <__libc_init_array>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	2600      	movs	r6, #0
 8007df8:	4d0c      	ldr	r5, [pc, #48]	@ (8007e2c <__libc_init_array+0x38>)
 8007dfa:	4c0d      	ldr	r4, [pc, #52]	@ (8007e30 <__libc_init_array+0x3c>)
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	42a6      	cmp	r6, r4
 8007e02:	d109      	bne.n	8007e18 <__libc_init_array+0x24>
 8007e04:	f000 f87a 	bl	8007efc <_init>
 8007e08:	2600      	movs	r6, #0
 8007e0a:	4d0a      	ldr	r5, [pc, #40]	@ (8007e34 <__libc_init_array+0x40>)
 8007e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8007e38 <__libc_init_array+0x44>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	42a6      	cmp	r6, r4
 8007e14:	d105      	bne.n	8007e22 <__libc_init_array+0x2e>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1c:	4798      	blx	r3
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7ee      	b.n	8007e00 <__libc_init_array+0xc>
 8007e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e26:	4798      	blx	r3
 8007e28:	3601      	adds	r6, #1
 8007e2a:	e7f2      	b.n	8007e12 <__libc_init_array+0x1e>
 8007e2c:	080082d8 	.word	0x080082d8
 8007e30:	080082d8 	.word	0x080082d8
 8007e34:	080082d8 	.word	0x080082d8
 8007e38:	080082e0 	.word	0x080082e0

08007e3c <__retarget_lock_acquire_recursive>:
 8007e3c:	4770      	bx	lr

08007e3e <__retarget_lock_release_recursive>:
 8007e3e:	4770      	bx	lr

08007e40 <memcpy>:
 8007e40:	440a      	add	r2, r1
 8007e42:	4291      	cmp	r1, r2
 8007e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e48:	d100      	bne.n	8007e4c <memcpy+0xc>
 8007e4a:	4770      	bx	lr
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e58:	d1f9      	bne.n	8007e4e <memcpy+0xe>
 8007e5a:	bd10      	pop	{r4, pc}

08007e5c <_free_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4605      	mov	r5, r0
 8007e60:	2900      	cmp	r1, #0
 8007e62:	d040      	beq.n	8007ee6 <_free_r+0x8a>
 8007e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e68:	1f0c      	subs	r4, r1, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bfb8      	it	lt
 8007e6e:	18e4      	addlt	r4, r4, r3
 8007e70:	f7ff ff60 	bl	8007d34 <__malloc_lock>
 8007e74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ee8 <_free_r+0x8c>)
 8007e76:	6813      	ldr	r3, [r2, #0]
 8007e78:	b933      	cbnz	r3, 8007e88 <_free_r+0x2c>
 8007e7a:	6063      	str	r3, [r4, #4]
 8007e7c:	6014      	str	r4, [r2, #0]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e84:	f7ff bf5c 	b.w	8007d40 <__malloc_unlock>
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d908      	bls.n	8007e9e <_free_r+0x42>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	1821      	adds	r1, r4, r0
 8007e90:	428b      	cmp	r3, r1
 8007e92:	bf01      	itttt	eq
 8007e94:	6819      	ldreq	r1, [r3, #0]
 8007e96:	685b      	ldreq	r3, [r3, #4]
 8007e98:	1809      	addeq	r1, r1, r0
 8007e9a:	6021      	streq	r1, [r4, #0]
 8007e9c:	e7ed      	b.n	8007e7a <_free_r+0x1e>
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	b10b      	cbz	r3, 8007ea8 <_free_r+0x4c>
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	d9fa      	bls.n	8007e9e <_free_r+0x42>
 8007ea8:	6811      	ldr	r1, [r2, #0]
 8007eaa:	1850      	adds	r0, r2, r1
 8007eac:	42a0      	cmp	r0, r4
 8007eae:	d10b      	bne.n	8007ec8 <_free_r+0x6c>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	4401      	add	r1, r0
 8007eb4:	1850      	adds	r0, r2, r1
 8007eb6:	4283      	cmp	r3, r0
 8007eb8:	6011      	str	r1, [r2, #0]
 8007eba:	d1e0      	bne.n	8007e7e <_free_r+0x22>
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4408      	add	r0, r1
 8007ec2:	6010      	str	r0, [r2, #0]
 8007ec4:	6053      	str	r3, [r2, #4]
 8007ec6:	e7da      	b.n	8007e7e <_free_r+0x22>
 8007ec8:	d902      	bls.n	8007ed0 <_free_r+0x74>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	e7d6      	b.n	8007e7e <_free_r+0x22>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	1821      	adds	r1, r4, r0
 8007ed4:	428b      	cmp	r3, r1
 8007ed6:	bf01      	itttt	eq
 8007ed8:	6819      	ldreq	r1, [r3, #0]
 8007eda:	685b      	ldreq	r3, [r3, #4]
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	6054      	str	r4, [r2, #4]
 8007ee4:	e7cb      	b.n	8007e7e <_free_r+0x22>
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	200083c0 	.word	0x200083c0

08007eec <_malloc_usable_size_r>:
 8007eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef0:	1f18      	subs	r0, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bfbc      	itt	lt
 8007ef6:	580b      	ldrlt	r3, [r1, r0]
 8007ef8:	18c0      	addlt	r0, r0, r3
 8007efa:	4770      	bx	lr

08007efc <_init>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr

08007f08 <_fini>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	bf00      	nop
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr
