
system_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cc0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  08011ea8  08011ea8  00012ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c28  08012c28  000140c0  2**0
                  CONTENTS
  4 .ARM          00000008  08012c28  08012c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c30  08012c30  000140c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012c30  08012c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c38  08012c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08012c3c  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  200000c0  08012cfc  000140c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd0  08012cfc  00014bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000140c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208f8  00000000  00000000  000140e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003881  00000000  00000000  000349e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00038268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001225  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbfb  00000000  00000000  0003ab85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6c8  00000000  00000000  00057780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a654f  00000000  00000000  00074e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000715c  00000000  00000000  0011b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00122538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c0 	.word	0x200000c0
 8000204:	00000000 	.word	0x00000000
 8000208:	08011e90 	.word	0x08011e90

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000c4 	.word	0x200000c4
 8000224:	08011e90 	.word	0x08011e90

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	463c      	mov	r4, r7
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8001280:	2110      	movs	r1, #16
 8001282:	2001      	movs	r0, #1
 8001284:	f010 fc62 	bl	8011b4c <calloc>
 8001288:	4603      	mov	r3, r0
 800128a:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 80012a4:	893a      	ldrh	r2, [r7, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <Motor_Init+0x58>)
 80012ae:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f000 f832 	bl	800131c <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <Motor_Init+0x58>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f807 	bl	80012d0 <Motor_Set_PWM_Frequency>

    return object;
 80012c2:	697b      	ldr	r3, [r7, #20]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	200000dc 	.word	0x200000dc

080012d0 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <Motor_Set_PWM_Frequency+0x40>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <Motor_Set_PWM_Frequency+0x44>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <Motor_Set_PWM_Frequency+0x40>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <Motor_Set_PWM_Frequency+0x48>)
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <Motor_Set_PWM_Frequency+0x44>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200000dc 	.word	0x200000dc
 8001314:	20000134 	.word	0x20000134
 8001318:	007a1200 	.word	0x007a1200

0800131c <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f993 3000 	ldrsb.w	r3, [r3]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d00b      	beq.n	800134a <Motor_Set_PWM_Duty+0x2e>
                      (motor->direction == DIRECTION_BACKWARD) ? (255-duty) : 0;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f993 3000 	ldrsb.w	r3, [r3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d103      	bne.n	8001346 <Motor_Set_PWM_Duty+0x2a>
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	43db      	mvns	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	e002      	b.n	800134c <Motor_Set_PWM_Duty+0x30>
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <Motor_Set_PWM_Duty+0x30>
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7053      	strb	r3, [r2, #1]

    float duty_percentage = duty / 255.0f;
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd2e 	bl	8000db4 <__aeabi_i2f>
 8001358:	4603      	mov	r3, r0
 800135a:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <Motor_Set_PWM_Duty+0xb8>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe31 	bl	8000fc4 <__aeabi_fdiv>
 8001362:	4603      	mov	r3, r0
 8001364:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <Motor_Set_PWM_Duty+0xbc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 800136e:	6938      	ldr	r0, [r7, #16]
 8001370:	f7ff fd1c 	bl	8000dac <__aeabi_ui2f>
 8001374:	4603      	mov	r3, r0
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fd6f 	bl	8000e5c <__aeabi_fmul>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff57 	bl	8001234 <__aeabi_f2uiz>
 8001386:	4603      	mov	r3, r0
 8001388:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d104      	bne.n	800139c <Motor_Set_PWM_Duty+0x80>
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <Motor_Set_PWM_Duty+0xbc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
 800139a:	e015      	b.n	80013c8 <Motor_Set_PWM_Duty+0xac>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d104      	bne.n	80013ae <Motor_Set_PWM_Duty+0x92>
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <Motor_Set_PWM_Duty+0xbc>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80013ac:	e00c      	b.n	80013c8 <Motor_Set_PWM_Duty+0xac>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d104      	bne.n	80013c0 <Motor_Set_PWM_Duty+0xa4>
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <Motor_Set_PWM_Duty+0xbc>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013be:	e003      	b.n	80013c8 <Motor_Set_PWM_Duty+0xac>
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <Motor_Set_PWM_Duty+0xbc>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	437f0000 	.word	0x437f0000
 80013d8:	20000134 	.word	0x20000134

080013dc <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f815 	bl	800141c <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <Motor_Start+0x3c>)
 80013fa:	f00b ffed 	bl	800d3d8 <HAL_TIM_PWM_Start>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <Motor_Start+0x32>
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	e000      	b.n	8001410 <Motor_Start+0x34>

    return STATUS_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000134 	.word	0x20000134

0800141c <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	701a      	strb	r2, [r3, #0]
    if (direction == DIRECTION_FORWARD)
 800142e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <Motor_SetDirection+0x2a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6898      	ldr	r0, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	899b      	ldrh	r3, [r3, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	f00a fc77 	bl	800bd34 <HAL_GPIO_WritePin>
    if (direction == DIRECTION_BACKWARD)
 8001446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144e:	d107      	bne.n	8001460 <Motor_SetDirection+0x44>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6898      	ldr	r0, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	899b      	ldrh	r3, [r3, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	4619      	mov	r1, r3
 800145c:	f00a fc6a 	bl	800bd34 <HAL_GPIO_WritePin>

    return STATUS_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	463b      	mov	r3, r7
 8001472:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 8001476:	210c      	movs	r1, #12
 8001478:	2001      	movs	r0, #1
 800147a:	f010 fb67 	bl	8011b4c <calloc>
 800147e:	4603      	mov	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	609a      	str	r2, [r3, #8]

    return object;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <quat_mult>:

status_t MadgwickFilter_Update_MARG(MadgwickFilter_t *filter, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz);

// Multiply two quaternions and return a copy of the result, prod = L * R
static Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 80014a0:	b084      	sub	sp, #16
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80014ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t product;
    product.q0 = (L.q0 * R.q0) - (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3);
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fccf 	bl	8000e5c <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	461c      	mov	r4, r3
 80014c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fcc7 	bl	8000e5c <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff fbb8 	bl	8000c48 <__aeabi_fsub>
 80014d8:	4603      	mov	r3, r0
 80014da:	461c      	mov	r4, r3
 80014dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fcba 	bl	8000e5c <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fbab 	bl	8000c48 <__aeabi_fsub>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461c      	mov	r4, r3
 80014f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fcad 	bl	8000e5c <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fb9e 	bl	8000c48 <__aeabi_fsub>
 800150c:	4603      	mov	r3, r0
 800150e:	60bb      	str	r3, [r7, #8]
    product.q1 = (L.q0 * R.q1) + (L.q1 * R.q0) + (L.q2 * R.q3) - (L.q3 * R.q2);
 8001510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fca0 	bl	8000e5c <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	461c      	mov	r4, r3
 8001520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001522:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc98 	bl	8000e5c <__aeabi_fmul>
 800152c:	4603      	mov	r3, r0
 800152e:	4619      	mov	r1, r3
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fb8b 	bl	8000c4c <__addsf3>
 8001536:	4603      	mov	r3, r0
 8001538:	461c      	mov	r4, r3
 800153a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800153c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc8b 	bl	8000e5c <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	4619      	mov	r1, r3
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fb7e 	bl	8000c4c <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	461c      	mov	r4, r3
 8001554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fc7e 	bl	8000e5c <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	4619      	mov	r1, r3
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff fb6f 	bl	8000c48 <__aeabi_fsub>
 800156a:	4603      	mov	r3, r0
 800156c:	60fb      	str	r3, [r7, #12]
    product.q2 = (L.q0 * R.q2) - (L.q1 * R.q3) + (L.q2 * R.q0) + (L.q3 * R.q1);
 800156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc71 	bl	8000e5c <__aeabi_fmul>
 800157a:	4603      	mov	r3, r0
 800157c:	461c      	mov	r4, r3
 800157e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc69 	bl	8000e5c <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4620      	mov	r0, r4
 8001590:	f7ff fb5a 	bl	8000c48 <__aeabi_fsub>
 8001594:	4603      	mov	r3, r0
 8001596:	461c      	mov	r4, r3
 8001598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc5c 	bl	8000e5c <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fb4f 	bl	8000c4c <__addsf3>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461c      	mov	r4, r3
 80015b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fc4f 	bl	8000e5c <__aeabi_fmul>
 80015be:	4603      	mov	r3, r0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fb42 	bl	8000c4c <__addsf3>
 80015c8:	4603      	mov	r3, r0
 80015ca:	613b      	str	r3, [r7, #16]
    product.q3 = (L.q0 * R.q3) + (L.q1 * R.q2) - (L.q2 * R.q1) + (L.q3 * R.q0);
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc42 	bl	8000e5c <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	461c      	mov	r4, r3
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fc3a 	bl	8000e5c <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff fb2d 	bl	8000c4c <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461c      	mov	r4, r3
 80015f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc2d 	bl	8000e5c <__aeabi_fmul>
 8001602:	4603      	mov	r3, r0
 8001604:	4619      	mov	r1, r3
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fb1e 	bl	8000c48 <__aeabi_fsub>
 800160c:	4603      	mov	r3, r0
 800160e:	461c      	mov	r4, r3
 8001610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc20 	bl	8000e5c <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fb13 	bl	8000c4c <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	617b      	str	r3, [r7, #20]
    
    return product;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	461c      	mov	r4, r3
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001642:	b004      	add	sp, #16
 8001644:	4770      	bx	lr

08001646 <quat_scalar>:

// Multiply a reference of a quaternion by a scalar, q = s*q
static Quaternion_t quat_scalar(Quaternion_t q, float scalar)
{
 8001646:	b084      	sub	sp, #16
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	f107 001c 	add.w	r0, r7, #28
 8001654:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    q.q0 *= scalar;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fbfd 	bl	8000e5c <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	61fb      	str	r3, [r7, #28]
    q.q1 *= scalar;
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fbf6 	bl	8000e5c <__aeabi_fmul>
 8001670:	4603      	mov	r3, r0
 8001672:	623b      	str	r3, [r7, #32]
    q.q2 *= scalar;
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fbef 	bl	8000e5c <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    q.q3 *= scalar;
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fbe8 	bl	8000e5c <__aeabi_fmul>
 800168c:	4603      	mov	r3, r0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28

    return q;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	461c      	mov	r4, r3
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016a8:	b004      	add	sp, #16
 80016aa:	4770      	bx	lr

080016ac <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static Quaternion_t quat_add(Quaternion_t L, Quaternion_t R)
{
 80016ac:	b084      	sub	sp, #16
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80016ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t sum;
    sum.q0 = L.q0 + R.q0;
 80016be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fac1 	bl	8000c4c <__addsf3>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60bb      	str	r3, [r7, #8]
    sum.q1 = L.q1 + R.q1;
 80016ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fab9 	bl	8000c4c <__addsf3>
 80016da:	4603      	mov	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]
    sum.q2 = L.q2 + R.q2;
 80016de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fab1 	bl	8000c4c <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	613b      	str	r3, [r7, #16]
    sum.q3 = L.q3 + R.q3;
 80016ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff faa9 	bl	8000c4c <__addsf3>
 80016fa:	4603      	mov	r3, r0
 80016fc:	617b      	str	r3, [r7, #20]

    return sum;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	461c      	mov	r4, r3
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001716:	b004      	add	sp, #16
 8001718:	4770      	bx	lr

0800171a <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static Quaternion_t quat_sub(Quaternion_t L, Quaternion_t R)
{
 800171a:	b084      	sub	sp, #16
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001728:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t sum;
    sum.q0 = L.q0 - R.q0;
 800172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fa88 	bl	8000c48 <__aeabi_fsub>
 8001738:	4603      	mov	r3, r0
 800173a:	60bb      	str	r3, [r7, #8]
    sum.q1 = L.q1 - R.q1;
 800173c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fa80 	bl	8000c48 <__aeabi_fsub>
 8001748:	4603      	mov	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]
    sum.q2 = L.q2 - R.q2;
 800174c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa78 	bl	8000c48 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	613b      	str	r3, [r7, #16]
    sum.q3 = L.q3 - R.q3;
 800175c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800175e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa70 	bl	8000c48 <__aeabi_fsub>
 8001768:	4603      	mov	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

    return sum;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	461c      	mov	r4, r3
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001784:	b004      	add	sp, #16
 8001786:	4770      	bx	lr

08001788 <quat_Norm>:

    return q;
}

static float quat_Norm (Quaternion_t q)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	463c      	mov	r4, r7
 8001790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q0*q.q0 + q.q1*q.q1 + q.q2*q.q2 +q.q3*q.q3);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fb5e 	bl	8000e5c <__aeabi_fmul>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461c      	mov	r4, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb56 	bl	8000e5c <__aeabi_fmul>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa49 	bl	8000c4c <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461c      	mov	r4, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fb49 	bl	8000e5c <__aeabi_fmul>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fa3c 	bl	8000c4c <__addsf3>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461c      	mov	r4, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fb3c 	bl	8000e5c <__aeabi_fmul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fa2f 	bl	8000c4c <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe85 	bl	8000500 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f00d ff25 	bl	800f64c <sqrt>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9c9 	bl	8000ba0 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <quat_Normalize>:

// Normalizes pointer q by calling quat_Norm(q),
static void quat_Normalize(Quaternion_t *q)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	f7ff ffb0 	bl	8001788 <quat_Norm>
 8001828:	60f8      	str	r0, [r7, #12]
    q -> q0 /= norm;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fbc7 	bl	8000fc4 <__aeabi_fdiv>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
    q -> q1 /= norm;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbbd 	bl	8000fc4 <__aeabi_fdiv>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	605a      	str	r2, [r3, #4]
    q -> q2 /= norm;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fbb3 	bl	8000fc4 <__aeabi_fdiv>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
    q -> q3 /= norm;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fba9 	bl	8000fc4 <__aeabi_fdiv>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60da      	str	r2, [r3, #12]
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <MadgwickFilter_Update_IMU>:

    return STATUS_OK;
}

status_t MadgwickFilter_Update_IMU(MadgwickFilter_t *filter, float gx, float gy, float gz, float ax, float ay, float az)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b0b3      	sub	sp, #204	@ 0xcc
 8001888:	af06      	add	r7, sp, #24
 800188a:	61f8      	str	r0, [r7, #28]
 800188c:	61b9      	str	r1, [r7, #24]
 800188e:	617a      	str	r2, [r7, #20]
 8001890:	613b      	str	r3, [r7, #16]
    //Variables and constants
    Quaternion_t q_est_prev = filter->q;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0};            // used as a place holder in equations 42 and 43
 800189e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    Quaternion_t q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 80018cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 80018d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018dc:	2230      	movs	r2, #48	@ 0x30
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f010 fa33 	bl	8011d4c <memset>
    
    Quaternion_t gradient = {0};
 80018e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    Quaternion_t q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q0 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.q1 = gx;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.q2 = gy;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.q3 = gz;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
    
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 8001906:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800190a:	ac01      	add	r4, sp, #4
 800190c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff fdbc 	bl	80014a0 <quat_mult>
    q_w = quat_scalar(q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 8001928:	4638      	mov	r0, r7
 800192a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	f7ff fe84 	bl	8001646 <quat_scalar>
 800193e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001942:	463b      	mov	r3, r7
 8001944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 800194a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff62 	bl	8001818 <quat_Normalize>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q1 * q_est_prev.q3 - q_est_prev.q0 * q_est_prev.q2) - q_a.q1;
 8001954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa7c 	bl	8000e5c <__aeabi_fmul>
 8001964:	4603      	mov	r3, r0
 8001966:	461c      	mov	r4, r3
 8001968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800196c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fa72 	bl	8000e5c <__aeabi_fmul>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff f963 	bl	8000c48 <__aeabi_fsub>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f960 	bl	8000c4c <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff f956 	bl	8000c48 <__aeabi_fsub>
 800199c:	4603      	mov	r3, r0
 800199e:	677b      	str	r3, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.q0 * q_est_prev.q1 + q_est_prev.q2* q_est_prev.q3) - q_a.q2;
 80019a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fa56 	bl	8000e5c <__aeabi_fmul>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461c      	mov	r4, r3
 80019b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fa4c 	bl	8000e5c <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f93f 	bl	8000c4c <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f93a 	bl	8000c4c <__addsf3>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f7ff f930 	bl	8000c48 <__aeabi_fsub>
 80019e8:	4603      	mov	r3, r0
 80019ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q1 * q_est_prev.q1 - q_est_prev.q2 * q_est_prev.q2) - q_a.q3;
 80019ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa30 	bl	8000e5c <__aeabi_fmul>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd7e 	bl	8000500 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	49ab      	ldr	r1, [pc, #684]	@ (8001cbc <MadgwickFilter_Update_IMU+0x438>)
 8001a0e:	f7fe fc17 	bl	8000240 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4614      	mov	r4, r2
 8001a18:	461d      	mov	r5, r3
 8001a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fa19 	bl	8000e5c <__aeabi_fmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd67 	bl	8000500 <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fc01 	bl	8000240 <__aeabi_dsub>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f7fe fbfb 	bl	8000244 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4614      	mov	r4, r2
 8001a54:	461d      	mov	r5, r3
 8001a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd50 	bl	8000500 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fbea 	bl	8000240 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f894 	bl	8000ba0 <__aeabi_d2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q2;
 8001a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a80:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f9e9 	bl	8000e5c <__aeabi_fmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	647b      	str	r3, [r7, #68]	@ 0x44
    J_g[0][1] =  2 * q_est_prev.q3;
 8001a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a92:	4619      	mov	r1, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f8d9 	bl	8000c4c <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    J_g[0][2] = -2 * q_est_prev.q0;
 8001a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001aa2:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f9d8 	bl	8000e5c <__aeabi_fmul>
 8001aac:	4603      	mov	r3, r0
 8001aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    J_g[0][3] =  2 * q_est_prev.q1;
 8001ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8c8 	bl	8000c4c <__addsf3>
 8001abc:	4603      	mov	r3, r0
 8001abe:	653b      	str	r3, [r7, #80]	@ 0x50
    
    J_g[1][0] = 2 * q_est_prev.q1;
 8001ac0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f8c0 	bl	8000c4c <__addsf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	657b      	str	r3, [r7, #84]	@ 0x54
    J_g[1][1] = 2 * q_est_prev.q0;
 8001ad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f8b8 	bl	8000c4c <__addsf3>
 8001adc:	4603      	mov	r3, r0
 8001ade:	65bb      	str	r3, [r7, #88]	@ 0x58
    J_g[1][2] = 2 * q_est_prev.q3;
 8001ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8b0 	bl	8000c4c <__addsf3>
 8001aec:	4603      	mov	r3, r0
 8001aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    J_g[1][3] = 2 * q_est_prev.q2;
 8001af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001af4:	4619      	mov	r1, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8a8 	bl	8000c4c <__addsf3>
 8001afc:	4603      	mov	r3, r0
 8001afe:	663b      	str	r3, [r7, #96]	@ 0x60
    
    J_g[2][0] = 0;
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4 * q_est_prev.q1;
 8001b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b0a:	496d      	ldr	r1, [pc, #436]	@ (8001cc0 <MadgwickFilter_Update_IMU+0x43c>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f9a5 	bl	8000e5c <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    J_g[2][2] = -4 * q_est_prev.q2;
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1a:	4969      	ldr	r1, [pc, #420]	@ (8001cc0 <MadgwickFilter_Update_IMU+0x43c>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f99d 	bl	8000e5c <__aeabi_fmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    J_g[2][3] = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	673b      	str	r3, [r7, #112]	@ 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q0 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f992 	bl	8000e5c <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461c      	mov	r4, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f98a 	bl	8000e5c <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff f87d 	bl	8000c4c <__addsf3>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461c      	mov	r4, r3
 8001b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f97d 	bl	8000e5c <__aeabi_fmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff f870 	bl	8000c4c <__addsf3>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    gradient.q1 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8001b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f970 	bl	8000e5c <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461c      	mov	r4, r3
 8001b80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b82:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f968 	bl	8000e5c <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff f85b 	bl	8000c4c <__addsf3>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461c      	mov	r4, r3
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f95b 	bl	8000e5c <__aeabi_fmul>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff f84e 	bl	8000c4c <__addsf3>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    gradient.q2 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8001bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bb6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f94e 	bl	8000e5c <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bc6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f946 	bl	8000e5c <__aeabi_fmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff f839 	bl	8000c4c <__addsf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461c      	mov	r4, r3
 8001bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001be0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f939 	bl	8000e5c <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff f82c 	bl	8000c4c <__addsf3>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    gradient.q3 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f92c 	bl	8000e5c <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461c      	mov	r4, r3
 8001c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c0a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f924 	bl	8000e5c <__aeabi_fmul>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff f817 	bl	8000c4c <__addsf3>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461c      	mov	r4, r3
 8001c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f917 	bl	8000e5c <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff f80a 	bl	8000c4c <__addsf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	643b      	str	r3, [r7, #64]	@ 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalize(&gradient);
 8001c3c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fde9 	bl	8001818 <quat_Normalize>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quat_scalar(gradient, filter->beta);             // multiply normalized gradient by beta
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	4638      	mov	r0, r7
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c58:	f7ff fcf5 	bl	8001646 <quat_scalar>
 8001c5c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001c60:	463b      	mov	r3, r7
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    q_est_dot = quat_sub(q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 8001c68:	f107 0590 	add.w	r5, r7, #144	@ 0x90
 8001c6c:	ac01      	add	r4, sp, #4
 8001c6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c82:	4628      	mov	r0, r5
 8001c84:	f7ff fd49 	bl	800171a <quat_sub>
    q_est_dot = quat_scalar(q_est_dot, filter->sample_rate);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9c:	f7ff fcd3 	bl	8001646 <quat_scalar>
 8001ca0:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    filter->q = quat_add(q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 8001cac:	69fe      	ldr	r6, [r7, #28]
 8001cae:	463d      	mov	r5, r7
 8001cb0:	ac01      	add	r4, sp, #4
 8001cb2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb8:	e004      	b.n	8001cc4 <MadgwickFilter_Update_IMU+0x440>
 8001cba:	bf00      	nop
 8001cbc:	3fe00000 	.word	0x3fe00000
 8001cc0:	c0800000 	.word	0xc0800000
 8001cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f7ff fce9 	bl	80016ac <quat_add>
 8001cda:	4634      	mov	r4, r6
 8001cdc:	463b      	mov	r3, r7
 8001cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    quat_Normalize(&filter->q);                 // normalize the orientation of the estimate
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd96 	bl	8001818 <quat_Normalize>
}
 8001cec:	bf00      	nop
 8001cee:	4618      	mov	r0, r3
 8001cf0:	37b4      	adds	r7, #180	@ 0xb4
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf6:	bf00      	nop

08001cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfc:	f009 f892 	bl	800ae24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d00:	f000 f811 	bl	8001d26 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d04:	f000 fa26 	bl	8002154 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d08:	f000 f9fe 	bl	8002108 <MX_DMA_Init>
  MX_TIM1_Init();
 8001d0c:	f000 f87a 	bl	8001e04 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001d10:	f000 f93c 	bl	8001f8c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001d14:	f000 f9ce 	bl	80020b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d18:	f000 f846 	bl	8001da8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001d1c:	f006 fdc8 	bl	80088b0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001d20:	f006 fde6 	bl	80088f0 <loop>
 8001d24:	e7fc      	b.n	8001d20 <main+0x28>

08001d26 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b090      	sub	sp, #64	@ 0x40
 8001d2a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	2228      	movs	r2, #40	@ 0x28
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f010 f809 	bl	8011d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d50:	2310      	movs	r3, #16
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d54:	2302      	movs	r3, #2
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d5c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00a fe7e 	bl	800ca68 <HAL_RCC_OscConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001d72:	f000 fa45 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d76:	230f      	movs	r3, #15
 8001d78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00b f8eb 	bl	800cf6c <HAL_RCC_ClockConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d9c:	f000 fa30 	bl	8002200 <Error_Handler>
  }
}
 8001da0:	bf00      	nop
 8001da2:	3740      	adds	r7, #64	@ 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <MX_I2C1_Init+0x54>)
 8001db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <MX_I2C1_Init+0x58>)
 8001db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_I2C1_Init+0x50>)
 8001de6:	f009 ffbd 	bl	800bd64 <HAL_I2C_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001df0:	f000 fa06 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200000e0 	.word	0x200000e0
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	00061a80 	.word	0x00061a80

08001e04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b096      	sub	sp, #88	@ 0x58
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00f ff85 	bl	8011d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 8001e42:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e44:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <MX_TIM1_Init+0x184>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 0;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 65535;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e5a:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b49      	ldr	r3, [pc, #292]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 8001e62:	4b48      	ldr	r3, [pc, #288]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 8001e6e:	4845      	ldr	r0, [pc, #276]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e70:	f00b fa0a 	bl	800d288 <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e7a:	f000 f9c1 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 8001e84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e88:	4619      	mov	r1, r3
 8001e8a:	483e      	ldr	r0, [pc, #248]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e8c:	f00b fe1c 	bl	800dac8 <HAL_TIM_ConfigClockSource>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e96:	f000 f9b3 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 8001e9a:	483a      	ldr	r0, [pc, #232]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001e9c:	f00b fa43 	bl	800d326 <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ea6:	f000 f9ab 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4832      	ldr	r0, [pc, #200]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001eba:	f00c faeb 	bl	800e494 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ec4:	f000 f99c 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	@ 0x60
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4825      	ldr	r0, [pc, #148]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001eee:	f00b fd29 	bl	800d944 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ef8:	f000 f982 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f00:	2204      	movs	r2, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	481f      	ldr	r0, [pc, #124]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001f06:	f00b fd1d 	bl	800d944 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001f10:	f000 f976 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4819      	ldr	r0, [pc, #100]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001f1e:	f00b fd11 	bl	800d944 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f28:	f000 f96a 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	220c      	movs	r2, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4813      	ldr	r0, [pc, #76]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001f36:	f00b fd05 	bl	800d944 <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001f40:	f000 f95e 	bl	8002200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001f68:	f00c fb00 	bl	800e56c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001f72:	f000 f945 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8001f76:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MX_TIM1_Init+0x180>)
 8001f78:	f008 fd86 	bl	800aa88 <HAL_TIM_MspPostInit>

}
 8001f7c:	bf00      	nop
 8001f7e:	3758      	adds	r7, #88	@ 0x58
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000134 	.word	0x20000134
 8001f88:	40012c00 	.word	0x40012c00

08001f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001faa:	463b      	mov	r3, r7
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80020b0 <MX_TIM8_Init+0x124>)
 8001fba:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 8001fc8:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fce:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 8001fe2:	4832      	ldr	r0, [pc, #200]	@ (80020ac <MX_TIM8_Init+0x120>)
 8001fe4:	f00b f950 	bl	800d288 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001fee:	f000 f907 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	482b      	ldr	r0, [pc, #172]	@ (80020ac <MX_TIM8_Init+0x120>)
 8002000:	f00b fd62 	bl	800dac8 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800200a:	f000 f8f9 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 800200e:	4827      	ldr	r0, [pc, #156]	@ (80020ac <MX_TIM8_Init+0x120>)
 8002010:	f00b fa9c 	bl	800d54c <HAL_TIM_IC_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800201a:	f000 f8f1 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4619      	mov	r1, r3
 800202c:	481f      	ldr	r0, [pc, #124]	@ (80020ac <MX_TIM8_Init+0x120>)
 800202e:	f00c fa31 	bl	800e494 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002038:	f000 f8e2 	bl	8002200 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800203c:	2300      	movs	r3, #0
 800203e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002040:	2301      	movs	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	4816      	ldr	r0, [pc, #88]	@ (80020ac <MX_TIM8_Init+0x120>)
 8002054:	f00b fbda 	bl	800d80c <HAL_TIM_IC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800205e:	f000 f8cf 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	2204      	movs	r2, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4810      	ldr	r0, [pc, #64]	@ (80020ac <MX_TIM8_Init+0x120>)
 800206a:	f00b fbcf 	bl	800d80c <HAL_TIM_IC_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002074:	f000 f8c4 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480b      	ldr	r0, [pc, #44]	@ (80020ac <MX_TIM8_Init+0x120>)
 8002080:	f00b fbc4 	bl	800d80c <HAL_TIM_IC_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 800208a:	f000 f8b9 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	220c      	movs	r2, #12
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_TIM8_Init+0x120>)
 8002096:	f00b fbb9 	bl	800d80c <HAL_TIM_IC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80020a0:	f000 f8ae 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	@ 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000017c 	.word	0x2000017c
 80020b0:	40013400 	.word	0x40013400

080020b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <MX_USART1_UART_Init+0x50>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020c0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80020c4:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ec:	f00c faa1 	bl	800e632 <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020f6:	f000 f883 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200001c4 	.word	0x200001c4
 8002104:	40013800 	.word	0x40013800

08002108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <MX_DMA_Init+0x48>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <MX_DMA_Init+0x48>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6153      	str	r3, [r2, #20]
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <MX_DMA_Init+0x48>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	200e      	movs	r0, #14
 800212c:	f008 ffb3 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002130:	200e      	movs	r0, #14
 8002132:	f008 ffcc 	bl	800b0ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	200f      	movs	r0, #15
 800213c:	f008 ffab 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002140:	200f      	movs	r0, #15
 8002142:	f008 ffc4 	bl	800b0ce <HAL_NVIC_EnableIRQ>

}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 800216e:	f043 0320 	orr.w	r3, r3, #32
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a10      	ldr	r2, [pc, #64]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <MX_GPIO_Init+0xa4>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_BL_DIR_Pin|MOTOR_BR_DIR_Pin|MOTOR_FL_DIR_Pin|MOTOR_FR_DIR_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	210f      	movs	r1, #15
 80021cc:	480b      	ldr	r0, [pc, #44]	@ (80021fc <MX_GPIO_Init+0xa8>)
 80021ce:	f009 fdb1 	bl	800bd34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_BL_DIR_Pin MOTOR_BR_DIR_Pin MOTOR_FL_DIR_Pin MOTOR_FR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_BL_DIR_Pin|MOTOR_BR_DIR_Pin|MOTOR_FL_DIR_Pin|MOTOR_FR_DIR_Pin;
 80021d2:	230f      	movs	r3, #15
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2302      	movs	r3, #2
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4619      	mov	r1, r3
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_GPIO_Init+0xa8>)
 80021ea:	f009 fc0f 	bl	800ba0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40011000 	.word	0x40011000

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <Error_Handler+0x8>

0800220c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f00d fac9 	bl	800f7ac <cosf>
 800221a:	4603      	mov	r3, r0
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f00d faf5 	bl	800f81c <sinf>
 8002232:	4603      	mov	r3, r0
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <quat_getYaw>:

static float quat_getYaw(Quaternion_t q)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	463c      	mov	r4, r7
 8002244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return atan2(2.0 * (q.q3 * q.q0 + q.q1 * q.q2) , - 1.0 + 2.0 * (q.q0 * q.q0 + q.q1 * q.q1));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fe04 	bl	8000e5c <__aeabi_fmul>
 8002254:	4603      	mov	r3, r0
 8002256:	461c      	mov	r4, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fdfc 	bl	8000e5c <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	4619      	mov	r1, r3
 8002268:	4620      	mov	r0, r4
 800226a:	f7fe fcef 	bl	8000c4c <__addsf3>
 800226e:	4603      	mov	r3, r0
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f945 	bl	8000500 <__aeabi_f2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	f7fd ffe3 	bl	8000244 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fde5 	bl	8000e5c <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	461e      	mov	r6, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fddd 	bl	8000e5c <__aeabi_fmul>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4619      	mov	r1, r3
 80022a6:	4630      	mov	r0, r6
 80022a8:	f7fe fcd0 	bl	8000c4c <__addsf3>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f926 	bl	8000500 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	f7fd ffc4 	bl	8000244 <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <quat_getYaw+0xb4>)
 80022ca:	f7fd ffb9 	bl	8000240 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f00d f98f 	bl	800f5f8 <atan2>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fc5d 	bl	8000ba0 <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f0:	3ff00000 	.word	0x3ff00000

080022f4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <_ZN3ros3MsgC1Ev+0x1c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	080125c0 	.word	0x080125c0

08002334 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
      data()
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffe8 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8002344:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffd0 	bl	80022f4 <_ZN3ros4TimeC1Ev>
    {
    }
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	080125a8 	.word	0x080125a8

08002364 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	b2ca      	uxtb	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0a19      	lsrs	r1, r3, #8
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4413      	add	r3, r2
 800238e:	b2ca      	uxtb	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0c19      	lsrs	r1, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3302      	adds	r3, #2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0e19      	lsrs	r1, r3, #24
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3303      	adds	r3, #3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	b2ca      	uxtb	r2, r1
 80023b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0a19      	lsrs	r1, r3, #8
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	b2ca      	uxtb	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	0c19      	lsrs	r1, r3, #16
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3302      	adds	r3, #2
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0e19      	lsrs	r1, r3, #24
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3303      	adds	r3, #3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3304      	adds	r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
      return offset;
 8002406:	68fb      	ldr	r3, [r7, #12]
    }
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	440b      	add	r3, r1
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3302      	adds	r3, #2
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	440b      	add	r3, r1
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3303      	adds	r3, #3
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	440b      	add	r3, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3304      	adds	r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	440b      	add	r3, r1
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3302      	adds	r3, #2
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	440b      	add	r3, r1
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3303      	adds	r3, #3
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	440b      	add	r3, r1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
     return offset;
 80024cc:	68fb      	ldr	r3, [r7, #12]
    }
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	08011ea8 	.word	0x08011ea8

080024f0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	08011eb8 	.word	0x08011eb8

08002508 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fefe 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8002518:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002528:	609a      	str	r2, [r3, #8]
      message_type(""),
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a07      	ldr	r2, [pc, #28]	@ (800254c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800252e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a06      	ldr	r2, [pc, #24]	@ (800254c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002534:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	615a      	str	r2, [r3, #20]
    {
    }
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	08012590 	.word	0x08012590
 800254c:	08011edc 	.word	0x08011edc

08002550 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8899      	ldrh	r1, [r3, #4]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	b2ca      	uxtb	r2, r1
 800256a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	889b      	ldrh	r3, [r3, #4]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b299      	uxth	r1, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	b2ca      	uxtb	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3302      	adds	r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fe4c 	bl	8000228 <strlen>
 8002590:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	4618      	mov	r0, r3
 800259c:	f007 f802 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3304      	adds	r3, #4
 80025a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	18d0      	adds	r0, r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4619      	mov	r1, r3
 80025b4:	f00f fc0e 	bl	8011dd4 <memcpy>
      offset += length_topic_name;
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe2f 	bl	8000228 <strlen>
 80025ca:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f006 ffe5 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	18d0      	adds	r0, r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f00f fbf1 	bl	8011dd4 <memcpy>
      offset += length_message_type;
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4413      	add	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fe12 	bl	8000228 <strlen>
 8002604:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	4618      	mov	r0, r3
 8002610:	f006 ffc8 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3304      	adds	r3, #4
 8002618:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	18d0      	adds	r0, r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4619      	mov	r1, r3
 8002628:	f00f fbd4 	bl	8011dd4 <memcpy>
      offset += length_md5sum;
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	4413      	add	r3, r2
 8002642:	b2ca      	uxtb	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0a19      	lsrs	r1, r3, #8
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	b2ca      	uxtb	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0c19      	lsrs	r1, r3, #16
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3302      	adds	r3, #2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	b2ca      	uxtb	r2, r1
 8002664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0e19      	lsrs	r1, r3, #24
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3303      	adds	r3, #3
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	61fb      	str	r3, [r7, #28]
      return offset;
 800267c:	69fb      	ldr	r3, [r7, #28]
    }
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002686:	b580      	push	{r7, lr}
 8002688:	b08a      	sub	sp, #40	@ 0x28
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	889b      	ldrh	r3, [r3, #4]
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3301      	adds	r3, #1
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	440b      	add	r3, r1
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	3302      	adds	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	441a      	add	r2, r3
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 ff84 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3304      	adds	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e2:	e00b      	b.n	80026fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	441a      	add	r2, r3
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	3b01      	subs	r3, #1
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	440b      	add	r3, r1
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4413      	add	r3, r2
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	429a      	cmp	r2, r3
 8002706:	d3ed      	bcc.n	80026e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	4413      	add	r3, r2
 800270e:	3b01      	subs	r3, #1
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	4413      	add	r3, r2
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3b01      	subs	r3, #1
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	441a      	add	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4413      	add	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	441a      	add	r2, r3
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f006 ff51 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3304      	adds	r3, #4
 8002742:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	e00b      	b.n	8002762 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	441a      	add	r2, r3
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	3b01      	subs	r3, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	440b      	add	r3, r1
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	3301      	adds	r3, #1
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3ed      	bcc.n	800274a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	3b01      	subs	r3, #1
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4413      	add	r3, r2
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3b01      	subs	r3, #1
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	441a      	add	r2, r3
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 ff1e 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	3304      	adds	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e00b      	b.n	80027c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	441a      	add	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	440b      	add	r3, r1
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3ed      	bcc.n	80027b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	3b01      	subs	r3, #1
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	440a      	add	r2, r1
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	3301      	adds	r3, #1
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	440b      	add	r3, r1
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3302      	adds	r3, #2
 8002822:	6839      	ldr	r1, [r7, #0]
 8002824:	440b      	add	r3, r1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	4313      	orrs	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	3303      	adds	r3, #3
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	440b      	add	r3, r1
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3304      	adds	r3, #4
 800284a:	61bb      	str	r3, [r7, #24]
     return offset;
 800284c:	69bb      	ldr	r3, [r7, #24]
    }
 800284e:	4618      	mov	r0, r3
 8002850:	3728      	adds	r7, #40	@ 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	08011ee0 	.word	0x08011ee0

08002870 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	08011efc 	.word	0x08011efc

08002888 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fd3e 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8002898:	4a06      	ldr	r2, [pc, #24]	@ (80028b4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
      level(0),
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	711a      	strb	r2, [r3, #4]
      msg("")
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80028a8:	609a      	str	r2, [r3, #8]
    {
    }
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	08012578 	.word	0x08012578
 80028b8:	08011edc 	.word	0x08011edc

080028bc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	7912      	ldrb	r2, [r2, #4]
 80028d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fca1 	bl	8000228 <strlen>
 80028e6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f006 fe57 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	18d0      	adds	r0, r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4619      	mov	r1, r3
 800290a:	f00f fa63 	bl	8011dd4 <memcpy>
      offset += length_msg;
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
      return offset;
 8002916:	68fb      	ldr	r3, [r7, #12]
    }
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	3301      	adds	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	441a      	add	r2, r3
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f006 fe47 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	3304      	adds	r3, #4
 8002956:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e00b      	b.n	8002976 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	441a      	add	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3b01      	subs	r3, #1
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	440b      	add	r3, r1
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d3ed      	bcc.n	800295e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	3b01      	subs	r3, #1
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	4413      	add	r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3b01      	subs	r3, #1
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
     return offset;
 80029a6:	693b      	ldr	r3, [r7, #16]
    }
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4b02      	ldr	r3, [pc, #8]	@ (80029c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	08011f20 	.word	0x08011f20

080029c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4b02      	ldr	r3, [pc, #8]	@ (80029dc <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	08011f34 	.word	0x08011f34

080029e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fc92 	bl	8002314 <_ZN3ros3MsgC1Ev>
 80029f0:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08012560 	.word	0x08012560

08002a3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	@ 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	b2ca      	uxtb	r2, r1
 8002a56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0a19      	lsrs	r1, r3, #8
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0c19      	lsrs	r1, r3, #16
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	3302      	adds	r3, #2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	b2ca      	uxtb	r2, r1
 8002a7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0e19      	lsrs	r1, r3, #24
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	3303      	adds	r3, #3
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b2ca      	uxtb	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3304      	adds	r3, #4
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	e02a      	b.n	8002af0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002aa8:	6939      	ldr	r1, [r7, #16]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2ca      	uxtb	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	0a19      	lsrs	r1, r3, #8
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	3301      	adds	r3, #1
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	b2ca      	uxtb	r2, r1
 8002ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	0c19      	lsrs	r1, r3, #16
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	3302      	adds	r3, #2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	b2ca      	uxtb	r2, r1
 8002ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	0e19      	lsrs	r1, r3, #24
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	3303      	adds	r3, #3
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	b2ca      	uxtb	r2, r1
 8002ae2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	3301      	adds	r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3cf      	bcc.n	8002a9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	0a19      	lsrs	r1, r3, #8
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	3301      	adds	r3, #1
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	0c19      	lsrs	r1, r3, #16
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	3302      	adds	r3, #2
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	b2ca      	uxtb	r2, r1
 8002b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	0e19      	lsrs	r1, r3, #24
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	3303      	adds	r3, #3
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	b2ca      	uxtb	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	3304      	adds	r3, #4
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	e02a      	b.n	8002ba0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	0a19      	lsrs	r1, r3, #8
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b2ca      	uxtb	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	0c19      	lsrs	r1, r3, #16
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	0e19      	lsrs	r1, r3, #24
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	3304      	adds	r3, #4
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3cf      	bcc.n	8002b4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69d9      	ldr	r1, [r3, #28]
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b2ca      	uxtb	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	0a19      	lsrs	r1, r3, #8
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	0c19      	lsrs	r1, r3, #16
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b2ca      	uxtb	r2, r1
 8002bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	0e19      	lsrs	r1, r3, #24
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	3303      	adds	r3, #3
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	b2ca      	uxtb	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e027      	b.n	8002c4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fb0e 	bl	8000228 <strlen>
 8002c0c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f006 fcc4 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	3304      	adds	r3, #4
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	18d0      	adds	r0, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4619      	mov	r1, r3
 8002c38:	f00f f8cc 	bl	8011dd4 <memcpy>
      offset += length_stringsi;
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4413      	add	r3, r2
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3d2      	bcc.n	8002bfa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	@ 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08e      	sub	sp, #56	@ 0x38
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	3301      	adds	r3, #1
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	6a3a      	ldr	r2, [r7, #32]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	3304      	adds	r3, #4
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d90a      	bls.n	8002cd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f00f f80a 	bl	8011ce0 <realloc>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a3a      	ldr	r2, [r7, #32]
 8002cd6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002cd8:	2300      	movs	r3, #0
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cdc:	e035      	b.n	8002d4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	440a      	add	r2, r1
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	440b      	add	r3, r1
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d06:	3302      	adds	r3, #2
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d18:	3303      	adds	r3, #3
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	3304      	adds	r3, #4
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	3301      	adds	r3, #1
 8002d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3c4      	bcc.n	8002cde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d60:	3301      	adds	r3, #1
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d72:	3302      	adds	r3, #2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	3303      	adds	r3, #3
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	3304      	adds	r3, #4
 8002d98:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d90a      	bls.n	8002dba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f00e ff96 	bl	8011ce0 <realloc>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc4:	e035      	b.n	8002e32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ddc:	3301      	adds	r3, #1
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	440b      	add	r3, r1
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dee:	3302      	adds	r3, #2
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	440b      	add	r3, r1
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	3303      	adds	r3, #3
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	440b      	add	r3, r1
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	3304      	adds	r3, #4
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	3214      	adds	r2, #20
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2e:	3301      	adds	r3, #1
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3c4      	bcc.n	8002dc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e48:	3301      	adds	r3, #1
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7e:	3304      	adds	r3, #4
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d90a      	bls.n	8002ea2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f00e ff22 	bl	8011ce0 <realloc>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eac:	e03e      	b.n	8002f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f006 fb90 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	e00b      	b.n	8002ee4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	441a      	add	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	440b      	add	r3, r1
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3ed      	bcc.n	8002ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	3b01      	subs	r3, #1
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	441a      	add	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	3220      	adds	r2, #32
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	3301      	adds	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d3bb      	bcc.n	8002eae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3738      	adds	r7, #56	@ 0x38
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	4b02      	ldr	r3, [pc, #8]	@ (8002f54 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	08012394 	.word	0x08012394

08002f58 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4b02      	ldr	r3, [pc, #8]	@ (8002f6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	08011f58 	.word	0x08011f58

08002f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	611a      	str	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68d8      	ldr	r0, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6891      	ldr	r1, [r2, #8]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4798      	blx	r3
 8002fba:	4603      	mov	r3, r0
  };
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	711a      	strb	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	80da      	strh	r2, [r3, #6]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003004:	2200      	movs	r2, #0
 8003006:	811a      	strh	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800300e:	2200      	movs	r2, #0
 8003010:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <_ZN10SerialComm4initEv>:

    void init(void)
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f90e 	bl	8003248 <_ZN10SerialComm10reset_rbufEv>
    }
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800304c:	b29b      	uxth	r3, r3
 800304e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003052:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800305a:	895b      	ldrh	r3, [r3, #10]
 800305c:	89fa      	ldrh	r2, [r7, #14]
 800305e:	429a      	cmp	r2, r3
 8003060:	d102      	bne.n	8003068 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	e01d      	b.n	80030a4 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800306e:	895b      	ldrh	r3, [r3, #10]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	b291      	uxth	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800307a:	8151      	strh	r1, [r2, #10]
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003086:	3304      	adds	r3, #4
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003092:	895b      	ldrh	r3, [r3, #10]
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80030a0:	815a      	strh	r2, [r3, #10]

        return c;
 80030a2:	68bb      	ldr	r3, [r7, #8]
    }
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c0:	dc46      	bgt.n	8003150 <_ZN10SerialComm5writeEPKhi+0xa2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	dd43      	ble.n	8003150 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80030c8:	bf00      	nop
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f6      	bne.n	80030ca <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80030e2:	88db      	ldrh	r3, [r3, #6]
 80030e4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4293      	cmp	r3, r2
 80030ec:	bfa8      	it	ge
 80030ee:	4613      	movge	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80030f8:	88db      	ldrh	r3, [r3, #6]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f00e fe64 	bl	8011dd4 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003112:	88da      	ldrh	r2, [r3, #6]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4413      	add	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003128:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	429a      	cmp	r2, r3
 8003130:	d00a      	beq.n	8003148 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1d18      	adds	r0, r3, #4
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	18d1      	adds	r1, r2, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	461a      	mov	r2, r3
 8003144:	f00e fe46 	bl	8011dd4 <memcpy>
        }

        // TODO: Start transfering
        flush();
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f805 	bl	8003158 <_ZN10SerialComm5flushEv>
 800314e:	e000      	b.n	8003152 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8003150:	bf00      	nop
    }
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003166:	791b      	ldrb	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003172:	88da      	ldrh	r2, [r3, #6]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800317a:	891b      	ldrh	r3, [r3, #8]
 800317c:	429a      	cmp	r2, r3
 800317e:	d04c      	beq.n	800321a <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800318a:	891a      	ldrh	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003192:	88db      	ldrh	r3, [r3, #6]
 8003194:	429a      	cmp	r2, r3
 8003196:	d218      	bcs.n	80031ca <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800319e:	88da      	ldrh	r2, [r3, #6]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031a6:	891b      	ldrh	r3, [r3, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031b6:	891b      	ldrh	r3, [r3, #8]
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	89fa      	ldrh	r2, [r7, #14]
 80031c2:	4619      	mov	r1, r3
 80031c4:	f00b fa86 	bl	800e6d4 <HAL_UART_Transmit_DMA>
 80031c8:	e01f      	b.n	800320a <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031d0:	891b      	ldrh	r3, [r3, #8]
 80031d2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80031d6:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031e2:	891b      	ldrh	r3, [r3, #8]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	89fa      	ldrh	r2, [r7, #14]
 80031ee:	4619      	mov	r1, r3
 80031f0:	f00b fa70 	bl	800e6d4 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	1d19      	adds	r1, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003202:	88db      	ldrh	r3, [r3, #6]
 8003204:	461a      	mov	r2, r3
 8003206:	f00b fa65 	bl	800e6d4 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003210:	88da      	ldrh	r2, [r3, #6]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003218:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003220:	2200      	movs	r2, #0
 8003222:	711a      	strb	r2, [r3, #4]
        }
    }
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800323a:	2201      	movs	r2, #1
 800323c:	711a      	strb	r2, [r3, #4]
    }
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325a:	3304      	adds	r3, #4
 800325c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003260:	4619      	mov	r1, r3
 8003262:	f00b faa7 	bl	800e7b4 <HAL_UART_Receive_DMA>
    }
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a04      	ldr	r2, [pc, #16]	@ (800328c <_ZN13STM32HardwareC1Ev+0x1c>)
 800327c:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000294 	.word	0x20000294

08003290 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff febe 	bl	800301e <_ZN10SerialComm4initEv>
    }
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_ZN13STM32Hardware4readEv>:

    int read()  
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff febc 	bl	8003034 <_ZN10SerialComm4readEv>
 80032bc:	4603      	mov	r3, r0
    }
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fee7 	bl	80030ae <_ZN10SerialComm5writeEPKhi>
    }
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 80032f0:	f007 fdf0 	bl	800aed4 <HAL_GetTick>
 80032f4:	4603      	mov	r3, r0
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f802 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8003310:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
      seq(0),
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
      stamp(),
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3308      	adds	r3, #8
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ffe7 	bl	80022f4 <_ZN3ros4TimeC1Ev>
      frame_id("")
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800332a:	611a      	str	r2, [r3, #16]
    {
    }
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	0801251c 	.word	0x0801251c
 800333c:	08011edc 	.word	0x08011edc

08003340 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4413      	add	r3, r2
 8003358:	b2ca      	uxtb	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	0a19      	lsrs	r1, r3, #8
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4413      	add	r3, r2
 800336a:	b2ca      	uxtb	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c19      	lsrs	r1, r3, #16
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3302      	adds	r3, #2
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	4413      	add	r3, r2
 800337c:	b2ca      	uxtb	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0e19      	lsrs	r1, r3, #24
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3303      	adds	r3, #3
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	b2ca      	uxtb	r2, r1
 8003390:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	b2ca      	uxtb	r2, r1
 80033a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0a19      	lsrs	r1, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	b2ca      	uxtb	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	0c19      	lsrs	r1, r3, #16
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3302      	adds	r3, #2
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	b2ca      	uxtb	r2, r1
 80033c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0e19      	lsrs	r1, r3, #24
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3303      	adds	r3, #3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	b2ca      	uxtb	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	b2ca      	uxtb	r2, r1
 80033ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a19      	lsrs	r1, r3, #8
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	b2ca      	uxtb	r2, r1
 8003400:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	0c19      	lsrs	r1, r3, #16
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3302      	adds	r3, #2
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	b2ca      	uxtb	r2, r1
 8003412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0e19      	lsrs	r1, r3, #24
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3303      	adds	r3, #3
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	4413      	add	r3, r2
 8003422:	b2ca      	uxtb	r2, r1
 8003424:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc fef9 	bl	8000228 <strlen>
 8003436:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f006 f8af 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	18d0      	adds	r0, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	4619      	mov	r1, r3
 800345a:	f00e fcbb 	bl	8011dd4 <memcpy>
      offset += length_frame_id;
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
      return offset;
 8003466:	68fb      	ldr	r3, [r7, #12]
    }
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3301      	adds	r3, #1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	440b      	add	r3, r1
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3302      	adds	r3, #2
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	440b      	add	r3, r1
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3303      	adds	r3, #3
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	440b      	add	r3, r1
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3304      	adds	r3, #4
 80034d2:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	3301      	adds	r3, #1
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	440b      	add	r3, r1
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	3302      	adds	r3, #2
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	440b      	add	r3, r1
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3303      	adds	r3, #3
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	440b      	add	r3, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	3304      	adds	r3, #4
 8003528:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	440b      	add	r3, r1
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3302      	adds	r3, #2
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	440b      	add	r3, r1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3303      	adds	r3, #3
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	440b      	add	r3, r1
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3304      	adds	r3, #4
 800357e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	441a      	add	r2, r3
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f006 f827 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3304      	adds	r3, #4
 8003596:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e00b      	b.n	80035b6 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	441a      	add	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	440b      	add	r3, r1
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3ed      	bcc.n	800359e <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	3b01      	subs	r3, #1
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
     return offset;
 80035e6:	693b      	ldr	r3, [r7, #16]
    }
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	4b02      	ldr	r3, [pc, #8]	@ (8003604 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	08011f7c 	.word	0x08011f7c

08003608 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4b02      	ldr	r3, [pc, #8]	@ (800361c <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	08011f8c 	.word	0x08011f8c

08003620 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fe72 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
      x(0),
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	08012504 	.word	0x08012504

0800367c <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800367c:	b480      	push	{r7}
 800367e:	b08d      	sub	sp, #52	@ 0x34
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003690:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003694:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003698:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800369a:	6838      	ldr	r0, [r7, #0]
 800369c:	4401      	add	r1, r0
 800369e:	b2d3      	uxtb	r3, r2
 80036a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80036a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	0a02      	lsrs	r2, r0, #8
 80036b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036b4:	0a0b      	lsrs	r3, r1, #8
 80036b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b8:	3101      	adds	r1, #1
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	4401      	add	r1, r0
 80036be:	b2d3      	uxtb	r3, r2
 80036c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80036c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	0c02      	lsrs	r2, r0, #16
 80036d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036d4:	0c0b      	lsrs	r3, r1, #16
 80036d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036d8:	3102      	adds	r1, #2
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	4401      	add	r1, r0
 80036de:	b2d3      	uxtb	r3, r2
 80036e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80036e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	0e02      	lsrs	r2, r0, #24
 80036f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036f4:	0e0b      	lsrs	r3, r1, #24
 80036f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036f8:	3103      	adds	r1, #3
 80036fa:	6838      	ldr	r0, [r7, #0]
 80036fc:	4401      	add	r1, r0
 80036fe:	b2d3      	uxtb	r3, r2
 8003700:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003702:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	000a      	movs	r2, r1
 8003710:	2300      	movs	r3, #0
 8003712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003714:	3104      	adds	r1, #4
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	4401      	add	r1, r0
 800371a:	b2d3      	uxtb	r3, r2
 800371c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800371e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	0a0a      	lsrs	r2, r1, #8
 800372c:	2300      	movs	r3, #0
 800372e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003730:	3105      	adds	r1, #5
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4401      	add	r1, r0
 8003736:	b2d3      	uxtb	r3, r2
 8003738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800373a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	0c0a      	lsrs	r2, r1, #16
 8003748:	2300      	movs	r3, #0
 800374a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800374c:	3106      	adds	r1, #6
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	4401      	add	r1, r0
 8003752:	b2d3      	uxtb	r3, r2
 8003754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003756:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	0e0a      	lsrs	r2, r1, #24
 8003764:	2300      	movs	r3, #0
 8003766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003768:	3107      	adds	r1, #7
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	4401      	add	r1, r0
 800376e:	b2d3      	uxtb	r3, r2
 8003770:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	3308      	adds	r3, #8
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800377e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003788:	6838      	ldr	r0, [r7, #0]
 800378a:	4401      	add	r1, r0
 800378c:	b2d3      	uxtb	r3, r2
 800378e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003790:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	0a02      	lsrs	r2, r0, #8
 800379e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80037a2:	0a0b      	lsrs	r3, r1, #8
 80037a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a6:	3101      	adds	r1, #1
 80037a8:	6838      	ldr	r0, [r7, #0]
 80037aa:	4401      	add	r1, r0
 80037ac:	b2d3      	uxtb	r3, r2
 80037ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80037b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	0c02      	lsrs	r2, r0, #16
 80037be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037c2:	0c0b      	lsrs	r3, r1, #16
 80037c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037c6:	3102      	adds	r1, #2
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	4401      	add	r1, r0
 80037cc:	b2d3      	uxtb	r3, r2
 80037ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80037d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	0e02      	lsrs	r2, r0, #24
 80037de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037e2:	0e0b      	lsrs	r3, r1, #24
 80037e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e6:	3103      	adds	r1, #3
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	4401      	add	r1, r0
 80037ec:	b2d3      	uxtb	r3, r2
 80037ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80037f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	000a      	movs	r2, r1
 80037fe:	2300      	movs	r3, #0
 8003800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003802:	3104      	adds	r1, #4
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	4401      	add	r1, r0
 8003808:	b2d3      	uxtb	r3, r2
 800380a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800380c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	0a0a      	lsrs	r2, r1, #8
 800381a:	2300      	movs	r3, #0
 800381c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800381e:	3105      	adds	r1, #5
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4401      	add	r1, r0
 8003824:	b2d3      	uxtb	r3, r2
 8003826:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003828:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	0c0a      	lsrs	r2, r1, #16
 8003836:	2300      	movs	r3, #0
 8003838:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800383a:	3106      	adds	r1, #6
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	4401      	add	r1, r0
 8003840:	b2d3      	uxtb	r3, r2
 8003842:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	0e0a      	lsrs	r2, r1, #24
 8003852:	2300      	movs	r3, #0
 8003854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003856:	3107      	adds	r1, #7
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	4401      	add	r1, r0
 800385c:	b2d3      	uxtb	r3, r2
 800385e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003862:	3308      	adds	r3, #8
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800386c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	4401      	add	r1, r0
 800387a:	b2d3      	uxtb	r3, r2
 800387c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800387e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	0a02      	lsrs	r2, r0, #8
 800388c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003890:	0a0b      	lsrs	r3, r1, #8
 8003892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003894:	3101      	adds	r1, #1
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	4401      	add	r1, r0
 800389a:	b2d3      	uxtb	r3, r2
 800389c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800389e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	0c02      	lsrs	r2, r0, #16
 80038ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80038b0:	0c0b      	lsrs	r3, r1, #16
 80038b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b4:	3102      	adds	r1, #2
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	4401      	add	r1, r0
 80038ba:	b2d3      	uxtb	r3, r2
 80038bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80038be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	0e02      	lsrs	r2, r0, #24
 80038cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038d0:	0e0b      	lsrs	r3, r1, #24
 80038d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038d4:	3103      	adds	r1, #3
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	4401      	add	r1, r0
 80038da:	b2d3      	uxtb	r3, r2
 80038dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80038de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	000a      	movs	r2, r1
 80038ec:	2300      	movs	r3, #0
 80038ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038f0:	3104      	adds	r1, #4
 80038f2:	6838      	ldr	r0, [r7, #0]
 80038f4:	4401      	add	r1, r0
 80038f6:	b2d3      	uxtb	r3, r2
 80038f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80038fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	0a0a      	lsrs	r2, r1, #8
 8003908:	2300      	movs	r3, #0
 800390a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800390c:	3105      	adds	r1, #5
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	4401      	add	r1, r0
 8003912:	b2d3      	uxtb	r3, r2
 8003914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003916:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	0c0a      	lsrs	r2, r1, #16
 8003924:	2300      	movs	r3, #0
 8003926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003928:	3106      	adds	r1, #6
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	4401      	add	r1, r0
 800392e:	b2d3      	uxtb	r3, r2
 8003930:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003932:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	0e0a      	lsrs	r2, r1, #24
 8003940:	2300      	movs	r3, #0
 8003942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003944:	3107      	adds	r1, #7
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	4401      	add	r1, r0
 800394a:	b2d3      	uxtb	r3, r2
 800394c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	3308      	adds	r3, #8
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800395a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800395e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003964:	6838      	ldr	r0, [r7, #0]
 8003966:	4401      	add	r1, r0
 8003968:	b2d3      	uxtb	r3, r2
 800396a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 800396c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	0a02      	lsrs	r2, r0, #8
 800397a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800397e:	0a0b      	lsrs	r3, r1, #8
 8003980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003982:	3101      	adds	r1, #1
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	4401      	add	r1, r0
 8003988:	b2d3      	uxtb	r3, r2
 800398a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 800398c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	0c02      	lsrs	r2, r0, #16
 800399a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800399e:	0c0b      	lsrs	r3, r1, #16
 80039a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a2:	3102      	adds	r1, #2
 80039a4:	6838      	ldr	r0, [r7, #0]
 80039a6:	4401      	add	r1, r0
 80039a8:	b2d3      	uxtb	r3, r2
 80039aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80039ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	0e02      	lsrs	r2, r0, #24
 80039ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039be:	0e0b      	lsrs	r3, r1, #24
 80039c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039c2:	3103      	adds	r1, #3
 80039c4:	6838      	ldr	r0, [r7, #0]
 80039c6:	4401      	add	r1, r0
 80039c8:	b2d3      	uxtb	r3, r2
 80039ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80039cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	000a      	movs	r2, r1
 80039da:	2300      	movs	r3, #0
 80039dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039de:	3104      	adds	r1, #4
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	4401      	add	r1, r0
 80039e4:	b2d3      	uxtb	r3, r2
 80039e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80039e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	0a0a      	lsrs	r2, r1, #8
 80039f6:	2300      	movs	r3, #0
 80039f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039fa:	3105      	adds	r1, #5
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	4401      	add	r1, r0
 8003a00:	b2d3      	uxtb	r3, r2
 8003a02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	0c0a      	lsrs	r2, r1, #16
 8003a12:	2300      	movs	r3, #0
 8003a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a16:	3106      	adds	r1, #6
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	4401      	add	r1, r0
 8003a1c:	b2d3      	uxtb	r3, r2
 8003a1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003a20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	0e0a      	lsrs	r2, r1, #24
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a32:	3107      	adds	r1, #7
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	4401      	add	r1, r0
 8003a38:	b2d3      	uxtb	r3, r2
 8003a3a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3e:	3308      	adds	r3, #8
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 8003a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003a44:	4618      	mov	r0, r3
 8003a46:	3734      	adds	r7, #52	@ 0x34
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003a4e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a52:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8003a5c:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a72:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003a76:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003a7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	461c      	mov	r4, r3
 8003a88:	4615      	mov	r5, r2
 8003a8a:	ea40 0804 	orr.w	r8, r0, r4
 8003a8e:	ea41 0905 	orr.w	r9, r1, r5
 8003a92:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a96:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003a9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	469a      	mov	sl, r3
 8003aae:	4693      	mov	fp, r2
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003abc:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003ac0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003ac4:	ea40 0402 	orr.w	r4, r0, r2
 8003ac8:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8003acc:	430b      	orrs	r3, r1
 8003ace:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8003ad2:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8003ad6:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ada:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003ade:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003ae8:	4413      	add	r3, r2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8003af4:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8003b04:	464c      	mov	r4, r9
 8003b06:	0423      	lsls	r3, r4, #16
 8003b08:	46c4      	mov	ip, r8
 8003b0a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003b0e:	4644      	mov	r4, r8
 8003b10:	0422      	lsls	r2, r4, #16
 8003b12:	ea40 0402 	orr.w	r4, r0, r2
 8003b16:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8003b20:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003b24:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b28:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003b2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b30:	1cda      	adds	r2, r3, #3
 8003b32:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b36:	4413      	add	r3, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003b42:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8003b46:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003b52:	4623      	mov	r3, r4
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003b5a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4302      	orrs	r2, r0
 8003b62:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003b66:	4623      	mov	r3, r4
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003b6e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8003b72:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b76:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003b7a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003b90:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8003ba0:	0023      	movs	r3, r4
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	ea40 0402 	orr.w	r4, r0, r2
 8003ba8:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003bac:	430b      	orrs	r3, r1
 8003bae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003bb2:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8003bb6:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bba:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003bbe:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003bc2:	1d5a      	adds	r2, r3, #5
 8003bc4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003bc8:	4413      	add	r3, r2
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bd4:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8003be4:	0223      	lsls	r3, r4, #8
 8003be6:	2200      	movs	r2, #0
 8003be8:	ea40 0402 	orr.w	r4, r0, r2
 8003bec:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003bf6:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8003bfa:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bfe:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003c02:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c06:	1d9a      	adds	r2, r3, #6
 8003c08:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003c0c:	4413      	add	r3, r2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c18:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8003c28:	0423      	lsls	r3, r4, #16
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	ea40 0402 	orr.w	r4, r0, r2
 8003c30:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8003c34:	430b      	orrs	r3, r1
 8003c36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003c3a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8003c3e:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c42:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003c46:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c4a:	1dda      	adds	r2, r3, #7
 8003c4c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003c5c:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8003c6c:	0623      	lsls	r3, r4, #24
 8003c6e:	2200      	movs	r2, #0
 8003c70:	ea40 0402 	orr.w	r4, r0, r2
 8003c74:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003c7e:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8003c82:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 8003c86:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003c8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003c8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003c92:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c96:	3308      	adds	r3, #8
 8003c98:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ca8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003cac:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003cb0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003cc0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003cc4:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4302      	orrs	r2, r0
 8003ccc:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003cd8:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8003cdc:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ce0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003ce4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003cfa:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8003d0a:	464c      	mov	r4, r9
 8003d0c:	0223      	lsls	r3, r4, #8
 8003d0e:	46c4      	mov	ip, r8
 8003d10:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003d14:	4644      	mov	r4, r8
 8003d16:	0222      	lsls	r2, r4, #8
 8003d18:	ea40 0402 	orr.w	r4, r0, r2
 8003d1c:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003d20:	430b      	orrs	r3, r1
 8003d22:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003d26:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003d2a:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d2e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003d32:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003d3c:	4413      	add	r3, r2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003d48:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003d58:	464c      	mov	r4, r9
 8003d5a:	0423      	lsls	r3, r4, #16
 8003d5c:	46c4      	mov	ip, r8
 8003d5e:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003d62:	4644      	mov	r4, r8
 8003d64:	0422      	lsls	r2, r4, #16
 8003d66:	ea40 0402 	orr.w	r4, r0, r2
 8003d6a:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003d74:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8003d78:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d7c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003d80:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003d84:	1cda      	adds	r2, r3, #3
 8003d86:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003d96:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003d9a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003d9e:	4623      	mov	r3, r4
 8003da0:	0a1b      	lsrs	r3, r3, #8
 8003da2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003da6:	4623      	mov	r3, r4
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003dae:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003db2:	461a      	mov	r2, r3
 8003db4:	4302      	orrs	r2, r0
 8003db6:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8003dba:	4623      	mov	r3, r4
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003dc2:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003dc6:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003dca:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003dce:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003de4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003df4:	0023      	movs	r3, r4
 8003df6:	2200      	movs	r2, #0
 8003df8:	ea40 0402 	orr.w	r4, r0, r2
 8003dfc:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8003e00:	430b      	orrs	r3, r1
 8003e02:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003e06:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003e0a:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e0e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003e12:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e16:	1d5a      	adds	r2, r3, #5
 8003e18:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003e28:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003e38:	0223      	lsls	r3, r4, #8
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	ea40 0402 	orr.w	r4, r0, r2
 8003e40:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003e44:	430b      	orrs	r3, r1
 8003e46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003e4a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003e4e:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e52:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003e56:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e5a:	1d9a      	adds	r2, r3, #6
 8003e5c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003e60:	4413      	add	r3, r2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003e6c:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003e7c:	0423      	lsls	r3, r4, #16
 8003e7e:	2200      	movs	r2, #0
 8003e80:	ea40 0402 	orr.w	r4, r0, r2
 8003e84:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e8e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003e92:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e96:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003e9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e9e:	1dda      	adds	r2, r3, #7
 8003ea0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003eb0:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8003ec0:	0623      	lsls	r3, r4, #24
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	ea40 0402 	orr.w	r4, r0, r2
 8003ec8:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003ed2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003ed6:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 8003eda:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003ede:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003ee2:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003ee6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003eea:	3308      	adds	r3, #8
 8003eec:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003efc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003f00:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003f04:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f14:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003f18:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4302      	orrs	r2, r0
 8003f20:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003f24:	4623      	mov	r3, r4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f2c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003f30:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f34:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003f38:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f4e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003f5e:	464c      	mov	r4, r9
 8003f60:	0223      	lsls	r3, r4, #8
 8003f62:	46c4      	mov	ip, r8
 8003f64:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003f68:	4644      	mov	r4, r8
 8003f6a:	0222      	lsls	r2, r4, #8
 8003f6c:	ea40 0402 	orr.w	r4, r0, r2
 8003f70:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003f74:	430b      	orrs	r3, r1
 8003f76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003f7e:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f82:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003f86:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003fac:	464c      	mov	r4, r9
 8003fae:	0423      	lsls	r3, r4, #16
 8003fb0:	46c4      	mov	ip, r8
 8003fb2:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003fb6:	4644      	mov	r4, r8
 8003fb8:	0422      	lsls	r2, r4, #16
 8003fba:	ea40 0402 	orr.w	r4, r0, r2
 8003fbe:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003fcc:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fd0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003fd4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003fd8:	1cda      	adds	r2, r3, #3
 8003fda:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004002:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004006:	461a      	mov	r2, r3
 8004008:	4302      	orrs	r2, r0
 800400a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800400e:	4623      	mov	r3, r4
 8004010:	430b      	orrs	r3, r1
 8004012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004016:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800401a:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800401e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004022:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800402c:	4413      	add	r3, r2
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004038:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004048:	0023      	movs	r3, r4
 800404a:	2200      	movs	r2, #0
 800404c:	ea40 0402 	orr.w	r4, r0, r2
 8004050:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004054:	430b      	orrs	r3, r1
 8004056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800405a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800405e:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004062:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004066:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800406a:	1d5a      	adds	r2, r3, #5
 800406c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800407c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800408c:	0223      	lsls	r3, r4, #8
 800408e:	2200      	movs	r2, #0
 8004090:	ea40 0402 	orr.w	r4, r0, r2
 8004094:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004098:	430b      	orrs	r3, r1
 800409a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800409e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80040a2:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80040a6:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80040aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80040ae:	1d9a      	adds	r2, r3, #6
 80040b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80040d0:	0423      	lsls	r3, r4, #16
 80040d2:	2200      	movs	r2, #0
 80040d4:	ea40 0402 	orr.w	r4, r0, r2
 80040d8:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80040dc:	430b      	orrs	r3, r1
 80040de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040e2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80040e6:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80040ea:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80040ee:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80040f2:	1dda      	adds	r2, r3, #7
 80040f4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80040f8:	4413      	add	r3, r2
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004104:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004114:	0623      	lsls	r3, r4, #24
 8004116:	2200      	movs	r2, #0
 8004118:	ea40 0402 	orr.w	r4, r0, r2
 800411c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004120:	430b      	orrs	r3, r1
 8004122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004126:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800412a:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 800412e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004132:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004136:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 800413a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800413e:	3308      	adds	r3, #8
 8004140:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004150:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004154:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8004158:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004168:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800416c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004170:	461a      	mov	r2, r3
 8004172:	4302      	orrs	r2, r0
 8004174:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004176:	4623      	mov	r3, r4
 8004178:	430b      	orrs	r3, r1
 800417a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800417c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004180:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004184:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004188:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004192:	4413      	add	r3, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2200      	movs	r2, #0
 800419a:	673b      	str	r3, [r7, #112]	@ 0x70
 800419c:	677a      	str	r2, [r7, #116]	@ 0x74
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041aa:	464c      	mov	r4, r9
 80041ac:	0223      	lsls	r3, r4, #8
 80041ae:	46c4      	mov	ip, r8
 80041b0:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80041b4:	4644      	mov	r4, r8
 80041b6:	0222      	lsls	r2, r4, #8
 80041b8:	ea40 0402 	orr.w	r4, r0, r2
 80041bc:	66bc      	str	r4, [r7, #104]	@ 0x68
 80041be:	430b      	orrs	r3, r1
 80041c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80041c6:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041ca:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80041ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2200      	movs	r2, #0
 80041e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041f0:	464c      	mov	r4, r9
 80041f2:	0423      	lsls	r3, r4, #16
 80041f4:	46c4      	mov	ip, r8
 80041f6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80041fa:	4644      	mov	r4, r8
 80041fc:	0422      	lsls	r2, r4, #16
 80041fe:	ea40 0402 	orr.w	r4, r0, r2
 8004202:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004204:	430b      	orrs	r3, r1
 8004206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004208:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800420c:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004210:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004214:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004218:	1cda      	adds	r2, r3, #3
 800421a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2200      	movs	r2, #0
 8004226:	653b      	str	r3, [r7, #80]	@ 0x50
 8004228:	657a      	str	r2, [r7, #84]	@ 0x54
 800422a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800422e:	4623      	mov	r3, r4
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004234:	4623      	mov	r3, r4
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800423a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800423e:	461a      	mov	r2, r3
 8004240:	4302      	orrs	r2, r0
 8004242:	643a      	str	r2, [r7, #64]	@ 0x40
 8004244:	4623      	mov	r3, r4
 8004246:	430b      	orrs	r3, r1
 8004248:	647b      	str	r3, [r7, #68]	@ 0x44
 800424a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800424e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004252:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004256:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004260:	4413      	add	r3, r2
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2200      	movs	r2, #0
 8004268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800426a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004276:	0023      	movs	r3, r4
 8004278:	2200      	movs	r2, #0
 800427a:	ea40 0402 	orr.w	r4, r0, r2
 800427e:	633c      	str	r4, [r7, #48]	@ 0x30
 8004280:	430b      	orrs	r3, r1
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
 8004284:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004288:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800428c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004290:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004294:	1d5a      	adds	r2, r3, #5
 8004296:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2200      	movs	r2, #0
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80042b0:	0223      	lsls	r3, r4, #8
 80042b2:	2200      	movs	r2, #0
 80042b4:	ea40 0402 	orr.w	r4, r0, r2
 80042b8:	623c      	str	r4, [r7, #32]
 80042ba:	430b      	orrs	r3, r1
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80042c2:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80042c6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80042ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80042ce:	3306      	adds	r3, #6
 80042d0:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80042d4:	4413      	add	r3, r2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2200      	movs	r2, #0
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	61fa      	str	r2, [r7, #28]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	69bc      	ldr	r4, [r7, #24]
 80042ea:	0423      	lsls	r3, r4, #16
 80042ec:	2200      	movs	r2, #0
 80042ee:	ea40 0402 	orr.w	r4, r0, r2
 80042f2:	613c      	str	r4, [r7, #16]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80042fc:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004300:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8004304:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004308:	3307      	adds	r3, #7
 800430a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800430e:	4413      	add	r3, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2200      	movs	r2, #0
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	60fa      	str	r2, [r7, #12]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	68bc      	ldr	r4, [r7, #8]
 8004324:	0623      	lsls	r3, r4, #24
 8004326:	2200      	movs	r2, #0
 8004328:	ea40 0402 	orr.w	r4, r0, r2
 800432c:	603c      	str	r4, [r7, #0]
 800432e:	430b      	orrs	r3, r1
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004336:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 800433a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800433e:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8004342:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8004346:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800434a:	3308      	adds	r3, #8
 800434c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8004350:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8004354:	4618      	mov	r0, r3
 8004356:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 800435a:	46bd      	mov	sp, r7
 800435c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004360:	4770      	bx	lr
	...

08004364 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	4b02      	ldr	r3, [pc, #8]	@ (8004378 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	08011fb0 	.word	0x08011fb0

0800437c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	4b02      	ldr	r3, [pc, #8]	@ (8004390 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	08011fcc 	.word	0x08011fcc

08004394 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd ffb8 	bl	8002314 <_ZN3ros3MsgC1Ev>
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
      x(0),
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	080124ec 	.word	0x080124ec

080043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80043e4:	b480      	push	{r7}
 80043e6:	b08b      	sub	sp, #44	@ 0x2c
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004402:	6838      	ldr	r0, [r7, #0]
 8004404:	4401      	add	r1, r0
 8004406:	b2d3      	uxtb	r3, r2
 8004408:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800440a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	0a02      	lsrs	r2, r0, #8
 8004418:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800441c:	0a0b      	lsrs	r3, r1, #8
 800441e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004420:	3101      	adds	r1, #1
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	4401      	add	r1, r0
 8004426:	b2d3      	uxtb	r3, r2
 8004428:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800442a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	0c02      	lsrs	r2, r0, #16
 8004438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800443c:	0c0b      	lsrs	r3, r1, #16
 800443e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004440:	3102      	adds	r1, #2
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	4401      	add	r1, r0
 8004446:	b2d3      	uxtb	r3, r2
 8004448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800444a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	0e02      	lsrs	r2, r0, #24
 8004458:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800445c:	0e0b      	lsrs	r3, r1, #24
 800445e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004460:	3103      	adds	r1, #3
 8004462:	6838      	ldr	r0, [r7, #0]
 8004464:	4401      	add	r1, r0
 8004466:	b2d3      	uxtb	r3, r2
 8004468:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800446a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	000a      	movs	r2, r1
 8004478:	2300      	movs	r3, #0
 800447a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800447c:	3104      	adds	r1, #4
 800447e:	6838      	ldr	r0, [r7, #0]
 8004480:	4401      	add	r1, r0
 8004482:	b2d3      	uxtb	r3, r2
 8004484:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	0a0a      	lsrs	r2, r1, #8
 8004494:	2300      	movs	r3, #0
 8004496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004498:	3105      	adds	r1, #5
 800449a:	6838      	ldr	r0, [r7, #0]
 800449c:	4401      	add	r1, r0
 800449e:	b2d3      	uxtb	r3, r2
 80044a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80044a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	0c0a      	lsrs	r2, r1, #16
 80044b0:	2300      	movs	r3, #0
 80044b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b4:	3106      	adds	r1, #6
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	4401      	add	r1, r0
 80044ba:	b2d3      	uxtb	r3, r2
 80044bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80044be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	0e0a      	lsrs	r2, r1, #24
 80044cc:	2300      	movs	r3, #0
 80044ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044d0:	3107      	adds	r1, #7
 80044d2:	6838      	ldr	r0, [r7, #0]
 80044d4:	4401      	add	r1, r0
 80044d6:	b2d3      	uxtb	r3, r2
 80044d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	3308      	adds	r3, #8
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80044ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	4401      	add	r1, r0
 80044f4:	b2d3      	uxtb	r3, r2
 80044f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80044f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	0a02      	lsrs	r2, r0, #8
 8004506:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800450a:	0a0b      	lsrs	r3, r1, #8
 800450c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800450e:	3101      	adds	r1, #1
 8004510:	6838      	ldr	r0, [r7, #0]
 8004512:	4401      	add	r1, r0
 8004514:	b2d3      	uxtb	r3, r2
 8004516:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004518:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	0c02      	lsrs	r2, r0, #16
 8004526:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800452a:	0c0b      	lsrs	r3, r1, #16
 800452c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800452e:	3102      	adds	r1, #2
 8004530:	6838      	ldr	r0, [r7, #0]
 8004532:	4401      	add	r1, r0
 8004534:	b2d3      	uxtb	r3, r2
 8004536:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	0e02      	lsrs	r2, r0, #24
 8004546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800454a:	0e0b      	lsrs	r3, r1, #24
 800454c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800454e:	3103      	adds	r1, #3
 8004550:	6838      	ldr	r0, [r7, #0]
 8004552:	4401      	add	r1, r0
 8004554:	b2d3      	uxtb	r3, r2
 8004556:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	000a      	movs	r2, r1
 8004566:	2300      	movs	r3, #0
 8004568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800456a:	3104      	adds	r1, #4
 800456c:	6838      	ldr	r0, [r7, #0]
 800456e:	4401      	add	r1, r0
 8004570:	b2d3      	uxtb	r3, r2
 8004572:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004574:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	0a0a      	lsrs	r2, r1, #8
 8004582:	2300      	movs	r3, #0
 8004584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004586:	3105      	adds	r1, #5
 8004588:	6838      	ldr	r0, [r7, #0]
 800458a:	4401      	add	r1, r0
 800458c:	b2d3      	uxtb	r3, r2
 800458e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	0c0a      	lsrs	r2, r1, #16
 800459e:	2300      	movs	r3, #0
 80045a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a2:	3106      	adds	r1, #6
 80045a4:	6838      	ldr	r0, [r7, #0]
 80045a6:	4401      	add	r1, r0
 80045a8:	b2d3      	uxtb	r3, r2
 80045aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80045ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	0e0a      	lsrs	r2, r1, #24
 80045ba:	2300      	movs	r3, #0
 80045bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045be:	3107      	adds	r1, #7
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	4401      	add	r1, r0
 80045c4:	b2d3      	uxtb	r3, r2
 80045c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	3308      	adds	r3, #8
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80045d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80045d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045de:	6838      	ldr	r0, [r7, #0]
 80045e0:	4401      	add	r1, r0
 80045e2:	b2d3      	uxtb	r3, r2
 80045e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80045e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	0a02      	lsrs	r2, r0, #8
 80045f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045f8:	0a0b      	lsrs	r3, r1, #8
 80045fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045fc:	3101      	adds	r1, #1
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	4401      	add	r1, r0
 8004602:	b2d3      	uxtb	r3, r2
 8004604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	0c02      	lsrs	r2, r0, #16
 8004614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004618:	0c0b      	lsrs	r3, r1, #16
 800461a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800461c:	3102      	adds	r1, #2
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	4401      	add	r1, r0
 8004622:	b2d3      	uxtb	r3, r2
 8004624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	0e02      	lsrs	r2, r0, #24
 8004634:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004638:	0e0b      	lsrs	r3, r1, #24
 800463a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800463c:	3103      	adds	r1, #3
 800463e:	6838      	ldr	r0, [r7, #0]
 8004640:	4401      	add	r1, r0
 8004642:	b2d3      	uxtb	r3, r2
 8004644:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004646:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	000a      	movs	r2, r1
 8004654:	2300      	movs	r3, #0
 8004656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004658:	3104      	adds	r1, #4
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	4401      	add	r1, r0
 800465e:	b2d3      	uxtb	r3, r2
 8004660:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	0a0a      	lsrs	r2, r1, #8
 8004670:	2300      	movs	r3, #0
 8004672:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004674:	3105      	adds	r1, #5
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	4401      	add	r1, r0
 800467a:	b2d3      	uxtb	r3, r2
 800467c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800467e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	0c0a      	lsrs	r2, r1, #16
 800468c:	2300      	movs	r3, #0
 800468e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004690:	3106      	adds	r1, #6
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	4401      	add	r1, r0
 8004696:	b2d3      	uxtb	r3, r2
 8004698:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800469a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	0e0a      	lsrs	r2, r1, #24
 80046a8:	2300      	movs	r3, #0
 80046aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ac:	3107      	adds	r1, #7
 80046ae:	6838      	ldr	r0, [r7, #0]
 80046b0:	4401      	add	r1, r0
 80046b2:	b2d3      	uxtb	r3, r2
 80046b4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	3308      	adds	r3, #8
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80046be:	4618      	mov	r0, r3
 80046c0:	372c      	adds	r7, #44	@ 0x2c
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80046c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046cc:	b0eb      	sub	sp, #428	@ 0x1ac
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80046d4:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046ea:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80046ee:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80046f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046f6:	4413      	add	r3, r2
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2200      	movs	r2, #0
 80046fe:	461c      	mov	r4, r3
 8004700:	4615      	mov	r5, r2
 8004702:	ea40 0804 	orr.w	r8, r0, r4
 8004706:	ea41 0905 	orr.w	r9, r1, r5
 800470a:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800470e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004712:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800471c:	4413      	add	r3, r2
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2200      	movs	r2, #0
 8004724:	469a      	mov	sl, r3
 8004726:	4693      	mov	fp, r2
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004734:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004738:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800473c:	ea40 0402 	orr.w	r4, r0, r2
 8004740:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8004744:	430b      	orrs	r3, r1
 8004746:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800474a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800474e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004752:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004756:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800475a:	1c9a      	adds	r2, r3, #2
 800475c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800476c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 800477c:	464c      	mov	r4, r9
 800477e:	0423      	lsls	r3, r4, #16
 8004780:	46c4      	mov	ip, r8
 8004782:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004786:	4644      	mov	r4, r8
 8004788:	0422      	lsls	r2, r4, #16
 800478a:	ea40 0402 	orr.w	r4, r0, r2
 800478e:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8004792:	430b      	orrs	r3, r1
 8004794:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004798:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 800479c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80047a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80047a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80047a8:	1cda      	adds	r2, r3, #3
 80047aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80047ba:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80047be:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80047c2:	4623      	mov	r3, r4
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80047ca:	4623      	mov	r3, r4
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80047d2:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80047d6:	461a      	mov	r2, r3
 80047d8:	4302      	orrs	r2, r0
 80047da:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80047de:	4623      	mov	r3, r4
 80047e0:	430b      	orrs	r3, r1
 80047e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80047e6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80047ea:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80047ee:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80047f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004808:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8004818:	0023      	movs	r3, r4
 800481a:	2200      	movs	r2, #0
 800481c:	ea40 0402 	orr.w	r4, r0, r2
 8004820:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8004824:	430b      	orrs	r3, r1
 8004826:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800482a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 800482e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004832:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004836:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800483a:	1d5a      	adds	r2, r3, #5
 800483c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800484c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 800485c:	0223      	lsls	r3, r4, #8
 800485e:	2200      	movs	r2, #0
 8004860:	ea40 0402 	orr.w	r4, r0, r2
 8004864:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8004868:	430b      	orrs	r3, r1
 800486a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800486e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8004872:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004876:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800487a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800487e:	1d9a      	adds	r2, r3, #6
 8004880:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004884:	4413      	add	r3, r2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004890:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80048a0:	0423      	lsls	r3, r4, #16
 80048a2:	2200      	movs	r2, #0
 80048a4:	ea40 0402 	orr.w	r4, r0, r2
 80048a8:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80048ac:	430b      	orrs	r3, r1
 80048ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048b2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80048b6:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80048ba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80048be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80048c2:	1dda      	adds	r2, r3, #7
 80048c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80048d4:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80048e4:	0623      	lsls	r3, r4, #24
 80048e6:	2200      	movs	r2, #0
 80048e8:	ea40 0402 	orr.w	r4, r0, r2
 80048ec:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80048f0:	430b      	orrs	r3, r1
 80048f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80048f6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80048fa:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 80048fe:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004902:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004906:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800490a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800490e:	3308      	adds	r3, #8
 8004910:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004920:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004924:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004928:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800492c:	4413      	add	r3, r2
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004938:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800493c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8004940:	461a      	mov	r2, r3
 8004942:	4302      	orrs	r2, r0
 8004944:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8004948:	4623      	mov	r3, r4
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004950:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004954:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004958:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800495c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004966:	4413      	add	r3, r2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2200      	movs	r2, #0
 800496e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004972:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8004982:	464c      	mov	r4, r9
 8004984:	0223      	lsls	r3, r4, #8
 8004986:	46c4      	mov	ip, r8
 8004988:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 800498c:	4644      	mov	r4, r8
 800498e:	0222      	lsls	r2, r4, #8
 8004990:	ea40 0402 	orr.w	r4, r0, r2
 8004994:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004998:	430b      	orrs	r3, r1
 800499a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800499e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80049a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80049a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80049aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80049b4:	4413      	add	r3, r2
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049c0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80049d0:	464c      	mov	r4, r9
 80049d2:	0423      	lsls	r3, r4, #16
 80049d4:	46c4      	mov	ip, r8
 80049d6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80049da:	4644      	mov	r4, r8
 80049dc:	0422      	lsls	r2, r4, #16
 80049de:	ea40 0402 	orr.w	r4, r0, r2
 80049e2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80049e6:	430b      	orrs	r3, r1
 80049e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ec:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80049f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80049f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80049fc:	1cda      	adds	r2, r3, #3
 80049fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004a16:	4623      	mov	r3, r4
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a1e:	4623      	mov	r3, r4
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a26:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4302      	orrs	r2, r0
 8004a2e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004a32:	4623      	mov	r3, r4
 8004a34:	430b      	orrs	r3, r1
 8004a36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a3a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004a3e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004a42:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a50:	4413      	add	r3, r2
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004a6c:	0023      	movs	r3, r4
 8004a6e:	2200      	movs	r2, #0
 8004a70:	ea40 0402 	orr.w	r4, r0, r2
 8004a74:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a7e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004a82:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004a86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004a8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004a8e:	1d5a      	adds	r2, r3, #5
 8004a90:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a94:	4413      	add	r3, r2
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aa0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004ab0:	0223      	lsls	r3, r4, #8
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	ea40 0402 	orr.w	r4, r0, r2
 8004ab8:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ac2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004ac6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004aca:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004ace:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004ad2:	1d9a      	adds	r2, r3, #6
 8004ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ae4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004af4:	0423      	lsls	r3, r4, #16
 8004af6:	2200      	movs	r2, #0
 8004af8:	ea40 0402 	orr.w	r4, r0, r2
 8004afc:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004b00:	430b      	orrs	r3, r1
 8004b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b06:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004b0a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004b0e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004b12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004b16:	1dda      	adds	r2, r3, #7
 8004b18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b28:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004b38:	0623      	lsls	r3, r4, #24
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	ea40 0402 	orr.w	r4, r0, r2
 8004b40:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004b44:	430b      	orrs	r3, r1
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b4a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004b4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8004b52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004b56:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004b5a:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004b5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004b62:	3308      	adds	r3, #8
 8004b64:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b74:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004b78:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004b7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b80:	4413      	add	r3, r2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b90:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004b94:	461a      	mov	r2, r3
 8004b96:	4302      	orrs	r2, r0
 8004b98:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ba0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004ba4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ba8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004bac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004bb6:	4413      	add	r3, r2
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bce:	464c      	mov	r4, r9
 8004bd0:	0223      	lsls	r3, r4, #8
 8004bd2:	46c4      	mov	ip, r8
 8004bd4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8004bd8:	4644      	mov	r4, r8
 8004bda:	0222      	lsls	r2, r4, #8
 8004bdc:	ea40 0402 	orr.w	r4, r0, r2
 8004be0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8004be2:	430b      	orrs	r3, r1
 8004be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004bea:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004bf2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004bfc:	4413      	add	r3, r2
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c14:	464c      	mov	r4, r9
 8004c16:	0423      	lsls	r3, r4, #16
 8004c18:	46c4      	mov	ip, r8
 8004c1a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004c1e:	4644      	mov	r4, r8
 8004c20:	0422      	lsls	r2, r4, #16
 8004c22:	ea40 0402 	orr.w	r4, r0, r2
 8004c26:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c2c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8004c30:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c34:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004c38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c3c:	1cda      	adds	r2, r3, #3
 8004c3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c42:	4413      	add	r3, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c4c:	657a      	str	r2, [r7, #84]	@ 0x54
 8004c4e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004c52:	4623      	mov	r3, r4
 8004c54:	0a1b      	lsrs	r3, r3, #8
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c58:	4623      	mov	r3, r4
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8004c62:	461a      	mov	r2, r3
 8004c64:	4302      	orrs	r2, r0
 8004c66:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c68:	4623      	mov	r3, r4
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004c72:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004c7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c84:	4413      	add	r3, r2
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004c9a:	0023      	movs	r3, r4
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	ea40 0402 	orr.w	r4, r0, r2
 8004ca2:	633c      	str	r4, [r7, #48]	@ 0x30
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004cac:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004cb0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004cb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004cb8:	1d5a      	adds	r2, r3, #5
 8004cba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004cbe:	4413      	add	r3, r2
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8004cd4:	0223      	lsls	r3, r4, #8
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	ea40 0402 	orr.w	r4, r0, r2
 8004cdc:	623c      	str	r4, [r7, #32]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ce6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004cea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004cee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004cf2:	3306      	adds	r3, #6
 8004cf4:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	61fa      	str	r2, [r7, #28]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	69bc      	ldr	r4, [r7, #24]
 8004d0e:	0423      	lsls	r3, r4, #16
 8004d10:	2200      	movs	r2, #0
 8004d12:	ea40 0402 	orr.w	r4, r0, r2
 8004d16:	613c      	str	r4, [r7, #16]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004d20:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004d24:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004d28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004d2c:	3307      	adds	r3, #7
 8004d2e:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004d32:	4413      	add	r3, r2
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	60fa      	str	r2, [r7, #12]
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	68bc      	ldr	r4, [r7, #8]
 8004d48:	0623      	lsls	r3, r4, #24
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	ea40 0402 	orr.w	r4, r0, r2
 8004d50:	603c      	str	r4, [r7, #0]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d5a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8004d5e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8004d62:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8004d66:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004d6e:	3308      	adds	r3, #8
 8004d70:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8004d74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004d84:	4770      	bx	lr
	...

08004d88 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	4b02      	ldr	r3, [pc, #8]	@ (8004d9c <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	08011ff0 	.word	0x08011ff0

08004da0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	4b02      	ldr	r3, [pc, #8]	@ (8004db4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	08012008 	.word	0x08012008

08004db8 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd faa6 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8004dc8:	4a24      	ldr	r2, [pc, #144]	@ (8004e5c <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
      header(),
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fa94 	bl	8003300 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3318      	adds	r3, #24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe fc1f 	bl	8003620 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004de8:	2308      	movs	r3, #8
 8004dea:	e007      	b.n	8004dfc <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	e9c2 0100 	strd	r0, r1, [r2]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	3208      	adds	r2, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	daf5      	bge.n	8004dec <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3388      	adds	r3, #136	@ 0x88
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fac5 	bl	8004394 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8004e10:	2308      	movs	r3, #8
 8004e12:	e007      	b.n	8004e24 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	e9c2 0100 	strd	r0, r1, [r2]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	3208      	adds	r2, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	daf5      	bge.n	8004e14 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	33f0      	adds	r3, #240	@ 0xf0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fab1 	bl	8004394 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8004e38:	2308      	movs	r3, #8
 8004e3a:	e007      	b.n	8004e4c <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8004e3c:	f04f 0000 	mov.w	r0, #0
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	e9c2 0100 	strd	r0, r1, [r2]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	daf5      	bge.n	8004e3c <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080124d4 	.word	0x080124d4

08004e60 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	@ 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1d18      	adds	r0, r3, #4
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fe fa61 	bl	8003340 <_ZNK8std_msgs6Header9serializeEPh>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	4413      	add	r3, r2
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0018 	add.w	r0, r3, #24
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	4413      	add	r3, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7fe fbf2 	bl	800367c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	4413      	add	r3, r2
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea4:	e07d      	b.n	8004fa2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	3308      	adds	r3, #8
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8004eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ebe:	6838      	ldr	r0, [r7, #0]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	b2d3      	uxtb	r3, r2
 8004ec4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004ec6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	0a02      	lsrs	r2, r0, #8
 8004ed4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ed8:	0a0b      	lsrs	r3, r1, #8
 8004eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004edc:	3101      	adds	r1, #1
 8004ede:	6838      	ldr	r0, [r7, #0]
 8004ee0:	4401      	add	r1, r0
 8004ee2:	b2d3      	uxtb	r3, r2
 8004ee4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004ee6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	0c02      	lsrs	r2, r0, #16
 8004ef4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ef8:	0c0b      	lsrs	r3, r1, #16
 8004efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004efc:	3102      	adds	r1, #2
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	4401      	add	r1, r0
 8004f02:	b2d3      	uxtb	r3, r2
 8004f04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004f06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	0e02      	lsrs	r2, r0, #24
 8004f14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f18:	0e0b      	lsrs	r3, r1, #24
 8004f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1c:	3103      	adds	r1, #3
 8004f1e:	6838      	ldr	r0, [r7, #0]
 8004f20:	4401      	add	r1, r0
 8004f22:	b2d3      	uxtb	r3, r2
 8004f24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8004f26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	000a      	movs	r2, r1
 8004f34:	2300      	movs	r3, #0
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	3104      	adds	r1, #4
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	4401      	add	r1, r0
 8004f3e:	b2d3      	uxtb	r3, r2
 8004f40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004f42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	0a0a      	lsrs	r2, r1, #8
 8004f50:	2300      	movs	r3, #0
 8004f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f54:	3105      	adds	r1, #5
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	4401      	add	r1, r0
 8004f5a:	b2d3      	uxtb	r3, r2
 8004f5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004f5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	0c0a      	lsrs	r2, r1, #16
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f70:	3106      	adds	r1, #6
 8004f72:	6838      	ldr	r0, [r7, #0]
 8004f74:	4401      	add	r1, r0
 8004f76:	b2d3      	uxtb	r3, r2
 8004f78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8004f7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	0e0a      	lsrs	r2, r1, #24
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8c:	3107      	adds	r1, #7
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	4401      	add	r1, r0
 8004f92:	b2d3      	uxtb	r3, r2
 8004f94:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	3308      	adds	r3, #8
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	f67f af7e 	bls.w	8004ea6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7ff fa14 	bl	80043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	4413      	add	r3, r2
 8004fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc8:	e07d      	b.n	80050c6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	3315      	adds	r3, #21
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8004fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fe2:	6838      	ldr	r0, [r7, #0]
 8004fe4:	4401      	add	r1, r0
 8004fe6:	b2d3      	uxtb	r3, r2
 8004fe8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	0a02      	lsrs	r2, r0, #8
 8004ff8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ffc:	0a0b      	lsrs	r3, r1, #8
 8004ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005000:	3101      	adds	r1, #1
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	4401      	add	r1, r0
 8005006:	b2d3      	uxtb	r3, r2
 8005008:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 800500a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	0c02      	lsrs	r2, r0, #16
 8005018:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800501c:	0c0b      	lsrs	r3, r1, #16
 800501e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005020:	3102      	adds	r1, #2
 8005022:	6838      	ldr	r0, [r7, #0]
 8005024:	4401      	add	r1, r0
 8005026:	b2d3      	uxtb	r3, r2
 8005028:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800502a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	0e02      	lsrs	r2, r0, #24
 8005038:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800503c:	0e0b      	lsrs	r3, r1, #24
 800503e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005040:	3103      	adds	r1, #3
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	4401      	add	r1, r0
 8005046:	b2d3      	uxtb	r3, r2
 8005048:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800504a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	000a      	movs	r2, r1
 8005058:	2300      	movs	r3, #0
 800505a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800505c:	3104      	adds	r1, #4
 800505e:	6838      	ldr	r0, [r7, #0]
 8005060:	4401      	add	r1, r0
 8005062:	b2d3      	uxtb	r3, r2
 8005064:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8005066:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	0a0a      	lsrs	r2, r1, #8
 8005074:	2300      	movs	r3, #0
 8005076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005078:	3105      	adds	r1, #5
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	4401      	add	r1, r0
 800507e:	b2d3      	uxtb	r3, r2
 8005080:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8005082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	0c0a      	lsrs	r2, r1, #16
 8005090:	2300      	movs	r3, #0
 8005092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005094:	3106      	adds	r1, #6
 8005096:	6838      	ldr	r0, [r7, #0]
 8005098:	4401      	add	r1, r0
 800509a:	b2d3      	uxtb	r3, r2
 800509c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 800509e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	0e0a      	lsrs	r2, r1, #24
 80050ac:	2300      	movs	r3, #0
 80050ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b0:	3107      	adds	r1, #7
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	4401      	add	r1, r0
 80050b6:	b2d3      	uxtb	r3, r2
 80050b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	3308      	adds	r3, #8
 80050be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	3301      	adds	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f67f af7e 	bls.w	8004fca <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f7ff f982 	bl	80043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	4413      	add	r3, r2
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	e07d      	b.n	80051ea <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	3322      	adds	r3, #34	@ 0x22
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8005100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005106:	6838      	ldr	r0, [r7, #0]
 8005108:	4401      	add	r1, r0
 800510a:	b2d3      	uxtb	r3, r2
 800510c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800510e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	0a02      	lsrs	r2, r0, #8
 800511c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005120:	0a0b      	lsrs	r3, r1, #8
 8005122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005124:	3101      	adds	r1, #1
 8005126:	6838      	ldr	r0, [r7, #0]
 8005128:	4401      	add	r1, r0
 800512a:	b2d3      	uxtb	r3, r2
 800512c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800512e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	0c02      	lsrs	r2, r0, #16
 800513c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005140:	0c0b      	lsrs	r3, r1, #16
 8005142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005144:	3102      	adds	r1, #2
 8005146:	6838      	ldr	r0, [r7, #0]
 8005148:	4401      	add	r1, r0
 800514a:	b2d3      	uxtb	r3, r2
 800514c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 800514e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	0e02      	lsrs	r2, r0, #24
 800515c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005160:	0e0b      	lsrs	r3, r1, #24
 8005162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005164:	3103      	adds	r1, #3
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	4401      	add	r1, r0
 800516a:	b2d3      	uxtb	r3, r2
 800516c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 800516e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	000a      	movs	r2, r1
 800517c:	2300      	movs	r3, #0
 800517e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005180:	3104      	adds	r1, #4
 8005182:	6838      	ldr	r0, [r7, #0]
 8005184:	4401      	add	r1, r0
 8005186:	b2d3      	uxtb	r3, r2
 8005188:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800518a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	0a0a      	lsrs	r2, r1, #8
 8005198:	2300      	movs	r3, #0
 800519a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519c:	3105      	adds	r1, #5
 800519e:	6838      	ldr	r0, [r7, #0]
 80051a0:	4401      	add	r1, r0
 80051a2:	b2d3      	uxtb	r3, r2
 80051a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80051a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	0c0a      	lsrs	r2, r1, #16
 80051b4:	2300      	movs	r3, #0
 80051b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b8:	3106      	adds	r1, #6
 80051ba:	6838      	ldr	r0, [r7, #0]
 80051bc:	4401      	add	r1, r0
 80051be:	b2d3      	uxtb	r3, r2
 80051c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80051c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	0e0a      	lsrs	r2, r1, #24
 80051d0:	2300      	movs	r3, #0
 80051d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051d4:	3107      	adds	r1, #7
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	4401      	add	r1, r0
 80051da:	b2d3      	uxtb	r3, r2
 80051dc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	3308      	adds	r3, #8
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	3301      	adds	r3, #1
 80051e8:	623b      	str	r3, [r7, #32]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	f67f af7e 	bls.w	80050ee <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 80051f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	@ 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	b0ed      	sub	sp, #436	@ 0x1b4
 8005202:	af00      	add	r7, sp, #0
 8005204:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8005208:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 8005212:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005216:	1d18      	adds	r0, r3, #4
 8005218:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800521c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005220:	4413      	add	r3, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f7fe f924 	bl	8003470 <_ZN8std_msgs6Header11deserializeEPh>
 8005228:	4602      	mov	r2, r0
 800522a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800522e:	4413      	add	r3, r2
 8005230:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8005234:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005238:	f103 0018 	add.w	r0, r3, #24
 800523c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005240:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005244:	4413      	add	r3, r2
 8005246:	4619      	mov	r1, r3
 8005248:	f7fe fc01 	bl	8003a4e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800524c:	4602      	mov	r2, r0
 800524e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005252:	4413      	add	r3, r2
 8005254:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800525e:	e122      	b.n	80054a6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2aa>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800526c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005270:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005274:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005278:	4413      	add	r3, r2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2200      	movs	r2, #0
 8005280:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8005284:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8005288:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800528c:	4616      	mov	r6, r2
 800528e:	4306      	orrs	r6, r0
 8005290:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8005294:	430b      	orrs	r3, r1
 8005296:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800529a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 800529e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80052a2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80052a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052b0:	4413      	add	r3, r2
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2200      	movs	r2, #0
 80052b8:	469a      	mov	sl, r3
 80052ba:	4693      	mov	fp, r2
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80052c8:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80052cc:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80052d0:	ea40 0602 	orr.w	r6, r0, r2
 80052d4:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 80052d8:	430b      	orrs	r3, r1
 80052da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80052de:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80052e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80052e6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80052ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052f4:	4413      	add	r3, r2
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2200      	movs	r2, #0
 80052fc:	4698      	mov	r8, r3
 80052fe:	4691      	mov	r9, r2
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800530c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005310:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005314:	ea40 0602 	orr.w	r6, r0, r2
 8005318:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 800531c:	430b      	orrs	r3, r1
 800531e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8005322:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005326:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800532a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800532e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005332:	1cda      	adds	r2, r3, #3
 8005334:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005338:	4413      	add	r3, r2
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005344:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005348:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800534c:	0a1d      	lsrs	r5, r3, #8
 800534e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005352:	061c      	lsls	r4, r3, #24
 8005354:	ea40 0304 	orr.w	r3, r0, r4
 8005358:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800535c:	ea41 0305 	orr.w	r3, r1, r5
 8005360:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005364:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005368:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800536c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005370:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800537a:	4413      	add	r3, r2
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2200      	movs	r2, #0
 8005382:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005386:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8005396:	0033      	movs	r3, r6
 8005398:	2200      	movs	r2, #0
 800539a:	ea40 0602 	orr.w	r6, r0, r2
 800539e:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 80053a2:	430b      	orrs	r3, r1
 80053a4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80053a8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80053ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80053b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80053b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80053b8:	1d5a      	adds	r2, r3, #5
 80053ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80053ca:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 80053da:	0233      	lsls	r3, r6, #8
 80053dc:	2200      	movs	r2, #0
 80053de:	ea40 0602 	orr.w	r6, r0, r2
 80053e2:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 80053e6:	430b      	orrs	r3, r1
 80053e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80053ec:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80053f0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80053f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80053f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80053fc:	1d9a      	adds	r2, r3, #6
 80053fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005402:	4413      	add	r3, r2
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800540e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 800541e:	0433      	lsls	r3, r6, #16
 8005420:	2200      	movs	r2, #0
 8005422:	ea40 0602 	orr.w	r6, r0, r2
 8005426:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 800542a:	430b      	orrs	r3, r1
 800542c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005430:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005434:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005438:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800543c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005440:	1dda      	adds	r2, r3, #7
 8005442:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005446:	4413      	add	r3, r2
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005452:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8005462:	0633      	lsls	r3, r6, #24
 8005464:	2200      	movs	r2, #0
 8005466:	ea40 0602 	orr.w	r6, r0, r2
 800546a:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 800546e:	430b      	orrs	r3, r1
 8005470:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005474:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005478:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 800547c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005480:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005484:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005488:	3308      	adds	r3, #8
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8005492:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005496:	3308      	adds	r3, #8
 8005498:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800549c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80054a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	f67f aed8 	bls.w	8005260 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 80054b0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80054b4:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 80054b8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80054bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054c0:	4413      	add	r3, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7ff f900 	bl	80046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80054c8:	4602      	mov	r2, r0
 80054ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80054ce:	4413      	add	r3, r2
 80054d0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80054da:	e135      	b.n	8005748 <_ZN11sensor_msgs3Imu11deserializeEPh+0x54c>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80054e8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80054ec:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80054f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054f4:	4413      	add	r3, r2
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005500:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005504:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8005508:	461a      	mov	r2, r3
 800550a:	4302      	orrs	r2, r0
 800550c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8005510:	4623      	mov	r3, r4
 8005512:	430b      	orrs	r3, r1
 8005514:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005518:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800551c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005520:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005524:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800552e:	4413      	add	r3, r2
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800553a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 800554a:	4634      	mov	r4, r6
 800554c:	0223      	lsls	r3, r4, #8
 800554e:	462c      	mov	r4, r5
 8005550:	4635      	mov	r5, r6
 8005552:	4626      	mov	r6, r4
 8005554:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8005558:	0222      	lsls	r2, r4, #8
 800555a:	ea40 0402 	orr.w	r4, r0, r2
 800555e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8005562:	430b      	orrs	r3, r1
 8005564:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005568:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800556c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005570:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005574:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005578:	1c9a      	adds	r2, r3, #2
 800557a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800558a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 800559a:	4634      	mov	r4, r6
 800559c:	0423      	lsls	r3, r4, #16
 800559e:	462c      	mov	r4, r5
 80055a0:	4635      	mov	r5, r6
 80055a2:	4626      	mov	r6, r4
 80055a4:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80055a8:	0422      	lsls	r2, r4, #16
 80055aa:	ea40 0402 	orr.w	r4, r0, r2
 80055ae:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055b8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80055bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80055c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80055c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80055c8:	1cda      	adds	r2, r3, #3
 80055ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80055e2:	4623      	mov	r3, r4
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80055ea:	4623      	mov	r3, r4
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055f2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80055f6:	461a      	mov	r2, r3
 80055f8:	4302      	orrs	r2, r0
 80055fa:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80055fe:	4623      	mov	r3, r4
 8005600:	430b      	orrs	r3, r1
 8005602:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005606:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800560a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800560e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005612:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800561c:	4413      	add	r3, r2
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8005638:	0023      	movs	r3, r4
 800563a:	2200      	movs	r2, #0
 800563c:	ea40 0402 	orr.w	r4, r0, r2
 8005640:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005644:	430b      	orrs	r3, r1
 8005646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800564a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800564e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005652:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005656:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800565a:	1d5a      	adds	r2, r3, #5
 800565c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005660:	4413      	add	r3, r2
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800566c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800567c:	0223      	lsls	r3, r4, #8
 800567e:	2200      	movs	r2, #0
 8005680:	ea40 0402 	orr.w	r4, r0, r2
 8005684:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8005688:	430b      	orrs	r3, r1
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800568e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8005692:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005696:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800569a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800569e:	1d9a      	adds	r2, r3, #6
 80056a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056a4:	4413      	add	r3, r2
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056b0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80056c0:	0423      	lsls	r3, r4, #16
 80056c2:	2200      	movs	r2, #0
 80056c4:	ea40 0402 	orr.w	r4, r0, r2
 80056c8:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80056cc:	430b      	orrs	r3, r1
 80056ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056d2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80056d6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80056da:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80056de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80056e2:	1dda      	adds	r2, r3, #7
 80056e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8005704:	0623      	lsls	r3, r4, #24
 8005706:	2200      	movs	r2, #0
 8005708:	ea40 0402 	orr.w	r4, r0, r2
 800570c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8005710:	430b      	orrs	r3, r1
 8005712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005716:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800571a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 800571e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005722:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005726:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800572a:	3315      	adds	r3, #21
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005734:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005738:	3308      	adds	r3, #8
 800573a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800573e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005742:	3301      	adds	r3, #1
 8005744:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005748:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800574c:	2b08      	cmp	r3, #8
 800574e:	f67f aec5 	bls.w	80054dc <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e0>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005752:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005756:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800575a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800575e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005762:	4413      	add	r3, r2
 8005764:	4619      	mov	r1, r3
 8005766:	f7fe ffaf 	bl	80046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800576a:	4602      	mov	r2, r0
 800576c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005770:	4413      	add	r3, r2
 8005772:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800577c:	e111      	b.n	80059a2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a6>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800578a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800578e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005792:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057a2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80057a6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80057aa:	461a      	mov	r2, r3
 80057ac:	4302      	orrs	r2, r0
 80057ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80057b0:	4623      	mov	r3, r4
 80057b2:	430b      	orrs	r3, r1
 80057b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80057ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80057be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80057c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057cc:	4413      	add	r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80057d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 80057e4:	4634      	mov	r4, r6
 80057e6:	0223      	lsls	r3, r4, #8
 80057e8:	462c      	mov	r4, r5
 80057ea:	4635      	mov	r5, r6
 80057ec:	4626      	mov	r6, r4
 80057ee:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 80057f2:	0222      	lsls	r2, r4, #8
 80057f4:	ea40 0402 	orr.w	r4, r0, r2
 80057f8:	66bc      	str	r4, [r7, #104]	@ 0x68
 80057fa:	430b      	orrs	r3, r1
 80057fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057fe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8005802:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005806:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800580a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005814:	4413      	add	r3, r2
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2200      	movs	r2, #0
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 800582c:	4634      	mov	r4, r6
 800582e:	0423      	lsls	r3, r4, #16
 8005830:	462c      	mov	r4, r5
 8005832:	4635      	mov	r5, r6
 8005834:	4626      	mov	r6, r4
 8005836:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800583a:	0422      	lsls	r2, r4, #16
 800583c:	ea40 0402 	orr.w	r4, r0, r2
 8005840:	65bc      	str	r4, [r7, #88]	@ 0x58
 8005842:	430b      	orrs	r3, r1
 8005844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005846:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800584a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800584e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005856:	1cda      	adds	r2, r3, #3
 8005858:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800585c:	4413      	add	r3, r2
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2200      	movs	r2, #0
 8005864:	653b      	str	r3, [r7, #80]	@ 0x50
 8005866:	657a      	str	r2, [r7, #84]	@ 0x54
 8005868:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800586c:	4623      	mov	r3, r4
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005872:	4623      	mov	r3, r4
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005878:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800587c:	461a      	mov	r2, r3
 800587e:	4302      	orrs	r2, r0
 8005880:	643a      	str	r2, [r7, #64]	@ 0x40
 8005882:	4623      	mov	r3, r4
 8005884:	430b      	orrs	r3, r1
 8005886:	647b      	str	r3, [r7, #68]	@ 0x44
 8005888:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800588c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005890:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005894:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005898:	1d1a      	adds	r2, r3, #4
 800589a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2200      	movs	r2, #0
 80058a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80058b4:	0023      	movs	r3, r4
 80058b6:	2200      	movs	r2, #0
 80058b8:	ea40 0402 	orr.w	r4, r0, r2
 80058bc:	633c      	str	r4, [r7, #48]	@ 0x30
 80058be:	430b      	orrs	r3, r1
 80058c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80058c6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80058ca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80058ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80058d2:	1d5a      	adds	r2, r3, #5
 80058d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058d8:	4413      	add	r3, r2
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2200      	movs	r2, #0
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80058ee:	0223      	lsls	r3, r4, #8
 80058f0:	2200      	movs	r2, #0
 80058f2:	ea40 0402 	orr.w	r4, r0, r2
 80058f6:	623c      	str	r4, [r7, #32]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005900:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005904:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005908:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800590c:	1d9a      	adds	r2, r3, #6
 800590e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2200      	movs	r2, #0
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	61fa      	str	r2, [r7, #28]
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	69bc      	ldr	r4, [r7, #24]
 8005928:	0423      	lsls	r3, r4, #16
 800592a:	2200      	movs	r2, #0
 800592c:	ea40 0402 	orr.w	r4, r0, r2
 8005930:	613c      	str	r4, [r7, #16]
 8005932:	430b      	orrs	r3, r1
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800593a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800593e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005942:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005946:	1dda      	adds	r2, r3, #7
 8005948:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2200      	movs	r2, #0
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	60fa      	str	r2, [r7, #12]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	68bc      	ldr	r4, [r7, #8]
 8005962:	0623      	lsls	r3, r4, #24
 8005964:	2200      	movs	r2, #0
 8005966:	ea40 0402 	orr.w	r4, r0, r2
 800596a:	603c      	str	r4, [r7, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005974:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8005978:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800597c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005980:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005984:	3322      	adds	r3, #34	@ 0x22
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4413      	add	r3, r2
 800598a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800598e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005992:	3308      	adds	r3, #8
 8005994:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005998:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80059a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	f67f aee9 	bls.w	800577e <_ZN11sensor_msgs3Imu11deserializeEPh+0x582>
      }
     return offset;
 80059ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 80059b0:	4618      	mov	r0, r3
 80059b2:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059bc <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	4b02      	ldr	r3, [pc, #8]	@ (80059d0 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	0801202c 	.word	0x0801202c

080059d4 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	4b02      	ldr	r3, [pc, #8]	@ (80059e8 <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	0801203c 	.word	0x0801203c

080059ec <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), st_name(), name(nullptr),
      position_length(0), st_position(), position(nullptr),
      velocity_length(0), st_velocity(), velocity(nullptr),
      effort_length(0), st_effort(), effort(nullptr)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fc fc8c 	bl	8002314 <_ZN3ros3MsgC1Ev>
 80059fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a78 <_ZN11sensor_msgs10JointStateC1Ev+0x8c>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
      header(),
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd fc7a 	bl	8003300 <_ZN8std_msgs6HeaderC1Ev>
      name_length(0), st_name(), name(nullptr),
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	621a      	str	r2, [r3, #32]
      position_length(0), st_position(), position(nullptr),
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
      velocity_length(0), st_velocity(), velocity(nullptr),
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	641a      	str	r2, [r3, #64]	@ 0x40
      effort_length(0), st_effort(), effort(nullptr)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	651a      	str	r2, [r3, #80]	@ 0x50
    {
    }
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	080124bc 	.word	0x080124bc

08005a7c <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	@ 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
      offset += this->header.serialize(outbuffer + offset);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	1d18      	adds	r0, r3, #4
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fd fc53 	bl	8003340 <_ZNK8std_msgs6Header9serializeEPh>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9e:	4413      	add	r3, r2
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	b2ca      	uxtb	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	0a19      	lsrs	r1, r3, #8
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	3301      	adds	r3, #1
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	4413      	add	r3, r2
 8005abe:	b2ca      	uxtb	r2, r1
 8005ac0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	0c19      	lsrs	r1, r3, #16
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	3302      	adds	r3, #2
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	b2ca      	uxtb	r2, r1
 8005ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	0e19      	lsrs	r1, r3, #24
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	3303      	adds	r3, #3
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	b2ca      	uxtb	r2, r1
 8005ae4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	3304      	adds	r3, #4
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005aec:	2300      	movs	r3, #0
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af0:	e027      	b.n	8005b42 <_ZNK11sensor_msgs10JointState9serializeEPh+0xc6>
      uint32_t length_namei = strlen(this->name[i]);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fb92 	bl	8000228 <strlen>
 8005b04:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	6a39      	ldr	r1, [r7, #32]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f003 fd48 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	3304      	adds	r3, #4
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	18d0      	adds	r0, r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f00c f950 	bl	8011dd4 <memcpy>
      offset += length_namei;
 8005b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	4413      	add	r3, r2
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	3301      	adds	r3, #1
 8005b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3d2      	bcc.n	8005af2 <_ZNK11sensor_msgs10JointState9serializeEPh+0x76>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	b2ca      	uxtb	r2, r1
 8005b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	0a19      	lsrs	r1, r3, #8
 8005b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b62:	3301      	adds	r3, #1
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	4413      	add	r3, r2
 8005b68:	b2ca      	uxtb	r2, r1
 8005b6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	0c19      	lsrs	r1, r3, #16
 8005b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b74:	3302      	adds	r3, #2
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	4413      	add	r3, r2
 8005b7a:	b2ca      	uxtb	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	0e19      	lsrs	r1, r3, #24
 8005b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b86:	3303      	adds	r3, #3
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	b2ca      	uxtb	r2, r1
 8005b8e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	3304      	adds	r3, #4
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b9a:	e07d      	b.n	8005c98 <_ZNK11sensor_msgs10JointState9serializeEPh+0x21c>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 8005bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bb4:	6838      	ldr	r0, [r7, #0]
 8005bb6:	4401      	add	r1, r0
 8005bb8:	b2d3      	uxtb	r3, r2
 8005bba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 8005bbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	0a02      	lsrs	r2, r0, #8
 8005bca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005bce:	0a0b      	lsrs	r3, r1, #8
 8005bd0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bd2:	3101      	adds	r1, #1
 8005bd4:	6838      	ldr	r0, [r7, #0]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	b2d3      	uxtb	r3, r2
 8005bda:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 8005bdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	0c02      	lsrs	r2, r0, #16
 8005bea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005bee:	0c0b      	lsrs	r3, r1, #16
 8005bf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bf2:	3102      	adds	r1, #2
 8005bf4:	6838      	ldr	r0, [r7, #0]
 8005bf6:	4401      	add	r1, r0
 8005bf8:	b2d3      	uxtb	r3, r2
 8005bfa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 8005bfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	0e02      	lsrs	r2, r0, #24
 8005c0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c0e:	0e0b      	lsrs	r3, r1, #24
 8005c10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c12:	3103      	adds	r1, #3
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	4401      	add	r1, r0
 8005c18:	b2d3      	uxtb	r3, r2
 8005c1a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8005c1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	000a      	movs	r2, r1
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c2e:	3104      	adds	r1, #4
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	4401      	add	r1, r0
 8005c34:	b2d3      	uxtb	r3, r2
 8005c36:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8005c38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	0a0a      	lsrs	r2, r1, #8
 8005c46:	2300      	movs	r3, #0
 8005c48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c4a:	3105      	adds	r1, #5
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	b2d3      	uxtb	r3, r2
 8005c52:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8005c54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	0c0a      	lsrs	r2, r1, #16
 8005c62:	2300      	movs	r3, #0
 8005c64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c66:	3106      	adds	r1, #6
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	4401      	add	r1, r0
 8005c6c:	b2d3      	uxtb	r3, r2
 8005c6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8005c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	0e0a      	lsrs	r2, r1, #24
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c82:	3107      	adds	r1, #7
 8005c84:	6838      	ldr	r0, [r7, #0]
 8005c86:	4401      	add	r1, r0
 8005c88:	b2d3      	uxtb	r3, r2
 8005c8a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	3308      	adds	r3, #8
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8005c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c94:	3301      	adds	r3, #1
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f4ff af7c 	bcc.w	8005b9c <_ZNK11sensor_msgs10JointState9serializeEPh+0x120>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	b2ca      	uxtb	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb6:	0a19      	lsrs	r1, r3, #8
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cba:	3301      	adds	r3, #1
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b2ca      	uxtb	r2, r1
 8005cc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	0c19      	lsrs	r1, r3, #16
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	3302      	adds	r3, #2
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	b2ca      	uxtb	r2, r1
 8005cd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	0e19      	lsrs	r1, r3, #24
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	3303      	adds	r3, #3
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b2ca      	uxtb	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cea:	3304      	adds	r3, #4
 8005cec:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf2:	e07d      	b.n	8005df0 <_ZNK11sensor_msgs10JointState9serializeEPh+0x374>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8005d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d0c:	6838      	ldr	r0, [r7, #0]
 8005d0e:	4401      	add	r1, r0
 8005d10:	b2d3      	uxtb	r3, r2
 8005d12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8005d14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	0a02      	lsrs	r2, r0, #8
 8005d22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d26:	0a0b      	lsrs	r3, r1, #8
 8005d28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d2a:	3101      	adds	r1, #1
 8005d2c:	6838      	ldr	r0, [r7, #0]
 8005d2e:	4401      	add	r1, r0
 8005d30:	b2d3      	uxtb	r3, r2
 8005d32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8005d34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	0c02      	lsrs	r2, r0, #16
 8005d42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005d46:	0c0b      	lsrs	r3, r1, #16
 8005d48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d4a:	3102      	adds	r1, #2
 8005d4c:	6838      	ldr	r0, [r7, #0]
 8005d4e:	4401      	add	r1, r0
 8005d50:	b2d3      	uxtb	r3, r2
 8005d52:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8005d54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	0e02      	lsrs	r2, r0, #24
 8005d62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d66:	0e0b      	lsrs	r3, r1, #24
 8005d68:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d6a:	3103      	adds	r1, #3
 8005d6c:	6838      	ldr	r0, [r7, #0]
 8005d6e:	4401      	add	r1, r0
 8005d70:	b2d3      	uxtb	r3, r2
 8005d72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8005d74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	000a      	movs	r2, r1
 8005d82:	2300      	movs	r3, #0
 8005d84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d86:	3104      	adds	r1, #4
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	b2d3      	uxtb	r3, r2
 8005d8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8005d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	0a0a      	lsrs	r2, r1, #8
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005da2:	3105      	adds	r1, #5
 8005da4:	6838      	ldr	r0, [r7, #0]
 8005da6:	4401      	add	r1, r0
 8005da8:	b2d3      	uxtb	r3, r2
 8005daa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8005dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	0c0a      	lsrs	r2, r1, #16
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005dbe:	3106      	adds	r1, #6
 8005dc0:	6838      	ldr	r0, [r7, #0]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	b2d3      	uxtb	r3, r2
 8005dc6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8005dc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	0e0a      	lsrs	r2, r1, #24
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005dda:	3107      	adds	r1, #7
 8005ddc:	6838      	ldr	r0, [r7, #0]
 8005dde:	4401      	add	r1, r0
 8005de0:	b2d3      	uxtb	r3, r2
 8005de2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 8005de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de6:	3308      	adds	r3, #8
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	3301      	adds	r3, #1
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f4ff af7c 	bcc.w	8005cf4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x278>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	b2ca      	uxtb	r2, r1
 8005e08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	0a19      	lsrs	r1, r3, #8
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	3301      	adds	r3, #1
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	b2ca      	uxtb	r2, r1
 8005e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e20:	0c19      	lsrs	r1, r3, #16
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	3302      	adds	r3, #2
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b2ca      	uxtb	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	0e19      	lsrs	r1, r3, #24
 8005e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e36:	3303      	adds	r3, #3
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	b2ca      	uxtb	r2, r1
 8005e3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8005e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e42:	3304      	adds	r3, #4
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4a:	e07d      	b.n	8005f48 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4cc>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8005e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	4401      	add	r1, r0
 8005e68:	b2d3      	uxtb	r3, r2
 8005e6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8005e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	0a02      	lsrs	r2, r0, #8
 8005e7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005e7e:	0a0b      	lsrs	r3, r1, #8
 8005e80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e82:	3101      	adds	r1, #1
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	4401      	add	r1, r0
 8005e88:	b2d3      	uxtb	r3, r2
 8005e8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8005e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	0c02      	lsrs	r2, r0, #16
 8005e9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005e9e:	0c0b      	lsrs	r3, r1, #16
 8005ea0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ea2:	3102      	adds	r1, #2
 8005ea4:	6838      	ldr	r0, [r7, #0]
 8005ea6:	4401      	add	r1, r0
 8005ea8:	b2d3      	uxtb	r3, r2
 8005eaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8005eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	0e02      	lsrs	r2, r0, #24
 8005eba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ebe:	0e0b      	lsrs	r3, r1, #24
 8005ec0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ec2:	3103      	adds	r1, #3
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	4401      	add	r1, r0
 8005ec8:	b2d3      	uxtb	r3, r2
 8005eca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8005ecc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	000a      	movs	r2, r1
 8005eda:	2300      	movs	r3, #0
 8005edc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ede:	3104      	adds	r1, #4
 8005ee0:	6838      	ldr	r0, [r7, #0]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	b2d3      	uxtb	r3, r2
 8005ee6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8005ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	0a0a      	lsrs	r2, r1, #8
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005efa:	3105      	adds	r1, #5
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	4401      	add	r1, r0
 8005f00:	b2d3      	uxtb	r3, r2
 8005f02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8005f04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	0c0a      	lsrs	r2, r1, #16
 8005f12:	2300      	movs	r3, #0
 8005f14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f16:	3106      	adds	r1, #6
 8005f18:	6838      	ldr	r0, [r7, #0]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	b2d3      	uxtb	r3, r2
 8005f1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8005f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	0e0a      	lsrs	r2, r1, #24
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f32:	3107      	adds	r1, #7
 8005f34:	6838      	ldr	r0, [r7, #0]
 8005f36:	4401      	add	r1, r0
 8005f38:	b2d3      	uxtb	r3, r2
 8005f3a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	3308      	adds	r3, #8
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	3301      	adds	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	f4ff af7c 	bcc.w	8005e4c <_ZNK11sensor_msgs10JointState9serializeEPh+0x3d0>
      }
      return offset;
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005f56:	4618      	mov	r0, r3
 8005f58:	3738      	adds	r7, #56	@ 0x38
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f62:	b0f5      	sub	sp, #468	@ 0x1d4
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8005f6a:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      offset += this->header.deserialize(inbuffer + offset);
 8005f74:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f78:	1d18      	adds	r0, r3, #4
 8005f7a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005f7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f82:	4413      	add	r3, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	f7fd fa73 	bl	8003470 <_ZN8std_msgs6Header11deserializeEPh>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f90:	4413      	add	r3, r2
 8005f92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005f96:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005f9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005fa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fb0:	4413      	add	r3, r2
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	021a      	lsls	r2, r3, #8
 8005fb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005fc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fca:	4413      	add	r3, r2
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	041a      	lsls	r2, r3, #16
 8005fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005fda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005fde:	1cda      	adds	r2, r3, #3
 8005fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	061a      	lsls	r2, r3, #24
 8005fea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      offset += sizeof(this->name_length);
 8005ff4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(name_lengthT > name_length)
 8005ffe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8006008:	4293      	cmp	r3, r2
 800600a:	d90d      	bls.n	8006028 <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 800600c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f00b fe60 	bl	8011ce0 <realloc>
 8006020:	4602      	mov	r2, r0
 8006022:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006026:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8006028:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800602c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8006030:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8006032:	2300      	movs	r3, #0
 8006034:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8006038:	e05b      	b.n	80060f2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x194>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 800603a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800603e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006042:	441a      	add	r2, r3
 8006044:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f003 fac8 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006050:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006054:	3304      	adds	r3, #4
 8006056:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800605a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800605e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006062:	e011      	b.n	8006088 <_ZN11sensor_msgs10JointState11deserializeEPh+0x12a>
          inbuffer[k-1]=inbuffer[k];
 8006064:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8006068:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800606c:	18d1      	adds	r1, r2, r3
 800606e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006078:	441a      	add	r2, r3
 800607a:	780b      	ldrb	r3, [r1, #0]
 800607c:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800607e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8006082:	3301      	adds	r3, #1
 8006084:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006088:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800608c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006090:	441a      	add	r2, r3
 8006092:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8006096:	4293      	cmp	r3, r2
 8006098:	d3e4      	bcc.n	8006064 <_ZN11sensor_msgs10JointState11deserializeEPh+0x106>
      }
      inbuffer[offset+length_st_name-1]=0;
 800609a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800609e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80060a2:	4413      	add	r3, r2
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060aa:	441a      	add	r2, r3
 80060ac:	2300      	movs	r3, #0
 80060ae:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 80060b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80060b4:	1e5a      	subs	r2, r3, #1
 80060b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060ba:	441a      	add	r2, r3
 80060bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80060c0:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 80060c2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80060c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 80060d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80060e2:	331c      	adds	r3, #28
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 80060e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80060f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d39c      	bcc.n	800603a <_ZN11sensor_msgs10JointState11deserializeEPh+0xdc>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006100:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006104:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006108:	4413      	add	r3, r2
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006110:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800611a:	4413      	add	r3, r2
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800612a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	041a      	lsls	r2, r3, #16
 800613a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006144:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006148:	1cda      	adds	r2, r3, #3
 800614a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800614e:	4413      	add	r3, r2
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	061a      	lsls	r2, r3, #24
 8006154:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      offset += sizeof(this->position_length);
 800615e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006162:	3304      	adds	r3, #4
 8006164:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(position_lengthT > position_length)
 8006168:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800616c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800616e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006172:	4293      	cmp	r3, r2
 8006174:	d90d      	bls.n	8006192 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8006176:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800617a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800617c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f00b fdab 	bl	8011ce0 <realloc>
 800618a:	4602      	mov	r2, r0
 800618c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006190:	631a      	str	r2, [r3, #48]	@ 0x30
      position_length = position_lengthT;
 8006192:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8006196:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800619a:	6253      	str	r3, [r2, #36]	@ 0x24
      for( uint32_t i = 0; i < position_length; i++){
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80061a2:	e12b      	b.n	80063fc <_ZN11sensor_msgs10JointState11deserializeEPh+0x49e>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80061b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80061b4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80061b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80061c8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80061cc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80061d0:	4616      	mov	r6, r2
 80061d2:	4306      	orrs	r6, r0
 80061d4:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 80061d8:	430b      	orrs	r3, r1
 80061da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80061de:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 80061e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80061e6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80061ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80061f4:	4413      	add	r3, r2
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	469a      	mov	sl, r3
 80061fe:	4693      	mov	fp, r2
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800620c:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8006210:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8006214:	ea40 0602 	orr.w	r6, r0, r2
 8006218:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 800621c:	430b      	orrs	r3, r1
 800621e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8006222:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8006226:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800622a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800622e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006238:	4413      	add	r3, r2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2200      	movs	r2, #0
 8006240:	4698      	mov	r8, r3
 8006242:	4691      	mov	r9, r2
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8006250:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8006254:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8006258:	ea40 0602 	orr.w	r6, r0, r2
 800625c:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8006260:	430b      	orrs	r3, r1
 8006262:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8006266:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800626a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800626e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006272:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006276:	1cda      	adds	r2, r3, #3
 8006278:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8006288:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800628c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8006290:	0a1d      	lsrs	r5, r3, #8
 8006292:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8006296:	061c      	lsls	r4, r3, #24
 8006298:	ea40 0304 	orr.w	r3, r0, r4
 800629c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80062a0:	ea41 0305 	orr.w	r3, r1, r5
 80062a4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80062a8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80062ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80062b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80062b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80062be:	4413      	add	r3, r2
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80062ca:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 80062da:	0033      	movs	r3, r6
 80062dc:	2200      	movs	r2, #0
 80062de:	ea40 0602 	orr.w	r6, r0, r2
 80062e2:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 80062e6:	430b      	orrs	r3, r1
 80062e8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80062ec:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80062f0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80062f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80062f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062fc:	1d5a      	adds	r2, r3, #5
 80062fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2200      	movs	r2, #0
 800630a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800630e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 800631e:	0233      	lsls	r3, r6, #8
 8006320:	2200      	movs	r2, #0
 8006322:	ea40 0602 	orr.w	r6, r0, r2
 8006326:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 800632a:	430b      	orrs	r3, r1
 800632c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006330:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8006334:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006338:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800633c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006340:	1d9a      	adds	r2, r3, #6
 8006342:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006346:	4413      	add	r3, r2
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006352:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8006362:	0433      	lsls	r3, r6, #16
 8006364:	2200      	movs	r2, #0
 8006366:	ea40 0602 	orr.w	r6, r0, r2
 800636a:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 800636e:	430b      	orrs	r3, r1
 8006370:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006374:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8006378:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800637c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006380:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006384:	1dda      	adds	r2, r3, #7
 8006386:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800638a:	4413      	add	r3, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006396:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 80063a6:	0633      	lsls	r3, r6, #24
 80063a8:	2200      	movs	r2, #0
 80063aa:	ea40 0602 	orr.w	r6, r0, r2
 80063ae:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 80063b2:	430b      	orrs	r3, r1
 80063b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80063b8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80063bc:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->st_position = u_st_position.real;
 80063c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80063c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80063c8:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->st_position);
 80063cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80063d0:	3308      	adds	r3, #8
 80063d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 80063d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80063da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	18d0      	adds	r0, r2, r3
 80063e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80063e8:	3328      	adds	r3, #40	@ 0x28
 80063ea:	2208      	movs	r2, #8
 80063ec:	4619      	mov	r1, r3
 80063ee:	f00b fcf1 	bl	8011dd4 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 80063f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80063f6:	3301      	adds	r3, #1
 80063f8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80063fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006402:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8006406:	4293      	cmp	r3, r2
 8006408:	f4ff aecc 	bcc.w	80061a4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x246>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800640c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006410:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006414:	4413      	add	r3, r2
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800641c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	021a      	lsls	r2, r3, #8
 800642c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006436:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800643a:	1c9a      	adds	r2, r3, #2
 800643c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006440:	4413      	add	r3, r2
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	041a      	lsls	r2, r3, #16
 8006446:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006450:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006454:	1cda      	adds	r2, r3, #3
 8006456:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800645a:	4413      	add	r3, r2
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	061a      	lsls	r2, r3, #24
 8006460:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += sizeof(this->velocity_length);
 800646a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800646e:	3304      	adds	r3, #4
 8006470:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(velocity_lengthT > velocity_length)
 8006474:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800647a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800647e:	4293      	cmp	r3, r2
 8006480:	d90d      	bls.n	800649e <_ZN11sensor_msgs10JointState11deserializeEPh+0x540>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8006482:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006488:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f00b fc25 	bl	8011ce0 <realloc>
 8006496:	4602      	mov	r2, r0
 8006498:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800649c:	641a      	str	r2, [r3, #64]	@ 0x40
      velocity_length = velocity_lengthT;
 800649e:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80064a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80064a6:	6353      	str	r3, [r2, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80064ae:	e13e      	b.n	800672e <_ZN11sensor_msgs10JointState11deserializeEPh+0x7d0>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80064bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80064c0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80064c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80064c8:	4413      	add	r3, r2
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80064d4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80064d8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 80064dc:	461a      	mov	r2, r3
 80064de:	4302      	orrs	r2, r0
 80064e0:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80064e4:	4623      	mov	r3, r4
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80064ec:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80064f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80064f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80064f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006502:	4413      	add	r3, r2
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800650e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 800651e:	4634      	mov	r4, r6
 8006520:	0223      	lsls	r3, r4, #8
 8006522:	462c      	mov	r4, r5
 8006524:	4635      	mov	r5, r6
 8006526:	4626      	mov	r6, r4
 8006528:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 800652c:	0222      	lsls	r2, r4, #8
 800652e:	ea40 0402 	orr.w	r4, r0, r2
 8006532:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8006536:	430b      	orrs	r3, r1
 8006538:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800653c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8006540:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006544:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006548:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006552:	4413      	add	r3, r2
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2200      	movs	r2, #0
 800655a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800655e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 800656e:	4634      	mov	r4, r6
 8006570:	0423      	lsls	r3, r4, #16
 8006572:	462c      	mov	r4, r5
 8006574:	4635      	mov	r5, r6
 8006576:	4626      	mov	r6, r4
 8006578:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800657c:	0422      	lsls	r2, r4, #16
 800657e:	ea40 0402 	orr.w	r4, r0, r2
 8006582:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8006586:	430b      	orrs	r3, r1
 8006588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800658c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8006590:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006594:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006598:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800659c:	1cda      	adds	r2, r3, #3
 800659e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80065a2:	4413      	add	r3, r2
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80065b6:	4623      	mov	r3, r4
 80065b8:	0a1b      	lsrs	r3, r3, #8
 80065ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065be:	4623      	mov	r3, r4
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80065ca:	461a      	mov	r2, r3
 80065cc:	4302      	orrs	r2, r0
 80065ce:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80065d2:	4623      	mov	r3, r4
 80065d4:	430b      	orrs	r3, r1
 80065d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065da:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80065de:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80065e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80065e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80065ea:	1d1a      	adds	r2, r3, #4
 80065ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80065f0:	4413      	add	r3, r2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 800660c:	0023      	movs	r3, r4
 800660e:	2200      	movs	r2, #0
 8006610:	ea40 0402 	orr.w	r4, r0, r2
 8006614:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006618:	430b      	orrs	r3, r1
 800661a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800661e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8006622:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006626:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800662a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800662e:	1d5a      	adds	r2, r3, #5
 8006630:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006634:	4413      	add	r3, r2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006640:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8006650:	0223      	lsls	r3, r4, #8
 8006652:	2200      	movs	r2, #0
 8006654:	ea40 0402 	orr.w	r4, r0, r2
 8006658:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800665c:	430b      	orrs	r3, r1
 800665e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006662:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8006666:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800666a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800666e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006672:	1d9a      	adds	r2, r3, #6
 8006674:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006678:	4413      	add	r3, r2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2200      	movs	r2, #0
 8006680:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006684:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006694:	0423      	lsls	r3, r4, #16
 8006696:	2200      	movs	r2, #0
 8006698:	ea40 0402 	orr.w	r4, r0, r2
 800669c:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80066a0:	430b      	orrs	r3, r1
 80066a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066a6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80066aa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80066ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80066b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80066b6:	1dda      	adds	r2, r3, #7
 80066b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80066d8:	0623      	lsls	r3, r4, #24
 80066da:	2200      	movs	r2, #0
 80066dc:	ea40 0402 	orr.w	r4, r0, r2
 80066e0:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80066e4:	430b      	orrs	r3, r1
 80066e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ea:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80066ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->st_velocity = u_st_velocity.real;
 80066f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80066f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80066fa:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
      offset += sizeof(this->st_velocity);
 80066fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006702:	3308      	adds	r3, #8
 8006704:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 8006708:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800670c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800670e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	18d0      	adds	r0, r2, r3
 8006716:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800671a:	3338      	adds	r3, #56	@ 0x38
 800671c:	2208      	movs	r2, #8
 800671e:	4619      	mov	r1, r3
 8006720:	f00b fb58 	bl	8011dd4 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 8006724:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800672e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006734:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006738:	4293      	cmp	r3, r2
 800673a:	f4ff aeb9 	bcc.w	80064b0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x552>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800673e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006742:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006746:	4413      	add	r3, r2
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800674e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006758:	4413      	add	r3, r2
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	021a      	lsls	r2, r3, #8
 800675e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006768:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	041a      	lsls	r2, r3, #16
 8006778:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006782:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006786:	1cda      	adds	r2, r3, #3
 8006788:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800678c:	4413      	add	r3, r2
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	061a      	lsls	r2, r3, #24
 8006792:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      offset += sizeof(this->effort_length);
 800679c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80067a0:	3304      	adds	r3, #4
 80067a2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(effort_lengthT > effort_length)
 80067a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80067aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d90d      	bls.n	80067d0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x872>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 80067b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80067b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f00b fa8c 	bl	8011ce0 <realloc>
 80067c8:	4602      	mov	r2, r0
 80067ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80067ce:	651a      	str	r2, [r3, #80]	@ 0x50
      effort_length = effort_lengthT;
 80067d0:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80067d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80067d8:	6453      	str	r3, [r2, #68]	@ 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 80067da:	2300      	movs	r3, #0
 80067dc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80067e0:	e11a      	b.n	8006a18 <_ZN11sensor_msgs10JointState11deserializeEPh+0xaba>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80067ee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80067f2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80067f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80067fa:	4413      	add	r3, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2200      	movs	r2, #0
 8006802:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006806:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800680a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800680e:	461a      	mov	r2, r3
 8006810:	4302      	orrs	r2, r0
 8006812:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006814:	4623      	mov	r3, r4
 8006816:	430b      	orrs	r3, r1
 8006818:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800681a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800681e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006822:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006826:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006830:	4413      	add	r3, r2
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2200      	movs	r2, #0
 8006838:	673b      	str	r3, [r7, #112]	@ 0x70
 800683a:	677a      	str	r2, [r7, #116]	@ 0x74
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8006848:	4634      	mov	r4, r6
 800684a:	0223      	lsls	r3, r4, #8
 800684c:	462c      	mov	r4, r5
 800684e:	4635      	mov	r5, r6
 8006850:	4626      	mov	r6, r4
 8006852:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8006856:	0222      	lsls	r2, r4, #8
 8006858:	ea40 0402 	orr.w	r4, r0, r2
 800685c:	66bc      	str	r4, [r7, #104]	@ 0x68
 800685e:	430b      	orrs	r3, r1
 8006860:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006862:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006866:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800686a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800686e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006872:	1c9a      	adds	r2, r3, #2
 8006874:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006878:	4413      	add	r3, r2
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2200      	movs	r2, #0
 8006880:	663b      	str	r3, [r7, #96]	@ 0x60
 8006882:	667a      	str	r2, [r7, #100]	@ 0x64
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8006890:	4634      	mov	r4, r6
 8006892:	0423      	lsls	r3, r4, #16
 8006894:	462c      	mov	r4, r5
 8006896:	4635      	mov	r5, r6
 8006898:	4626      	mov	r6, r4
 800689a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800689e:	0422      	lsls	r2, r4, #16
 80068a0:	ea40 0402 	orr.w	r4, r0, r2
 80068a4:	65bc      	str	r4, [r7, #88]	@ 0x58
 80068a6:	430b      	orrs	r3, r1
 80068a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068aa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80068ae:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80068b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80068b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80068ba:	1cda      	adds	r2, r3, #3
 80068bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2200      	movs	r2, #0
 80068c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80068cc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80068d0:	4623      	mov	r3, r4
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d6:	4623      	mov	r3, r4
 80068d8:	061b      	lsls	r3, r3, #24
 80068da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068dc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80068e0:	461a      	mov	r2, r3
 80068e2:	4302      	orrs	r2, r0
 80068e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80068e6:	4623      	mov	r3, r4
 80068e8:	430b      	orrs	r3, r1
 80068ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ec:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80068f0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80068f4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80068f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80068fc:	1d1a      	adds	r2, r3, #4
 80068fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2200      	movs	r2, #0
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8006918:	0023      	movs	r3, r4
 800691a:	2200      	movs	r2, #0
 800691c:	ea40 0402 	orr.w	r4, r0, r2
 8006920:	633c      	str	r4, [r7, #48]	@ 0x30
 8006922:	430b      	orrs	r3, r1
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
 8006926:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800692a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800692e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006932:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006936:	1d5a      	adds	r2, r3, #5
 8006938:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800693c:	4413      	add	r3, r2
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2200      	movs	r2, #0
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006952:	0223      	lsls	r3, r4, #8
 8006954:	2200      	movs	r2, #0
 8006956:	ea40 0402 	orr.w	r4, r0, r2
 800695a:	623c      	str	r4, [r7, #32]
 800695c:	430b      	orrs	r3, r1
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006960:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006964:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006968:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800696c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006970:	1d9a      	adds	r2, r3, #6
 8006972:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006976:	4413      	add	r3, r2
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2200      	movs	r2, #0
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	69bc      	ldr	r4, [r7, #24]
 800698c:	0423      	lsls	r3, r4, #16
 800698e:	2200      	movs	r2, #0
 8006990:	ea40 0402 	orr.w	r4, r0, r2
 8006994:	613c      	str	r4, [r7, #16]
 8006996:	430b      	orrs	r3, r1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800699e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80069a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80069a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80069aa:	1dda      	adds	r2, r3, #7
 80069ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2200      	movs	r2, #0
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	60fa      	str	r2, [r7, #12]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	68bc      	ldr	r4, [r7, #8]
 80069c6:	0623      	lsls	r3, r4, #24
 80069c8:	2200      	movs	r2, #0
 80069ca:	ea40 0402 	orr.w	r4, r0, r2
 80069ce:	603c      	str	r4, [r7, #0]
 80069d0:	430b      	orrs	r3, r1
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80069d8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->st_effort = u_st_effort.real;
 80069dc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80069e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80069e4:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
      offset += sizeof(this->st_effort);
 80069e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80069ec:	3308      	adds	r3, #8
 80069ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80069f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80069f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069f8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	18d0      	adds	r0, r2, r3
 8006a00:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006a04:	3348      	adds	r3, #72	@ 0x48
 8006a06:	2208      	movs	r2, #8
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f00b f9e3 	bl	8011dd4 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 8006a0e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8006a12:	3301      	adds	r3, #1
 8006a14:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8006a18:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f4ff aedd 	bcc.w	80067e2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x884>
      }
     return offset;
 8006a28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8006a32:	46bd      	mov	sp, r7
 8006a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a38 <_ZN11sensor_msgs10JointState7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/JointState"; };
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <_ZN11sensor_msgs10JointState7getTypeEv+0x14>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	08012060 	.word	0x08012060

08006a50 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    virtual const char * getMD5() override { return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	4b02      	ldr	r3, [pc, #8]	@ (8006a64 <_ZN11sensor_msgs10JointState6getMD5Ev+0x14>)
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	08012078 	.word	0x08012078

08006a68 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb fc4e 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8006a78:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
      linear(),
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3308      	adds	r3, #8
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fd fc86 	bl	8004394 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3328      	adds	r3, #40	@ 0x28
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fd fc81 	bl	8004394 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	080124a4 	.word	0x080124a4

08006aa0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f103 0008 	add.w	r0, r3, #8
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4413      	add	r3, r2
 8006aba:	4619      	mov	r1, r3
 8006abc:	f7fd fc92 	bl	80043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f7fd fc85 	bl	80043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
      return offset;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
    }
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 0008 	add.w	r0, r3, #8
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7fd fdde 	bl	80046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	4413      	add	r3, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	f7fd fdd1 	bl	80046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
     return offset;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
    }
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	4b02      	ldr	r3, [pc, #8]	@ (8006b4c <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	0801209c 	.word	0x0801209c

08006b50 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4b02      	ldr	r3, [pc, #8]	@ (8006b64 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr
 8006b64:	080120b0 	.word	0x080120b0

08006b68 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fb fbce 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8006b78:	4a08      	ldr	r2, [pc, #32]	@ (8006b9c <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
      translation(),
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3308      	adds	r3, #8
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fd fc06 	bl	8004394 <_ZN13geometry_msgs7Vector3C1Ev>
      rotation()
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fc fd47 	bl	8003620 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0801248c 	.word	0x0801248c

08006ba0 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f103 0008 	add.w	r0, r3, #8
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	4413      	add	r3, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f7fd fc12 	bl	80043e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f7fc fd51 	bl	800367c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
      return offset;
 8006be2:	68fb      	ldr	r3, [r7, #12]
    }
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f103 0008 	add.w	r0, r3, #8
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	4619      	mov	r1, r3
 8006c08:	f7fd fd5e 	bl	80046c8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7fc ff14 	bl	8003a4e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006c26:	4602      	mov	r2, r0
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
     return offset;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
    }
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	4b02      	ldr	r3, [pc, #8]	@ (8006c4c <_ZN13geometry_msgs9Transform7getTypeEv+0x14>)
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr
 8006c4c:	080120d4 	.word	0x080120d4

08006c50 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	4b02      	ldr	r3, [pc, #8]	@ (8006c64 <_ZN13geometry_msgs9Transform6getMD5Ev+0x14>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr
 8006c64:	080120ec 	.word	0x080120ec

08006c68 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fb fb4e 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8006c78:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
      header(),
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fc fb3c 	bl	8003300 <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a07      	ldr	r2, [pc, #28]	@ (8006ca8 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8006c8c:	619a      	str	r2, [r3, #24]
      transform()
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3320      	adds	r3, #32
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff68 	bl	8006b68 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08012474 	.word	0x08012474
 8006ca8:	08011edc 	.word	0x08011edc

08006cac <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	1d18      	adds	r0, r3, #4
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f7fc fb3b 	bl	8003340 <_ZNK8std_msgs6Header9serializeEPh>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7f9 faa6 	bl	8000228 <strlen>
 8006cdc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f002 fc5c 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	18d0      	adds	r0, r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f00b f868 	bl	8011dd4 <memcpy>
      offset += length_child_frame_id;
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f103 0020 	add.w	r0, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7ff ff41 	bl	8006ba0 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
      return offset;
 8006d26:	68fb      	ldr	r3, [r7, #12]
    }
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	1d18      	adds	r0, r3, #4
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f7fc fb91 	bl	8003470 <_ZN8std_msgs6Header11deserializeEPh>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4413      	add	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f107 030c 	add.w	r3, r7, #12
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f002 fc3c 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e00b      	b.n	8006d8c <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	441a      	add	r2, r3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	440b      	add	r3, r1
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3ed      	bcc.n	8006d74 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	441a      	add	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f103 0020 	add.w	r0, r3, #32
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7ff ff0f 	bl	8006bec <_ZN13geometry_msgs9Transform11deserializeEPh>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
     return offset;
 8006dd6:	693b      	ldr	r3, [r7, #16]
    }
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x14>)
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	08012110 	.word	0x08012110

08006df8 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	4b02      	ldr	r3, [pc, #8]	@ (8006e0c <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x14>)
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	08012130 	.word	0x08012130

08006e10 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7fc fbff 	bl	8003620 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  q.y = 0;
 8006e30:	68f9      	ldr	r1, [r7, #12]
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  q.z = sin(yaw * 0.5);
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8006e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e48:	f7f9 fbb2 	bl	80005b0 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4610      	mov	r0, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	f008 fc64 	bl	800f720 <sin>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	68f9      	ldr	r1, [r7, #12]
 8006e5e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  q.w = cos(yaw * 0.5);
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8006e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e6c:	f7f9 fba0 	bl	80005b0 <__aeabi_dmul>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4610      	mov	r0, r2
 8006e76:	4619      	mov	r1, r3
 8006e78:	f008 fc0c 	bl	800f694 <cos>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	e9c1 2308 	strd	r2, r3, [r1, #32]
  return q;
 8006e86:	bf00      	nop
}
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	3fe00000 	.word	0x3fe00000

08006e94 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fb fa38 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8006ea4:	4a09      	ldr	r2, [pc, #36]	@ (8006ecc <_ZN2tf9tfMessageC1Ev+0x38>)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fed7 	bl	8006c68 <_ZN13geometry_msgs16TransformStampedC1Ev>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	679a      	str	r2, [r3, #120]	@ 0x78
    {
    }
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	0801245c 	.word	0x0801245c

08006ed0 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6859      	ldr	r1, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	b2ca      	uxtb	r2, r1
 8006eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	0a19      	lsrs	r1, r3, #8
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	b2ca      	uxtb	r2, r1
 8006efc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	0c19      	lsrs	r1, r3, #16
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3302      	adds	r3, #2
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	b2ca      	uxtb	r2, r1
 8006f0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	0e19      	lsrs	r1, r3, #24
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3303      	adds	r3, #3
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	b2ca      	uxtb	r2, r1
 8006f20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3304      	adds	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	e01d      	b.n	8006f6a <_ZNK2tf9tfMessage9serializeEPh+0x9a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4613      	mov	r3, r2
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	18c8      	adds	r0, r1, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4613      	mov	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	440b      	add	r3, r1
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	440a      	add	r2, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4798      	blx	r3
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3dc      	bcc.n	8006f2e <_ZNK2tf9tfMessage9serializeEPh+0x5e>
      }
      return offset;
 8006f74:	68fb      	ldr	r3, [r7, #12]
    }
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4413      	add	r3, r2
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3302      	adds	r3, #2
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	061b      	lsls	r3, r3, #24
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d90c      	bls.n	8006ff6 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	f00a fe78 	bl	8011ce0 <realloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	679a      	str	r2, [r3, #120]	@ 0x78
      transforms_length = transforms_lengthT;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e01d      	b.n	800703e <_ZN2tf9tfMessage11deserializeEPh+0xc0>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f103 0008 	add.w	r0, r3, #8
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4413      	add	r3, r2
 800700e:	4619      	mov	r1, r3
 8007010:	f7ff fe8e 	bl	8006d30 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8007014:	4602      	mov	r2, r0
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	18c8      	adds	r0, r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3308      	adds	r3, #8
 8007030:	2270      	movs	r2, #112	@ 0x70
 8007032:	4619      	mov	r1, r3
 8007034:	f00a fece 	bl	8011dd4 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3dc      	bcc.n	8007002 <_ZN2tf9tfMessage11deserializeEPh+0x84>
      }
     return offset;
 8007048:	697b      	ldr	r3, [r7, #20]
    }
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	4b02      	ldr	r3, [pc, #8]	@ (8007068 <_ZN2tf9tfMessage7getTypeEv+0x14>)
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr
 8007068:	08012154 	.word	0x08012154

0800706c <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <_ZN2tf9tfMessage6getMD5Ev+0x14>)
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr
 8007080:	08012164 	.word	0x08012164

08007084 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ff00 	bl	8006e94 <_ZN2tf9tfMessageC1Ev>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	2300      	movs	r3, #0
 800709e:	4904      	ldr	r1, [pc, #16]	@ (80070b0 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 80070a0:	f7fb ff66 	bl	8002f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	08012188 	.word	0x08012188

080070b4 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:
  void init(ros::NodeHandle &nh)
  {
    nh.advertise(publisher_);
  }

  void sendTransform(geometry_msgs::TransformStamped &transform)
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	679a      	str	r2, [r3, #120]	@ 0x78
    publisher_.publish(&internal_msg);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3380      	adds	r3, #128	@ 0x80
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fb ff62 	bl	8002f9c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fb f912 	bl	8002314 <_ZN3ros3MsgC1Ev>
 80070f0:	4a0e      	ldr	r2, [pc, #56]	@ (800712c <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	601a      	str	r2, [r3, #0]
      x(0),
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	08012430 	.word	0x08012430

08007130 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007130:	b480      	push	{r7}
 8007132:	b08b      	sub	sp, #44	@ 0x2c
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007144:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8007148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800714c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800714e:	6838      	ldr	r0, [r7, #0]
 8007150:	4401      	add	r1, r0
 8007152:	b2d3      	uxtb	r3, r2
 8007154:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8007156:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	0a02      	lsrs	r2, r0, #8
 8007164:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007168:	0a0b      	lsrs	r3, r1, #8
 800716a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800716c:	3101      	adds	r1, #1
 800716e:	6838      	ldr	r0, [r7, #0]
 8007170:	4401      	add	r1, r0
 8007172:	b2d3      	uxtb	r3, r2
 8007174:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8007176:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	0c02      	lsrs	r2, r0, #16
 8007184:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007188:	0c0b      	lsrs	r3, r1, #16
 800718a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800718c:	3102      	adds	r1, #2
 800718e:	6838      	ldr	r0, [r7, #0]
 8007190:	4401      	add	r1, r0
 8007192:	b2d3      	uxtb	r3, r2
 8007194:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8007196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	0e02      	lsrs	r2, r0, #24
 80071a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80071a8:	0e0b      	lsrs	r3, r1, #24
 80071aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071ac:	3103      	adds	r1, #3
 80071ae:	6838      	ldr	r0, [r7, #0]
 80071b0:	4401      	add	r1, r0
 80071b2:	b2d3      	uxtb	r3, r2
 80071b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80071b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	000a      	movs	r2, r1
 80071c4:	2300      	movs	r3, #0
 80071c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071c8:	3104      	adds	r1, #4
 80071ca:	6838      	ldr	r0, [r7, #0]
 80071cc:	4401      	add	r1, r0
 80071ce:	b2d3      	uxtb	r3, r2
 80071d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80071d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	0a0a      	lsrs	r2, r1, #8
 80071e0:	2300      	movs	r3, #0
 80071e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e4:	3105      	adds	r1, #5
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	4401      	add	r1, r0
 80071ea:	b2d3      	uxtb	r3, r2
 80071ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80071ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	0c0a      	lsrs	r2, r1, #16
 80071fc:	2300      	movs	r3, #0
 80071fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007200:	3106      	adds	r1, #6
 8007202:	6838      	ldr	r0, [r7, #0]
 8007204:	4401      	add	r1, r0
 8007206:	b2d3      	uxtb	r3, r2
 8007208:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800720a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	0e0a      	lsrs	r2, r1, #24
 8007218:	2300      	movs	r3, #0
 800721a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800721c:	3107      	adds	r1, #7
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	4401      	add	r1, r0
 8007222:	b2d3      	uxtb	r3, r2
 8007224:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	3308      	adds	r3, #8
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007232:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8007236:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800723a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800723c:	6838      	ldr	r0, [r7, #0]
 800723e:	4401      	add	r1, r0
 8007240:	b2d3      	uxtb	r3, r2
 8007242:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8007244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	0a02      	lsrs	r2, r0, #8
 8007252:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007256:	0a0b      	lsrs	r3, r1, #8
 8007258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800725a:	3101      	adds	r1, #1
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	4401      	add	r1, r0
 8007260:	b2d3      	uxtb	r3, r2
 8007262:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8007264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	0c02      	lsrs	r2, r0, #16
 8007272:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007276:	0c0b      	lsrs	r3, r1, #16
 8007278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800727a:	3102      	adds	r1, #2
 800727c:	6838      	ldr	r0, [r7, #0]
 800727e:	4401      	add	r1, r0
 8007280:	b2d3      	uxtb	r3, r2
 8007282:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8007284:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	0e02      	lsrs	r2, r0, #24
 8007292:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007296:	0e0b      	lsrs	r3, r1, #24
 8007298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800729a:	3103      	adds	r1, #3
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	4401      	add	r1, r0
 80072a0:	b2d3      	uxtb	r3, r2
 80072a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80072a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	000a      	movs	r2, r1
 80072b2:	2300      	movs	r3, #0
 80072b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072b6:	3104      	adds	r1, #4
 80072b8:	6838      	ldr	r0, [r7, #0]
 80072ba:	4401      	add	r1, r0
 80072bc:	b2d3      	uxtb	r3, r2
 80072be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80072c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	0a0a      	lsrs	r2, r1, #8
 80072ce:	2300      	movs	r3, #0
 80072d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072d2:	3105      	adds	r1, #5
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	4401      	add	r1, r0
 80072d8:	b2d3      	uxtb	r3, r2
 80072da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80072dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	0c0a      	lsrs	r2, r1, #16
 80072ea:	2300      	movs	r3, #0
 80072ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ee:	3106      	adds	r1, #6
 80072f0:	6838      	ldr	r0, [r7, #0]
 80072f2:	4401      	add	r1, r0
 80072f4:	b2d3      	uxtb	r3, r2
 80072f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80072f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	0e0a      	lsrs	r2, r1, #24
 8007306:	2300      	movs	r3, #0
 8007308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800730a:	3107      	adds	r1, #7
 800730c:	6838      	ldr	r0, [r7, #0]
 800730e:	4401      	add	r1, r0
 8007310:	b2d3      	uxtb	r3, r2
 8007312:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	3308      	adds	r3, #8
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007320:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8007324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	4401      	add	r1, r0
 800732e:	b2d3      	uxtb	r3, r2
 8007330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8007332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	0a02      	lsrs	r2, r0, #8
 8007340:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007344:	0a0b      	lsrs	r3, r1, #8
 8007346:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007348:	3101      	adds	r1, #1
 800734a:	6838      	ldr	r0, [r7, #0]
 800734c:	4401      	add	r1, r0
 800734e:	b2d3      	uxtb	r3, r2
 8007350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8007352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	0c02      	lsrs	r2, r0, #16
 8007360:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007364:	0c0b      	lsrs	r3, r1, #16
 8007366:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007368:	3102      	adds	r1, #2
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	4401      	add	r1, r0
 800736e:	b2d3      	uxtb	r3, r2
 8007370:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8007372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	0e02      	lsrs	r2, r0, #24
 8007380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007384:	0e0b      	lsrs	r3, r1, #24
 8007386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007388:	3103      	adds	r1, #3
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	4401      	add	r1, r0
 800738e:	b2d3      	uxtb	r3, r2
 8007390:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8007392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	000a      	movs	r2, r1
 80073a0:	2300      	movs	r3, #0
 80073a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073a4:	3104      	adds	r1, #4
 80073a6:	6838      	ldr	r0, [r7, #0]
 80073a8:	4401      	add	r1, r0
 80073aa:	b2d3      	uxtb	r3, r2
 80073ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80073ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	0a0a      	lsrs	r2, r1, #8
 80073bc:	2300      	movs	r3, #0
 80073be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c0:	3105      	adds	r1, #5
 80073c2:	6838      	ldr	r0, [r7, #0]
 80073c4:	4401      	add	r1, r0
 80073c6:	b2d3      	uxtb	r3, r2
 80073c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80073ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	0c0a      	lsrs	r2, r1, #16
 80073d8:	2300      	movs	r3, #0
 80073da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073dc:	3106      	adds	r1, #6
 80073de:	6838      	ldr	r0, [r7, #0]
 80073e0:	4401      	add	r1, r0
 80073e2:	b2d3      	uxtb	r3, r2
 80073e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80073e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	0e0a      	lsrs	r2, r1, #24
 80073f4:	2300      	movs	r3, #0
 80073f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073f8:	3107      	adds	r1, #7
 80073fa:	6838      	ldr	r0, [r7, #0]
 80073fc:	4401      	add	r1, r0
 80073fe:	b2d3      	uxtb	r3, r2
 8007400:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	3308      	adds	r3, #8
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800740a:	4618      	mov	r0, r3
 800740c:	372c      	adds	r7, #44	@ 0x2c
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007414:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007418:	b0eb      	sub	sp, #428	@ 0x1ac
 800741a:	af00      	add	r7, sp, #0
 800741c:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8007420:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007436:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800743a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800743e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007442:	4413      	add	r3, r2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2200      	movs	r2, #0
 800744a:	461c      	mov	r4, r3
 800744c:	4615      	mov	r5, r2
 800744e:	ea40 0804 	orr.w	r8, r0, r4
 8007452:	ea41 0905 	orr.w	r9, r1, r5
 8007456:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800745a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800745e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007468:	4413      	add	r3, r2
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2200      	movs	r2, #0
 8007470:	469a      	mov	sl, r3
 8007472:	4693      	mov	fp, r2
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8007480:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8007484:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8007488:	ea40 0402 	orr.w	r4, r0, r2
 800748c:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8007490:	430b      	orrs	r3, r1
 8007492:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8007496:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800749a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800749e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80074a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80074ac:	4413      	add	r3, r2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80074b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80074c8:	464c      	mov	r4, r9
 80074ca:	0423      	lsls	r3, r4, #16
 80074cc:	46c4      	mov	ip, r8
 80074ce:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80074d2:	4644      	mov	r4, r8
 80074d4:	0422      	lsls	r2, r4, #16
 80074d6:	ea40 0402 	orr.w	r4, r0, r2
 80074da:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80074de:	430b      	orrs	r3, r1
 80074e0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80074e4:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80074e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80074ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80074f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80074f4:	1cda      	adds	r2, r3, #3
 80074f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2200      	movs	r2, #0
 8007502:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8007506:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800750a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800750e:	4623      	mov	r3, r4
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8007516:	4623      	mov	r3, r4
 8007518:	061b      	lsls	r3, r3, #24
 800751a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800751e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8007522:	461a      	mov	r2, r3
 8007524:	4302      	orrs	r2, r0
 8007526:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800752a:	4623      	mov	r3, r4
 800752c:	430b      	orrs	r3, r1
 800752e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007532:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8007536:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800753a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800753e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007548:	4413      	add	r3, r2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2200      	movs	r2, #0
 8007550:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8007554:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8007564:	0023      	movs	r3, r4
 8007566:	2200      	movs	r2, #0
 8007568:	ea40 0402 	orr.w	r4, r0, r2
 800756c:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8007570:	430b      	orrs	r3, r1
 8007572:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007576:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 800757a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800757e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007582:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007586:	1d5a      	adds	r2, r3, #5
 8007588:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800758c:	4413      	add	r3, r2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007598:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80075a8:	0223      	lsls	r3, r4, #8
 80075aa:	2200      	movs	r2, #0
 80075ac:	ea40 0402 	orr.w	r4, r0, r2
 80075b0:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80075b4:	430b      	orrs	r3, r1
 80075b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80075ba:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80075be:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80075c2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80075c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80075ca:	1d9a      	adds	r2, r3, #6
 80075cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80075d0:	4413      	add	r3, r2
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80075dc:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80075ec:	0423      	lsls	r3, r4, #16
 80075ee:	2200      	movs	r2, #0
 80075f0:	ea40 0402 	orr.w	r4, r0, r2
 80075f4:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80075f8:	430b      	orrs	r3, r1
 80075fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80075fe:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8007602:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007606:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800760a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800760e:	1dda      	adds	r2, r3, #7
 8007610:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007620:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8007630:	0623      	lsls	r3, r4, #24
 8007632:	2200      	movs	r2, #0
 8007634:	ea40 0402 	orr.w	r4, r0, r2
 8007638:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800763c:	430b      	orrs	r3, r1
 800763e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007642:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8007646:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 800764a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800764e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8007652:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8007656:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800765a:	3308      	adds	r3, #8
 800765c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800766c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007670:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8007674:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2200      	movs	r2, #0
 8007680:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007684:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8007688:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 800768c:	461a      	mov	r2, r3
 800768e:	4302      	orrs	r2, r0
 8007690:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8007694:	4623      	mov	r3, r4
 8007696:	430b      	orrs	r3, r1
 8007698:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800769c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80076a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80076a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80076a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80076b2:	4413      	add	r3, r2
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076be:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80076ce:	464c      	mov	r4, r9
 80076d0:	0223      	lsls	r3, r4, #8
 80076d2:	46c4      	mov	ip, r8
 80076d4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80076d8:	4644      	mov	r4, r8
 80076da:	0222      	lsls	r2, r4, #8
 80076dc:	ea40 0402 	orr.w	r4, r0, r2
 80076e0:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80076e4:	430b      	orrs	r3, r1
 80076e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076ea:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80076ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80076f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80076f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80076fa:	1c9a      	adds	r2, r3, #2
 80076fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007700:	4413      	add	r3, r2
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800770c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800771c:	464c      	mov	r4, r9
 800771e:	0423      	lsls	r3, r4, #16
 8007720:	46c4      	mov	ip, r8
 8007722:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8007726:	4644      	mov	r4, r8
 8007728:	0422      	lsls	r2, r4, #16
 800772a:	ea40 0402 	orr.w	r4, r0, r2
 800772e:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8007732:	430b      	orrs	r3, r1
 8007734:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007738:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800773c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007740:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007744:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007748:	1cda      	adds	r2, r3, #3
 800774a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800774e:	4413      	add	r3, r2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2200      	movs	r2, #0
 8007756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800775a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800775e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8007762:	4623      	mov	r3, r4
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800776a:	4623      	mov	r3, r4
 800776c:	061b      	lsls	r3, r3, #24
 800776e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007772:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8007776:	461a      	mov	r2, r3
 8007778:	4302      	orrs	r2, r0
 800777a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800777e:	4623      	mov	r3, r4
 8007780:	430b      	orrs	r3, r1
 8007782:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007786:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800778a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800778e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007792:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007796:	1d1a      	adds	r2, r3, #4
 8007798:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800779c:	4413      	add	r3, r2
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80077b8:	0023      	movs	r3, r4
 80077ba:	2200      	movs	r2, #0
 80077bc:	ea40 0402 	orr.w	r4, r0, r2
 80077c0:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80077c4:	430b      	orrs	r3, r1
 80077c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80077ca:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80077ce:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80077d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80077d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80077da:	1d5a      	adds	r2, r3, #5
 80077dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80077e0:	4413      	add	r3, r2
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077ec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80077fc:	0223      	lsls	r3, r4, #8
 80077fe:	2200      	movs	r2, #0
 8007800:	ea40 0402 	orr.w	r4, r0, r2
 8007804:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8007808:	430b      	orrs	r3, r1
 800780a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800780e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8007812:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007816:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800781a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800781e:	1d9a      	adds	r2, r3, #6
 8007820:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007824:	4413      	add	r3, r2
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007830:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8007840:	0423      	lsls	r3, r4, #16
 8007842:	2200      	movs	r2, #0
 8007844:	ea40 0402 	orr.w	r4, r0, r2
 8007848:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 800784c:	430b      	orrs	r3, r1
 800784e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007852:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8007856:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800785a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800785e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007862:	1dda      	adds	r2, r3, #7
 8007864:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007868:	4413      	add	r3, r2
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007874:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8007884:	0623      	lsls	r3, r4, #24
 8007886:	2200      	movs	r2, #0
 8007888:	ea40 0402 	orr.w	r4, r0, r2
 800788c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8007890:	430b      	orrs	r3, r1
 8007892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007896:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800789a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 800789e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80078a2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80078a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80078aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80078ae:	3308      	adds	r3, #8
 80078b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80078c0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80078c4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80078c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80078cc:	4413      	add	r3, r2
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80078dc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80078e0:	461a      	mov	r2, r3
 80078e2:	4302      	orrs	r2, r0
 80078e4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80078e6:	4623      	mov	r3, r4
 80078e8:	430b      	orrs	r3, r1
 80078ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078ec:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80078f0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80078f4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80078f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007902:	4413      	add	r3, r2
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2200      	movs	r2, #0
 800790a:	673b      	str	r3, [r7, #112]	@ 0x70
 800790c:	677a      	str	r2, [r7, #116]	@ 0x74
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800791a:	464c      	mov	r4, r9
 800791c:	0223      	lsls	r3, r4, #8
 800791e:	46c4      	mov	ip, r8
 8007920:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8007924:	4644      	mov	r4, r8
 8007926:	0222      	lsls	r2, r4, #8
 8007928:	ea40 0402 	orr.w	r4, r0, r2
 800792c:	66bc      	str	r4, [r7, #104]	@ 0x68
 800792e:	430b      	orrs	r3, r1
 8007930:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007932:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8007936:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800793a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800793e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2200      	movs	r2, #0
 8007950:	663b      	str	r3, [r7, #96]	@ 0x60
 8007952:	667a      	str	r2, [r7, #100]	@ 0x64
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007960:	464c      	mov	r4, r9
 8007962:	0423      	lsls	r3, r4, #16
 8007964:	46c4      	mov	ip, r8
 8007966:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800796a:	4644      	mov	r4, r8
 800796c:	0422      	lsls	r2, r4, #16
 800796e:	ea40 0402 	orr.w	r4, r0, r2
 8007972:	65bc      	str	r4, [r7, #88]	@ 0x58
 8007974:	430b      	orrs	r3, r1
 8007976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007978:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800797c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007980:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007984:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007988:	1cda      	adds	r2, r3, #3
 800798a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800798e:	4413      	add	r3, r2
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2200      	movs	r2, #0
 8007996:	653b      	str	r3, [r7, #80]	@ 0x50
 8007998:	657a      	str	r2, [r7, #84]	@ 0x54
 800799a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800799e:	4623      	mov	r3, r4
 80079a0:	0a1b      	lsrs	r3, r3, #8
 80079a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a4:	4623      	mov	r3, r4
 80079a6:	061b      	lsls	r3, r3, #24
 80079a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079aa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80079ae:	461a      	mov	r2, r3
 80079b0:	4302      	orrs	r2, r0
 80079b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80079b4:	4623      	mov	r3, r4
 80079b6:	430b      	orrs	r3, r1
 80079b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80079be:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80079c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80079c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2200      	movs	r2, #0
 80079d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079da:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80079e6:	0023      	movs	r3, r4
 80079e8:	2200      	movs	r2, #0
 80079ea:	ea40 0402 	orr.w	r4, r0, r2
 80079ee:	633c      	str	r4, [r7, #48]	@ 0x30
 80079f0:	430b      	orrs	r3, r1
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80079f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80079fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007a00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007a04:	1d5a      	adds	r2, r3, #5
 8007a06:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007a0a:	4413      	add	r3, r2
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2200      	movs	r2, #0
 8007a12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8007a20:	0223      	lsls	r3, r4, #8
 8007a22:	2200      	movs	r2, #0
 8007a24:	ea40 0402 	orr.w	r4, r0, r2
 8007a28:	623c      	str	r4, [r7, #32]
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a2e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007a32:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007a36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007a3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007a3e:	3306      	adds	r3, #6
 8007a40:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007a44:	4413      	add	r3, r2
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	61fa      	str	r2, [r7, #28]
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	69bc      	ldr	r4, [r7, #24]
 8007a5a:	0423      	lsls	r3, r4, #16
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	ea40 0402 	orr.w	r4, r0, r2
 8007a62:	613c      	str	r4, [r7, #16]
 8007a64:	430b      	orrs	r3, r1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007a6c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007a70:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007a74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007a78:	3307      	adds	r3, #7
 8007a7a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007a7e:	4413      	add	r3, r2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2200      	movs	r2, #0
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	60fa      	str	r2, [r7, #12]
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	68bc      	ldr	r4, [r7, #8]
 8007a94:	0623      	lsls	r3, r4, #24
 8007a96:	2200      	movs	r2, #0
 8007a98:	ea40 0402 	orr.w	r4, r0, r2
 8007a9c:	603c      	str	r4, [r7, #0]
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007aa6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8007aaa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8007aae:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8007ab2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8007ab6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007aba:	3308      	adds	r3, #8
 8007abc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8007ac0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8007aca:	46bd      	mov	sp, r7
 8007acc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007ad0:	4770      	bx	lr
	...

08007ad4 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	4b02      	ldr	r3, [pc, #8]	@ (8007ae8 <_ZN13geometry_msgs5Point7getTypeEv+0x14>)
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr
 8007ae8:	0801218c 	.word	0x0801218c

08007aec <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	4b02      	ldr	r3, [pc, #8]	@ (8007b00 <_ZN13geometry_msgs5Point6getMD5Ev+0x14>)
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr
 8007b00:	08012008 	.word	0x08012008

08007b04 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa fc00 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8007b14:	4a08      	ldr	r2, [pc, #32]	@ (8007b38 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
      position(),
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fade 	bl	80070e0 <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3328      	adds	r3, #40	@ 0x28
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fb fd79 	bl	8003620 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	08012418 	.word	0x08012418

08007b3c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f103 0008 	add.w	r0, r3, #8
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	4619      	mov	r1, r3
 8007b58:	f7ff faea 	bl	8007130 <_ZNK13geometry_msgs5Point9serializeEPh>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	4413      	add	r3, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	f7fb fd83 	bl	800367c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8007b76:	4602      	mov	r2, r0
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
      return offset;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
    }
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f103 0008 	add.w	r0, r3, #8
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f7ff fc36 	bl	8007414 <_ZN13geometry_msgs5Point11deserializeEPh>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	4413      	add	r3, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f7fb ff46 	bl	8003a4e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
     return offset;
 8007bca:	68fb      	ldr	r3, [r7, #12]
    }
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	4b02      	ldr	r3, [pc, #8]	@ (8007be8 <_ZN13geometry_msgs4Pose7getTypeEv+0x14>)
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr
 8007be8:	080121a0 	.word	0x080121a0

08007bec <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	4b02      	ldr	r3, [pc, #8]	@ (8007c00 <_ZN13geometry_msgs4Pose6getMD5Ev+0x14>)
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr
 8007c00:	080121b4 	.word	0x080121b4

08007c04 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fa fb80 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8007c14:	4a0d      	ldr	r2, [pc, #52]	@ (8007c4c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
      pose(),
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff ff70 	bl	8007b04 <_ZN13geometry_msgs4PoseC1Ev>
      covariance()
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8007c2a:	2323      	movs	r3, #35	@ 0x23
 8007c2c:	e007      	b.n	8007c3e <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3a>
 8007c2e:	f04f 0000 	mov.w	r0, #0
 8007c32:	f04f 0100 	mov.w	r1, #0
 8007c36:	e9c2 0100 	strd	r0, r1, [r2]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	3208      	adds	r2, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	daf5      	bge.n	8007c2e <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x2a>
    {
    }
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08012400 	.word	0x08012400

08007c50 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f103 0008 	add.w	r0, r3, #8
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f7ff ff66 	bl	8007b3c <_ZNK13geometry_msgs4Pose9serializeEPh>
 8007c70:	4602      	mov	r2, r0
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007c78:	2300      	movs	r3, #0
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	e07d      	b.n	8007d7a <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	330b      	adds	r3, #11
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c94:	6979      	ldr	r1, [r7, #20]
 8007c96:	6838      	ldr	r0, [r7, #0]
 8007c98:	4401      	add	r1, r0
 8007c9a:	b2d3      	uxtb	r3, r2
 8007c9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8007c9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	0a02      	lsrs	r2, r0, #8
 8007cac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007cb0:	0a0b      	lsrs	r3, r1, #8
 8007cb2:	6979      	ldr	r1, [r7, #20]
 8007cb4:	3101      	adds	r1, #1
 8007cb6:	6838      	ldr	r0, [r7, #0]
 8007cb8:	4401      	add	r1, r0
 8007cba:	b2d3      	uxtb	r3, r2
 8007cbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8007cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	0c02      	lsrs	r2, r0, #16
 8007ccc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007cd0:	0c0b      	lsrs	r3, r1, #16
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	3102      	adds	r1, #2
 8007cd6:	6838      	ldr	r0, [r7, #0]
 8007cd8:	4401      	add	r1, r0
 8007cda:	b2d3      	uxtb	r3, r2
 8007cdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8007cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	0e02      	lsrs	r2, r0, #24
 8007cec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cf0:	0e0b      	lsrs	r3, r1, #24
 8007cf2:	6979      	ldr	r1, [r7, #20]
 8007cf4:	3103      	adds	r1, #3
 8007cf6:	6838      	ldr	r0, [r7, #0]
 8007cf8:	4401      	add	r1, r0
 8007cfa:	b2d3      	uxtb	r3, r2
 8007cfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8007cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	000a      	movs	r2, r1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	3104      	adds	r1, #4
 8007d12:	6838      	ldr	r0, [r7, #0]
 8007d14:	4401      	add	r1, r0
 8007d16:	b2d3      	uxtb	r3, r2
 8007d18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8007d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	0a0a      	lsrs	r2, r1, #8
 8007d28:	2300      	movs	r3, #0
 8007d2a:	6979      	ldr	r1, [r7, #20]
 8007d2c:	3105      	adds	r1, #5
 8007d2e:	6838      	ldr	r0, [r7, #0]
 8007d30:	4401      	add	r1, r0
 8007d32:	b2d3      	uxtb	r3, r2
 8007d34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8007d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	0c0a      	lsrs	r2, r1, #16
 8007d44:	2300      	movs	r3, #0
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	3106      	adds	r1, #6
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	4401      	add	r1, r0
 8007d4e:	b2d3      	uxtb	r3, r2
 8007d50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8007d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	0e0a      	lsrs	r2, r1, #24
 8007d60:	2300      	movs	r3, #0
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	3107      	adds	r1, #7
 8007d66:	6838      	ldr	r0, [r7, #0]
 8007d68:	4401      	add	r1, r0
 8007d6a:	b2d3      	uxtb	r3, r2
 8007d6c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3308      	adds	r3, #8
 8007d72:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3301      	adds	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b23      	cmp	r3, #35	@ 0x23
 8007d7e:	f67f af7e 	bls.w	8007c7e <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 8007d82:	697b      	ldr	r3, [r7, #20]
    }
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	b0a3      	sub	sp, #140	@ 0x8c
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6778      	str	r0, [r7, #116]	@ 0x74
 8007d96:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->pose.deserialize(inbuffer + offset);
 8007d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da0:	f103 0008 	add.w	r0, r3, #8
 8007da4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007daa:	4413      	add	r3, r2
 8007dac:	4619      	mov	r1, r3
 8007dae:	f7ff feeb 	bl	8007b88 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007db8:	4413      	add	r3, r2
 8007dba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dc4:	e0f7      	b.n	8007fb6 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	f04f 0300 	mov.w	r3, #0
 8007dce:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007dd2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007dd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ddc:	4413      	add	r3, r2
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007de6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007de8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007dec:	4616      	mov	r6, r2
 8007dee:	4306      	orrs	r6, r0
 8007df0:	65be      	str	r6, [r7, #88]	@ 0x58
 8007df2:	430b      	orrs	r3, r1
 8007df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dfa:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007dfe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e0a:	4413      	add	r3, r2
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	469a      	mov	sl, r3
 8007e14:	4693      	mov	fp, r2
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8007e22:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8007e26:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8007e2a:	ea40 0602 	orr.w	r6, r0, r2
 8007e2e:	653e      	str	r6, [r7, #80]	@ 0x50
 8007e30:	430b      	orrs	r3, r1
 8007e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e38:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007e3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e48:	4413      	add	r3, r2
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4698      	mov	r8, r3
 8007e52:	4691      	mov	r9, r2
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8007e60:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007e64:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8007e68:	ea40 0602 	orr.w	r6, r0, r2
 8007e6c:	64be      	str	r6, [r7, #72]	@ 0x48
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e76:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007e7a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e82:	1cda      	adds	r2, r3, #3
 8007e84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e86:	4413      	add	r3, r2
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e94:	0a1d      	lsrs	r5, r3, #8
 8007e96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e98:	061c      	lsls	r4, r3, #24
 8007e9a:	ea40 0304 	orr.w	r3, r0, r4
 8007e9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ea0:	ea41 0305 	orr.w	r3, r1, r5
 8007ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007eaa:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007eae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eba:	4413      	add	r3, r2
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007ed0:	0033      	movs	r3, r6
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	ea40 0602 	orr.w	r6, r0, r2
 8007ed8:	633e      	str	r6, [r7, #48]	@ 0x30
 8007eda:	430b      	orrs	r3, r1
 8007edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ede:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007ee2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007ee6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eee:	1d5a      	adds	r2, r3, #5
 8007ef0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ef2:	4413      	add	r3, r2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2200      	movs	r2, #0
 8007efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8007f08:	0233      	lsls	r3, r6, #8
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	ea40 0602 	orr.w	r6, r0, r2
 8007f10:	623e      	str	r6, [r7, #32]
 8007f12:	430b      	orrs	r3, r1
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f1a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007f1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f26:	1d9a      	adds	r2, r3, #6
 8007f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f2a:	4413      	add	r3, r2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2200      	movs	r2, #0
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	61fa      	str	r2, [r7, #28]
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	69be      	ldr	r6, [r7, #24]
 8007f40:	0433      	lsls	r3, r6, #16
 8007f42:	2200      	movs	r2, #0
 8007f44:	ea40 0602 	orr.w	r6, r0, r2
 8007f48:	613e      	str	r6, [r7, #16]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f52:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007f56:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f5e:	1dda      	adds	r2, r3, #7
 8007f60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f62:	4413      	add	r3, r2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60bb      	str	r3, [r7, #8]
 8007f6c:	60fa      	str	r2, [r7, #12]
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	68be      	ldr	r6, [r7, #8]
 8007f78:	0633      	lsls	r3, r6, #24
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	ea40 0602 	orr.w	r6, r0, r2
 8007f80:	603e      	str	r6, [r7, #0]
 8007f82:	430b      	orrs	r3, r1
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 8007f8e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007f92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f98:	330b      	adds	r3, #11
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 8007fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fba:	2b23      	cmp	r3, #35	@ 0x23
 8007fbc:	f67f af03 	bls.w	8007dc6 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 8007fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	378c      	adds	r7, #140	@ 0x8c
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007fd0 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	4b02      	ldr	r3, [pc, #8]	@ (8007fe4 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x14>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr
 8007fe4:	080121d8 	.word	0x080121d8

08007fe8 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x14>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	080121fc 	.word	0x080121fc

08008000 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4618      	mov	r0, r3
 800800c:	f7fa f982 	bl	8002314 <_ZN3ros3MsgC1Ev>
 8008010:	4a0d      	ldr	r2, [pc, #52]	@ (8008048 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	601a      	str	r2, [r3, #0]
      twist(),
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3308      	adds	r3, #8
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fd24 	bl	8006a68 <_ZN13geometry_msgs5TwistC1Ev>
      covariance()
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8008026:	2323      	movs	r3, #35	@ 0x23
 8008028:	e007      	b.n	800803a <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3a>
 800802a:	f04f 0000 	mov.w	r0, #0
 800802e:	f04f 0100 	mov.w	r1, #0
 8008032:	e9c2 0100 	strd	r0, r1, [r2]
 8008036:	3b01      	subs	r3, #1
 8008038:	3208      	adds	r2, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	daf5      	bge.n	800802a <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x2a>
    {
    }
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	080123e8 	.word	0x080123e8

0800804c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f103 0008 	add.w	r0, r3, #8
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4413      	add	r3, r2
 8008066:	4619      	mov	r1, r3
 8008068:	f7fe fd1a 	bl	8006aa0 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800806c:	4602      	mov	r2, r0
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	4413      	add	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	e07d      	b.n	8008176 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	330a      	adds	r3, #10
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 800808c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008090:	6979      	ldr	r1, [r7, #20]
 8008092:	6838      	ldr	r0, [r7, #0]
 8008094:	4401      	add	r1, r0
 8008096:	b2d3      	uxtb	r3, r2
 8008098:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800809a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	f04f 0300 	mov.w	r3, #0
 80080a6:	0a02      	lsrs	r2, r0, #8
 80080a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80080ac:	0a0b      	lsrs	r3, r1, #8
 80080ae:	6979      	ldr	r1, [r7, #20]
 80080b0:	3101      	adds	r1, #1
 80080b2:	6838      	ldr	r0, [r7, #0]
 80080b4:	4401      	add	r1, r0
 80080b6:	b2d3      	uxtb	r3, r2
 80080b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 80080ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	0c02      	lsrs	r2, r0, #16
 80080c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80080cc:	0c0b      	lsrs	r3, r1, #16
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	3102      	adds	r1, #2
 80080d2:	6838      	ldr	r0, [r7, #0]
 80080d4:	4401      	add	r1, r0
 80080d6:	b2d3      	uxtb	r3, r2
 80080d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 80080da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	0e02      	lsrs	r2, r0, #24
 80080e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80080ec:	0e0b      	lsrs	r3, r1, #24
 80080ee:	6979      	ldr	r1, [r7, #20]
 80080f0:	3103      	adds	r1, #3
 80080f2:	6838      	ldr	r0, [r7, #0]
 80080f4:	4401      	add	r1, r0
 80080f6:	b2d3      	uxtb	r3, r2
 80080f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 80080fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	000a      	movs	r2, r1
 8008108:	2300      	movs	r3, #0
 800810a:	6979      	ldr	r1, [r7, #20]
 800810c:	3104      	adds	r1, #4
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	4401      	add	r1, r0
 8008112:	b2d3      	uxtb	r3, r2
 8008114:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8008116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	f04f 0300 	mov.w	r3, #0
 8008122:	0a0a      	lsrs	r2, r1, #8
 8008124:	2300      	movs	r3, #0
 8008126:	6979      	ldr	r1, [r7, #20]
 8008128:	3105      	adds	r1, #5
 800812a:	6838      	ldr	r0, [r7, #0]
 800812c:	4401      	add	r1, r0
 800812e:	b2d3      	uxtb	r3, r2
 8008130:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8008132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	0c0a      	lsrs	r2, r1, #16
 8008140:	2300      	movs	r3, #0
 8008142:	6979      	ldr	r1, [r7, #20]
 8008144:	3106      	adds	r1, #6
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	4401      	add	r1, r0
 800814a:	b2d3      	uxtb	r3, r2
 800814c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 800814e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	0e0a      	lsrs	r2, r1, #24
 800815c:	2300      	movs	r3, #0
 800815e:	6979      	ldr	r1, [r7, #20]
 8008160:	3107      	adds	r1, #7
 8008162:	6838      	ldr	r0, [r7, #0]
 8008164:	4401      	add	r1, r0
 8008166:	b2d3      	uxtb	r3, r2
 8008168:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	3308      	adds	r3, #8
 800816e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3301      	adds	r3, #1
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b23      	cmp	r3, #35	@ 0x23
 800817a:	f67f af7e 	bls.w	800807a <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 800817e:	697b      	ldr	r3, [r7, #20]
    }
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	b0a3      	sub	sp, #140	@ 0x8c
 800818e:	af00      	add	r7, sp, #0
 8008190:	6778      	str	r0, [r7, #116]	@ 0x74
 8008192:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->twist.deserialize(inbuffer + offset);
 800819a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800819c:	f103 0008 	add.w	r0, r3, #8
 80081a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80081a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081a6:	4413      	add	r3, r2
 80081a8:	4619      	mov	r1, r3
 80081aa:	f7fe fc9f 	bl	8006aec <_ZN13geometry_msgs5Twist11deserializeEPh>
 80081ae:	4602      	mov	r2, r0
 80081b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081b4:	4413      	add	r3, r2
 80081b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80081ba:	2300      	movs	r3, #0
 80081bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081c0:	e0f7      	b.n	80083b2 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80081ce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80081d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80081d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081d8:	4413      	add	r3, r2
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2200      	movs	r2, #0
 80081e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80081e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80081e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80081e8:	4616      	mov	r6, r2
 80081ea:	4306      	orrs	r6, r0
 80081ec:	65be      	str	r6, [r7, #88]	@ 0x58
 80081ee:	430b      	orrs	r3, r1
 80081f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081f6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80081fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80081fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008206:	4413      	add	r3, r2
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2200      	movs	r2, #0
 800820e:	469a      	mov	sl, r3
 8008210:	4693      	mov	fp, r2
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800821e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8008222:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8008226:	ea40 0602 	orr.w	r6, r0, r2
 800822a:	653e      	str	r6, [r7, #80]	@ 0x50
 800822c:	430b      	orrs	r3, r1
 800822e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008234:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008238:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800823c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008240:	1c9a      	adds	r2, r3, #2
 8008242:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008244:	4413      	add	r3, r2
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2200      	movs	r2, #0
 800824c:	4698      	mov	r8, r3
 800824e:	4691      	mov	r9, r2
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800825c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8008260:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8008264:	ea40 0602 	orr.w	r6, r0, r2
 8008268:	64be      	str	r6, [r7, #72]	@ 0x48
 800826a:	430b      	orrs	r3, r1
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800826e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008272:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008276:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800827a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800827e:	1cda      	adds	r2, r3, #3
 8008280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008282:	4413      	add	r3, r2
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2200      	movs	r2, #0
 800828a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800828c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800828e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008290:	0a1d      	lsrs	r5, r3, #8
 8008292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008294:	061c      	lsls	r4, r3, #24
 8008296:	ea40 0304 	orr.w	r3, r0, r4
 800829a:	643b      	str	r3, [r7, #64]	@ 0x40
 800829c:	ea41 0305 	orr.w	r3, r1, r5
 80082a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082a6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80082aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80082ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082b2:	1d1a      	adds	r2, r3, #4
 80082b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082b6:	4413      	add	r3, r2
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2200      	movs	r2, #0
 80082be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80082cc:	0033      	movs	r3, r6
 80082ce:	2200      	movs	r2, #0
 80082d0:	ea40 0602 	orr.w	r6, r0, r2
 80082d4:	633e      	str	r6, [r7, #48]	@ 0x30
 80082d6:	430b      	orrs	r3, r1
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80082de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80082e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80082e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082ea:	1d5a      	adds	r2, r3, #5
 80082ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082ee:	4413      	add	r3, r2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2200      	movs	r2, #0
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8008304:	0233      	lsls	r3, r6, #8
 8008306:	2200      	movs	r2, #0
 8008308:	ea40 0602 	orr.w	r6, r0, r2
 800830c:	623e      	str	r6, [r7, #32]
 800830e:	430b      	orrs	r3, r1
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008316:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800831a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800831e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008322:	1d9a      	adds	r2, r3, #6
 8008324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008326:	4413      	add	r3, r2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2200      	movs	r2, #0
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	61fa      	str	r2, [r7, #28]
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	69be      	ldr	r6, [r7, #24]
 800833c:	0433      	lsls	r3, r6, #16
 800833e:	2200      	movs	r2, #0
 8008340:	ea40 0602 	orr.w	r6, r0, r2
 8008344:	613e      	str	r6, [r7, #16]
 8008346:	430b      	orrs	r3, r1
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800834e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8008352:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800835a:	1dda      	adds	r2, r3, #7
 800835c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800835e:	4413      	add	r3, r2
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2200      	movs	r2, #0
 8008366:	60bb      	str	r3, [r7, #8]
 8008368:	60fa      	str	r2, [r7, #12]
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	68be      	ldr	r6, [r7, #8]
 8008374:	0633      	lsls	r3, r6, #24
 8008376:	2200      	movs	r2, #0
 8008378:	ea40 0602 	orr.w	r6, r0, r2
 800837c:	603e      	str	r6, [r7, #0]
 800837e:	430b      	orrs	r3, r1
 8008380:	607b      	str	r3, [r7, #4]
 8008382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008386:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 800838a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800838e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008390:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008394:	330a      	adds	r3, #10
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	4413      	add	r3, r2
 800839a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 800839e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083a2:	3308      	adds	r3, #8
 80083a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80083a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083ac:	3301      	adds	r3, #1
 80083ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083b6:	2b23      	cmp	r3, #35	@ 0x23
 80083b8:	f67f af03 	bls.w	80081c2 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 80083bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 80083c0:	4618      	mov	r0, r3
 80083c2:	378c      	adds	r7, #140	@ 0x8c
 80083c4:	46bd      	mov	sp, r7
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080083cc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	4b02      	ldr	r3, [pc, #8]	@ (80083e0 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x14>)
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr
 80083e0:	08012220 	.word	0x08012220

080083e4 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	4b02      	ldr	r3, [pc, #8]	@ (80083f8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x14>)
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr
 80083f8:	08012244 	.word	0x08012244

080083fc <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4618      	mov	r0, r3
 8008408:	f7f9 ff84 	bl	8002314 <_ZN3ros3MsgC1Ev>
 800840c:	4a0d      	ldr	r2, [pc, #52]	@ (8008444 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	601a      	str	r2, [r3, #0]
      header(),
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3304      	adds	r3, #4
 8008416:	4618      	mov	r0, r3
 8008418:	f7fa ff72 	bl	8003300 <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a0a      	ldr	r2, [pc, #40]	@ (8008448 <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8008420:	619a      	str	r2, [r3, #24]
      pose(),
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3320      	adds	r3, #32
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fbec 	bl	8007c04 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
      twist()
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff fde4 	bl	8008000 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	080123d0 	.word	0x080123d0
 8008448:	08011edc 	.word	0x08011edc

0800844c <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	1d18      	adds	r0, r3, #4
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	4413      	add	r3, r2
 8008464:	4619      	mov	r1, r3
 8008466:	f7fa ff6b 	bl	8003340 <_ZNK8std_msgs6Header9serializeEPh>
 800846a:	4602      	mov	r2, r0
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	4618      	mov	r0, r3
 8008478:	f7f7 fed6 	bl	8000228 <strlen>
 800847c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	4413      	add	r3, r2
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f001 f88c 	bl	80095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3304      	adds	r3, #4
 8008490:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	18d0      	adds	r0, r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4619      	mov	r1, r3
 80084a0:	f009 fc98 	bl	8011dd4 <memcpy>
      offset += length_child_frame_id;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4413      	add	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f103 0020 	add.w	r0, r3, #32
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	4413      	add	r3, r2
 80084b8:	4619      	mov	r1, r3
 80084ba:	f7ff fbc9 	bl	8007c50 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80084be:	4602      	mov	r2, r0
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4413      	add	r3, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	f7ff fdba 	bl	800804c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80084d8:	4602      	mov	r2, r0
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
      return offset;
 80084e0:	68fb      	ldr	r3, [r7, #12]
    }
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	1d18      	adds	r0, r3, #4
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4413      	add	r3, r2
 8008502:	4619      	mov	r1, r3
 8008504:	f7fa ffb4 	bl	8003470 <_ZN8std_msgs6Header11deserializeEPh>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4413      	add	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	441a      	add	r2, r3
 8008516:	f107 030c 	add.w	r3, r7, #12
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 f85f 	bl	80095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	3304      	adds	r3, #4
 8008526:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	e00b      	b.n	8008546 <_ZN8nav_msgs8Odometry11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	441a      	add	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	3b01      	subs	r3, #1
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	440b      	add	r3, r1
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3301      	adds	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	429a      	cmp	r2, r3
 8008550:	d3ed      	bcc.n	800852e <_ZN8nav_msgs8Odometry11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	3b01      	subs	r3, #1
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4413      	add	r3, r2
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3b01      	subs	r3, #1
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	441a      	add	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f103 0020 	add.w	r0, r3, #32
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4413      	add	r3, r2
 8008582:	4619      	mov	r1, r3
 8008584:	f7ff fc02 	bl	8007d8c <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	4413      	add	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	4413      	add	r3, r2
 800859c:	4619      	mov	r1, r3
 800859e:	f7ff fdf3 	bl	8008188 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
     return offset;
 80085aa:	693b      	ldr	r3, [r7, #16]
    }
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4b02      	ldr	r3, [pc, #8]	@ (80085c8 <_ZN8nav_msgs8Odometry7getTypeEv+0x14>)
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	08012268 	.word	0x08012268

080085cc <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	4b02      	ldr	r3, [pc, #8]	@ (80085e0 <_ZN8nav_msgs8Odometry6getMD5Ev+0x14>)
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	0801227c 	.word	0x0801227c

080085e4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	4a04      	ldr	r2, [pc, #16]	@ (8008600 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	0801254c 	.word	0x0801254c

08008604 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff ffe8 	bl	80085e4 <_ZN3ros15NodeHandleBase_C1Ev>
 8008614:	4a41      	ldr	r2, [pc, #260]	@ (800871c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev+0x118>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3304      	adds	r3, #4
 800861e:	4618      	mov	r0, r3
 8008620:	f7fa fe26 	bl	8003270 <_ZN13STM32HardwareC1Ev>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	609a      	str	r2, [r3, #8]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	60da      	str	r2, [r3, #12]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	611a      	str	r2, [r3, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	615a      	str	r2, [r3, #20]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3318      	adds	r3, #24
 8008640:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f009 fb80 	bl	8011d4c <memset>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008652:	3318      	adds	r3, #24
 8008654:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008658:	2100      	movs	r1, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f009 fb76 	bl	8011d4c <memset>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008666:	3318      	adds	r3, #24
 8008668:	2228      	movs	r2, #40	@ 0x28
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f009 fb6d 	bl	8011d4c <memset>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008678:	3340      	adds	r3, #64	@ 0x40
 800867a:	2228      	movs	r2, #40	@ 0x28
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f009 fb64 	bl	8011d4c <memset>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800868a:	461a      	mov	r2, r3
 800868c:	2300      	movs	r3, #0
 800868e:	6693      	str	r3, [r2, #104]	@ 0x68
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086a2:	461a      	mov	r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086ae:	461a      	mov	r2, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	6753      	str	r3, [r2, #116]	@ 0x74
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086ba:	461a      	mov	r2, r3
 80086bc:	2300      	movs	r3, #0
 80086be:	6793      	str	r3, [r2, #120]	@ 0x78
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086d2:	461a      	mov	r2, r3
 80086d4:	2300      	movs	r3, #0
 80086d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086e0:	461a      	mov	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086ee:	461a      	mov	r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8008708:	3310      	adds	r3, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f7fa f968 	bl	80029e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	08012448 	.word	0x08012448

08008720 <_Z10constraintfff>:

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

float constraint(float var, float min, float max)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
	if (var < min)	return min;
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f8 fd32 	bl	8001198 <__aeabi_fcmplt>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <_Z10constraintfff+0x1e>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	e009      	b.n	8008752 <_Z10constraintfff+0x32>
	if (var > max) 	return max;
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7f8 fd47 	bl	80011d4 <__aeabi_fcmpgt>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <_Z10constraintfff+0x30>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	e000      	b.n	8008752 <_Z10constraintfff+0x32>
	else 			return var;
 8008750:	68fb      	ldr	r3, [r7, #12]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_UART_TxCpltCallback>:

extern Motor mecabot_motor[NUM_OF_MOTOR];
extern Encoder encoder[NUM_OF_MOTOR];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8008764:	4803      	ldr	r0, [pc, #12]	@ (8008774 <HAL_UART_TxCpltCallback+0x18>)
 8008766:	f7fa fd61 	bl	800322c <_ZN10SerialComm11set_tx_cpltEv>
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000294 	.word	0x20000294

08008778 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8008780:	4803      	ldr	r0, [pc, #12]	@ (8008790 <HAL_UART_RxCpltCallback+0x18>)
 8008782:	f7fa fd61 	bl	8003248 <_ZN10SerialComm10reset_rbufEv>
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000294 	.word	0x20000294

08008794 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	switch (htim->Channel)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7f1b      	ldrb	r3, [r3, #28]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	d82d      	bhi.n	8008802 <HAL_TIM_IC_CaptureCallback+0x6e>
 80087a6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ac <HAL_TIM_IC_CaptureCallback+0x18>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	080087db 	.word	0x080087db
 80087b0:	080087f7 	.word	0x080087f7
 80087b4:	08008803 	.word	0x08008803
 80087b8:	080087cd 	.word	0x080087cd
 80087bc:	08008803 	.word	0x08008803
 80087c0:	08008803 	.word	0x08008803
 80087c4:	08008803 	.word	0x08008803
 80087c8:	080087e9 	.word	0x080087e9
	{
	case HAL_TIM_ACTIVE_CHANNEL_3:
		encoder[front_left]->tick++;
 80087cc:	4b10      	ldr	r3, [pc, #64]	@ (8008810 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	3201      	adds	r2, #1
 80087d4:	b292      	uxth	r2, r2
 80087d6:	801a      	strh	r2, [r3, #0]
		break;
 80087d8:	e014      	b.n	8008804 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_1:
		encoder[front_right]->tick++;
 80087da:	4b0d      	ldr	r3, [pc, #52]	@ (8008810 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	881a      	ldrh	r2, [r3, #0]
 80087e0:	3201      	adds	r2, #1
 80087e2:	b292      	uxth	r2, r2
 80087e4:	801a      	strh	r2, [r3, #0]
		break;
 80087e6:	e00d      	b.n	8008804 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		encoder[back_left]->tick++;
 80087e8:	4b09      	ldr	r3, [pc, #36]	@ (8008810 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	881a      	ldrh	r2, [r3, #0]
 80087ee:	3201      	adds	r2, #1
 80087f0:	b292      	uxth	r2, r2
 80087f2:	801a      	strh	r2, [r3, #0]
		break;
 80087f4:	e006      	b.n	8008804 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		encoder[back_right]->tick++;
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	3201      	adds	r2, #1
 80087fe:	b292      	uxth	r2, r2
 8008800:	801a      	strh	r2, [r3, #0]
	default:
		break;
 8008802:	bf00      	nop
	}
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20004a58 	.word	0x20004a58

08008814 <commandVelocityCallback>:
	// TODO: Implement speed callback
	return;
}

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	goal_vel[linear_x] = cmd_vel_msg.linear.x;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	f7f8 f9bb 	bl	8000ba0 <__aeabi_d2f>
 800882a:	4603      	mov	r3, r0
 800882c:	4a0c      	ldr	r2, [pc, #48]	@ (8008860 <commandVelocityCallback+0x4c>)
 800882e:	6013      	str	r3, [r2, #0]
	goal_vel[linear_y] = cmd_vel_msg.linear.y;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f8 f9b1 	bl	8000ba0 <__aeabi_d2f>
 800883e:	4603      	mov	r3, r0
 8008840:	4a07      	ldr	r2, [pc, #28]	@ (8008860 <commandVelocityCallback+0x4c>)
 8008842:	6053      	str	r3, [r2, #4]
	goal_vel[angular_z] = cmd_vel_msg.angular.z;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800884a:	4610      	mov	r0, r2
 800884c:	4619      	mov	r1, r3
 800884e:	f7f8 f9a7 	bl	8000ba0 <__aeabi_d2f>
 8008852:	4603      	mov	r3, r0
 8008854:	4a02      	ldr	r2, [pc, #8]	@ (8008860 <commandVelocityCallback+0x4c>)
 8008856:	6093      	str	r3, [r2, #8]
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200049d8 	.word	0x200049d8

08008864 <ros_setup>:
/* CALLBACK FUNCTIONS END */

void ros_setup()
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
	nh.initNode();
 8008868:	480c      	ldr	r0, [pc, #48]	@ (800889c <ros_setup+0x38>)
 800886a:	f000 ff3f 	bl	80096ec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 800886e:	490c      	ldr	r1, [pc, #48]	@ (80088a0 <ros_setup+0x3c>)
 8008870:	480a      	ldr	r0, [pc, #40]	@ (800889c <ros_setup+0x38>)
 8008872:	f000 ff60 	bl	8009736 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub_imu);
 8008876:	490b      	ldr	r1, [pc, #44]	@ (80088a4 <ros_setup+0x40>)
 8008878:	4808      	ldr	r0, [pc, #32]	@ (800889c <ros_setup+0x38>)
 800887a:	f000 fed6 	bl	800962a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_joint_states);
 800887e:	490a      	ldr	r1, [pc, #40]	@ (80088a8 <ros_setup+0x44>)
 8008880:	4806      	ldr	r0, [pc, #24]	@ (800889c <ros_setup+0x38>)
 8008882:	f000 fed2 	bl	800962a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_odom);
 8008886:	4909      	ldr	r1, [pc, #36]	@ (80088ac <ros_setup+0x48>)
 8008888:	4804      	ldr	r0, [pc, #16]	@ (800889c <ros_setup+0x38>)
 800888a:	f000 fece 	bl	800962a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>

	initOdom();
 800888e:	f000 f8b3 	bl	80089f8 <initOdom>
	initJointStates();
 8008892:	f000 f925 	bl	8008ae0 <initJointStates>
}
 8008896:	bf00      	nop
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	200022a0 	.word	0x200022a0
 80088a0:	20004358 	.word	0x20004358
 80088a4:	20004510 	.word	0x20004510
 80088a8:	20004580 	.word	0x20004580
 80088ac:	200048a0 	.word	0x200048a0

080088b0 <setup>:

void setup()
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
	ros_setup();
 80088b6:	f7ff ffd5 	bl	8008864 <ros_setup>

	mecabot_motor_init();
 80088ba:	f001 fcff 	bl	800a2bc <mecabot_motor_init>
	mecabot_encoder_init();
 80088be:	f001 fd3f 	bl	800a340 <mecabot_encoder_init>
	// mecabot_mpu_init();

	for (int i=0; i<NUM_OF_MOTOR; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	607b      	str	r3, [r7, #4]
 80088c6:	e009      	b.n	80088dc <setup+0x2c>
	{
		mecabot_motor_start(mecabot_motor[i]);
 80088c8:	4a08      	ldr	r2, [pc, #32]	@ (80088ec <setup+0x3c>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 fd6d 	bl	800a3b0 <mecabot_motor_start>
	for (int i=0; i<NUM_OF_MOTOR; i++)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3301      	adds	r3, #1
 80088da:	607b      	str	r3, [r7, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b03      	cmp	r3, #3
 80088e0:	ddf2      	ble.n	80088c8 <setup+0x18>
	}
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20004a48 	.word	0x20004a48

080088f0 <loop>:

void loop()
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
	t = millis();
 80088f6:	f001 fcd9 	bl	800a2ac <millis>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4a37      	ldr	r2, [pc, #220]	@ (80089dc <loop+0xec>)
 80088fe:	6013      	str	r3, [r2, #0]

	/* Motor control */
	if ((t - t_previous[motor_control_event]) >= dt[motor_control_event])
 8008900:	4b36      	ldr	r3, [pc, #216]	@ (80089dc <loop+0xec>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4b36      	ldr	r3, [pc, #216]	@ (80089e0 <loop+0xf0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	4b36      	ldr	r3, [pc, #216]	@ (80089e4 <loop+0xf4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d307      	bcc.n	8008922 <loop+0x32>
	{
		calculateWheelVelocity();
 8008912:	f000 fd61 	bl	80093d8 <calculateWheelVelocity>
		controlMotors();
 8008916:	f000 fe11 	bl	800953c <controlMotors>
		t_previous[motor_control_event] = t;
 800891a:	4b30      	ldr	r3, [pc, #192]	@ (80089dc <loop+0xec>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a30      	ldr	r2, [pc, #192]	@ (80089e0 <loop+0xf0>)
 8008920:	6013      	str	r3, [r2, #0]
	}
	/* Wheel velocity feedback */
    if ((t - t_previous[wheel_velocity_feedback_event]) >= dt[wheel_velocity_feedback_event])
 8008922:	4b2e      	ldr	r3, [pc, #184]	@ (80089dc <loop+0xec>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b2e      	ldr	r3, [pc, #184]	@ (80089e0 <loop+0xf0>)
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	4b2d      	ldr	r3, [pc, #180]	@ (80089e4 <loop+0xf4>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d303      	bcc.n	800893c <loop+0x4c>
	{
		t_previous[wheel_velocity_feedback_event] = t;
 8008934:	4b29      	ldr	r3, [pc, #164]	@ (80089dc <loop+0xec>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a29      	ldr	r2, [pc, #164]	@ (80089e0 <loop+0xf0>)
 800893a:	6053      	str	r3, [r2, #4]
	}
	/* Imu publish */
    if ((t - t_previous[imu_publish_event]) >= dt[imu_publish_event])
 800893c:	4b27      	ldr	r3, [pc, #156]	@ (80089dc <loop+0xec>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <loop+0xf0>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	1ad2      	subs	r2, r2, r3
 8008946:	4b27      	ldr	r3, [pc, #156]	@ (80089e4 <loop+0xf4>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d307      	bcc.n	800895e <loop+0x6e>
	{
		updateImu();
 800894e:	f000 f8e7 	bl	8008b20 <updateImu>
		publishImu();
 8008952:	f000 fb7f 	bl	8009054 <publishImu>
		t_previous[imu_publish_event] = t;
 8008956:	4b21      	ldr	r3, [pc, #132]	@ (80089dc <loop+0xec>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a21      	ldr	r2, [pc, #132]	@ (80089e0 <loop+0xf0>)
 800895c:	6093      	str	r3, [r2, #8]
	}
	/* Robot states (Odometry, TF, joint states) publish */
    if ((t - t_previous[robot_info_publish_event]) >= dt[robot_info_publish_event])
 800895e:	4b1f      	ldr	r3, [pc, #124]	@ (80089dc <loop+0xec>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b1f      	ldr	r3, [pc, #124]	@ (80089e0 <loop+0xf0>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	1ad2      	subs	r2, r2, r3
 8008968:	4b1e      	ldr	r3, [pc, #120]	@ (80089e4 <loop+0xf4>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	429a      	cmp	r2, r3
 800896e:	d32d      	bcc.n	80089cc <loop+0xdc>
	{
		for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008970:	2300      	movs	r3, #0
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	e01b      	b.n	80089ae <loop+0xbe>
		{
			uint16_t tick = mecabot_encoder_read(encoder[i]);
 8008976:	4a1c      	ldr	r2, [pc, #112]	@ (80089e8 <loop+0xf8>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fd70 	bl	800a464 <mecabot_encoder_read>
 8008984:	4603      	mov	r3, r0
 8008986:	807b      	strh	r3, [r7, #2]

			diff_tick[i] = tick - prev_encoder_tick[i];
 8008988:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <loop+0xfc>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008990:	887a      	ldrh	r2, [r7, #2]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	b299      	uxth	r1, r3
 8008996:	4a16      	ldr	r2, [pc, #88]	@ (80089f0 <loop+0x100>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			prev_encoder_tick[i] = tick;
 800899e:	4913      	ldr	r1, [pc, #76]	@ (80089ec <loop+0xfc>)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	887a      	ldrh	r2, [r7, #2]
 80089a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = 0; i < NUM_OF_MOTOR; i++)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3301      	adds	r3, #1
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	dde0      	ble.n	8008976 <loop+0x86>
		}

		updateOdometry();
 80089b4:	f000 fa9e 	bl	8008ef4 <updateOdometry>
		updateJointStates();
 80089b8:	f000 f9e2 	bl	8008d80 <updateJointStates>
		updateTF();
 80089bc:	f000 fb28 	bl	8009010 <updateTF>
		publishRobotState();
 80089c0:	f000 fb6c 	bl	800909c <publishRobotState>
		t_previous[robot_info_publish_event] = t;
 80089c4:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <loop+0xec>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a05      	ldr	r2, [pc, #20]	@ (80089e0 <loop+0xf0>)
 80089ca:	60d3      	str	r3, [r2, #12]
	}

	nh.spinOnce();
 80089cc:	4809      	ldr	r0, [pc, #36]	@ (80089f4 <loop+0x104>)
 80089ce:	f000 fedc 	bl	800978a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20004a24 	.word	0x20004a24
 80089e0:	20004a04 	.word	0x20004a04
 80089e4:	20004a14 	.word	0x20004a14
 80089e8:	20004a58 	.word	0x20004a58
 80089ec:	200049f4 	.word	0x200049f4
 80089f0:	200049fc 	.word	0x200049fc
 80089f4:	200022a0 	.word	0x200022a0

080089f8 <initOdom>:

/* MSG INITIALIZATION FUNCTIONS START */
void initOdom(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
 8008a02:	e00e      	b.n	8008a22 <initOdom+0x2a>
    {
        odom_pose[i] = 0.0;
 8008a04:	4a31      	ldr	r2, [pc, #196]	@ (8008acc <initOdom+0xd4>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f04f 0100 	mov.w	r1, #0
 8008a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        odom_vel[i]  = 0.0;
 8008a10:	4a2f      	ldr	r2, [pc, #188]	@ (8008ad0 <initOdom+0xd8>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f04f 0100 	mov.w	r1, #0
 8008a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	dded      	ble.n	8008a04 <initOdom+0xc>
    }

	odom_msg.header.frame_id = "/odom";
 8008a28:	4b2a      	ldr	r3, [pc, #168]	@ (8008ad4 <initOdom+0xdc>)
 8008a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad8 <initOdom+0xe0>)
 8008a2c:	615a      	str	r2, [r3, #20]
	odom_msg.child_frame_id = "/base_link";
 8008a2e:	4b29      	ldr	r3, [pc, #164]	@ (8008ad4 <initOdom+0xdc>)
 8008a30:	4a2a      	ldr	r2, [pc, #168]	@ (8008adc <initOdom+0xe4>)
 8008a32:	619a      	str	r2, [r3, #24]

    odom_msg.pose.pose.position.x = 0.0;
 8008a34:	4927      	ldr	r1, [pc, #156]	@ (8008ad4 <initOdom+0xdc>)
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	f04f 0300 	mov.w	r3, #0
 8008a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = 0.0;
 8008a42:	4924      	ldr	r1, [pc, #144]	@ (8008ad4 <initOdom+0xdc>)
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    odom_msg.pose.pose.position.z = 0.0;
 8008a50:	4920      	ldr	r1, [pc, #128]	@ (8008ad4 <initOdom+0xdc>)
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    odom_msg.pose.pose.orientation.x = 0.0;
 8008a5e:	491d      	ldr	r1, [pc, #116]	@ (8008ad4 <initOdom+0xdc>)
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    odom_msg.pose.pose.orientation.y = 0.0;
 8008a6c:	4919      	ldr	r1, [pc, #100]	@ (8008ad4 <initOdom+0xdc>)
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    odom_msg.pose.pose.orientation.z = 0.0;
 8008a7a:	4916      	ldr	r1, [pc, #88]	@ (8008ad4 <initOdom+0xdc>)
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	f04f 0300 	mov.w	r3, #0
 8008a84:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    odom_msg.pose.pose.orientation.w = 0.0;
 8008a88:	4912      	ldr	r1, [pc, #72]	@ (8008ad4 <initOdom+0xdc>)
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    odom_msg.twist.twist.linear.x  = 0.0;
 8008a96:	490f      	ldr	r1, [pc, #60]	@ (8008ad4 <initOdom+0xdc>)
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = 0.0;
 8008aa4:	490b      	ldr	r1, [pc, #44]	@ (8008ad4 <initOdom+0xdc>)
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = 0.0;
 8008ab2:	4908      	ldr	r1, [pc, #32]	@ (8008ad4 <initOdom+0xdc>)
 8008ab4:	f04f 0200 	mov.w	r2, #0
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	200049c0 	.word	0x200049c0
 8008ad0:	200049cc 	.word	0x200049cc
 8008ad4:	20004598 	.word	0x20004598
 8008ad8:	08012300 	.word	0x08012300
 8008adc:	08012308 	.word	0x08012308

08008ae0 <initJointStates>:
void initJointStates(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
	static char *joint_states_name[NUM_OF_MOTOR] =
	                {"front_left_wheel_joint", "front_right_wheel_joint",
	                 "back_left_wheel_joint" , "back_right_wheel_joint"};

	joint_states_msg.header.frame_id = "/joint_states";
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <initJointStates+0x30>)
 8008ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8008b14 <initJointStates+0x34>)
 8008ae8:	615a      	str	r2, [r3, #20]
	joint_states_msg.name = joint_states_name;
 8008aea:	4b09      	ldr	r3, [pc, #36]	@ (8008b10 <initJointStates+0x30>)
 8008aec:	4a0a      	ldr	r2, [pc, #40]	@ (8008b18 <initJointStates+0x38>)
 8008aee:	621a      	str	r2, [r3, #32]

	joint_states_msg.name_length 	 = NUM_OF_MOTOR;
 8008af0:	4b07      	ldr	r3, [pc, #28]	@ (8008b10 <initJointStates+0x30>)
 8008af2:	2204      	movs	r2, #4
 8008af4:	619a      	str	r2, [r3, #24]
	joint_states_msg.position_length = NUM_OF_MOTOR;
 8008af6:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <initJointStates+0x30>)
 8008af8:	2204      	movs	r2, #4
 8008afa:	625a      	str	r2, [r3, #36]	@ 0x24
	joint_states_msg.velocity_length = NUM_OF_MOTOR;
 8008afc:	4b04      	ldr	r3, [pc, #16]	@ (8008b10 <initJointStates+0x30>)
 8008afe:	2204      	movs	r2, #4
 8008b00:	635a      	str	r2, [r3, #52]	@ 0x34
	joint_states_msg.effort_length	 = NUM_OF_MOTOR;
 8008b02:	4b03      	ldr	r3, [pc, #12]	@ (8008b10 <initJointStates+0x30>)
 8008b04:	2204      	movs	r2, #4
 8008b06:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8008b08:	bf00      	nop
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	20004528 	.word	0x20004528
 8008b14:	08012314 	.word	0x08012314
 8008b18:	20000000 	.word	0x20000000
 8008b1c:	00000000 	.word	0x00000000

08008b20 <updateImu>:
}
/* MSG INITIALIZATION FUNCTIONS END */

/* MSG UPDATE FUNCTIONS START */
void updateImu(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	@ 0x28
 8008b24:	af00      	add	r7, sp, #0
	float gyro_buffer[3], accel_buffer[3];
	Quaternion_t quat_buffer;

	mecabot_imu_read_gyro(gyro_buffer);
 8008b26:	f107 031c 	add.w	r3, r7, #28
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fca8 	bl	800a480 <mecabot_imu_read_gyro>
	mecabot_imu_read_accel(accel_buffer);
 8008b30:	f107 0310 	add.w	r3, r7, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 fd11 	bl	800a55c <mecabot_imu_read_accel>
	mecabot_imu_get_quaternion(&quat_buffer);
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fd2f 	bl	800a5a0 <mecabot_imu_get_quaternion>

	imu_msg.angular_velocity.x = gyro_buffer[0];
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f7 fcdb 	bl	8000500 <__aeabi_f2d>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	498a      	ldr	r1, [pc, #552]	@ (8008d78 <updateImu+0x258>)
 8008b50:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    imu_msg.angular_velocity.y = gyro_buffer[1];
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f7 fcd2 	bl	8000500 <__aeabi_f2d>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4985      	ldr	r1, [pc, #532]	@ (8008d78 <updateImu+0x258>)
 8008b62:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    imu_msg.angular_velocity.z = gyro_buffer[2];
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f7 fcc9 	bl	8000500 <__aeabi_f2d>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4981      	ldr	r1, [pc, #516]	@ (8008d78 <updateImu+0x258>)
 8008b74:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0

    imu_msg.linear_acceleration.x = accel_buffer[0];
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f7 fcc0 	bl	8000500 <__aeabi_f2d>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	497c      	ldr	r1, [pc, #496]	@ (8008d78 <updateImu+0x258>)
 8008b86:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
    imu_msg.linear_acceleration.y = accel_buffer[1];
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7f7 fcb7 	bl	8000500 <__aeabi_f2d>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4978      	ldr	r1, [pc, #480]	@ (8008d78 <updateImu+0x258>)
 8008b98:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    imu_msg.linear_acceleration.z = accel_buffer[2];
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f7 fcae 	bl	8000500 <__aeabi_f2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4973      	ldr	r1, [pc, #460]	@ (8008d78 <updateImu+0x258>)
 8008baa:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108

    imu_msg.orientation.w = quat_buffer.q0;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f7 fca5 	bl	8000500 <__aeabi_f2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	496f      	ldr	r1, [pc, #444]	@ (8008d78 <updateImu+0x258>)
 8008bbc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    imu_msg.orientation.x = quat_buffer.q1;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fc9c 	bl	8000500 <__aeabi_f2d>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	496a      	ldr	r1, [pc, #424]	@ (8008d78 <updateImu+0x258>)
 8008bce:	e9c1 2308 	strd	r2, r3, [r1, #32]
    imu_msg.orientation.y = quat_buffer.q2;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7f7 fc93 	bl	8000500 <__aeabi_f2d>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4966      	ldr	r1, [pc, #408]	@ (8008d78 <updateImu+0x258>)
 8008be0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    imu_msg.orientation.z = quat_buffer.q3;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7f7 fc8a 	bl	8000500 <__aeabi_f2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4961      	ldr	r1, [pc, #388]	@ (8008d78 <updateImu+0x258>)
 8008bf2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    imu_msg.angular_velocity_covariance[1] = 0;
 8008bf6:	4960      	ldr	r1, [pc, #384]	@ (8008d78 <updateImu+0x258>)
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    imu_msg.angular_velocity_covariance[2] = 0;
 8008c04:	495c      	ldr	r1, [pc, #368]	@ (8008d78 <updateImu+0x258>)
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    imu_msg.angular_velocity_covariance[3] = 0;
 8008c12:	4959      	ldr	r1, [pc, #356]	@ (8008d78 <updateImu+0x258>)
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    imu_msg.angular_velocity_covariance[4] = 0.02;
 8008c20:	4955      	ldr	r1, [pc, #340]	@ (8008d78 <updateImu+0x258>)
 8008c22:	a34f      	add	r3, pc, #316	@ (adr r3, 8008d60 <updateImu+0x240>)
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    imu_msg.angular_velocity_covariance[5] = 0;
 8008c2c:	4952      	ldr	r1, [pc, #328]	@ (8008d78 <updateImu+0x258>)
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    imu_msg.angular_velocity_covariance[6] = 0;
 8008c3a:	494f      	ldr	r1, [pc, #316]	@ (8008d78 <updateImu+0x258>)
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    imu_msg.angular_velocity_covariance[7] = 0;
 8008c48:	494b      	ldr	r1, [pc, #300]	@ (8008d78 <updateImu+0x258>)
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    imu_msg.angular_velocity_covariance[8] = 0.02;
 8008c56:	4948      	ldr	r1, [pc, #288]	@ (8008d78 <updateImu+0x258>)
 8008c58:	a341      	add	r3, pc, #260	@ (adr r3, 8008d60 <updateImu+0x240>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8

    imu_msg.linear_acceleration_covariance[0] = 0.04;
 8008c62:	4945      	ldr	r1, [pc, #276]	@ (8008d78 <updateImu+0x258>)
 8008c64:	a340      	add	r3, pc, #256	@ (adr r3, 8008d68 <updateImu+0x248>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
    imu_msg.linear_acceleration_covariance[1] = 0;
 8008c6e:	4942      	ldr	r1, [pc, #264]	@ (8008d78 <updateImu+0x258>)
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
    imu_msg.linear_acceleration_covariance[2] = 0;
 8008c7c:	493e      	ldr	r1, [pc, #248]	@ (8008d78 <updateImu+0x258>)
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
    imu_msg.linear_acceleration_covariance[3] = 0;
 8008c8a:	493b      	ldr	r1, [pc, #236]	@ (8008d78 <updateImu+0x258>)
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
    imu_msg.linear_acceleration_covariance[4] = 0.04;
 8008c98:	4937      	ldr	r1, [pc, #220]	@ (8008d78 <updateImu+0x258>)
 8008c9a:	a333      	add	r3, pc, #204	@ (adr r3, 8008d68 <updateImu+0x248>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	e9c1 234c 	strd	r2, r3, [r1, #304]	@ 0x130
    imu_msg.linear_acceleration_covariance[5] = 0;
 8008ca4:	4934      	ldr	r1, [pc, #208]	@ (8008d78 <updateImu+0x258>)
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9c1 234e 	strd	r2, r3, [r1, #312]	@ 0x138
    imu_msg.linear_acceleration_covariance[6] = 0;
 8008cb2:	4931      	ldr	r1, [pc, #196]	@ (8008d78 <updateImu+0x258>)
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    imu_msg.linear_acceleration_covariance[7] = 0;
 8008cc0:	492d      	ldr	r1, [pc, #180]	@ (8008d78 <updateImu+0x258>)
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148
    imu_msg.linear_acceleration_covariance[8] = 0.04;
 8008cce:	492a      	ldr	r1, [pc, #168]	@ (8008d78 <updateImu+0x258>)
 8008cd0:	a325      	add	r3, pc, #148	@ (adr r3, 8008d68 <updateImu+0x248>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150

    imu_msg.orientation_covariance[0] = 0.0025;
 8008cda:	4927      	ldr	r1, [pc, #156]	@ (8008d78 <updateImu+0x258>)
 8008cdc:	a324      	add	r3, pc, #144	@ (adr r3, 8008d70 <updateImu+0x250>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    imu_msg.orientation_covariance[1] = 0;
 8008ce6:	4924      	ldr	r1, [pc, #144]	@ (8008d78 <updateImu+0x258>)
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    imu_msg.orientation_covariance[2] = 0;
 8008cf4:	4920      	ldr	r1, [pc, #128]	@ (8008d78 <updateImu+0x258>)
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    imu_msg.orientation_covariance[3] = 0;
 8008d02:	491d      	ldr	r1, [pc, #116]	@ (8008d78 <updateImu+0x258>)
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    imu_msg.orientation_covariance[4] = 0.0025;
 8008d10:	4919      	ldr	r1, [pc, #100]	@ (8008d78 <updateImu+0x258>)
 8008d12:	a317      	add	r3, pc, #92	@ (adr r3, 8008d70 <updateImu+0x250>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    imu_msg.orientation_covariance[5] = 0;
 8008d1c:	4916      	ldr	r1, [pc, #88]	@ (8008d78 <updateImu+0x258>)
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    imu_msg.orientation_covariance[6] = 0;
 8008d2a:	4913      	ldr	r1, [pc, #76]	@ (8008d78 <updateImu+0x258>)
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    imu_msg.orientation_covariance[7] = 0;
 8008d38:	490f      	ldr	r1, [pc, #60]	@ (8008d78 <updateImu+0x258>)
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    imu_msg.orientation_covariance[8] = 0.0025;
 8008d46:	490c      	ldr	r1, [pc, #48]	@ (8008d78 <updateImu+0x258>)
 8008d48:	a309      	add	r3, pc, #36	@ (adr r3, 8008d70 <updateImu+0x250>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

}
 8008d52:	bf00      	nop
 8008d54:	3728      	adds	r7, #40	@ 0x28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w
 8008d60:	47ae147b 	.word	0x47ae147b
 8008d64:	3f947ae1 	.word	0x3f947ae1
 8008d68:	47ae147b 	.word	0x47ae147b
 8008d6c:	3fa47ae1 	.word	0x3fa47ae1
 8008d70:	47ae147b 	.word	0x47ae147b
 8008d74:	3f647ae1 	.word	0x3f647ae1
 8008d78:	200043b8 	.word	0x200043b8
 8008d7c:	00000000 	.word	0x00000000

08008d80 <updateJointStates>:
void updateJointStates(void)
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
	static float joint_states_pos[NUM_OF_MOTOR] = { 0.0 };
	static float joint_states_vel[NUM_OF_MOTOR] = { 0.0 };

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	e064      	b.n	8008e56 <updateJointStates+0xd6>
	{
		joint_states_pos[i] += TICK2RAD(diff_tick[i]);
 8008d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8008e78 <updateJointStates+0xf8>)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7f7 fbb3 	bl	8000500 <__aeabi_f2d>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	4a37      	ldr	r2, [pc, #220]	@ (8008e7c <updateJointStates+0xfc>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	4a36      	ldr	r2, [pc, #216]	@ (8008e80 <updateJointStates+0x100>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	091b      	lsrs	r3, r3, #4
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f7 fb92 	bl	80004dc <__aeabi_i2d>
 8008db8:	a32b      	add	r3, pc, #172	@ (adr r3, 8008e68 <updateJointStates+0xe8>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fbf7 	bl	80005b0 <__aeabi_dmul>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fa3b 	bl	8000244 <__adddf3>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f7f7 fee3 	bl	8000ba0 <__aeabi_d2f>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4926      	ldr	r1, [pc, #152]	@ (8008e78 <updateJointStates+0xf8>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		joint_states_pos[i] = fmod(joint_states_pos[i], 2*PI);
 8008de4:	4a24      	ldr	r2, [pc, #144]	@ (8008e78 <updateJointStates+0xf8>)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008dec:	a320      	add	r3, pc, #128	@ (adr r3, 8008e70 <updateJointStates+0xf0>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	4608      	mov	r0, r1
 8008df4:	f000 fefd 	bl	8009bf2 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	f7f7 fece 	bl	8000ba0 <__aeabi_d2f>
 8008e04:	4602      	mov	r2, r0
 8008e06:	491c      	ldr	r1, [pc, #112]	@ (8008e78 <updateJointStates+0xf8>)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		joint_states_vel[i] = TICK2RAD(diff_tick[i] / dt[robot_info_publish_event]);
 8008e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008e7c <updateJointStates+0xfc>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e16:	461a      	mov	r2, r3
 8008e18:	4b1a      	ldr	r3, [pc, #104]	@ (8008e84 <updateJointStates+0x104>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e20:	4a17      	ldr	r2, [pc, #92]	@ (8008e80 <updateJointStates+0x100>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 fb46 	bl	80004bc <__aeabi_ui2d>
 8008e30:	a30d      	add	r3, pc, #52	@ (adr r3, 8008e68 <updateJointStates+0xe8>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fbbb 	bl	80005b0 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	f7f7 fead 	bl	8000ba0 <__aeabi_d2f>
 8008e46:	4602      	mov	r2, r0
 8008e48:	490f      	ldr	r1, [pc, #60]	@ (8008e88 <updateJointStates+0x108>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3301      	adds	r3, #1
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	dd97      	ble.n	8008d8c <updateJointStates+0xc>
	}
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bdb0      	pop	{r4, r5, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	54442eea 	.word	0x54442eea
 8008e6c:	400921fb 	.word	0x400921fb
 8008e70:	54442eea 	.word	0x54442eea
 8008e74:	401921fb 	.word	0x401921fb
 8008e78:	20004a28 	.word	0x20004a28
 8008e7c:	200049fc 	.word	0x200049fc
 8008e80:	cccccccd 	.word	0xcccccccd
 8008e84:	20004a14 	.word	0x20004a14
 8008e88:	20004a38 	.word	0x20004a38

08008e8c <_ZN3ros3MsgaSEOS0_>:
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr

08008ea2 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff ffea 	bl	8008e8c <_ZN3ros3MsgaSEOS0_>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <updateOdometry>:
void updateOdometry(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	@ 0x28
 8008ef8:	af00      	add	r7, sp, #0
	calculateOdometry();
 8008efa:	f000 f90d 	bl	8009118 <calculateOdometry>

	odom_msg.pose.pose.position.x = odom_pose[linear_x];
 8008efe:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <updateOdometry+0xa4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f7 fafc 	bl	8000500 <__aeabi_f2d>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4923      	ldr	r1, [pc, #140]	@ (8008f9c <updateOdometry+0xa8>)
 8008f0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = odom_pose[linear_y];
 8008f12:	4b21      	ldr	r3, [pc, #132]	@ (8008f98 <updateOdometry+0xa4>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 faf2 	bl	8000500 <__aeabi_f2d>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	491e      	ldr	r1, [pc, #120]	@ (8008f9c <updateOdometry+0xa8>)
 8008f22:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	odom_msg.pose.pose.position.z = 0.0;
 8008f26:	491d      	ldr	r1, [pc, #116]	@ (8008f9c <updateOdometry+0xa8>)
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    odom_msg.pose.pose.orientation = tf::createQuaternionFromYaw(odom_pose[angular_z]);
 8008f34:	4b18      	ldr	r3, [pc, #96]	@ (8008f98 <updateOdometry+0xa4>)
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7f7 fae1 	bl	8000500 <__aeabi_f2d>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4639      	mov	r1, r7
 8008f44:	4608      	mov	r0, r1
 8008f46:	f7fd ff63 	bl	8006e10 <_ZN2tfL23createQuaternionFromYawEd>
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4814      	ldr	r0, [pc, #80]	@ (8008fa0 <updateOdometry+0xac>)
 8008f50:	f7ff ffa7 	bl	8008ea2 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odom_msg.twist.twist.linear.x  = odom_vel[linear_x];
 8008f54:	4b13      	ldr	r3, [pc, #76]	@ (8008fa4 <updateOdometry+0xb0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f7 fad1 	bl	8000500 <__aeabi_f2d>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	490e      	ldr	r1, [pc, #56]	@ (8008f9c <updateOdometry+0xa8>)
 8008f64:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = odom_vel[linear_y];
 8008f68:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa4 <updateOdometry+0xb0>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 fac7 	bl	8000500 <__aeabi_f2d>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4909      	ldr	r1, [pc, #36]	@ (8008f9c <updateOdometry+0xa8>)
 8008f78:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = odom_vel[angular_z];
 8008f7c:	4b09      	ldr	r3, [pc, #36]	@ (8008fa4 <updateOdometry+0xb0>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7f7 fabd 	bl	8000500 <__aeabi_f2d>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4904      	ldr	r1, [pc, #16]	@ (8008f9c <updateOdometry+0xa8>)
 8008f8c:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 8008f90:	bf00      	nop
 8008f92:	3728      	adds	r7, #40	@ 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	200049c0 	.word	0x200049c0
 8008f9c:	20004598 	.word	0x20004598
 8008fa0:	200045e8 	.word	0x200045e8
 8008fa4:	200049cc 	.word	0x200049cc

08008fa8 <_ZN3ros3MsgaSERKS0_>:
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bc80      	pop	{r7}
 8008fbc:	4770      	bx	lr

08008fbe <_ZN13geometry_msgs10QuaternionaSERKS0_>:
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff ffea 	bl	8008fa8 <_ZN3ros3MsgaSERKS0_>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <updateTF>:
void updateTF(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
	odom_tf_msg.transform.translation.x = odom_msg.pose.pose.position.x;
 8009014:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <updateTF+0x34>)
 8009016:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800901a:	490b      	ldr	r1, [pc, #44]	@ (8009048 <updateTF+0x38>)
 800901c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	odom_tf_msg.transform.translation.y = odom_msg.pose.pose.position.y;
 8009020:	4b08      	ldr	r3, [pc, #32]	@ (8009044 <updateTF+0x34>)
 8009022:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009026:	4908      	ldr	r1, [pc, #32]	@ (8009048 <updateTF+0x38>)
 8009028:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	odom_tf_msg.transform.translation.z = odom_msg.pose.pose.position.z;
 800902c:	4b05      	ldr	r3, [pc, #20]	@ (8009044 <updateTF+0x34>)
 800902e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8009032:	4905      	ldr	r1, [pc, #20]	@ (8009048 <updateTF+0x38>)
 8009034:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	odom_tf_msg.transform.rotation = odom_msg.pose.pose.orientation;
 8009038:	4904      	ldr	r1, [pc, #16]	@ (800904c <updateTF+0x3c>)
 800903a:	4805      	ldr	r0, [pc, #20]	@ (8009050 <updateTF+0x40>)
 800903c:	f7ff ffbf 	bl	8008fbe <_ZN13geometry_msgs10QuaternionaSERKS0_>
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20004598 	.word	0x20004598
 8009048:	200048b8 	.word	0x200048b8
 800904c:	200045e8 	.word	0x200045e8
 8009050:	20004900 	.word	0x20004900

08009054 <publishImu>:
/* MSG UPDATE FUNCTIONS END */

/* PUBLISHING FUNCTIONS START */
void publishImu(void)
{
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	imu_msg.header.frame_id = "/imu";
 800905a:	4b0c      	ldr	r3, [pc, #48]	@ (800908c <publishImu+0x38>)
 800905c:	4a0c      	ldr	r2, [pc, #48]	@ (8009090 <publishImu+0x3c>)
 800905e:	615a      	str	r2, [r3, #20]
	imu_msg.header.stamp = nh.now();
 8009060:	4c0a      	ldr	r4, [pc, #40]	@ (800908c <publishImu+0x38>)
 8009062:	463b      	mov	r3, r7
 8009064:	490b      	ldr	r1, [pc, #44]	@ (8009094 <publishImu+0x40>)
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fdd8 	bl	8009c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv>
 800906c:	f104 030c 	add.w	r3, r4, #12
 8009070:	463a      	mov	r2, r7
 8009072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009076:	e883 0003 	stmia.w	r3, {r0, r1}
	pub_imu.publish(&imu_msg);
 800907a:	4904      	ldr	r1, [pc, #16]	@ (800908c <publishImu+0x38>)
 800907c:	4806      	ldr	r0, [pc, #24]	@ (8009098 <publishImu+0x44>)
 800907e:	f7f9 ff8d 	bl	8002f9c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	bd90      	pop	{r4, r7, pc}
 800908a:	bf00      	nop
 800908c:	200043b8 	.word	0x200043b8
 8009090:	08012324 	.word	0x08012324
 8009094:	200022a0 	.word	0x200022a0
 8009098:	20004510 	.word	0x20004510

0800909c <publishRobotState>:
void publishRobotState(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
	ros::Time now = nh.now();
 80090a2:	463b      	mov	r3, r7
 80090a4:	4914      	ldr	r1, [pc, #80]	@ (80090f8 <publishRobotState+0x5c>)
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fdb8 	bl	8009c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv>

	odom_msg.header.stamp = now;
 80090ac:	4b13      	ldr	r3, [pc, #76]	@ (80090fc <publishRobotState+0x60>)
 80090ae:	330c      	adds	r3, #12
 80090b0:	463a      	mov	r2, r7
 80090b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090b6:	e883 0003 	stmia.w	r3, {r0, r1}
	pub_odom.publish(&odom_msg);
 80090ba:	4910      	ldr	r1, [pc, #64]	@ (80090fc <publishRobotState+0x60>)
 80090bc:	4810      	ldr	r0, [pc, #64]	@ (8009100 <publishRobotState+0x64>)
 80090be:	f7f9 ff6d 	bl	8002f9c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	joint_states_msg.header.stamp = now;
 80090c2:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <publishRobotState+0x68>)
 80090c4:	330c      	adds	r3, #12
 80090c6:	463a      	mov	r2, r7
 80090c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090cc:	e883 0003 	stmia.w	r3, {r0, r1}
	pub_joint_states.publish(&joint_states_msg);
 80090d0:	490c      	ldr	r1, [pc, #48]	@ (8009104 <publishRobotState+0x68>)
 80090d2:	480d      	ldr	r0, [pc, #52]	@ (8009108 <publishRobotState+0x6c>)
 80090d4:	f7f9 ff62 	bl	8002f9c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	odom_tf_msg.header.stamp = now;
 80090d8:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <publishRobotState+0x70>)
 80090da:	330c      	adds	r3, #12
 80090dc:	463a      	mov	r2, r7
 80090de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090e2:	e883 0003 	stmia.w	r3, {r0, r1}
	tf_broadcaster.sendTransform(odom_tf_msg);
 80090e6:	4909      	ldr	r1, [pc, #36]	@ (800910c <publishRobotState+0x70>)
 80090e8:	4809      	ldr	r0, [pc, #36]	@ (8009110 <publishRobotState+0x74>)
 80090ea:	f7fd ffe3 	bl	80070b4 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200022a0 	.word	0x200022a0
 80090fc:	20004598 	.word	0x20004598
 8009100:	200048a0 	.word	0x200048a0
 8009104:	20004528 	.word	0x20004528
 8009108:	20004580 	.word	0x20004580
 800910c:	200048b8 	.word	0x200048b8
 8009110:	20004928 	.word	0x20004928
 8009114:	00000000 	.word	0x00000000

08009118 <calculateOdometry>:
/* PUBLISHING FUNCTIONS END */

/* DATA HANDLE FUNCTIONS START */
void calculateOdometry(void)
{
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b08c      	sub	sp, #48	@ 0x30
 800911c:	af00      	add	r7, sp, #0
	float w[NUM_OF_MOTOR] = { 0.0 };
 800911e:	f107 0310 	add.w	r3, r7, #16
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	605a      	str	r2, [r3, #4]
 8009128:	609a      	str	r2, [r3, #8]
 800912a:	60da      	str	r2, [r3, #12]
	float new_yaw, diff_yaw;

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009130:	e036      	b.n	80091a0 <calculateOdometry+0x88>
	{
		w[i] = mecabot_motor[i]->direction * TICK2RAD(diff_tick[i] / dt[robot_info_publish_event]);
 8009132:	4aa1      	ldr	r2, [pc, #644]	@ (80093b8 <calculateOdometry+0x2a0>)
 8009134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913a:	f993 3000 	ldrsb.w	r3, [r3]
 800913e:	4618      	mov	r0, r3
 8009140:	f7f7 f9cc 	bl	80004dc <__aeabi_i2d>
 8009144:	4604      	mov	r4, r0
 8009146:	460d      	mov	r5, r1
 8009148:	4a9c      	ldr	r2, [pc, #624]	@ (80093bc <calculateOdometry+0x2a4>)
 800914a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009150:	461a      	mov	r2, r3
 8009152:	4b9b      	ldr	r3, [pc, #620]	@ (80093c0 <calculateOdometry+0x2a8>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	fbb2 f3f3 	udiv	r3, r2, r3
 800915a:	4a9a      	ldr	r2, [pc, #616]	@ (80093c4 <calculateOdometry+0x2ac>)
 800915c:	fba2 2303 	umull	r2, r3, r2, r3
 8009160:	091b      	lsrs	r3, r3, #4
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4618      	mov	r0, r3
 8009166:	f7f7 f9a9 	bl	80004bc <__aeabi_ui2d>
 800916a:	a38f      	add	r3, pc, #572	@ (adr r3, 80093a8 <calculateOdometry+0x290>)
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f7f7 fa1e 	bl	80005b0 <__aeabi_dmul>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4620      	mov	r0, r4
 800917a:	4629      	mov	r1, r5
 800917c:	f7f7 fa18 	bl	80005b0 <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4610      	mov	r0, r2
 8009186:	4619      	mov	r1, r3
 8009188:	f7f7 fd0a 	bl	8000ba0 <__aeabi_d2f>
 800918c:	4602      	mov	r2, r0
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3330      	adds	r3, #48	@ 0x30
 8009194:	443b      	add	r3, r7
 8009196:	f843 2c20 	str.w	r2, [r3, #-32]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800919a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919c:	3301      	adds	r3, #1
 800919e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	ddc5      	ble.n	8009132 <calculateOdometry+0x1a>
	}

	float C = 2 / (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y);
 80091a6:	4b88      	ldr	r3, [pc, #544]	@ (80093c8 <calculateOdometry+0x2b0>)
 80091a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	odom_vel[linear_x]  = (WHEEL_RADIUS / 4) * ( w[0] + w[1] + w[2] + w[3]);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7f7 fd4b 	bl	8000c4c <__addsf3>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f7f7 fd44 	bl	8000c4c <__addsf3>
 80091c4:	4603      	mov	r3, r0
 80091c6:	461a      	mov	r2, r3
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7f7 fd3d 	bl	8000c4c <__addsf3>
 80091d2:	4603      	mov	r3, r0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f7 f993 	bl	8000500 <__aeabi_f2d>
 80091da:	a375      	add	r3, pc, #468	@ (adr r3, 80093b0 <calculateOdometry+0x298>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 f9e6 	bl	80005b0 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4610      	mov	r0, r2
 80091ea:	4619      	mov	r1, r3
 80091ec:	f7f7 fcd8 	bl	8000ba0 <__aeabi_d2f>
 80091f0:	4603      	mov	r3, r0
 80091f2:	4a76      	ldr	r2, [pc, #472]	@ (80093cc <calculateOdometry+0x2b4>)
 80091f4:	6013      	str	r3, [r2, #0]
	odom_vel[linear_y]  = (WHEEL_RADIUS / 4) * (-w[0] + w[1] + w[2] - w[3]);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f7 fd23 	bl	8000c48 <__aeabi_fsub>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7f7 fd1e 	bl	8000c4c <__addsf3>
 8009210:	4603      	mov	r3, r0
 8009212:	461a      	mov	r2, r3
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f7f7 fd15 	bl	8000c48 <__aeabi_fsub>
 800921e:	4603      	mov	r3, r0
 8009220:	4618      	mov	r0, r3
 8009222:	f7f7 f96d 	bl	8000500 <__aeabi_f2d>
 8009226:	a362      	add	r3, pc, #392	@ (adr r3, 80093b0 <calculateOdometry+0x298>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f7 f9c0 	bl	80005b0 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f7f7 fcb2 	bl	8000ba0 <__aeabi_d2f>
 800923c:	4603      	mov	r3, r0
 800923e:	4a63      	ldr	r2, [pc, #396]	@ (80093cc <calculateOdometry+0x2b4>)
 8009240:	6053      	str	r3, [r2, #4]
	odom_vel[angular_z] = (WHEEL_RADIUS / 4) * C * (-w[0] + w[1] - w[2] + w[3]);
 8009242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009244:	f7f7 f95c 	bl	8000500 <__aeabi_f2d>
 8009248:	a359      	add	r3, pc, #356	@ (adr r3, 80093b0 <calculateOdometry+0x298>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9af 	bl	80005b0 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4614      	mov	r4, r2
 8009258:	461d      	mov	r5, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7f7 fcf1 	bl	8000c48 <__aeabi_fsub>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7f7 fcea 	bl	8000c48 <__aeabi_fsub>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7f7 fce5 	bl	8000c4c <__addsf3>
 8009282:	4603      	mov	r3, r0
 8009284:	4618      	mov	r0, r3
 8009286:	f7f7 f93b 	bl	8000500 <__aeabi_f2d>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f7 f98d 	bl	80005b0 <__aeabi_dmul>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	f7f7 fc7f 	bl	8000ba0 <__aeabi_d2f>
 80092a2:	4603      	mov	r3, r0
 80092a4:	4a49      	ldr	r2, [pc, #292]	@ (80093cc <calculateOdometry+0x2b4>)
 80092a6:	6093      	str	r3, [r2, #8]

	Quaternion_t quat_buffer;
	mecabot_imu_get_quaternion(&quat_buffer);
 80092a8:	463b      	mov	r3, r7
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 f978 	bl	800a5a0 <mecabot_imu_get_quaternion>
	new_yaw = quat_getYaw(quat_buffer);
 80092b0:	463b      	mov	r3, r7
 80092b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092b4:	f7f8 ffc2 	bl	800223c <quat_getYaw>
 80092b8:	6278      	str	r0, [r7, #36]	@ 0x24
	diff_yaw = new_yaw - odom_pose[angular_z];
 80092ba:	4b45      	ldr	r3, [pc, #276]	@ (80093d0 <calculateOdometry+0x2b8>)
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	4619      	mov	r1, r3
 80092c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092c2:	f7f7 fcc1 	bl	8000c48 <__aeabi_fsub>
 80092c6:	4603      	mov	r3, r0
 80092c8:	623b      	str	r3, [r7, #32]

	odom_pose[linear_x] += (odom_vel[linear_x] * cos(new_yaw) + odom_vel[linear_y] * sin(new_yaw)) * dt[robot_info_publish_event];
 80092ca:	4b40      	ldr	r3, [pc, #256]	@ (80093cc <calculateOdometry+0x2b4>)
 80092cc:	681c      	ldr	r4, [r3, #0]
 80092ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092d0:	f7f8 ff9c 	bl	800220c <_ZSt3cosf>
 80092d4:	4603      	mov	r3, r0
 80092d6:	4619      	mov	r1, r3
 80092d8:	4620      	mov	r0, r4
 80092da:	f7f7 fdbf 	bl	8000e5c <__aeabi_fmul>
 80092de:	4603      	mov	r3, r0
 80092e0:	461d      	mov	r5, r3
 80092e2:	4b3a      	ldr	r3, [pc, #232]	@ (80093cc <calculateOdometry+0x2b4>)
 80092e4:	685c      	ldr	r4, [r3, #4]
 80092e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092e8:	f7f8 ff9c 	bl	8002224 <_ZSt3sinf>
 80092ec:	4603      	mov	r3, r0
 80092ee:	4619      	mov	r1, r3
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7f7 fdb3 	bl	8000e5c <__aeabi_fmul>
 80092f6:	4603      	mov	r3, r0
 80092f8:	4619      	mov	r1, r3
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7f7 fca6 	bl	8000c4c <__addsf3>
 8009300:	4603      	mov	r3, r0
 8009302:	461c      	mov	r4, r3
 8009304:	4b2e      	ldr	r3, [pc, #184]	@ (80093c0 <calculateOdometry+0x2a8>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4618      	mov	r0, r3
 800930a:	f7f7 fd4f 	bl	8000dac <__aeabi_ui2f>
 800930e:	4603      	mov	r3, r0
 8009310:	4619      	mov	r1, r3
 8009312:	4620      	mov	r0, r4
 8009314:	f7f7 fda2 	bl	8000e5c <__aeabi_fmul>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	4b2c      	ldr	r3, [pc, #176]	@ (80093d0 <calculateOdometry+0x2b8>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7f7 fc92 	bl	8000c4c <__addsf3>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	4b28      	ldr	r3, [pc, #160]	@ (80093d0 <calculateOdometry+0x2b8>)
 800932e:	601a      	str	r2, [r3, #0]
	odom_pose[linear_y] += (odom_vel[linear_x] * sin(new_yaw) + odom_vel[linear_y] * cos(new_yaw)) * dt[robot_info_publish_event];
 8009330:	4b26      	ldr	r3, [pc, #152]	@ (80093cc <calculateOdometry+0x2b4>)
 8009332:	681c      	ldr	r4, [r3, #0]
 8009334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009336:	f7f8 ff75 	bl	8002224 <_ZSt3sinf>
 800933a:	4603      	mov	r3, r0
 800933c:	4619      	mov	r1, r3
 800933e:	4620      	mov	r0, r4
 8009340:	f7f7 fd8c 	bl	8000e5c <__aeabi_fmul>
 8009344:	4603      	mov	r3, r0
 8009346:	461d      	mov	r5, r3
 8009348:	4b20      	ldr	r3, [pc, #128]	@ (80093cc <calculateOdometry+0x2b4>)
 800934a:	685c      	ldr	r4, [r3, #4]
 800934c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800934e:	f7f8 ff5d 	bl	800220c <_ZSt3cosf>
 8009352:	4603      	mov	r3, r0
 8009354:	4619      	mov	r1, r3
 8009356:	4620      	mov	r0, r4
 8009358:	f7f7 fd80 	bl	8000e5c <__aeabi_fmul>
 800935c:	4603      	mov	r3, r0
 800935e:	4619      	mov	r1, r3
 8009360:	4628      	mov	r0, r5
 8009362:	f7f7 fc73 	bl	8000c4c <__addsf3>
 8009366:	4603      	mov	r3, r0
 8009368:	461c      	mov	r4, r3
 800936a:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <calculateOdometry+0x2a8>)
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	4618      	mov	r0, r3
 8009370:	f7f7 fd1c 	bl	8000dac <__aeabi_ui2f>
 8009374:	4603      	mov	r3, r0
 8009376:	4619      	mov	r1, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f7f7 fd6f 	bl	8000e5c <__aeabi_fmul>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	4b13      	ldr	r3, [pc, #76]	@ (80093d0 <calculateOdometry+0x2b8>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f7f7 fc5f 	bl	8000c4c <__addsf3>
 800938e:	4603      	mov	r3, r0
 8009390:	461a      	mov	r2, r3
 8009392:	4b0f      	ldr	r3, [pc, #60]	@ (80093d0 <calculateOdometry+0x2b8>)
 8009394:	605a      	str	r2, [r3, #4]
	odom_pose[angular_z] = new_yaw;
 8009396:	4a0e      	ldr	r2, [pc, #56]	@ (80093d0 <calculateOdometry+0x2b8>)
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	6093      	str	r3, [r2, #8]
}
 800939c:	bf00      	nop
 800939e:	3730      	adds	r7, #48	@ 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bdb0      	pop	{r4, r5, r7, pc}
 80093a4:	f3af 8000 	nop.w
 80093a8:	54442eea 	.word	0x54442eea
 80093ac:	400921fb 	.word	0x400921fb
 80093b0:	eb851eb8 	.word	0xeb851eb8
 80093b4:	3f7eb851 	.word	0x3f7eb851
 80093b8:	20004a48 	.word	0x20004a48
 80093bc:	200049fc 	.word	0x200049fc
 80093c0:	20004a14 	.word	0x20004a14
 80093c4:	cccccccd 	.word	0xcccccccd
 80093c8:	40fcf6e5 	.word	0x40fcf6e5
 80093cc:	200049cc 	.word	0x200049cc
 80093d0:	200049c0 	.word	0x200049c0
 80093d4:	00000000 	.word	0x00000000

080093d8 <calculateWheelVelocity>:
void calculateWheelVelocity(void)
{
 80093d8:	b590      	push	{r4, r7, lr}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
	float C = (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y) / 2;
 80093de:	4b54      	ldr	r3, [pc, #336]	@ (8009530 <calculateWheelVelocity+0x158>)
 80093e0:	607b      	str	r3, [r7, #4]
	// Inverse kinematics
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] - C * goal_vel[angular_z]);
 80093e2:	4b54      	ldr	r3, [pc, #336]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a53      	ldr	r2, [pc, #332]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80093e8:	6852      	ldr	r2, [r2, #4]
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f7 fc2b 	bl	8000c48 <__aeabi_fsub>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461c      	mov	r4, r3
 80093f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 fd2d 	bl	8000e5c <__aeabi_fmul>
 8009402:	4603      	mov	r3, r0
 8009404:	4619      	mov	r1, r3
 8009406:	4620      	mov	r0, r4
 8009408:	f7f7 fc1e 	bl	8000c48 <__aeabi_fsub>
 800940c:	4603      	mov	r3, r0
 800940e:	4618      	mov	r0, r3
 8009410:	f7f7 f876 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
 8009414:	a344      	add	r3, pc, #272	@ (adr r3, 8009528 <calculateWheelVelocity+0x150>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7f7 f8c9 	bl	80005b0 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	f7f7 fbbb 	bl	8000ba0 <__aeabi_d2f>
 800942a:	4603      	mov	r3, r0
 800942c:	4a42      	ldr	r2, [pc, #264]	@ (8009538 <calculateWheelVelocity+0x160>)
 800942e:	6013      	str	r3, [r2, #0]
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] + C * goal_vel[angular_z]);
 8009430:	4b40      	ldr	r3, [pc, #256]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a3f      	ldr	r2, [pc, #252]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009436:	6852      	ldr	r2, [r2, #4]
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7f7 fc06 	bl	8000c4c <__addsf3>
 8009440:	4603      	mov	r3, r0
 8009442:	461c      	mov	r4, r3
 8009444:	4b3b      	ldr	r3, [pc, #236]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4618      	mov	r0, r3
 800944c:	f7f7 fd06 	bl	8000e5c <__aeabi_fmul>
 8009450:	4603      	mov	r3, r0
 8009452:	4619      	mov	r1, r3
 8009454:	4620      	mov	r0, r4
 8009456:	f7f7 fbf9 	bl	8000c4c <__addsf3>
 800945a:	4603      	mov	r3, r0
 800945c:	4618      	mov	r0, r3
 800945e:	f7f7 f84f 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
 8009462:	a331      	add	r3, pc, #196	@ (adr r3, 8009528 <calculateWheelVelocity+0x150>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f7 f8a2 	bl	80005b0 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4610      	mov	r0, r2
 8009472:	4619      	mov	r1, r3
 8009474:	f7f7 fb94 	bl	8000ba0 <__aeabi_d2f>
 8009478:	4603      	mov	r3, r0
 800947a:	4a2f      	ldr	r2, [pc, #188]	@ (8009538 <calculateWheelVelocity+0x160>)
 800947c:	6053      	str	r3, [r2, #4]
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] - C * goal_vel[angular_z]);
 800947e:	4b2d      	ldr	r3, [pc, #180]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a2c      	ldr	r2, [pc, #176]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009484:	6852      	ldr	r2, [r2, #4]
 8009486:	4611      	mov	r1, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f7f7 fbdf 	bl	8000c4c <__addsf3>
 800948e:	4603      	mov	r3, r0
 8009490:	461c      	mov	r4, r3
 8009492:	4b28      	ldr	r3, [pc, #160]	@ (8009534 <calculateWheelVelocity+0x15c>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	f7f7 fcdf 	bl	8000e5c <__aeabi_fmul>
 800949e:	4603      	mov	r3, r0
 80094a0:	4619      	mov	r1, r3
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7f7 fbd0 	bl	8000c48 <__aeabi_fsub>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f7 f828 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
 80094b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009528 <calculateWheelVelocity+0x150>)
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	f7f7 f87b 	bl	80005b0 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4610      	mov	r0, r2
 80094c0:	4619      	mov	r1, r3
 80094c2:	f7f7 fb6d 	bl	8000ba0 <__aeabi_d2f>
 80094c6:	4603      	mov	r3, r0
 80094c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009538 <calculateWheelVelocity+0x160>)
 80094ca:	6093      	str	r3, [r2, #8]
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] + C * goal_vel[angular_z]);
 80094cc:	4b19      	ldr	r3, [pc, #100]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a18      	ldr	r2, [pc, #96]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80094d2:	6852      	ldr	r2, [r2, #4]
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f7 fbb6 	bl	8000c48 <__aeabi_fsub>
 80094dc:	4603      	mov	r3, r0
 80094de:	461c      	mov	r4, r3
 80094e0:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <calculateWheelVelocity+0x15c>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 fcb8 	bl	8000e5c <__aeabi_fmul>
 80094ec:	4603      	mov	r3, r0
 80094ee:	4619      	mov	r1, r3
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7f7 fbab 	bl	8000c4c <__addsf3>
 80094f6:	4603      	mov	r3, r0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f7 f801 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
 80094fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009528 <calculateWheelVelocity+0x150>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f7 f854 	bl	80005b0 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4610      	mov	r0, r2
 800950e:	4619      	mov	r1, r3
 8009510:	f7f7 fb46 	bl	8000ba0 <__aeabi_d2f>
 8009514:	4603      	mov	r3, r0
 8009516:	4a08      	ldr	r2, [pc, #32]	@ (8009538 <calculateWheelVelocity+0x160>)
 8009518:	60d3      	str	r3, [r2, #12]
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	bd90      	pop	{r4, r7, pc}
 8009522:	bf00      	nop
 8009524:	f3af 8000 	nop.w
 8009528:	aaaaaaab 	.word	0xaaaaaaab
 800952c:	4040aaaa 	.word	0x4040aaaa
 8009530:	3e018937 	.word	0x3e018937
 8009534:	200049d8 	.word	0x200049d8
 8009538:	200049e4 	.word	0x200049e4

0800953c <controlMotors>:
/* DATA HANDLE FUNCTIONS END */

/* CONTROL FUNCTIONS START */
void controlMotors(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
 8009546:	e01c      	b.n	8009582 <controlMotors+0x46>
	{
		wheel_angular_vel[i] = constraint(wheel_angular_vel[i], WHEEL_MIN_ANGULAR_VELOCITY, WHEEL_MAX_ANGULAR_VELOCITY);
 8009548:	4a12      	ldr	r2, [pc, #72]	@ (8009594 <controlMotors+0x58>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009550:	4a11      	ldr	r2, [pc, #68]	@ (8009598 <controlMotors+0x5c>)
 8009552:	4912      	ldr	r1, [pc, #72]	@ (800959c <controlMotors+0x60>)
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff f8e3 	bl	8008720 <_Z10constraintfff>
 800955a:	4602      	mov	r2, r0
 800955c:	490d      	ldr	r1, [pc, #52]	@ (8009594 <controlMotors+0x58>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		mecabot_motor_set_angular_velocity(mecabot_motor[i], wheel_angular_vel[i]);
 8009564:	4a0e      	ldr	r2, [pc, #56]	@ (80095a0 <controlMotors+0x64>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800956c:	4909      	ldr	r1, [pc, #36]	@ (8009594 <controlMotors+0x58>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f000 ff26 	bl	800a3c8 <mecabot_motor_set_angular_velocity>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b03      	cmp	r3, #3
 8009586:	dddf      	ble.n	8009548 <controlMotors+0xc>
	}
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200049e4 	.word	0x200049e4
 8009598:	40c90fdb 	.word	0x40c90fdb
 800959c:	c0c90fdb 	.word	0xc0c90fdb
 80095a0:	20004a48 	.word	0x20004a48

080095a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	e00c      	b.n	80095ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	fa22 f103 	lsr.w	r1, r2, r3
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	b2ca      	uxtb	r2, r1
 80095c6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d9ef      	bls.n	80095b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e010      	b.n	8009618 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	440a      	add	r2, r1
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	4611      	mov	r1, r2
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	00d2      	lsls	r2, r2, #3
 8009608:	fa01 f202 	lsl.w	r2, r1, r2
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3301      	adds	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b03      	cmp	r3, #3
 800961c:	d9eb      	bls.n	80095f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800961e:	bf00      	nop
 8009620:	bf00      	nop
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr

0800962a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e01b      	b.n	8009672 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d110      	bne.n	800966c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	60da      	str	r2, [r3, #12]
        return true;
 8009668:	2301      	movs	r3, #1
 800966a:	e006      	b.n	800967a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b09      	cmp	r3, #9
 8009676:	dde0      	ble.n	800963a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8009678:	2300      	movs	r3, #0
  }
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	4a04      	ldr	r2, [pc, #16]	@ (80096a0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	bc80      	pop	{r7}
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	08012534 	.word	0x08012534

080096a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff ffe5 	bl	8009684 <_ZN3ros11Subscriber_C1Ev>
 80096ba:	4a0b      	ldr	r2, [pc, #44]	@ (80096e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3310      	adds	r3, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fd f9cf 	bl	8006a68 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	609a      	str	r2, [r3, #8]
  };
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	080123b8 	.word	0x080123b8

080096ec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 fdc9 	bl	8003290 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009704:	461a      	mov	r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009710:	461a      	mov	r2, r3
 8009712:	2300      	movs	r3, #0
 8009714:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800971c:	461a      	mov	r2, r3
 800971e:	2300      	movs	r3, #0
 8009720:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009728:	461a      	mov	r2, r3
 800972a:	2300      	movs	r3, #0
 800972c:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e018      	b.n	8009778 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 800974e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	605a      	str	r2, [r3, #4]
        return true;
 800976e:	2301      	movs	r3, #1
 8009770:	e006      	b.n	8009780 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b09      	cmp	r3, #9
 800977c:	dde3      	ble.n	8009746 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800977e:	2300      	movs	r3, #0
  }
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr

0800978a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3304      	adds	r3, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f7f9 fda6 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 800979c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d905      	bls.n	80097c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d905      	bls.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097e2:	461a      	mov	r2, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d013      	beq.n	8009818 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f9 fd77 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	429a      	cmp	r2, r3
 8009806:	bf8c      	ite	hi
 8009808:	2301      	movhi	r3, #1
 800980a:	2300      	movls	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8009812:	f06f 0301 	mvn.w	r3, #1
 8009816:	e1e8      	b.n	8009bea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      int data = hardware_.read();
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3304      	adds	r3, #4
 800981c:	4618      	mov	r0, r3
 800981e:	f7f9 fd44 	bl	80032aa <_ZN13STM32Hardware4readEv>
 8009822:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f2c0 81c1 	blt.w	8009bae <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x424>
      checksum_ += data;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009832:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4413      	add	r3, r2
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800983e:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009848:	2b07      	cmp	r3, #7
 800984a:	d124      	bne.n	8009896 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800985c:	674a      	str	r2, [r1, #116]	@ 0x74
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	b2d1      	uxtb	r1, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4413      	add	r3, r2
 8009866:	460a      	mov	r2, r1
 8009868:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009872:	3b01      	subs	r3, #1
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800987a:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1af      	bne.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800988e:	461a      	mov	r2, r3
 8009890:	2308      	movs	r3, #8
 8009892:	6693      	str	r3, [r2, #104]	@ 0x68
 8009894:	e7a8      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800989c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d12e      	bne.n	8009900 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x176>
        if (data == 0xff)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2bff      	cmp	r3, #255	@ 0xff
 80098a6:	d110      	bne.n	80098ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x140>
          mode_++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098b0:	3301      	adds	r3, #1
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80098b8:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3314      	adds	r3, #20
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80098c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80098c8:	e78e      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7f9 fd0a 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 80098d4:	4602      	mov	r2, r0
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098de:	4293      	cmp	r3, r2
 80098e0:	bf8c      	ite	hi
 80098e2:	2301      	movhi	r3, #1
 80098e4:	2300      	movls	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f43f af7d 	beq.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          configured_ = false;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 80098fa:	f06f 0301 	mvn.w	r3, #1
 80098fe:	e174      	b.n	8009bea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009908:	2b01      	cmp	r3, #1
 800990a:	d11e      	bne.n	800994a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009910:	d109      	bne.n	8009926 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x19c>
          mode_++;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800991a:	3301      	adds	r3, #1
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8009922:	6693      	str	r3, [r2, #104]	@ 0x68
 8009924:	e760      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800992c:	461a      	mov	r2, r3
 800992e:	2300      	movs	r3, #0
 8009930:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009938:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800993c:	2b00      	cmp	r3, #0
 800993e:	f47f af53 	bne.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9a4 	bl	8009c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
 8009948:	e74e      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009952:	2b02      	cmp	r3, #2
 8009954:	d11b      	bne.n	800998e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x204>
        bytes_ = data;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800995c:	461a      	mov	r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009968:	461a      	mov	r2, r3
 800996a:	2300      	movs	r3, #0
 800996c:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009976:	3301      	adds	r3, #1
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800997e:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009986:	461a      	mov	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6793      	str	r3, [r2, #120]	@ 0x78
 800998c:	e72c      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009996:	2b03      	cmp	r3, #3
 8009998:	d114      	bne.n	80099c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	4413      	add	r3, r2
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80099ae:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099b8:	3301      	adds	r3, #1
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80099c0:	6693      	str	r3, [r2, #104]	@ 0x68
 80099c2:	e711      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d11b      	bne.n	8009a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d8:	425a      	negs	r2, r3
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	bf58      	it	pl
 80099e0:	4253      	negpl	r3, r2
 80099e2:	2bff      	cmp	r3, #255	@ 0xff
 80099e4:	d109      	bne.n	80099fa <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x270>
          mode_++;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ee:	3301      	adds	r3, #1
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80099f6:	6693      	str	r3, [r2, #104]	@ 0x68
 80099f8:	e6f6      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a00:	461a      	mov	r2, r3
 8009a02:	2300      	movs	r3, #0
 8009a04:	6693      	str	r3, [r2, #104]	@ 0x68
 8009a06:	e6ef      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a10:	2b05      	cmp	r3, #5
 8009a12:	d115      	bne.n	8009a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x2b6>
        topic_ = data;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a28:	3301      	adds	r3, #1
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8009a30:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6793      	str	r3, [r2, #120]	@ 0x78
 8009a3e:	e6d3      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d11e      	bne.n	8009a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	4413      	add	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8009a60:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a68:	461a      	mov	r2, r3
 8009a6a:	2307      	movs	r3, #7
 8009a6c:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f47f aeb6 	bne.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a82:	461a      	mov	r2, r3
 8009a84:	2308      	movs	r3, #8
 8009a86:	6693      	str	r3, [r2, #104]	@ 0x68
 8009a88:	e6ae      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a92:	2b08      	cmp	r3, #8
 8009a94:	f47f aea8 	bne.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009aaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009aac:	425a      	negs	r2, r3
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	bf58      	it	pl
 8009ab4:	4253      	negpl	r3, r2
 8009ab6:	2bff      	cmp	r3, #255	@ 0xff
 8009ab8:	f47f ae96 	bne.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d116      	bne.n	8009af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36c>
            requestSyncTime();
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f8e1 	bl	8009c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f8fb 	bl	8009cca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009ada:	461a      	mov	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8009af0:	f04f 33ff 	mov.w	r3, #4294967295
 8009af4:	e079      	b.n	8009bea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009afe:	2b0a      	cmp	r3, #10
 8009b00:	d106      	bne.n	8009b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x386>
            syncTime(message_in);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3318      	adds	r3, #24
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9b7 	bl	8009e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>
 8009b0e:	e66b      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	d110      	bne.n	8009b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8009b22:	3310      	adds	r3, #16
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	3218      	adds	r2, #24
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f9 f897 	bl	8002c5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8009b3c:	e654      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b46:	2b0b      	cmp	r3, #11
 8009b48:	d106      	bne.n	8009b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3ce>
            configured_ = false;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8009b56:	e647      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b60:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f43f ae3a 	beq.w	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009b86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b92:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	3218      	adds	r2, #24
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4798      	blx	r3
    while (true)
 8009bac:	e61c      	b.n	80097e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        break;
 8009bae:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009bb6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d014      	beq.n	8009be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d909      	bls.n	8009be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
      requestSyncTime();
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f85b 	bl	8009c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009be0:	461a      	mov	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 8009be8:	2300      	movs	r3, #0
  }
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	e9c7 2300 	strd	r2, r3, [r7]
      return fmod(__type(__x), __type(__y));
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7f6 fc7e 	bl	8000500 <__aeabi_f2d>
 8009c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c08:	f005 fcf8 	bl	800f5fc <fmod>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
    }
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv>:
  Time now()
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f9 fb5c 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 8009c30:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7f8 fb5e 	bl	80022f4 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4a13      	ldr	r2, [pc, #76]	@ (8009c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv+0x6c>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	099a      	lsrs	r2, r3, #6
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv+0x6c>)
 8009c50:	fba3 1302 	umull	r1, r3, r3, r2
 8009c54:	099b      	lsrs	r3, r3, #6
 8009c56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	4a0a      	ldr	r2, [pc, #40]	@ (8009c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3nowEv+0x70>)
 8009c62:	fb03 f202 	mul.w	r2, r3, r2
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	441a      	add	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f882 	bl	800ad80 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8009c7c:	bf00      	nop
  }
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	10624dd3 	.word	0x10624dd3
 8009c8c:	000f4240 	.word	0x000f4240

08009c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8009c98:	f107 030c 	add.w	r3, r7, #12
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7f8 fb49 	bl	8002334 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f107 020c 	add.w	r2, r7, #12
 8009cac:	210a      	movs	r1, #10
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
    rt_time = hardware_.time();
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f9 fb16 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	609a      	str	r2, [r3, #8]
  }
 8009cc2:	bf00      	nop
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8009cca:	b590      	push	{r4, r7, lr}
 8009ccc:	b08b      	sub	sp, #44	@ 0x2c
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8009cd2:	f107 030c 	add.w	r3, r7, #12
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f8 fc16 	bl	8002508 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce0:	e05a      	b.n	8009d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04f      	beq.n	8009d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cf6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d08:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d18:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d20:	6859      	ldr	r1, [r3, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d26:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3308      	adds	r3, #8
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4608      	mov	r0, r1
 8009d38:	4798      	blx	r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d42:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	6859      	ldr	r1, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d50:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	330c      	adds	r3, #12
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4608      	mov	r0, r1
 8009d62:	4798      	blx	r3
 8009d64:	4603      	mov	r3, r0
 8009d66:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8009d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d6c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681c      	ldr	r4, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d78:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f9 f91f 	bl	8002fc4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8009d86:	4601      	mov	r1, r0
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	3301      	adds	r3, #1
 8009d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9a:	2b09      	cmp	r3, #9
 8009d9c:	dda1      	ble.n	8009ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da2:	e05e      	b.n	8009e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x198>
    {
      if (subscribers[i] != 0) // non-empty slot
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009da8:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d053      	beq.n	8009e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x192>
      {
        ti.topic_id = subscribers[i]->id_;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009db8:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dca:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dda:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009dde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009de6:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3308      	adds	r3, #8
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4608      	mov	r0, r1
 8009df6:	4798      	blx	r3
 8009df8:	4603      	mov	r3, r0
 8009dfa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e00:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	330c      	adds	r3, #12
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4798      	blx	r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8009e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e26:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681c      	ldr	r4, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e32:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009e36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8009e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4798      	blx	r3
 8009e50:	4601      	mov	r1, r0
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	461a      	mov	r2, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	3301      	adds	r3, #1
 8009e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e64:	2b09      	cmp	r3, #9
 8009e66:	dd9d      	ble.n	8009da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8009e74:	bf00      	nop
 8009e76:	372c      	adds	r7, #44	@ 0x2c
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}

08009e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8009e86:	f107 0308 	add.w	r3, r7, #8
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f8 fa52 	bl	8002334 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7f9 fa27 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8009ea4:	f107 0308 	add.w	r3, r7, #8
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f8 fab1 	bl	8002412 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	4915      	ldr	r1, [pc, #84]	@ (8009f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8009eb6:	fba1 1303 	umull	r1, r3, r1, r3
 8009eba:	099b      	lsrs	r3, r3, #6
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009ec0:	6939      	ldr	r1, [r7, #16]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4b11      	ldr	r3, [pc, #68]	@ (8009f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8009ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8009eca:	099b      	lsrs	r3, r3, #6
 8009ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009ed0:	fb00 f303 	mul.w	r3, r0, r3
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8009f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8009ed8:	fb02 f303 	mul.w	r3, r2, r3
 8009edc:	440b      	add	r3, r1
 8009ede:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8009ee0:	f107 0308 	add.w	r3, r7, #8
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f8b7 	bl	800a05c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f9 f9f8 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8009f04:	bf00      	nop
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	10624dd3 	.word	0x10624dd3
 8009f10:	000f4240 	.word	0x000f4240

08009f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b63      	cmp	r3, #99	@ 0x63
 8009f24:	dd0b      	ble.n	8009f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009f2c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009f30:	f083 0301 	eor.w	r3, r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e087      	b.n	800a04e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f4a:	3318      	adds	r3, #24
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4790      	blx	r2
 8009f54:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f5c:	22ff      	movs	r2, #255	@ 0xff
 8009f5e:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f66:	22fe      	movs	r2, #254	@ 0xfe
 8009f68:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f74:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	0a1b      	lsrs	r3, r3, #8
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f86:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f8e:	7e9a      	ldrb	r2, [r3, #26]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f96:	7edb      	ldrb	r3, [r3, #27]
 8009f98:	4413      	add	r3, r2
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	43db      	mvns	r3, r3
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fa6:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb2:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	b21b      	sxth	r3, r3
 8009fb8:	121b      	asrs	r3, r3, #8
 8009fba:	b21b      	sxth	r3, r3
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fc4:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009fca:	2305      	movs	r3, #5
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	e00d      	b.n	8009fec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fda:	3318      	adds	r3, #24
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	3306      	adds	r3, #6
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	ddec      	ble.n	8009fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	3307      	adds	r3, #7
 8009ffa:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	425a      	negs	r2, r3
 800a000:	b2db      	uxtb	r3, r3
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	bf58      	it	pl
 800a006:	4253      	negpl	r3, r2
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	1c59      	adds	r1, r3, #1
 800a00e:	6179      	str	r1, [r7, #20]
 800a010:	43d2      	mvns	r2, r2
 800a012:	b2d1      	uxtb	r1, r2
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a01c:	3318      	adds	r3, #24
 800a01e:	460a      	mov	r2, r1
 800a020:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a028:	dc0b      	bgt.n	800a042 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1d18      	adds	r0, r3, #4
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a034:	3318      	adds	r3, #24
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	4619      	mov	r1, r3
 800a03a:	f7f9 f944 	bl	80032c6 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	e005      	b.n	800a04e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800a042:	4905      	ldr	r1, [pc, #20]	@ (800a058 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f847 	bl	800a0d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 800a04a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	0801232c 	.word	0x0801232c

0800a05c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7f9 f93c 	bl	80032e8 <_ZN13STM32Hardware4timeEv>
 800a070:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4914      	ldr	r1, [pc, #80]	@ (800a0cc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 800a07a:	fba1 1303 	umull	r1, r3, r1, r3
 800a07e:	099b      	lsrs	r3, r3, #6
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	1e5a      	subs	r2, r3, #1
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	6859      	ldr	r1, [r3, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4b0f      	ldr	r3, [pc, #60]	@ (800a0cc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 800a090:	fba3 0302 	umull	r0, r3, r3, r2
 800a094:	099b      	lsrs	r3, r3, #6
 800a096:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a09a:	fb00 f303 	mul.w	r3, r0, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a0d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	1aca      	subs	r2, r1, r3
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 800a0aa:	4413      	add	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f103 020c 	add.w	r2, r3, #12
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f000 fe5f 	bl	800ad80 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	10624dd3 	.word	0x10624dd3
 800a0d0:	000f4240 	.word	0x000f4240
 800a0d4:	3b9aca00 	.word	0x3b9aca00

0800a0d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	2103      	movs	r1, #3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f804 	bl	800a0f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>
  }
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800a102:	f107 0314 	add.w	r3, r7, #20
 800a106:	4618      	mov	r0, r3
 800a108:	f7f8 fbbe 	bl	8002888 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f107 0214 	add.w	r2, r7, #20
 800a11e:	2107      	movs	r1, #7
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	4798      	blx	r3
  }
 800a124:	bf00      	nop
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <_Z41__static_initialization_and_destruction_0ii>:
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d132      	bne.n	800a1a2 <_Z41__static_initialization_and_destruction_0ii+0x76>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a142:	4293      	cmp	r3, r2
 800a144:	d12d      	bne.n	800a1a2 <_Z41__static_initialization_and_destruction_0ii+0x76>
};

SerialComm comm_rosserial(huart_rosserial);
 800a146:	4919      	ldr	r1, [pc, #100]	@ (800a1ac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a148:	4819      	ldr	r0, [pc, #100]	@ (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a14a:	f7f8 ff46 	bl	8002fda <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 800a14e:	4819      	ldr	r0, [pc, #100]	@ (800a1b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a150:	f7fe fa58 	bl	8008604 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>
                 	 	 	 	 	   "back_left_wheel_joint" , "back_right_wheel_joint"};

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 800a154:	2301      	movs	r3, #1
 800a156:	4a18      	ldr	r2, [pc, #96]	@ (800a1b8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800a158:	4918      	ldr	r1, [pc, #96]	@ (800a1bc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800a15a:	4819      	ldr	r0, [pc, #100]	@ (800a1c0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800a15c:	f7ff faa2 	bl	80096a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
sensor_msgs::Imu imu_msg;
 800a160:	4818      	ldr	r0, [pc, #96]	@ (800a1c4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800a162:	f7fa fe29 	bl	8004db8 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("/imu", &imu_msg);
 800a166:	2300      	movs	r3, #0
 800a168:	4a16      	ldr	r2, [pc, #88]	@ (800a1c4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800a16a:	4917      	ldr	r1, [pc, #92]	@ (800a1c8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800a16c:	4817      	ldr	r0, [pc, #92]	@ (800a1cc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800a16e:	f7f8 feff 	bl	8002f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::JointState joint_states_msg;
 800a172:	4817      	ldr	r0, [pc, #92]	@ (800a1d0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a174:	f7fb fc3a 	bl	80059ec <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher pub_joint_states("/joint_states", &joint_states_msg);
 800a178:	2300      	movs	r3, #0
 800a17a:	4a15      	ldr	r2, [pc, #84]	@ (800a1d0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a17c:	4915      	ldr	r1, [pc, #84]	@ (800a1d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800a17e:	4816      	ldr	r0, [pc, #88]	@ (800a1d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800a180:	f7f8 fef6 	bl	8002f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odom_msg;
 800a184:	4815      	ldr	r0, [pc, #84]	@ (800a1dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a186:	f7fe f939 	bl	80083fc <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher pub_odom("/odom", &odom_msg);
 800a18a:	2300      	movs	r3, #0
 800a18c:	4a13      	ldr	r2, [pc, #76]	@ (800a1dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a18e:	4914      	ldr	r1, [pc, #80]	@ (800a1e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800a190:	4814      	ldr	r0, [pc, #80]	@ (800a1e4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800a192:	f7f8 feed 	bl	8002f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

/*
* TF broadcaster
*/
geometry_msgs::TransformStamped odom_tf_msg; // tf information between "/odom" and "/baselink"
 800a196:	4814      	ldr	r0, [pc, #80]	@ (800a1e8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800a198:	f7fc fd66 	bl	8006c68 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 800a19c:	4813      	ldr	r0, [pc, #76]	@ (800a1ec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800a19e:	f7fc ff71 	bl	8007084 <_ZN2tf20TransformBroadcasterC1Ev>
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	200001c4 	.word	0x200001c4
 800a1b0:	20000294 	.word	0x20000294
 800a1b4:	200022a0 	.word	0x200022a0
 800a1b8:	08008815 	.word	0x08008815
 800a1bc:	08012368 	.word	0x08012368
 800a1c0:	20004358 	.word	0x20004358
 800a1c4:	200043b8 	.word	0x200043b8
 800a1c8:	08012324 	.word	0x08012324
 800a1cc:	20004510 	.word	0x20004510
 800a1d0:	20004528 	.word	0x20004528
 800a1d4:	08012314 	.word	0x08012314
 800a1d8:	20004580 	.word	0x20004580
 800a1dc:	20004598 	.word	0x20004598
 800a1e0:	08012300 	.word	0x08012300
 800a1e4:	200048a0 	.word	0x200048a0
 800a1e8:	200048b8 	.word	0x200048b8
 800a1ec:	20004928 	.word	0x20004928

0800a1f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3310      	adds	r3, #16
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7fc fc73 	bl	8006aec <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	3210      	adds	r2, #16
 800a20e:	4610      	mov	r0, r2
 800a210:	4798      	blx	r3
  }
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3310      	adds	r3, #16
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fc fc7b 	bl	8006b38 <_ZN13geometry_msgs5Twist7getTypeEv>
 800a242:	4603      	mov	r3, r0
  }
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3310      	adds	r3, #16
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fc fc79 	bl	8006b50 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800a25e:	4603      	mov	r3, r0
  }
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
    return configured_;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a276:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	bc80      	pop	{r7}
 800a282:	4770      	bx	lr

0800a284 <_GLOBAL__sub_I_comm_rosserial>:
 800a284:	b580      	push	{r7, lr}
 800a286:	af00      	add	r7, sp, #0
 800a288:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a28c:	2001      	movs	r0, #1
 800a28e:	f7ff ff4d 	bl	800a12c <_Z41__static_initialization_and_destruction_0ii>
 800a292:	bd80      	pop	{r7, pc}

0800a294 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bc80      	pop	{r7}
 800a2aa:	4770      	bx	lr

0800a2ac <millis>:

MPU6050_t my_mpu = {.address = MPU6050_ADDR_LOW};
MadgwickFilter_t my_filter;

uint32_t millis(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800a2b0:	f000 fe10 	bl	800aed4 <HAL_GetTick>
 800a2b4:	4603      	mov	r3, r0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <mecabot_motor_init>:

status_t mecabot_motor_init(void)
{
 800a2bc:	b590      	push	{r4, r7, lr}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a334 <mecabot_motor_init+0x78>)
 800a2c4:	463c      	mov	r4, r7
 800a2c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a2c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a2d0:	f7f6 ffd0 	bl	8001274 <Motor_Init>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	4a18      	ldr	r2, [pc, #96]	@ (800a338 <mecabot_motor_init+0x7c>)
 800a2d8:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 800a2de:	4b17      	ldr	r3, [pc, #92]	@ (800a33c <mecabot_motor_init+0x80>)
 800a2e0:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 800a2e2:	2308      	movs	r3, #8
 800a2e4:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a2ea:	f7f6 ffc3 	bl	8001274 <Motor_Init>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	4a11      	ldr	r2, [pc, #68]	@ (800a338 <mecabot_motor_init+0x7c>)
 800a2f2:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 800a2f4:	230c      	movs	r3, #12
 800a2f6:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 800a2f8:	4b10      	ldr	r3, [pc, #64]	@ (800a33c <mecabot_motor_init+0x80>)
 800a2fa:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 800a300:	463b      	mov	r3, r7
 800a302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a304:	f7f6 ffb6 	bl	8001274 <Motor_Init>
 800a308:	4603      	mov	r3, r0
 800a30a:	4a0b      	ldr	r2, [pc, #44]	@ (800a338 <mecabot_motor_init+0x7c>)
 800a30c:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 800a30e:	2304      	movs	r3, #4
 800a310:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 800a312:	4b0a      	ldr	r3, [pc, #40]	@ (800a33c <mecabot_motor_init+0x80>)
 800a314:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 800a316:	2302      	movs	r3, #2
 800a318:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 800a31a:	463b      	mov	r3, r7
 800a31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a31e:	f7f6 ffa9 	bl	8001274 <Motor_Init>
 800a322:	4603      	mov	r3, r0
 800a324:	4a04      	ldr	r2, [pc, #16]	@ (800a338 <mecabot_motor_init+0x7c>)
 800a326:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd90      	pop	{r4, r7, pc}
 800a332:	bf00      	nop
 800a334:	08012374 	.word	0x08012374
 800a338:	20004a48 	.word	0x20004a48
 800a33c:	40011000 	.word	0x40011000

0800a340 <mecabot_encoder_init>:

status_t mecabot_encoder_init(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 800a346:	4a18      	ldr	r2, [pc, #96]	@ (800a3a8 <mecabot_encoder_init+0x68>)
 800a348:	463b      	mov	r3, r7
 800a34a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a34e:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 800a352:	463b      	mov	r3, r7
 800a354:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a358:	f7f7 f887 	bl	800146a <Encoder_Init>
 800a35c:	4603      	mov	r3, r0
 800a35e:	4a13      	ldr	r2, [pc, #76]	@ (800a3ac <mecabot_encoder_init+0x6c>)
 800a360:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 800a362:	2300      	movs	r3, #0
 800a364:	80bb      	strh	r3, [r7, #4]
    encoder[front_right] = Encoder_Init(handle_encoder);
 800a366:	463b      	mov	r3, r7
 800a368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a36c:	f7f7 f87d 	bl	800146a <Encoder_Init>
 800a370:	4603      	mov	r3, r0
 800a372:	4a0e      	ldr	r2, [pc, #56]	@ (800a3ac <mecabot_encoder_init+0x6c>)
 800a374:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 800a376:	230c      	movs	r3, #12
 800a378:	80bb      	strh	r3, [r7, #4]
    encoder[back_left] = Encoder_Init(handle_encoder);
 800a37a:	463b      	mov	r3, r7
 800a37c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a380:	f7f7 f873 	bl	800146a <Encoder_Init>
 800a384:	4603      	mov	r3, r0
 800a386:	4a09      	ldr	r2, [pc, #36]	@ (800a3ac <mecabot_encoder_init+0x6c>)
 800a388:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 800a38a:	2304      	movs	r3, #4
 800a38c:	80bb      	strh	r3, [r7, #4]
    encoder[back_right] = Encoder_Init(handle_encoder);
 800a38e:	463b      	mov	r3, r7
 800a390:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a394:	f7f7 f869 	bl	800146a <Encoder_Init>
 800a398:	4603      	mov	r3, r0
 800a39a:	4a04      	ldr	r2, [pc, #16]	@ (800a3ac <mecabot_encoder_init+0x6c>)
 800a39c:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	08012384 	.word	0x08012384
 800a3ac:	20004a58 	.word	0x20004a58

0800a3b0 <mecabot_motor_start>:

    return MadgwickFilter_Init(&my_filter, filter_handle);
}

status_t mecabot_motor_start(Motor motor)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
    return Motor_Start(motor);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7f7 f80f 	bl	80013dc <Motor_Start>
 800a3be:	4603      	mov	r3, r0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <mecabot_motor_set_angular_velocity>:
{
    return Motor_Stop(motor);
}

status_t mecabot_motor_set_angular_velocity(Motor motor, float velocity)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
    int8_t direction = (velocity > 0) ? DIRECTION_FORWARD : DIRECTION_BACKWARD;
 800a3d2:	f04f 0100 	mov.w	r1, #0
 800a3d6:	6838      	ldr	r0, [r7, #0]
 800a3d8:	f7f6 fefc 	bl	80011d4 <__aeabi_fcmpgt>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <mecabot_motor_set_angular_velocity+0x1e>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e001      	b.n	800a3ea <mecabot_motor_set_angular_velocity+0x22>
 800a3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ea:	73fb      	strb	r3, [r7, #15]
    if (direction != motor->direction)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f993 3000 	ldrsb.w	r3, [r3]
 800a3f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d005      	beq.n	800a406 <mecabot_motor_set_angular_velocity+0x3e>
    {
        Motor_SetDirection(motor, direction);
 800a3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7f7 f80b 	bl	800141c <Motor_SetDirection>
    }

    uint8_t duty = (uint8_t)(255 * fabs(velocity) / WHEEL_MAX_ANGULAR_VELOCITY);
 800a406:	6838      	ldr	r0, [r7, #0]
 800a408:	f7ff ff44 	bl	800a294 <_ZSt4fabsf>
 800a40c:	4603      	mov	r3, r0
 800a40e:	4914      	ldr	r1, [pc, #80]	@ (800a460 <mecabot_motor_set_angular_velocity+0x98>)
 800a410:	4618      	mov	r0, r3
 800a412:	f7f6 fd23 	bl	8000e5c <__aeabi_fmul>
 800a416:	4603      	mov	r3, r0
 800a418:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f6 fdd1 	bl	8000fc4 <__aeabi_fdiv>
 800a422:	4603      	mov	r3, r0
 800a424:	4618      	mov	r0, r3
 800a426:	f7f6 f86b 	bl	8000500 <__aeabi_f2d>
 800a42a:	a30b      	add	r3, pc, #44	@ (adr r3, 800a458 <mecabot_motor_set_angular_velocity+0x90>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f8be 	bl	80005b0 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4610      	mov	r0, r2
 800a43a:	4619      	mov	r1, r3
 800a43c:	f7f6 fb90 	bl	8000b60 <__aeabi_d2uiz>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]
    Motor_Set_PWM_Duty(motor, duty);
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7f6 ff67 	bl	800131c <Motor_Set_PWM_Duty>

    return STATUS_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	54442eea 	.word	0x54442eea
 800a45c:	400921fb 	.word	0x400921fb
 800a460:	437f0000 	.word	0x437f0000

0800a464 <mecabot_encoder_read>:

    return STATUS_OK;
}

uint32_t mecabot_encoder_read(Encoder encoder)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
    return encoder->tick;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	881b      	ldrh	r3, [r3, #0]
}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr
 800a47a:	0000      	movs	r0, r0
 800a47c:	0000      	movs	r0, r0
	...

0800a480 <mecabot_imu_read_gyro>:

status_t mecabot_imu_read_gyro(float *gyro_buffer)
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
    MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 800a488:	4931      	ldr	r1, [pc, #196]	@ (800a550 <mecabot_imu_read_gyro+0xd0>)
 800a48a:	4832      	ldr	r0, [pc, #200]	@ (800a554 <mecabot_imu_read_gyro+0xd4>)
 800a48c:	f000 f91c 	bl	800a6c8 <MPU6050_ReadGyroscope>

    gyro_buffer[0] = DEG2RAD(my_mpu.gyro_scaled.x);
 800a490:	4b2f      	ldr	r3, [pc, #188]	@ (800a550 <mecabot_imu_read_gyro+0xd0>)
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	4618      	mov	r0, r3
 800a496:	f7f6 f833 	bl	8000500 <__aeabi_f2d>
 800a49a:	a32b      	add	r3, pc, #172	@ (adr r3, 800a548 <mecabot_imu_read_gyro+0xc8>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f6 f886 	bl	80005b0 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f04f 0200 	mov.w	r2, #0
 800a4b0:	4b29      	ldr	r3, [pc, #164]	@ (800a558 <mecabot_imu_read_gyro+0xd8>)
 800a4b2:	f7f6 f9a7 	bl	8000804 <__aeabi_ddiv>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	f7f6 fb6f 	bl	8000ba0 <__aeabi_d2f>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]
    gyro_buffer[1] = DEG2RAD(my_mpu.gyro_scaled.y);
 800a4c8:	4b21      	ldr	r3, [pc, #132]	@ (800a550 <mecabot_imu_read_gyro+0xd0>)
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f6 f817 	bl	8000500 <__aeabi_f2d>
 800a4d2:	a31d      	add	r3, pc, #116	@ (adr r3, 800a548 <mecabot_imu_read_gyro+0xc8>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f6 f86a 	bl	80005b0 <__aeabi_dmul>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f04f 0200 	mov.w	r2, #0
 800a4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a558 <mecabot_imu_read_gyro+0xd8>)
 800a4ea:	f7f6 f98b 	bl	8000804 <__aeabi_ddiv>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	1d1c      	adds	r4, r3, #4
 800a4fa:	f7f6 fb51 	bl	8000ba0 <__aeabi_d2f>
 800a4fe:	4603      	mov	r3, r0
 800a500:	6023      	str	r3, [r4, #0]
    gyro_buffer[2] = DEG2RAD(my_mpu.gyro_scaled.z);
 800a502:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <mecabot_imu_read_gyro+0xd0>)
 800a504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a506:	4618      	mov	r0, r3
 800a508:	f7f5 fffa 	bl	8000500 <__aeabi_f2d>
 800a50c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a548 <mecabot_imu_read_gyro+0xc8>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f6 f84d 	bl	80005b0 <__aeabi_dmul>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	4b0d      	ldr	r3, [pc, #52]	@ (800a558 <mecabot_imu_read_gyro+0xd8>)
 800a524:	f7f6 f96e 	bl	8000804 <__aeabi_ddiv>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4610      	mov	r0, r2
 800a52e:	4619      	mov	r1, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0408 	add.w	r4, r3, #8
 800a536:	f7f6 fb33 	bl	8000ba0 <__aeabi_d2f>
 800a53a:	4603      	mov	r3, r0
 800a53c:	6023      	str	r3, [r4, #0]

    return STATUS_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	bd90      	pop	{r4, r7, pc}
 800a548:	54442eea 	.word	0x54442eea
 800a54c:	400921fb 	.word	0x400921fb
 800a550:	20000010 	.word	0x20000010
 800a554:	200000e0 	.word	0x200000e0
 800a558:	40668000 	.word	0x40668000

0800a55c <mecabot_imu_read_accel>:

status_t mecabot_imu_read_accel(float *accel_buffer)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
    MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 800a564:	490b      	ldr	r1, [pc, #44]	@ (800a594 <mecabot_imu_read_accel+0x38>)
 800a566:	480c      	ldr	r0, [pc, #48]	@ (800a598 <mecabot_imu_read_accel+0x3c>)
 800a568:	f000 f92f 	bl	800a7ca <MPU6050_ReadAccelerometer>

    accel_buffer[0] = my_mpu.accel_scaled.x;
 800a56c:	4b09      	ldr	r3, [pc, #36]	@ (800a594 <mecabot_imu_read_accel+0x38>)
 800a56e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
    accel_buffer[1] = my_mpu.accel_scaled.y;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3304      	adds	r3, #4
 800a578:	4a06      	ldr	r2, [pc, #24]	@ (800a594 <mecabot_imu_read_accel+0x38>)
 800a57a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a57c:	601a      	str	r2, [r3, #0]
    accel_buffer[2] = my_mpu.accel_scaled.z;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3308      	adds	r3, #8
 800a582:	4a04      	ldr	r2, [pc, #16]	@ (800a594 <mecabot_imu_read_accel+0x38>)
 800a584:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a586:	601a      	str	r2, [r3, #0]

    return STATUS_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000010 	.word	0x20000010
 800a598:	200000e0 	.word	0x200000e0
 800a59c:	00000000 	.word	0x00000000

0800a5a0 <mecabot_imu_get_quaternion>:

status_t mecabot_imu_get_quaternion(Quaternion_t *quat_buffer)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08c      	sub	sp, #48	@ 0x30
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	6078      	str	r0, [r7, #4]
    MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 800a5a8:	4943      	ldr	r1, [pc, #268]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a5aa:	4844      	ldr	r0, [pc, #272]	@ (800a6bc <mecabot_imu_get_quaternion+0x11c>)
 800a5ac:	f000 f90d 	bl	800a7ca <MPU6050_ReadAccelerometer>
	MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 800a5b0:	4941      	ldr	r1, [pc, #260]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a5b2:	4842      	ldr	r0, [pc, #264]	@ (800a6bc <mecabot_imu_get_quaternion+0x11c>)
 800a5b4:	f000 f888 	bl	800a6c8 <MPU6050_ReadGyroscope>

	float 	gx = DEG2RAD(my_mpu.gyro_scaled.x),
 800a5b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f5 ff9f 	bl	8000500 <__aeabi_f2d>
 800a5c2:	a33b      	add	r3, pc, #236	@ (adr r3, 800a6b0 <mecabot_imu_get_quaternion+0x110>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fff2 	bl	80005b0 <__aeabi_dmul>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f04f 0200 	mov.w	r2, #0
 800a5d8:	4b39      	ldr	r3, [pc, #228]	@ (800a6c0 <mecabot_imu_get_quaternion+0x120>)
 800a5da:	f7f6 f913 	bl	8000804 <__aeabi_ddiv>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f7f6 fadb 	bl	8000ba0 <__aeabi_d2f>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	61fb      	str	r3, [r7, #28]
			gy = DEG2RAD(my_mpu.gyro_scaled.y),
 800a5ee:	4b32      	ldr	r3, [pc, #200]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f5 ff84 	bl	8000500 <__aeabi_f2d>
 800a5f8:	a32d      	add	r3, pc, #180	@ (adr r3, 800a6b0 <mecabot_imu_get_quaternion+0x110>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 ffd7 	bl	80005b0 <__aeabi_dmul>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4610      	mov	r0, r2
 800a608:	4619      	mov	r1, r3
 800a60a:	f04f 0200 	mov.w	r2, #0
 800a60e:	4b2c      	ldr	r3, [pc, #176]	@ (800a6c0 <mecabot_imu_get_quaternion+0x120>)
 800a610:	f7f6 f8f8 	bl	8000804 <__aeabi_ddiv>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4610      	mov	r0, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	f7f6 fac0 	bl	8000ba0 <__aeabi_d2f>
 800a620:	4603      	mov	r3, r0
 800a622:	61bb      	str	r3, [r7, #24]
			gz = DEG2RAD(my_mpu.gyro_scaled.z),
 800a624:	4b24      	ldr	r3, [pc, #144]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f5 ff69 	bl	8000500 <__aeabi_f2d>
 800a62e:	a320      	add	r3, pc, #128	@ (adr r3, 800a6b0 <mecabot_imu_get_quaternion+0x110>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f5 ffbc 	bl	80005b0 <__aeabi_dmul>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4610      	mov	r0, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	f04f 0200 	mov.w	r2, #0
 800a644:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c0 <mecabot_imu_get_quaternion+0x120>)
 800a646:	f7f6 f8dd 	bl	8000804 <__aeabi_ddiv>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	f7f6 faa5 	bl	8000ba0 <__aeabi_d2f>
 800a656:	4603      	mov	r3, r0
 800a658:	617b      	str	r3, [r7, #20]
			ax = my_mpu.accel_scaled.x,
 800a65a:	4b17      	ldr	r3, [pc, #92]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65e:	613b      	str	r3, [r7, #16]
			ay = my_mpu.accel_scaled.y,
 800a660:	4b15      	ldr	r3, [pc, #84]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	60fb      	str	r3, [r7, #12]
			az = my_mpu.accel_scaled.z;
 800a666:	4b14      	ldr	r3, [pc, #80]	@ (800a6b8 <mecabot_imu_get_quaternion+0x118>)
 800a668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66a:	60bb      	str	r3, [r7, #8]

	MadgwickFilter_Update_IMU(&my_filter, gx, gy, gz, ax, ay, az);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	69f9      	ldr	r1, [r7, #28]
 800a67e:	4811      	ldr	r0, [pc, #68]	@ (800a6c4 <mecabot_imu_get_quaternion+0x124>)
 800a680:	f7f7 f900 	bl	8001884 <MadgwickFilter_Update_IMU>

    quat_buffer->q0 = my_filter.q.q0;
 800a684:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c4 <mecabot_imu_get_quaternion+0x124>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
    quat_buffer->q1 = my_filter.q.q1;
 800a68c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <mecabot_imu_get_quaternion+0x124>)
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	605a      	str	r2, [r3, #4]
    quat_buffer->q2 = my_filter.q.q2;
 800a694:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <mecabot_imu_get_quaternion+0x124>)
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	609a      	str	r2, [r3, #8]
    quat_buffer->q3 = my_filter.q.q3;
 800a69c:	4b09      	ldr	r3, [pc, #36]	@ (800a6c4 <mecabot_imu_get_quaternion+0x124>)
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60da      	str	r2, [r3, #12]
}
 800a6a4:	bf00      	nop
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	54442eea 	.word	0x54442eea
 800a6b4:	400921fb 	.word	0x400921fb
 800a6b8:	20000010 	.word	0x20000010
 800a6bc:	200000e0 	.word	0x200000e0
 800a6c0:	40668000 	.word	0x40668000
 800a6c4:	20004a68 	.word	0x20004a68

0800a6c8 <MPU6050_ReadGyroscope>:
    
    return 0;
}

status_t MPU6050_ReadGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), MPU6050_REG_GYRO_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	b299      	uxth	r1, r3
 800a6da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6de:	9302      	str	r3, [sp, #8]
 800a6e0:	2306      	movs	r3, #6
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	f107 0308 	add.w	r3, r7, #8
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	2243      	movs	r2, #67	@ 0x43
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f001 fc7c 	bl	800bfec <HAL_I2C_Mem_Read>

    mpu->gyro_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->gyro_offset.x;
 800a6f4:	7a3b      	ldrb	r3, [r7, #8]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	b21a      	sxth	r2, r3
 800a6fa:	7a7b      	ldrb	r3, [r7, #9]
 800a6fc:	b21b      	sxth	r3, r3
 800a6fe:	4313      	orrs	r3, r2
 800a700:	b21b      	sxth	r3, r3
 800a702:	b29a      	uxth	r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	4413      	add	r3, r2
 800a70e:	b29b      	uxth	r3, r3
 800a710:	b21a      	sxth	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	821a      	strh	r2, [r3, #16]
    mpu->gyro_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->gyro_offset.y;
 800a716:	7abb      	ldrb	r3, [r7, #10]
 800a718:	021b      	lsls	r3, r3, #8
 800a71a:	b21a      	sxth	r2, r3
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	b21b      	sxth	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b21b      	sxth	r3, r3
 800a724:	b29a      	uxth	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	4413      	add	r3, r2
 800a730:	b29b      	uxth	r3, r3
 800a732:	b21a      	sxth	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	825a      	strh	r2, [r3, #18]
    mpu->gyro_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->gyro_offset.z;
 800a738:	7b3b      	ldrb	r3, [r7, #12]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	b21a      	sxth	r2, r3
 800a73e:	7b7b      	ldrb	r3, [r7, #13]
 800a740:	b21b      	sxth	r3, r3
 800a742:	4313      	orrs	r3, r2
 800a744:	b21b      	sxth	r3, r3
 800a746:	b29a      	uxth	r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4413      	add	r3, r2
 800a752:	b29b      	uxth	r3, r3
 800a754:	b21a      	sxth	r2, r3
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	829a      	strh	r2, [r3, #20]

    // Convert the RAW data into angular acceleration in 'deg/s'
    mpu->gyro_scaled.x = mpu->gyro_raw.x * mpu->gyro_scaling_factor;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a760:	4618      	mov	r0, r3
 800a762:	f7f6 fb27 	bl	8000db4 <__aeabi_i2f>
 800a766:	4602      	mov	r2, r0
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7f6 fb74 	bl	8000e5c <__aeabi_fmul>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	62da      	str	r2, [r3, #44]	@ 0x2c
    mpu->gyro_scaled.y = mpu->gyro_raw.y * mpu->gyro_scaling_factor;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a782:	4618      	mov	r0, r3
 800a784:	f7f6 fb16 	bl	8000db4 <__aeabi_i2f>
 800a788:	4602      	mov	r2, r0
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7f6 fb63 	bl	8000e5c <__aeabi_fmul>
 800a796:	4603      	mov	r3, r0
 800a798:	461a      	mov	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	631a      	str	r2, [r3, #48]	@ 0x30
    mpu->gyro_scaled.z = mpu->gyro_raw.z * mpu->gyro_scaling_factor;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7f6 fb05 	bl	8000db4 <__aeabi_i2f>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7f6 fb52 	bl	8000e5c <__aeabi_fmul>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	635a      	str	r2, [r3, #52]	@ 0x34

    return STATUS_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <MPU6050_ReadAccelerometer>:

status_t MPU6050_ReadAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b088      	sub	sp, #32
 800a7ce:	af04      	add	r7, sp, #16
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), MPU6050_REG_ACCEL_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	b299      	uxth	r1, r3
 800a7dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a7e0:	9302      	str	r3, [sp, #8]
 800a7e2:	2306      	movs	r3, #6
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	223b      	movs	r2, #59	@ 0x3b
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fbfb 	bl	800bfec <HAL_I2C_Mem_Read>

    mpu->accel_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->accel_offset.x;
 800a7f6:	7a3b      	ldrb	r3, [r7, #8]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	b21a      	sxth	r2, r3
 800a7fc:	7a7b      	ldrb	r3, [r7, #9]
 800a7fe:	b21b      	sxth	r3, r3
 800a800:	4313      	orrs	r3, r2
 800a802:	b21b      	sxth	r3, r3
 800a804:	b29a      	uxth	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	4413      	add	r3, r2
 800a810:	b29b      	uxth	r3, r3
 800a812:	b21a      	sxth	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	82da      	strh	r2, [r3, #22]
    mpu->accel_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->accel_offset.y;
 800a818:	7abb      	ldrb	r3, [r7, #10]
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	b21a      	sxth	r2, r3
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	b21b      	sxth	r3, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	b21b      	sxth	r3, r3
 800a826:	b29a      	uxth	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4413      	add	r3, r2
 800a832:	b29b      	uxth	r3, r3
 800a834:	b21a      	sxth	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	831a      	strh	r2, [r3, #24]
    mpu->accel_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->accel_offset.z;
 800a83a:	7b3b      	ldrb	r3, [r7, #12]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	b21a      	sxth	r2, r3
 800a840:	7b7b      	ldrb	r3, [r7, #13]
 800a842:	b21b      	sxth	r3, r3
 800a844:	4313      	orrs	r3, r2
 800a846:	b21b      	sxth	r3, r3
 800a848:	b29a      	uxth	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800a850:	b29b      	uxth	r3, r3
 800a852:	4413      	add	r3, r2
 800a854:	b29b      	uxth	r3, r3
 800a856:	b21a      	sxth	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	835a      	strh	r2, [r3, #26]

    // Convert the RAW data into linear acceleration in 'm/s^2'
    mpu->accel_scaled.x = mpu->accel_raw.x * mpu->accel_scaling_factor;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a862:	4618      	mov	r0, r3
 800a864:	f7f6 faa6 	bl	8000db4 <__aeabi_i2f>
 800a868:	4602      	mov	r2, r0
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f7f6 faf3 	bl	8000e5c <__aeabi_fmul>
 800a876:	4603      	mov	r3, r0
 800a878:	461a      	mov	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	639a      	str	r2, [r3, #56]	@ 0x38
    mpu->accel_scaled.y = mpu->accel_raw.y * mpu->accel_scaling_factor;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a884:	4618      	mov	r0, r3
 800a886:	f7f6 fa95 	bl	8000db4 <__aeabi_i2f>
 800a88a:	4602      	mov	r2, r0
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7f6 fae2 	bl	8000e5c <__aeabi_fmul>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	63da      	str	r2, [r3, #60]	@ 0x3c
    mpu->accel_scaled.z = mpu->accel_raw.z * mpu->accel_scaling_factor;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f6 fa84 	bl	8000db4 <__aeabi_i2f>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7f6 fad1 	bl	8000e5c <__aeabi_fmul>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	461a      	mov	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	641a      	str	r2, [r3, #64]	@ 0x40

    return STATUS_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a8d2:	4b15      	ldr	r3, [pc, #84]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	4a14      	ldr	r2, [pc, #80]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8d8:	f043 0301 	orr.w	r3, r3, #1
 800a8dc:	6193      	str	r3, [r2, #24]
 800a8de:	4b12      	ldr	r3, [pc, #72]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	60bb      	str	r3, [r7, #8]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	4a0e      	ldr	r2, [pc, #56]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8f4:	61d3      	str	r3, [r2, #28]
 800a8f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a928 <HAL_MspInit+0x5c>)
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a902:	4b0a      	ldr	r3, [pc, #40]	@ (800a92c <HAL_MspInit+0x60>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	4a04      	ldr	r2, [pc, #16]	@ (800a92c <HAL_MspInit+0x60>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr
 800a928:	40021000 	.word	0x40021000
 800a92c:	40010000 	.word	0x40010000

0800a930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	@ 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a938:	f107 0314 	add.w	r3, r7, #20
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c0 <HAL_I2C_MspInit+0x90>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d132      	bne.n	800a9b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a950:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a956:	f043 0308 	orr.w	r3, r3, #8
 800a95a:	6193      	str	r3, [r2, #24]
 800a95c:	4b19      	ldr	r3, [pc, #100]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	f003 0308 	and.w	r3, r3, #8
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a968:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a96c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a96e:	2312      	movs	r3, #18
 800a970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a972:	2303      	movs	r3, #3
 800a974:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a976:	f107 0314 	add.w	r3, r7, #20
 800a97a:	4619      	mov	r1, r3
 800a97c:	4812      	ldr	r0, [pc, #72]	@ (800a9c8 <HAL_I2C_MspInit+0x98>)
 800a97e:	f001 f845 	bl	800ba0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800a982:	4b12      	ldr	r3, [pc, #72]	@ (800a9cc <HAL_I2C_MspInit+0x9c>)
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	f043 0302 	orr.w	r3, r3, #2
 800a996:	627b      	str	r3, [r7, #36]	@ 0x24
 800a998:	4a0c      	ldr	r2, [pc, #48]	@ (800a9cc <HAL_I2C_MspInit+0x9c>)
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a99e:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	4a08      	ldr	r2, [pc, #32]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a9a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9a8:	61d3      	str	r3, [r2, #28]
 800a9aa:	4b06      	ldr	r3, [pc, #24]	@ (800a9c4 <HAL_I2C_MspInit+0x94>)
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a9b6:	bf00      	nop
 800a9b8:	3728      	adds	r7, #40	@ 0x28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	40005400 	.word	0x40005400
 800a9c4:	40021000 	.word	0x40021000
 800a9c8:	40010c00 	.word	0x40010c00
 800a9cc:	40010000 	.word	0x40010000

0800a9d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	@ 0x28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9d8:	f107 0318 	add.w	r3, r7, #24
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	609a      	str	r2, [r3, #8]
 800a9e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a23      	ldr	r2, [pc, #140]	@ (800aa78 <HAL_TIM_Base_MspInit+0xa8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d10c      	bne.n	800aa0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a9f0:	4b22      	ldr	r3, [pc, #136]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	4a21      	ldr	r2, [pc, #132]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800a9f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a9fa:	6193      	str	r3, [r2, #24]
 800a9fc:	4b1f      	ldr	r3, [pc, #124]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800aa08:	e031      	b.n	800aa6e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a1c      	ldr	r2, [pc, #112]	@ (800aa80 <HAL_TIM_Base_MspInit+0xb0>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d12c      	bne.n	800aa6e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800aa14:	4b19      	ldr	r3, [pc, #100]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	4a18      	ldr	r2, [pc, #96]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aa1e:	6193      	str	r3, [r2, #24]
 800aa20:	4b16      	ldr	r3, [pc, #88]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa2c:	4b13      	ldr	r3, [pc, #76]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	4a12      	ldr	r2, [pc, #72]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa32:	f043 0310 	orr.w	r3, r3, #16
 800aa36:	6193      	str	r3, [r2, #24]
 800aa38:	4b10      	ldr	r3, [pc, #64]	@ (800aa7c <HAL_TIM_Base_MspInit+0xac>)
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_FR_TICK_Pin|ENCODER_BR_TICK_Pin|ENCODER_FL_TICK_Pin|ENCODER_BL_TICK_Pin;
 800aa44:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800aa48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa52:	f107 0318 	add.w	r3, r7, #24
 800aa56:	4619      	mov	r1, r3
 800aa58:	480a      	ldr	r0, [pc, #40]	@ (800aa84 <HAL_TIM_Base_MspInit+0xb4>)
 800aa5a:	f000 ffd7 	bl	800ba0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2100      	movs	r1, #0
 800aa62:	202e      	movs	r0, #46	@ 0x2e
 800aa64:	f000 fb17 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800aa68:	202e      	movs	r0, #46	@ 0x2e
 800aa6a:	f000 fb30 	bl	800b0ce <HAL_NVIC_EnableIRQ>
}
 800aa6e:	bf00      	nop
 800aa70:	3728      	adds	r7, #40	@ 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	40012c00 	.word	0x40012c00
 800aa7c:	40021000 	.word	0x40021000
 800aa80:	40013400 	.word	0x40013400
 800aa84:	40011000 	.word	0x40011000

0800aa88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa90:	f107 0310 	add.w	r3, r7, #16
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a10      	ldr	r2, [pc, #64]	@ (800aae4 <HAL_TIM_MspPostInit+0x5c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d118      	bne.n	800aada <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	@ (800aae8 <HAL_TIM_MspPostInit+0x60>)
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	4a0e      	ldr	r2, [pc, #56]	@ (800aae8 <HAL_TIM_MspPostInit+0x60>)
 800aaae:	f043 0304 	orr.w	r3, r3, #4
 800aab2:	6193      	str	r3, [r2, #24]
 800aab4:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <HAL_TIM_MspPostInit+0x60>)
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FR_PWM_Pin|MOTOR_BR_PWM_Pin|MOTOR_FL_PWM_Pin|MOTOR_BL_PWM_Pin;
 800aac0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800aac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aac6:	2302      	movs	r3, #2
 800aac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaca:	2302      	movs	r3, #2
 800aacc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aace:	f107 0310 	add.w	r3, r7, #16
 800aad2:	4619      	mov	r1, r3
 800aad4:	4805      	ldr	r0, [pc, #20]	@ (800aaec <HAL_TIM_MspPostInit+0x64>)
 800aad6:	f000 ff99 	bl	800ba0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800aada:	bf00      	nop
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	40012c00 	.word	0x40012c00
 800aae8:	40021000 	.word	0x40021000
 800aaec:	40010800 	.word	0x40010800

0800aaf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08a      	sub	sp, #40	@ 0x28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaf8:	f107 0314 	add.w	r3, r7, #20
 800aafc:	2200      	movs	r2, #0
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	605a      	str	r2, [r3, #4]
 800ab02:	609a      	str	r2, [r3, #8]
 800ab04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a4d      	ldr	r2, [pc, #308]	@ (800ac40 <HAL_UART_MspInit+0x150>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	f040 8092 	bne.w	800ac36 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab12:	4b4c      	ldr	r3, [pc, #304]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	4a4b      	ldr	r2, [pc, #300]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab1c:	6193      	str	r3, [r2, #24]
 800ab1e:	4b49      	ldr	r3, [pc, #292]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab2a:	4b46      	ldr	r3, [pc, #280]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	4a45      	ldr	r2, [pc, #276]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab30:	f043 0308 	orr.w	r3, r3, #8
 800ab34:	6193      	str	r3, [r2, #24]
 800ab36:	4b43      	ldr	r3, [pc, #268]	@ (800ac44 <HAL_UART_MspInit+0x154>)
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	f003 0308 	and.w	r3, r3, #8
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ab42:	2340      	movs	r3, #64	@ 0x40
 800ab44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab46:	2302      	movs	r3, #2
 800ab48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	4619      	mov	r1, r3
 800ab54:	483c      	ldr	r0, [pc, #240]	@ (800ac48 <HAL_UART_MspInit+0x158>)
 800ab56:	f000 ff59 	bl	800ba0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ab5a:	2380      	movs	r3, #128	@ 0x80
 800ab5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab66:	f107 0314 	add.w	r3, r7, #20
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4836      	ldr	r0, [pc, #216]	@ (800ac48 <HAL_UART_MspInit+0x158>)
 800ab6e:	f000 ff4d 	bl	800ba0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800ab72:	4b36      	ldr	r3, [pc, #216]	@ (800ac4c <HAL_UART_MspInit+0x15c>)
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800ab7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	f043 0304 	orr.w	r3, r3, #4
 800ab86:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab88:	4a30      	ldr	r2, [pc, #192]	@ (800ac4c <HAL_UART_MspInit+0x15c>)
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800ab8e:	4b30      	ldr	r3, [pc, #192]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800ab90:	4a30      	ldr	r2, [pc, #192]	@ (800ac54 <HAL_UART_MspInit+0x164>)
 800ab92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab94:	4b2e      	ldr	r3, [pc, #184]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800ab96:	2210      	movs	r2, #16
 800ab98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab9a:	4b2d      	ldr	r3, [pc, #180]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aba0:	4b2b      	ldr	r3, [pc, #172]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800aba2:	2280      	movs	r2, #128	@ 0x80
 800aba4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aba6:	4b2a      	ldr	r3, [pc, #168]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abac:	4b28      	ldr	r3, [pc, #160]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abae:	2200      	movs	r2, #0
 800abb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800abb2:	4b27      	ldr	r3, [pc, #156]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800abb8:	4b25      	ldr	r3, [pc, #148]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abba:	2200      	movs	r2, #0
 800abbc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800abbe:	4824      	ldr	r0, [pc, #144]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abc0:	f000 faa0 	bl	800b104 <HAL_DMA_Init>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800abca:	f7f7 fb19 	bl	8002200 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a1f      	ldr	r2, [pc, #124]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abd2:	639a      	str	r2, [r3, #56]	@ 0x38
 800abd4:	4a1e      	ldr	r2, [pc, #120]	@ (800ac50 <HAL_UART_MspInit+0x160>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800abda:	4b1f      	ldr	r3, [pc, #124]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abdc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac5c <HAL_UART_MspInit+0x16c>)
 800abde:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abe0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abe6:	4b1c      	ldr	r3, [pc, #112]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abe8:	2200      	movs	r2, #0
 800abea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800abec:	4b1a      	ldr	r3, [pc, #104]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abee:	2280      	movs	r2, #128	@ 0x80
 800abf0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abf2:	4b19      	ldr	r3, [pc, #100]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abf8:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800abfe:	4b16      	ldr	r3, [pc, #88]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ac04:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800ac0a:	4813      	ldr	r0, [pc, #76]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800ac0c:	f000 fa7a 	bl	800b104 <HAL_DMA_Init>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800ac16:	f7f7 faf3 	bl	8002200 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800ac1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ac20:	4a0d      	ldr	r2, [pc, #52]	@ (800ac58 <HAL_UART_MspInit+0x168>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ac26:	2200      	movs	r2, #0
 800ac28:	2100      	movs	r1, #0
 800ac2a:	2025      	movs	r0, #37	@ 0x25
 800ac2c:	f000 fa33 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ac30:	2025      	movs	r0, #37	@ 0x25
 800ac32:	f000 fa4c 	bl	800b0ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ac36:	bf00      	nop
 800ac38:	3728      	adds	r7, #40	@ 0x28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	40013800 	.word	0x40013800
 800ac44:	40021000 	.word	0x40021000
 800ac48:	40010c00 	.word	0x40010c00
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	2000020c 	.word	0x2000020c
 800ac54:	40020044 	.word	0x40020044
 800ac58:	20000250 	.word	0x20000250
 800ac5c:	40020058 	.word	0x40020058

0800ac60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <NMI_Handler+0x4>

0800ac68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac6c:	bf00      	nop
 800ac6e:	e7fd      	b.n	800ac6c <HardFault_Handler+0x4>

0800ac70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac70:	b480      	push	{r7}
 800ac72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <MemManage_Handler+0x4>

0800ac78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac7c:	bf00      	nop
 800ac7e:	e7fd      	b.n	800ac7c <BusFault_Handler+0x4>

0800ac80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac80:	b480      	push	{r7}
 800ac82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac84:	bf00      	nop
 800ac86:	e7fd      	b.n	800ac84 <UsageFault_Handler+0x4>

0800ac88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ac8c:	bf00      	nop
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac98:	bf00      	nop
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bc80      	pop	{r7}
 800ac9e:	4770      	bx	lr

0800aca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr

0800acac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800acb0:	f000 f8fe 	bl	800aeb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800acb4:	bf00      	nop
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800acbc:	4802      	ldr	r0, [pc, #8]	@ (800acc8 <DMA1_Channel4_IRQHandler+0x10>)
 800acbe:	f000 fc3b 	bl	800b538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800acc2:	bf00      	nop
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	2000020c 	.word	0x2000020c

0800accc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800acd0:	4802      	ldr	r0, [pc, #8]	@ (800acdc <DMA1_Channel5_IRQHandler+0x10>)
 800acd2:	f000 fc31 	bl	800b538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000250 	.word	0x20000250

0800ace0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800ace4:	4802      	ldr	r0, [pc, #8]	@ (800acf0 <USART1_IRQHandler+0x10>)
 800ace6:	f003 fd8b 	bl	800e800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800acea:	bf00      	nop
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	200001c4 	.word	0x200001c4

0800acf4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800acf8:	4802      	ldr	r0, [pc, #8]	@ (800ad04 <TIM8_CC_IRQHandler+0x10>)
 800acfa:	f002 fc7f 	bl	800d5fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800acfe:	bf00      	nop
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	2000017c 	.word	0x2000017c

0800ad08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ad10:	4a14      	ldr	r2, [pc, #80]	@ (800ad64 <_sbrk+0x5c>)
 800ad12:	4b15      	ldr	r3, [pc, #84]	@ (800ad68 <_sbrk+0x60>)
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ad1c:	4b13      	ldr	r3, [pc, #76]	@ (800ad6c <_sbrk+0x64>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ad24:	4b11      	ldr	r3, [pc, #68]	@ (800ad6c <_sbrk+0x64>)
 800ad26:	4a12      	ldr	r2, [pc, #72]	@ (800ad70 <_sbrk+0x68>)
 800ad28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ad2a:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <_sbrk+0x64>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4413      	add	r3, r2
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d207      	bcs.n	800ad48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ad38:	f007 f820 	bl	8011d7c <__errno>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	220c      	movs	r2, #12
 800ad40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295
 800ad46:	e009      	b.n	800ad5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ad48:	4b08      	ldr	r3, [pc, #32]	@ (800ad6c <_sbrk+0x64>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ad4e:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <_sbrk+0x64>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4413      	add	r3, r2
 800ad56:	4a05      	ldr	r2, [pc, #20]	@ (800ad6c <_sbrk+0x64>)
 800ad58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	2000c000 	.word	0x2000c000
 800ad68:	00000400 	.word	0x00000400
 800ad6c:	20004a80 	.word	0x20004a80
 800ad70:	20004bd0 	.word	0x20004bd0

0800ad74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ad78:	bf00      	nop
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr

0800ad80 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	0a5a      	lsrs	r2, r3, #9
 800ad90:	490f      	ldr	r1, [pc, #60]	@ (800add0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800ad92:	fba1 1202 	umull	r1, r2, r1, r2
 800ad96:	09d2      	lsrs	r2, r2, #7
 800ad98:	490e      	ldr	r1, [pc, #56]	@ (800add4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800ad9a:	fb01 f202 	mul.w	r2, r1, r2
 800ad9e:	1a9b      	subs	r3, r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	0a5b      	lsrs	r3, r3, #9
 800ada8:	4a09      	ldr	r2, [pc, #36]	@ (800add0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800adaa:	fba2 2303 	umull	r2, r3, r2, r3
 800adae:	09db      	lsrs	r3, r3, #7
 800adb0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	441a      	add	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	00044b83 	.word	0x00044b83
 800add4:	3b9aca00 	.word	0x3b9aca00

0800add8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800add8:	f7ff ffcc 	bl	800ad74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800addc:	480b      	ldr	r0, [pc, #44]	@ (800ae0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800adde:	490c      	ldr	r1, [pc, #48]	@ (800ae10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800ade0:	4a0c      	ldr	r2, [pc, #48]	@ (800ae14 <LoopFillZerobss+0x16>)
  movs r3, #0
 800ade2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ade4:	e002      	b.n	800adec <LoopCopyDataInit>

0800ade6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ade6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ade8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800adea:	3304      	adds	r3, #4

0800adec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800adec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800adee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800adf0:	d3f9      	bcc.n	800ade6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800adf2:	4a09      	ldr	r2, [pc, #36]	@ (800ae18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800adf4:	4c09      	ldr	r4, [pc, #36]	@ (800ae1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800adf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800adf8:	e001      	b.n	800adfe <LoopFillZerobss>

0800adfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800adfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800adfc:	3204      	adds	r2, #4

0800adfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800adfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae00:	d3fb      	bcc.n	800adfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ae02:	f006 ffc1 	bl	8011d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ae06:	f7f6 ff77 	bl	8001cf8 <main>
  bx lr
 800ae0a:	4770      	bx	lr
  ldr r0, =_sdata
 800ae0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae10:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800ae14:	08012c3c 	.word	0x08012c3c
  ldr r2, =_sbss
 800ae18:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800ae1c:	20004bd0 	.word	0x20004bd0

0800ae20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ae20:	e7fe      	b.n	800ae20 <ADC1_2_IRQHandler>
	...

0800ae24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ae28:	4b08      	ldr	r3, [pc, #32]	@ (800ae4c <HAL_Init+0x28>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a07      	ldr	r2, [pc, #28]	@ (800ae4c <HAL_Init+0x28>)
 800ae2e:	f043 0310 	orr.w	r3, r3, #16
 800ae32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae34:	2003      	movs	r0, #3
 800ae36:	f000 f923 	bl	800b080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae3a:	200f      	movs	r0, #15
 800ae3c:	f000 f808 	bl	800ae50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae40:	f7ff fd44 	bl	800a8cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40022000 	.word	0x40022000

0800ae50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae58:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <HAL_InitTick+0x54>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b12      	ldr	r3, [pc, #72]	@ (800aea8 <HAL_InitTick+0x58>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	4619      	mov	r1, r3
 800ae62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ae66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f93b 	bl	800b0ea <HAL_SYSTICK_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e00e      	b.n	800ae9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b0f      	cmp	r3, #15
 800ae82:	d80a      	bhi.n	800ae9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae84:	2200      	movs	r2, #0
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	f000 f903 	bl	800b096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ae90:	4a06      	ldr	r2, [pc, #24]	@ (800aeac <HAL_InitTick+0x5c>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e000      	b.n	800ae9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20000054 	.word	0x20000054
 800aea8:	2000005c 	.word	0x2000005c
 800aeac:	20000058 	.word	0x20000058

0800aeb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aeb4:	4b05      	ldr	r3, [pc, #20]	@ (800aecc <HAL_IncTick+0x1c>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4b05      	ldr	r3, [pc, #20]	@ (800aed0 <HAL_IncTick+0x20>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4413      	add	r3, r2
 800aec0:	4a03      	ldr	r2, [pc, #12]	@ (800aed0 <HAL_IncTick+0x20>)
 800aec2:	6013      	str	r3, [r2, #0]
}
 800aec4:	bf00      	nop
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr
 800aecc:	2000005c 	.word	0x2000005c
 800aed0:	20004a84 	.word	0x20004a84

0800aed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
  return uwTick;
 800aed8:	4b02      	ldr	r3, [pc, #8]	@ (800aee4 <HAL_GetTick+0x10>)
 800aeda:	681b      	ldr	r3, [r3, #0]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	46bd      	mov	sp, r7
 800aee0:	bc80      	pop	{r7}
 800aee2:	4770      	bx	lr
 800aee4:	20004a84 	.word	0x20004a84

0800aee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aef8:	4b0c      	ldr	r3, [pc, #48]	@ (800af2c <__NVIC_SetPriorityGrouping+0x44>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800af04:	4013      	ands	r3, r2
 800af06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800af14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af1a:	4a04      	ldr	r2, [pc, #16]	@ (800af2c <__NVIC_SetPriorityGrouping+0x44>)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	60d3      	str	r3, [r2, #12]
}
 800af20:	bf00      	nop
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	e000ed00 	.word	0xe000ed00

0800af30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af34:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <__NVIC_GetPriorityGrouping+0x18>)
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	f003 0307 	and.w	r3, r3, #7
}
 800af3e:	4618      	mov	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	bc80      	pop	{r7}
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	db0b      	blt.n	800af76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af5e:	79fb      	ldrb	r3, [r7, #7]
 800af60:	f003 021f 	and.w	r2, r3, #31
 800af64:	4906      	ldr	r1, [pc, #24]	@ (800af80 <__NVIC_EnableIRQ+0x34>)
 800af66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af6a:	095b      	lsrs	r3, r3, #5
 800af6c:	2001      	movs	r0, #1
 800af6e:	fa00 f202 	lsl.w	r2, r0, r2
 800af72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800af76:	bf00      	nop
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bc80      	pop	{r7}
 800af7e:	4770      	bx	lr
 800af80:	e000e100 	.word	0xe000e100

0800af84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	6039      	str	r1, [r7, #0]
 800af8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af94:	2b00      	cmp	r3, #0
 800af96:	db0a      	blt.n	800afae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	490c      	ldr	r1, [pc, #48]	@ (800afd0 <__NVIC_SetPriority+0x4c>)
 800af9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afa2:	0112      	lsls	r2, r2, #4
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	440b      	add	r3, r1
 800afa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800afac:	e00a      	b.n	800afc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4908      	ldr	r1, [pc, #32]	@ (800afd4 <__NVIC_SetPriority+0x50>)
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	f003 030f 	and.w	r3, r3, #15
 800afba:	3b04      	subs	r3, #4
 800afbc:	0112      	lsls	r2, r2, #4
 800afbe:	b2d2      	uxtb	r2, r2
 800afc0:	440b      	add	r3, r1
 800afc2:	761a      	strb	r2, [r3, #24]
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	e000e100 	.word	0xe000e100
 800afd4:	e000ed00 	.word	0xe000ed00

0800afd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800afd8:	b480      	push	{r7}
 800afda:	b089      	sub	sp, #36	@ 0x24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0307 	and.w	r3, r3, #7
 800afea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	f1c3 0307 	rsb	r3, r3, #7
 800aff2:	2b04      	cmp	r3, #4
 800aff4:	bf28      	it	cs
 800aff6:	2304      	movcs	r3, #4
 800aff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	3304      	adds	r3, #4
 800affe:	2b06      	cmp	r3, #6
 800b000:	d902      	bls.n	800b008 <NVIC_EncodePriority+0x30>
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	3b03      	subs	r3, #3
 800b006:	e000      	b.n	800b00a <NVIC_EncodePriority+0x32>
 800b008:	2300      	movs	r3, #0
 800b00a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	43da      	mvns	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	401a      	ands	r2, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b020:	f04f 31ff 	mov.w	r1, #4294967295
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	43d9      	mvns	r1, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b030:	4313      	orrs	r3, r2
         );
}
 800b032:	4618      	mov	r0, r3
 800b034:	3724      	adds	r7, #36	@ 0x24
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr

0800b03c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3b01      	subs	r3, #1
 800b048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b04c:	d301      	bcc.n	800b052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b04e:	2301      	movs	r3, #1
 800b050:	e00f      	b.n	800b072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b052:	4a0a      	ldr	r2, [pc, #40]	@ (800b07c <SysTick_Config+0x40>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3b01      	subs	r3, #1
 800b058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b05a:	210f      	movs	r1, #15
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	f7ff ff90 	bl	800af84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b064:	4b05      	ldr	r3, [pc, #20]	@ (800b07c <SysTick_Config+0x40>)
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b06a:	4b04      	ldr	r3, [pc, #16]	@ (800b07c <SysTick_Config+0x40>)
 800b06c:	2207      	movs	r2, #7
 800b06e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	e000e010 	.word	0xe000e010

0800b080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff2d 	bl	800aee8 <__NVIC_SetPriorityGrouping>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4603      	mov	r3, r0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b0a8:	f7ff ff42 	bl	800af30 <__NVIC_GetPriorityGrouping>
 800b0ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	6978      	ldr	r0, [r7, #20]
 800b0b4:	f7ff ff90 	bl	800afd8 <NVIC_EncodePriority>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff ff5f 	bl	800af84 <__NVIC_SetPriority>
}
 800b0c6:	bf00      	nop
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ff35 	bl	800af4c <__NVIC_EnableIRQ>
}
 800b0e2:	bf00      	nop
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff ffa2 	bl	800b03c <SysTick_Config>
 800b0f8:	4603      	mov	r3, r0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e059      	b.n	800b1ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	4b2d      	ldr	r3, [pc, #180]	@ (800b1d8 <HAL_DMA_Init+0xd4>)
 800b122:	429a      	cmp	r2, r3
 800b124:	d80f      	bhi.n	800b146 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1dc <HAL_DMA_Init+0xd8>)
 800b12e:	4413      	add	r3, r2
 800b130:	4a2b      	ldr	r2, [pc, #172]	@ (800b1e0 <HAL_DMA_Init+0xdc>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	091b      	lsrs	r3, r3, #4
 800b138:	009a      	lsls	r2, r3, #2
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a28      	ldr	r2, [pc, #160]	@ (800b1e4 <HAL_DMA_Init+0xe0>)
 800b142:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b144:	e00e      	b.n	800b164 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	4b26      	ldr	r3, [pc, #152]	@ (800b1e8 <HAL_DMA_Init+0xe4>)
 800b14e:	4413      	add	r3, r2
 800b150:	4a23      	ldr	r2, [pc, #140]	@ (800b1e0 <HAL_DMA_Init+0xdc>)
 800b152:	fba2 2303 	umull	r2, r3, r2, r3
 800b156:	091b      	lsrs	r3, r3, #4
 800b158:	009a      	lsls	r2, r3, #2
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a22      	ldr	r2, [pc, #136]	@ (800b1ec <HAL_DMA_Init+0xe8>)
 800b162:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b17a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b17e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800b188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bc80      	pop	{r7}
 800b1d6:	4770      	bx	lr
 800b1d8:	40020407 	.word	0x40020407
 800b1dc:	bffdfff8 	.word	0xbffdfff8
 800b1e0:	cccccccd 	.word	0xcccccccd
 800b1e4:	40020000 	.word	0x40020000
 800b1e8:	bffdfbf8 	.word	0xbffdfbf8
 800b1ec:	40020400 	.word	0x40020400

0800b1f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_DMA_Start_IT+0x20>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e04b      	b.n	800b2a8 <HAL_DMA_Start_IT+0xb8>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b01      	cmp	r3, #1
 800b222:	d13a      	bne.n	800b29a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 0201 	bic.w	r2, r2, #1
 800b240:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 fbb1 	bl	800b9b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d008      	beq.n	800b268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f042 020e 	orr.w	r2, r2, #14
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	e00f      	b.n	800b288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0204 	bic.w	r2, r2, #4
 800b276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 020a 	orr.w	r2, r2, #10
 800b286:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e005      	b.n	800b2a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3718      	adds	r7, #24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d008      	beq.n	800b2da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e020      	b.n	800b31c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 020e 	bic.w	r2, r2, #14
 800b2e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b302:	2101      	movs	r1, #1
 800b304:	fa01 f202 	lsl.w	r2, r1, r2
 800b308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr
	...

0800b328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d005      	beq.n	800b34c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2204      	movs	r2, #4
 800b344:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	e0d6      	b.n	800b4fa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 020e 	bic.w	r2, r2, #14
 800b35a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
 800b372:	4b64      	ldr	r3, [pc, #400]	@ (800b504 <HAL_DMA_Abort_IT+0x1dc>)
 800b374:	429a      	cmp	r2, r3
 800b376:	d958      	bls.n	800b42a <HAL_DMA_Abort_IT+0x102>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a62      	ldr	r2, [pc, #392]	@ (800b508 <HAL_DMA_Abort_IT+0x1e0>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d04f      	beq.n	800b422 <HAL_DMA_Abort_IT+0xfa>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a61      	ldr	r2, [pc, #388]	@ (800b50c <HAL_DMA_Abort_IT+0x1e4>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d048      	beq.n	800b41e <HAL_DMA_Abort_IT+0xf6>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a5f      	ldr	r2, [pc, #380]	@ (800b510 <HAL_DMA_Abort_IT+0x1e8>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d040      	beq.n	800b418 <HAL_DMA_Abort_IT+0xf0>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a5e      	ldr	r2, [pc, #376]	@ (800b514 <HAL_DMA_Abort_IT+0x1ec>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d038      	beq.n	800b412 <HAL_DMA_Abort_IT+0xea>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a5c      	ldr	r2, [pc, #368]	@ (800b518 <HAL_DMA_Abort_IT+0x1f0>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d030      	beq.n	800b40c <HAL_DMA_Abort_IT+0xe4>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a5b      	ldr	r2, [pc, #364]	@ (800b51c <HAL_DMA_Abort_IT+0x1f4>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d028      	beq.n	800b406 <HAL_DMA_Abort_IT+0xde>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a52      	ldr	r2, [pc, #328]	@ (800b504 <HAL_DMA_Abort_IT+0x1dc>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d020      	beq.n	800b400 <HAL_DMA_Abort_IT+0xd8>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a57      	ldr	r2, [pc, #348]	@ (800b520 <HAL_DMA_Abort_IT+0x1f8>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d019      	beq.n	800b3fc <HAL_DMA_Abort_IT+0xd4>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a55      	ldr	r2, [pc, #340]	@ (800b524 <HAL_DMA_Abort_IT+0x1fc>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d012      	beq.n	800b3f8 <HAL_DMA_Abort_IT+0xd0>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a54      	ldr	r2, [pc, #336]	@ (800b528 <HAL_DMA_Abort_IT+0x200>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d00a      	beq.n	800b3f2 <HAL_DMA_Abort_IT+0xca>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a52      	ldr	r2, [pc, #328]	@ (800b52c <HAL_DMA_Abort_IT+0x204>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d102      	bne.n	800b3ec <HAL_DMA_Abort_IT+0xc4>
 800b3e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3ea:	e01b      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b3ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b3f0:	e018      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b3f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3f6:	e015      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	e013      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e011      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b404:	e00e      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b406:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b40a:	e00b      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b40c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b410:	e008      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b416:	e005      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b41c:	e002      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b41e:	2310      	movs	r3, #16
 800b420:	e000      	b.n	800b424 <HAL_DMA_Abort_IT+0xfc>
 800b422:	2301      	movs	r3, #1
 800b424:	4a42      	ldr	r2, [pc, #264]	@ (800b530 <HAL_DMA_Abort_IT+0x208>)
 800b426:	6053      	str	r3, [r2, #4]
 800b428:	e057      	b.n	800b4da <HAL_DMA_Abort_IT+0x1b2>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a36      	ldr	r2, [pc, #216]	@ (800b508 <HAL_DMA_Abort_IT+0x1e0>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d04f      	beq.n	800b4d4 <HAL_DMA_Abort_IT+0x1ac>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a34      	ldr	r2, [pc, #208]	@ (800b50c <HAL_DMA_Abort_IT+0x1e4>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d048      	beq.n	800b4d0 <HAL_DMA_Abort_IT+0x1a8>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a33      	ldr	r2, [pc, #204]	@ (800b510 <HAL_DMA_Abort_IT+0x1e8>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d040      	beq.n	800b4ca <HAL_DMA_Abort_IT+0x1a2>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a31      	ldr	r2, [pc, #196]	@ (800b514 <HAL_DMA_Abort_IT+0x1ec>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d038      	beq.n	800b4c4 <HAL_DMA_Abort_IT+0x19c>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a30      	ldr	r2, [pc, #192]	@ (800b518 <HAL_DMA_Abort_IT+0x1f0>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d030      	beq.n	800b4be <HAL_DMA_Abort_IT+0x196>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a2e      	ldr	r2, [pc, #184]	@ (800b51c <HAL_DMA_Abort_IT+0x1f4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d028      	beq.n	800b4b8 <HAL_DMA_Abort_IT+0x190>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a26      	ldr	r2, [pc, #152]	@ (800b504 <HAL_DMA_Abort_IT+0x1dc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d020      	beq.n	800b4b2 <HAL_DMA_Abort_IT+0x18a>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a2a      	ldr	r2, [pc, #168]	@ (800b520 <HAL_DMA_Abort_IT+0x1f8>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d019      	beq.n	800b4ae <HAL_DMA_Abort_IT+0x186>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a29      	ldr	r2, [pc, #164]	@ (800b524 <HAL_DMA_Abort_IT+0x1fc>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d012      	beq.n	800b4aa <HAL_DMA_Abort_IT+0x182>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a27      	ldr	r2, [pc, #156]	@ (800b528 <HAL_DMA_Abort_IT+0x200>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00a      	beq.n	800b4a4 <HAL_DMA_Abort_IT+0x17c>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a26      	ldr	r2, [pc, #152]	@ (800b52c <HAL_DMA_Abort_IT+0x204>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d102      	bne.n	800b49e <HAL_DMA_Abort_IT+0x176>
 800b498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b49c:	e01b      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b49e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b4a2:	e018      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4a8:	e015      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4aa:	2310      	movs	r3, #16
 800b4ac:	e013      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e011      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b4b6:	e00e      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b4bc:	e00b      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b4c2:	e008      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4c8:	e005      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4ce:	e002      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4d0:	2310      	movs	r3, #16
 800b4d2:	e000      	b.n	800b4d6 <HAL_DMA_Abort_IT+0x1ae>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4a17      	ldr	r2, [pc, #92]	@ (800b534 <HAL_DMA_Abort_IT+0x20c>)
 800b4d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
    } 
  }
  return status;
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	40020080 	.word	0x40020080
 800b508:	40020008 	.word	0x40020008
 800b50c:	4002001c 	.word	0x4002001c
 800b510:	40020030 	.word	0x40020030
 800b514:	40020044 	.word	0x40020044
 800b518:	40020058 	.word	0x40020058
 800b51c:	4002006c 	.word	0x4002006c
 800b520:	40020408 	.word	0x40020408
 800b524:	4002041c 	.word	0x4002041c
 800b528:	40020430 	.word	0x40020430
 800b52c:	40020444 	.word	0x40020444
 800b530:	40020400 	.word	0x40020400
 800b534:	40020000 	.word	0x40020000

0800b538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b554:	2204      	movs	r2, #4
 800b556:	409a      	lsls	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4013      	ands	r3, r2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 80f1 	beq.w	800b744 <HAL_DMA_IRQHandler+0x20c>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80eb 	beq.w	800b744 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0320 	and.w	r3, r3, #32
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d107      	bne.n	800b58c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 0204 	bic.w	r2, r2, #4
 800b58a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	4b5f      	ldr	r3, [pc, #380]	@ (800b710 <HAL_DMA_IRQHandler+0x1d8>)
 800b594:	429a      	cmp	r2, r3
 800b596:	d958      	bls.n	800b64a <HAL_DMA_IRQHandler+0x112>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a5d      	ldr	r2, [pc, #372]	@ (800b714 <HAL_DMA_IRQHandler+0x1dc>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d04f      	beq.n	800b642 <HAL_DMA_IRQHandler+0x10a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a5c      	ldr	r2, [pc, #368]	@ (800b718 <HAL_DMA_IRQHandler+0x1e0>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d048      	beq.n	800b63e <HAL_DMA_IRQHandler+0x106>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a5a      	ldr	r2, [pc, #360]	@ (800b71c <HAL_DMA_IRQHandler+0x1e4>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d040      	beq.n	800b638 <HAL_DMA_IRQHandler+0x100>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a59      	ldr	r2, [pc, #356]	@ (800b720 <HAL_DMA_IRQHandler+0x1e8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d038      	beq.n	800b632 <HAL_DMA_IRQHandler+0xfa>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a57      	ldr	r2, [pc, #348]	@ (800b724 <HAL_DMA_IRQHandler+0x1ec>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d030      	beq.n	800b62c <HAL_DMA_IRQHandler+0xf4>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a56      	ldr	r2, [pc, #344]	@ (800b728 <HAL_DMA_IRQHandler+0x1f0>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d028      	beq.n	800b626 <HAL_DMA_IRQHandler+0xee>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a4d      	ldr	r2, [pc, #308]	@ (800b710 <HAL_DMA_IRQHandler+0x1d8>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d020      	beq.n	800b620 <HAL_DMA_IRQHandler+0xe8>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a52      	ldr	r2, [pc, #328]	@ (800b72c <HAL_DMA_IRQHandler+0x1f4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d019      	beq.n	800b61c <HAL_DMA_IRQHandler+0xe4>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a50      	ldr	r2, [pc, #320]	@ (800b730 <HAL_DMA_IRQHandler+0x1f8>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d012      	beq.n	800b618 <HAL_DMA_IRQHandler+0xe0>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a4f      	ldr	r2, [pc, #316]	@ (800b734 <HAL_DMA_IRQHandler+0x1fc>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00a      	beq.n	800b612 <HAL_DMA_IRQHandler+0xda>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a4d      	ldr	r2, [pc, #308]	@ (800b738 <HAL_DMA_IRQHandler+0x200>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d102      	bne.n	800b60c <HAL_DMA_IRQHandler+0xd4>
 800b606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b60a:	e01b      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b60c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b610:	e018      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b616:	e015      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b618:	2340      	movs	r3, #64	@ 0x40
 800b61a:	e013      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b61c:	2304      	movs	r3, #4
 800b61e:	e011      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b620:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b624:	e00e      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b62a:	e00b      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b62c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b630:	e008      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b632:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b636:	e005      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b63c:	e002      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b63e:	2340      	movs	r3, #64	@ 0x40
 800b640:	e000      	b.n	800b644 <HAL_DMA_IRQHandler+0x10c>
 800b642:	2304      	movs	r3, #4
 800b644:	4a3d      	ldr	r2, [pc, #244]	@ (800b73c <HAL_DMA_IRQHandler+0x204>)
 800b646:	6053      	str	r3, [r2, #4]
 800b648:	e057      	b.n	800b6fa <HAL_DMA_IRQHandler+0x1c2>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a31      	ldr	r2, [pc, #196]	@ (800b714 <HAL_DMA_IRQHandler+0x1dc>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d04f      	beq.n	800b6f4 <HAL_DMA_IRQHandler+0x1bc>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a2f      	ldr	r2, [pc, #188]	@ (800b718 <HAL_DMA_IRQHandler+0x1e0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d048      	beq.n	800b6f0 <HAL_DMA_IRQHandler+0x1b8>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a2e      	ldr	r2, [pc, #184]	@ (800b71c <HAL_DMA_IRQHandler+0x1e4>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d040      	beq.n	800b6ea <HAL_DMA_IRQHandler+0x1b2>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a2c      	ldr	r2, [pc, #176]	@ (800b720 <HAL_DMA_IRQHandler+0x1e8>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d038      	beq.n	800b6e4 <HAL_DMA_IRQHandler+0x1ac>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a2b      	ldr	r2, [pc, #172]	@ (800b724 <HAL_DMA_IRQHandler+0x1ec>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d030      	beq.n	800b6de <HAL_DMA_IRQHandler+0x1a6>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a29      	ldr	r2, [pc, #164]	@ (800b728 <HAL_DMA_IRQHandler+0x1f0>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d028      	beq.n	800b6d8 <HAL_DMA_IRQHandler+0x1a0>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a21      	ldr	r2, [pc, #132]	@ (800b710 <HAL_DMA_IRQHandler+0x1d8>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d020      	beq.n	800b6d2 <HAL_DMA_IRQHandler+0x19a>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a25      	ldr	r2, [pc, #148]	@ (800b72c <HAL_DMA_IRQHandler+0x1f4>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d019      	beq.n	800b6ce <HAL_DMA_IRQHandler+0x196>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a24      	ldr	r2, [pc, #144]	@ (800b730 <HAL_DMA_IRQHandler+0x1f8>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d012      	beq.n	800b6ca <HAL_DMA_IRQHandler+0x192>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a22      	ldr	r2, [pc, #136]	@ (800b734 <HAL_DMA_IRQHandler+0x1fc>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00a      	beq.n	800b6c4 <HAL_DMA_IRQHandler+0x18c>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a21      	ldr	r2, [pc, #132]	@ (800b738 <HAL_DMA_IRQHandler+0x200>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d102      	bne.n	800b6be <HAL_DMA_IRQHandler+0x186>
 800b6b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b6bc:	e01b      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b6c2:	e018      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6c8:	e015      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6ca:	2340      	movs	r3, #64	@ 0x40
 800b6cc:	e013      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6ce:	2304      	movs	r3, #4
 800b6d0:	e011      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b6d6:	e00e      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b6dc:	e00b      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b6e2:	e008      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b6e8:	e005      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6ee:	e002      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6f0:	2340      	movs	r3, #64	@ 0x40
 800b6f2:	e000      	b.n	800b6f6 <HAL_DMA_IRQHandler+0x1be>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	4a12      	ldr	r2, [pc, #72]	@ (800b740 <HAL_DMA_IRQHandler+0x208>)
 800b6f8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 8136 	beq.w	800b970 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800b70c:	e130      	b.n	800b970 <HAL_DMA_IRQHandler+0x438>
 800b70e:	bf00      	nop
 800b710:	40020080 	.word	0x40020080
 800b714:	40020008 	.word	0x40020008
 800b718:	4002001c 	.word	0x4002001c
 800b71c:	40020030 	.word	0x40020030
 800b720:	40020044 	.word	0x40020044
 800b724:	40020058 	.word	0x40020058
 800b728:	4002006c 	.word	0x4002006c
 800b72c:	40020408 	.word	0x40020408
 800b730:	4002041c 	.word	0x4002041c
 800b734:	40020430 	.word	0x40020430
 800b738:	40020444 	.word	0x40020444
 800b73c:	40020400 	.word	0x40020400
 800b740:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b748:	2202      	movs	r2, #2
 800b74a:	409a      	lsls	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4013      	ands	r3, r2
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 80dd 	beq.w	800b910 <HAL_DMA_IRQHandler+0x3d8>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 80d7 	beq.w	800b910 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10b      	bne.n	800b788 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 020a 	bic.w	r2, r2, #10
 800b77e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	4b7b      	ldr	r3, [pc, #492]	@ (800b97c <HAL_DMA_IRQHandler+0x444>)
 800b790:	429a      	cmp	r2, r3
 800b792:	d958      	bls.n	800b846 <HAL_DMA_IRQHandler+0x30e>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a79      	ldr	r2, [pc, #484]	@ (800b980 <HAL_DMA_IRQHandler+0x448>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d04f      	beq.n	800b83e <HAL_DMA_IRQHandler+0x306>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a78      	ldr	r2, [pc, #480]	@ (800b984 <HAL_DMA_IRQHandler+0x44c>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d048      	beq.n	800b83a <HAL_DMA_IRQHandler+0x302>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a76      	ldr	r2, [pc, #472]	@ (800b988 <HAL_DMA_IRQHandler+0x450>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d040      	beq.n	800b834 <HAL_DMA_IRQHandler+0x2fc>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a75      	ldr	r2, [pc, #468]	@ (800b98c <HAL_DMA_IRQHandler+0x454>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d038      	beq.n	800b82e <HAL_DMA_IRQHandler+0x2f6>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a73      	ldr	r2, [pc, #460]	@ (800b990 <HAL_DMA_IRQHandler+0x458>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d030      	beq.n	800b828 <HAL_DMA_IRQHandler+0x2f0>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a72      	ldr	r2, [pc, #456]	@ (800b994 <HAL_DMA_IRQHandler+0x45c>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d028      	beq.n	800b822 <HAL_DMA_IRQHandler+0x2ea>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a69      	ldr	r2, [pc, #420]	@ (800b97c <HAL_DMA_IRQHandler+0x444>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d020      	beq.n	800b81c <HAL_DMA_IRQHandler+0x2e4>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a6e      	ldr	r2, [pc, #440]	@ (800b998 <HAL_DMA_IRQHandler+0x460>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d019      	beq.n	800b818 <HAL_DMA_IRQHandler+0x2e0>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a6c      	ldr	r2, [pc, #432]	@ (800b99c <HAL_DMA_IRQHandler+0x464>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d012      	beq.n	800b814 <HAL_DMA_IRQHandler+0x2dc>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a6b      	ldr	r2, [pc, #428]	@ (800b9a0 <HAL_DMA_IRQHandler+0x468>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00a      	beq.n	800b80e <HAL_DMA_IRQHandler+0x2d6>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a69      	ldr	r2, [pc, #420]	@ (800b9a4 <HAL_DMA_IRQHandler+0x46c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d102      	bne.n	800b808 <HAL_DMA_IRQHandler+0x2d0>
 800b802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b806:	e01b      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b808:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b80c:	e018      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b80e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b812:	e015      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b814:	2320      	movs	r3, #32
 800b816:	e013      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b818:	2302      	movs	r3, #2
 800b81a:	e011      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b81c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b820:	e00e      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b822:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b826:	e00b      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b82c:	e008      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b82e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b832:	e005      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b838:	e002      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b83a:	2320      	movs	r3, #32
 800b83c:	e000      	b.n	800b840 <HAL_DMA_IRQHandler+0x308>
 800b83e:	2302      	movs	r3, #2
 800b840:	4a59      	ldr	r2, [pc, #356]	@ (800b9a8 <HAL_DMA_IRQHandler+0x470>)
 800b842:	6053      	str	r3, [r2, #4]
 800b844:	e057      	b.n	800b8f6 <HAL_DMA_IRQHandler+0x3be>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a4d      	ldr	r2, [pc, #308]	@ (800b980 <HAL_DMA_IRQHandler+0x448>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d04f      	beq.n	800b8f0 <HAL_DMA_IRQHandler+0x3b8>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a4b      	ldr	r2, [pc, #300]	@ (800b984 <HAL_DMA_IRQHandler+0x44c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d048      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x3b4>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a4a      	ldr	r2, [pc, #296]	@ (800b988 <HAL_DMA_IRQHandler+0x450>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d040      	beq.n	800b8e6 <HAL_DMA_IRQHandler+0x3ae>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a48      	ldr	r2, [pc, #288]	@ (800b98c <HAL_DMA_IRQHandler+0x454>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d038      	beq.n	800b8e0 <HAL_DMA_IRQHandler+0x3a8>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a47      	ldr	r2, [pc, #284]	@ (800b990 <HAL_DMA_IRQHandler+0x458>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d030      	beq.n	800b8da <HAL_DMA_IRQHandler+0x3a2>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a45      	ldr	r2, [pc, #276]	@ (800b994 <HAL_DMA_IRQHandler+0x45c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d028      	beq.n	800b8d4 <HAL_DMA_IRQHandler+0x39c>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a3d      	ldr	r2, [pc, #244]	@ (800b97c <HAL_DMA_IRQHandler+0x444>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d020      	beq.n	800b8ce <HAL_DMA_IRQHandler+0x396>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a41      	ldr	r2, [pc, #260]	@ (800b998 <HAL_DMA_IRQHandler+0x460>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d019      	beq.n	800b8ca <HAL_DMA_IRQHandler+0x392>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a40      	ldr	r2, [pc, #256]	@ (800b99c <HAL_DMA_IRQHandler+0x464>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d012      	beq.n	800b8c6 <HAL_DMA_IRQHandler+0x38e>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a3e      	ldr	r2, [pc, #248]	@ (800b9a0 <HAL_DMA_IRQHandler+0x468>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00a      	beq.n	800b8c0 <HAL_DMA_IRQHandler+0x388>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a3d      	ldr	r2, [pc, #244]	@ (800b9a4 <HAL_DMA_IRQHandler+0x46c>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d102      	bne.n	800b8ba <HAL_DMA_IRQHandler+0x382>
 800b8b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8b8:	e01b      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b8be:	e018      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8c4:	e015      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8c6:	2320      	movs	r3, #32
 800b8c8:	e013      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e011      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b8d2:	e00e      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b8d8:	e00b      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b8de:	e008      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8e4:	e005      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8ea:	e002      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8ec:	2320      	movs	r3, #32
 800b8ee:	e000      	b.n	800b8f2 <HAL_DMA_IRQHandler+0x3ba>
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	4a2e      	ldr	r2, [pc, #184]	@ (800b9ac <HAL_DMA_IRQHandler+0x474>)
 800b8f4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	d034      	beq.n	800b970 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b90e:	e02f      	b.n	800b970 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b914:	2208      	movs	r2, #8
 800b916:	409a      	lsls	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d028      	beq.n	800b972 <HAL_DMA_IRQHandler+0x43a>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f003 0308 	and.w	r3, r3, #8
 800b926:	2b00      	cmp	r3, #0
 800b928:	d023      	beq.n	800b972 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 020e 	bic.w	r2, r2, #14
 800b938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b942:	2101      	movs	r1, #1
 800b944:	fa01 f202 	lsl.w	r2, r1, r2
 800b948:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b964:	2b00      	cmp	r3, #0
 800b966:	d004      	beq.n	800b972 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	4798      	blx	r3
    }
  }
  return;
 800b970:	bf00      	nop
 800b972:	bf00      	nop
}
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	40020080 	.word	0x40020080
 800b980:	40020008 	.word	0x40020008
 800b984:	4002001c 	.word	0x4002001c
 800b988:	40020030 	.word	0x40020030
 800b98c:	40020044 	.word	0x40020044
 800b990:	40020058 	.word	0x40020058
 800b994:	4002006c 	.word	0x4002006c
 800b998:	40020408 	.word	0x40020408
 800b99c:	4002041c 	.word	0x4002041c
 800b9a0:	40020430 	.word	0x40020430
 800b9a4:	40020444 	.word	0x40020444
 800b9a8:	40020400 	.word	0x40020400
 800b9ac:	40020000 	.word	0x40020000

0800b9b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	fa01 f202 	lsl.w	r2, r1, r2
 800b9cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b10      	cmp	r3, #16
 800b9dc:	d108      	bne.n	800b9f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b9ee:	e007      	b.n	800ba00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	60da      	str	r2, [r3, #12]
}
 800ba00:	bf00      	nop
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bc80      	pop	{r7}
 800ba08:	4770      	bx	lr
	...

0800ba0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b08b      	sub	sp, #44	@ 0x2c
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ba16:	2300      	movs	r3, #0
 800ba18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba1e:	e179      	b.n	800bd14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800ba20:	2201      	movs	r2, #1
 800ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba24:	fa02 f303 	lsl.w	r3, r2, r3
 800ba28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	4013      	ands	r3, r2
 800ba32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	f040 8168 	bne.w	800bd0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4a96      	ldr	r2, [pc, #600]	@ (800bc9c <HAL_GPIO_Init+0x290>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d05e      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
 800ba48:	4a94      	ldr	r2, [pc, #592]	@ (800bc9c <HAL_GPIO_Init+0x290>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d875      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba4e:	4a94      	ldr	r2, [pc, #592]	@ (800bca0 <HAL_GPIO_Init+0x294>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d058      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
 800ba54:	4a92      	ldr	r2, [pc, #584]	@ (800bca0 <HAL_GPIO_Init+0x294>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d86f      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba5a:	4a92      	ldr	r2, [pc, #584]	@ (800bca4 <HAL_GPIO_Init+0x298>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d052      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
 800ba60:	4a90      	ldr	r2, [pc, #576]	@ (800bca4 <HAL_GPIO_Init+0x298>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d869      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba66:	4a90      	ldr	r2, [pc, #576]	@ (800bca8 <HAL_GPIO_Init+0x29c>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d04c      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
 800ba6c:	4a8e      	ldr	r2, [pc, #568]	@ (800bca8 <HAL_GPIO_Init+0x29c>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d863      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba72:	4a8e      	ldr	r2, [pc, #568]	@ (800bcac <HAL_GPIO_Init+0x2a0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d046      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
 800ba78:	4a8c      	ldr	r2, [pc, #560]	@ (800bcac <HAL_GPIO_Init+0x2a0>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d85d      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba7e:	2b12      	cmp	r3, #18
 800ba80:	d82a      	bhi.n	800bad8 <HAL_GPIO_Init+0xcc>
 800ba82:	2b12      	cmp	r3, #18
 800ba84:	d859      	bhi.n	800bb3a <HAL_GPIO_Init+0x12e>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <HAL_GPIO_Init+0x80>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800bb07 	.word	0x0800bb07
 800ba90:	0800bae1 	.word	0x0800bae1
 800ba94:	0800baf3 	.word	0x0800baf3
 800ba98:	0800bb35 	.word	0x0800bb35
 800ba9c:	0800bb3b 	.word	0x0800bb3b
 800baa0:	0800bb3b 	.word	0x0800bb3b
 800baa4:	0800bb3b 	.word	0x0800bb3b
 800baa8:	0800bb3b 	.word	0x0800bb3b
 800baac:	0800bb3b 	.word	0x0800bb3b
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb3b 	.word	0x0800bb3b
 800bab8:	0800bb3b 	.word	0x0800bb3b
 800babc:	0800bb3b 	.word	0x0800bb3b
 800bac0:	0800bb3b 	.word	0x0800bb3b
 800bac4:	0800bb3b 	.word	0x0800bb3b
 800bac8:	0800bb3b 	.word	0x0800bb3b
 800bacc:	0800bb3b 	.word	0x0800bb3b
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800bafd 	.word	0x0800bafd
 800bad8:	4a75      	ldr	r2, [pc, #468]	@ (800bcb0 <HAL_GPIO_Init+0x2a4>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d013      	beq.n	800bb06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800bade:	e02c      	b.n	800bb3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	623b      	str	r3, [r7, #32]
          break;
 800bae6:	e029      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	623b      	str	r3, [r7, #32]
          break;
 800baf0:	e024      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	3308      	adds	r3, #8
 800baf8:	623b      	str	r3, [r7, #32]
          break;
 800bafa:	e01f      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	330c      	adds	r3, #12
 800bb02:	623b      	str	r3, [r7, #32]
          break;
 800bb04:	e01a      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800bb0e:	2304      	movs	r3, #4
 800bb10:	623b      	str	r3, [r7, #32]
          break;
 800bb12:	e013      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d105      	bne.n	800bb28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	611a      	str	r2, [r3, #16]
          break;
 800bb26:	e009      	b.n	800bb3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800bb28:	2308      	movs	r3, #8
 800bb2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	615a      	str	r2, [r3, #20]
          break;
 800bb32:	e003      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800bb34:	2300      	movs	r3, #0
 800bb36:	623b      	str	r3, [r7, #32]
          break;
 800bb38:	e000      	b.n	800bb3c <HAL_GPIO_Init+0x130>
          break;
 800bb3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	2bff      	cmp	r3, #255	@ 0xff
 800bb40:	d801      	bhi.n	800bb46 <HAL_GPIO_Init+0x13a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	e001      	b.n	800bb4a <HAL_GPIO_Init+0x13e>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	2bff      	cmp	r3, #255	@ 0xff
 800bb50:	d802      	bhi.n	800bb58 <HAL_GPIO_Init+0x14c>
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	e002      	b.n	800bb5e <HAL_GPIO_Init+0x152>
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	3b08      	subs	r3, #8
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	210f      	movs	r1, #15
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	fa01 f303 	lsl.w	r3, r1, r3
 800bb6c:	43db      	mvns	r3, r3
 800bb6e:	401a      	ands	r2, r3
 800bb70:	6a39      	ldr	r1, [r7, #32]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	fa01 f303 	lsl.w	r3, r1, r3
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80c1 	beq.w	800bd0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800bb8c:	4b49      	ldr	r3, [pc, #292]	@ (800bcb4 <HAL_GPIO_Init+0x2a8>)
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	4a48      	ldr	r2, [pc, #288]	@ (800bcb4 <HAL_GPIO_Init+0x2a8>)
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	6193      	str	r3, [r2, #24]
 800bb98:	4b46      	ldr	r3, [pc, #280]	@ (800bcb4 <HAL_GPIO_Init+0x2a8>)
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800bba4:	4a44      	ldr	r2, [pc, #272]	@ (800bcb8 <HAL_GPIO_Init+0x2ac>)
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	089b      	lsrs	r3, r3, #2
 800bbaa:	3302      	adds	r3, #2
 800bbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	220f      	movs	r2, #15
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	43db      	mvns	r3, r3
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a3c      	ldr	r2, [pc, #240]	@ (800bcbc <HAL_GPIO_Init+0x2b0>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d01f      	beq.n	800bc10 <HAL_GPIO_Init+0x204>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc0 <HAL_GPIO_Init+0x2b4>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d019      	beq.n	800bc0c <HAL_GPIO_Init+0x200>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a3a      	ldr	r2, [pc, #232]	@ (800bcc4 <HAL_GPIO_Init+0x2b8>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d013      	beq.n	800bc08 <HAL_GPIO_Init+0x1fc>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a39      	ldr	r2, [pc, #228]	@ (800bcc8 <HAL_GPIO_Init+0x2bc>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00d      	beq.n	800bc04 <HAL_GPIO_Init+0x1f8>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a38      	ldr	r2, [pc, #224]	@ (800bccc <HAL_GPIO_Init+0x2c0>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d007      	beq.n	800bc00 <HAL_GPIO_Init+0x1f4>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a37      	ldr	r2, [pc, #220]	@ (800bcd0 <HAL_GPIO_Init+0x2c4>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d101      	bne.n	800bbfc <HAL_GPIO_Init+0x1f0>
 800bbf8:	2305      	movs	r3, #5
 800bbfa:	e00a      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bbfc:	2306      	movs	r3, #6
 800bbfe:	e008      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc00:	2304      	movs	r3, #4
 800bc02:	e006      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc04:	2303      	movs	r3, #3
 800bc06:	e004      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e002      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc10:	2300      	movs	r3, #0
 800bc12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc14:	f002 0203 	and.w	r2, r2, #3
 800bc18:	0092      	lsls	r2, r2, #2
 800bc1a:	4093      	lsls	r3, r2
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800bc22:	4925      	ldr	r1, [pc, #148]	@ (800bcb8 <HAL_GPIO_Init+0x2ac>)
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	089b      	lsrs	r3, r3, #2
 800bc28:	3302      	adds	r3, #2
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d006      	beq.n	800bc4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800bc3c:	4b25      	ldr	r3, [pc, #148]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc3e:	689a      	ldr	r2, [r3, #8]
 800bc40:	4924      	ldr	r1, [pc, #144]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	608b      	str	r3, [r1, #8]
 800bc48:	e006      	b.n	800bc58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800bc4a:	4b22      	ldr	r3, [pc, #136]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	43db      	mvns	r3, r3
 800bc52:	4920      	ldr	r1, [pc, #128]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800bc64:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc66:	68da      	ldr	r2, [r3, #12]
 800bc68:	491a      	ldr	r1, [pc, #104]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60cb      	str	r3, [r1, #12]
 800bc70:	e006      	b.n	800bc80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800bc72:	4b18      	ldr	r3, [pc, #96]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc74:	68da      	ldr	r2, [r3, #12]
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	43db      	mvns	r3, r3
 800bc7a:	4916      	ldr	r1, [pc, #88]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d025      	beq.n	800bcd8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800bc8c:	4b11      	ldr	r3, [pc, #68]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	4910      	ldr	r1, [pc, #64]	@ (800bcd4 <HAL_GPIO_Init+0x2c8>)
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	604b      	str	r3, [r1, #4]
 800bc98:	e025      	b.n	800bce6 <HAL_GPIO_Init+0x2da>
 800bc9a:	bf00      	nop
 800bc9c:	10320000 	.word	0x10320000
 800bca0:	10310000 	.word	0x10310000
 800bca4:	10220000 	.word	0x10220000
 800bca8:	10210000 	.word	0x10210000
 800bcac:	10120000 	.word	0x10120000
 800bcb0:	10110000 	.word	0x10110000
 800bcb4:	40021000 	.word	0x40021000
 800bcb8:	40010000 	.word	0x40010000
 800bcbc:	40010800 	.word	0x40010800
 800bcc0:	40010c00 	.word	0x40010c00
 800bcc4:	40011000 	.word	0x40011000
 800bcc8:	40011400 	.word	0x40011400
 800bccc:	40011800 	.word	0x40011800
 800bcd0:	40011c00 	.word	0x40011c00
 800bcd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800bcd8:	4b15      	ldr	r3, [pc, #84]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	43db      	mvns	r3, r3
 800bce0:	4913      	ldr	r1, [pc, #76]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bce2:	4013      	ands	r3, r2
 800bce4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	490e      	ldr	r1, [pc, #56]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	600b      	str	r3, [r1, #0]
 800bcfe:	e006      	b.n	800bd0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800bd00:	4b0b      	ldr	r3, [pc, #44]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	43db      	mvns	r3, r3
 800bd08:	4909      	ldr	r1, [pc, #36]	@ (800bd30 <HAL_GPIO_Init+0x324>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	3301      	adds	r3, #1
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f47f ae7e 	bne.w	800ba20 <HAL_GPIO_Init+0x14>
  }
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	372c      	adds	r7, #44	@ 0x2c
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bc80      	pop	{r7}
 800bd2e:	4770      	bx	lr
 800bd30:	40010400 	.word	0x40010400

0800bd34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	807b      	strh	r3, [r7, #2]
 800bd40:	4613      	mov	r3, r2
 800bd42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bd44:	787b      	ldrb	r3, [r7, #1]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd4a:	887a      	ldrh	r2, [r7, #2]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800bd50:	e003      	b.n	800bd5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800bd52:	887b      	ldrh	r3, [r7, #2]
 800bd54:	041a      	lsls	r2, r3, #16
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	611a      	str	r2, [r3, #16]
}
 800bd5a:	bf00      	nop
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bc80      	pop	{r7}
 800bd62:	4770      	bx	lr

0800bd64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e12b      	b.n	800bfce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d106      	bne.n	800bd90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7fe fdd0 	bl	800a930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2224      	movs	r2, #36	@ 0x24
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0201 	bic.w	r2, r2, #1
 800bda6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bdb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bdc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bdc8:	f001 fa18 	bl	800d1fc <HAL_RCC_GetPCLK1Freq>
 800bdcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4a81      	ldr	r2, [pc, #516]	@ (800bfd8 <HAL_I2C_Init+0x274>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d807      	bhi.n	800bde8 <HAL_I2C_Init+0x84>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4a80      	ldr	r2, [pc, #512]	@ (800bfdc <HAL_I2C_Init+0x278>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	bf94      	ite	ls
 800bde0:	2301      	movls	r3, #1
 800bde2:	2300      	movhi	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	e006      	b.n	800bdf6 <HAL_I2C_Init+0x92>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4a7d      	ldr	r2, [pc, #500]	@ (800bfe0 <HAL_I2C_Init+0x27c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	bf94      	ite	ls
 800bdf0:	2301      	movls	r3, #1
 800bdf2:	2300      	movhi	r3, #0
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e0e7      	b.n	800bfce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4a78      	ldr	r2, [pc, #480]	@ (800bfe4 <HAL_I2C_Init+0x280>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	0c9b      	lsrs	r3, r3, #18
 800be08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a6a      	ldr	r2, [pc, #424]	@ (800bfd8 <HAL_I2C_Init+0x274>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d802      	bhi.n	800be38 <HAL_I2C_Init+0xd4>
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	3301      	adds	r3, #1
 800be36:	e009      	b.n	800be4c <HAL_I2C_Init+0xe8>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	4a69      	ldr	r2, [pc, #420]	@ (800bfe8 <HAL_I2C_Init+0x284>)
 800be44:	fba2 2303 	umull	r2, r3, r2, r3
 800be48:	099b      	lsrs	r3, r3, #6
 800be4a:	3301      	adds	r3, #1
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	6812      	ldr	r2, [r2, #0]
 800be50:	430b      	orrs	r3, r1
 800be52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800be5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	495c      	ldr	r1, [pc, #368]	@ (800bfd8 <HAL_I2C_Init+0x274>)
 800be68:	428b      	cmp	r3, r1
 800be6a:	d819      	bhi.n	800bea0 <HAL_I2C_Init+0x13c>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	1e59      	subs	r1, r3, #1
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	fbb1 f3f3 	udiv	r3, r1, r3
 800be7a:	1c59      	adds	r1, r3, #1
 800be7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800be80:	400b      	ands	r3, r1
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <HAL_I2C_Init+0x138>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1e59      	subs	r1, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	fbb1 f3f3 	udiv	r3, r1, r3
 800be94:	3301      	adds	r3, #1
 800be96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be9a:	e051      	b.n	800bf40 <HAL_I2C_Init+0x1dc>
 800be9c:	2304      	movs	r3, #4
 800be9e:	e04f      	b.n	800bf40 <HAL_I2C_Init+0x1dc>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d111      	bne.n	800becc <HAL_I2C_Init+0x168>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	1e58      	subs	r0, r3, #1
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6859      	ldr	r1, [r3, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	440b      	add	r3, r1
 800beb6:	fbb0 f3f3 	udiv	r3, r0, r3
 800beba:	3301      	adds	r3, #1
 800bebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	bf0c      	ite	eq
 800bec4:	2301      	moveq	r3, #1
 800bec6:	2300      	movne	r3, #0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	e012      	b.n	800bef2 <HAL_I2C_Init+0x18e>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	1e58      	subs	r0, r3, #1
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6859      	ldr	r1, [r3, #4]
 800bed4:	460b      	mov	r3, r1
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	440b      	add	r3, r1
 800beda:	0099      	lsls	r1, r3, #2
 800bedc:	440b      	add	r3, r1
 800bede:	fbb0 f3f3 	udiv	r3, r0, r3
 800bee2:	3301      	adds	r3, #1
 800bee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bf0c      	ite	eq
 800beec:	2301      	moveq	r3, #1
 800beee:	2300      	movne	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <HAL_I2C_Init+0x196>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e022      	b.n	800bf40 <HAL_I2C_Init+0x1dc>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10e      	bne.n	800bf20 <HAL_I2C_Init+0x1bc>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	1e58      	subs	r0, r3, #1
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6859      	ldr	r1, [r3, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	440b      	add	r3, r1
 800bf10:	fbb0 f3f3 	udiv	r3, r0, r3
 800bf14:	3301      	adds	r3, #1
 800bf16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf1e:	e00f      	b.n	800bf40 <HAL_I2C_Init+0x1dc>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	1e58      	subs	r0, r3, #1
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6859      	ldr	r1, [r3, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	0099      	lsls	r1, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	fbb0 f3f3 	udiv	r3, r0, r3
 800bf36:	3301      	adds	r3, #1
 800bf38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	6809      	ldr	r1, [r1, #0]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69da      	ldr	r2, [r3, #28]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	431a      	orrs	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800bf6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6911      	ldr	r1, [r2, #16]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	68d2      	ldr	r2, [r2, #12]
 800bf7a:	4311      	orrs	r1, r2
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	430b      	orrs	r3, r1
 800bf82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	695a      	ldr	r2, [r3, #20]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0201 	orr.w	r2, r2, #1
 800bfae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	000186a0 	.word	0x000186a0
 800bfdc:	001e847f 	.word	0x001e847f
 800bfe0:	003d08ff 	.word	0x003d08ff
 800bfe4:	431bde83 	.word	0x431bde83
 800bfe8:	10624dd3 	.word	0x10624dd3

0800bfec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08c      	sub	sp, #48	@ 0x30
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	817b      	strh	r3, [r7, #10]
 800bffe:	460b      	mov	r3, r1
 800c000:	813b      	strh	r3, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800c006:	2300      	movs	r3, #0
 800c008:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c00a:	f7fe ff63 	bl	800aed4 <HAL_GetTick>
 800c00e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b20      	cmp	r3, #32
 800c01a:	f040 8244 	bne.w	800c4a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	2319      	movs	r3, #25
 800c024:	2201      	movs	r2, #1
 800c026:	4982      	ldr	r1, [pc, #520]	@ (800c230 <HAL_I2C_Mem_Read+0x244>)
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 fb2f 	bl	800c68c <I2C_WaitOnFlagUntilTimeout>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800c034:	2302      	movs	r3, #2
 800c036:	e237      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d101      	bne.n	800c046 <HAL_I2C_Mem_Read+0x5a>
 800c042:	2302      	movs	r3, #2
 800c044:	e230      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2201      	movs	r2, #1
 800c04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d007      	beq.n	800c06c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f042 0201 	orr.w	r2, r2, #1
 800c06a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c07a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2222      	movs	r2, #34	@ 0x22
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2240      	movs	r2, #64	@ 0x40
 800c088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c09c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4a62      	ldr	r2, [pc, #392]	@ (800c234 <HAL_I2C_Mem_Read+0x248>)
 800c0ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0ae:	88f8      	ldrh	r0, [r7, #6]
 800c0b0:	893a      	ldrh	r2, [r7, #8]
 800c0b2:	8979      	ldrh	r1, [r7, #10]
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b6:	9301      	str	r3, [sp, #4]
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	4603      	mov	r3, r0
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f9fc 	bl	800c4bc <I2C_RequestMemoryRead>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e1ec      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d113      	bne.n	800c0fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	61fb      	str	r3, [r7, #28]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	e1c0      	b.n	800c480 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c102:	2b01      	cmp	r3, #1
 800c104:	d11e      	bne.n	800c144 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c114:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c116:	b672      	cpsid	i
}
 800c118:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c11a:	2300      	movs	r3, #0
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	61bb      	str	r3, [r7, #24]
 800c12e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c13e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c140:	b662      	cpsie	i
}
 800c142:	e035      	b.n	800c1b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d11e      	bne.n	800c18a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c15a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c15c:	b672      	cpsid	i
}
 800c15e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c160:	2300      	movs	r3, #0
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c184:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c186:	b662      	cpsie	i
}
 800c188:	e012      	b.n	800c1b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c198:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c19a:	2300      	movs	r3, #0
 800c19c:	613b      	str	r3, [r7, #16]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	613b      	str	r3, [r7, #16]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	613b      	str	r3, [r7, #16]
 800c1ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800c1b0:	e166      	b.n	800c480 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	f200 811f 	bhi.w	800c3fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d123      	bne.n	800c20c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 fbc1 	bl	800c950 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e167      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c200:	b29b      	uxth	r3, r3
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c20a:	e139      	b.n	800c480 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c210:	2b02      	cmp	r3, #2
 800c212:	d152      	bne.n	800c2ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21a:	2200      	movs	r2, #0
 800c21c:	4906      	ldr	r1, [pc, #24]	@ (800c238 <HAL_I2C_Mem_Read+0x24c>)
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 fa34 	bl	800c68c <I2C_WaitOnFlagUntilTimeout>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e13c      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
 800c22e:	bf00      	nop
 800c230:	00100002 	.word	0x00100002
 800c234:	ffff0000 	.word	0xffff0000
 800c238:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800c23c:	b672      	cpsid	i
}
 800c23e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c24e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c26c:	3b01      	subs	r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c278:	b29b      	uxth	r3, r3
 800c27a:	3b01      	subs	r3, #1
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c282:	b662      	cpsie	i
}
 800c284:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c2b8:	e0e2      	b.n	800c480 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	497b      	ldr	r1, [pc, #492]	@ (800c4b0 <HAL_I2C_Mem_Read+0x4c4>)
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f000 f9e1 	bl	800c68c <I2C_WaitOnFlagUntilTimeout>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e0e9      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2e4:	b672      	cpsid	i
}
 800c2e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	691a      	ldr	r2, [r3, #16]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f2:	b2d2      	uxtb	r2, r2
 800c2f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c304:	3b01      	subs	r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c310:	b29b      	uxth	r3, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	b29a      	uxth	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c31a:	4b66      	ldr	r3, [pc, #408]	@ (800c4b4 <HAL_I2C_Mem_Read+0x4c8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	08db      	lsrs	r3, r3, #3
 800c320:	4a65      	ldr	r2, [pc, #404]	@ (800c4b8 <HAL_I2C_Mem_Read+0x4cc>)
 800c322:	fba2 2303 	umull	r2, r3, r2, r3
 800c326:	0a1a      	lsrs	r2, r3, #8
 800c328:	4613      	mov	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	00da      	lsls	r2, r3, #3
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	3b01      	subs	r3, #1
 800c338:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d118      	bne.n	800c372 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2220      	movs	r2, #32
 800c34a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c35a:	f043 0220 	orr.w	r2, r3, #32
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800c362:	b662      	cpsie	i
}
 800c364:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e09a      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	f003 0304 	and.w	r3, r3, #4
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d1d9      	bne.n	800c334 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c38e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	691a      	ldr	r2, [r3, #16]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39a:	b2d2      	uxtb	r2, r2
 800c39c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c3c2:	b662      	cpsie	i
}
 800c3c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691a      	ldr	r2, [r3, #16]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d0:	b2d2      	uxtb	r2, r2
 800c3d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c3f8:	e042      	b.n	800c480 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 faa6 	bl	800c950 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e04c      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c418:	b2d2      	uxtb	r2, r2
 800c41a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c42a:	3b01      	subs	r3, #1
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c436:	b29b      	uxth	r3, r3
 800c438:	3b01      	subs	r3, #1
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	d118      	bne.n	800c480 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	691a      	ldr	r2, [r3, #16]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c458:	b2d2      	uxtb	r2, r2
 800c45a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c46a:	3b01      	subs	r3, #1
 800c46c:	b29a      	uxth	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c476:	b29b      	uxth	r3, r3
 800c478:	3b01      	subs	r3, #1
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c484:	2b00      	cmp	r3, #0
 800c486:	f47f ae94 	bne.w	800c1b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e000      	b.n	800c4a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800c4a6:	2302      	movs	r3, #2
  }
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3728      	adds	r7, #40	@ 0x28
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	00010004 	.word	0x00010004
 800c4b4:	20000054 	.word	0x20000054
 800c4b8:	14f8b589 	.word	0x14f8b589

0800c4bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	817b      	strh	r3, [r7, #10]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	813b      	strh	r3, [r7, #8]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c4e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f000 f8c2 	bl	800c68c <I2C_WaitOnFlagUntilTimeout>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00d      	beq.n	800c52a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c51c:	d103      	bne.n	800c526 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c524:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e0aa      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c52a:	897b      	ldrh	r3, [r7, #10]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	461a      	mov	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53c:	6a3a      	ldr	r2, [r7, #32]
 800c53e:	4952      	ldr	r1, [pc, #328]	@ (800c688 <I2C_RequestMemoryRead+0x1cc>)
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f91d 	bl	800c780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e097      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c568:	6a39      	ldr	r1, [r7, #32]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 f9a8 	bl	800c8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00d      	beq.n	800c592 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d107      	bne.n	800c58e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c58c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e076      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c592:	88fb      	ldrh	r3, [r7, #6]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d105      	bne.n	800c5a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c598:	893b      	ldrh	r3, [r7, #8]
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	611a      	str	r2, [r3, #16]
 800c5a2:	e021      	b.n	800c5e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c5a4:	893b      	ldrh	r3, [r7, #8]
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b4:	6a39      	ldr	r1, [r7, #32]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f000 f982 	bl	800c8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00d      	beq.n	800c5de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d107      	bne.n	800c5da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c5d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e050      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ea:	6a39      	ldr	r1, [r7, #32]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f000 f967 	bl	800c8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00d      	beq.n	800c614 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	2b04      	cmp	r3, #4
 800c5fe:	d107      	bne.n	800c610 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c60e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e035      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c622:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f82b 	bl	800c68c <I2C_WaitOnFlagUntilTimeout>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00d      	beq.n	800c658 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c64a:	d103      	bne.n	800c654 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c652:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e013      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c658:	897b      	ldrh	r3, [r7, #10]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	f043 0301 	orr.w	r3, r3, #1
 800c660:	b2da      	uxtb	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66a:	6a3a      	ldr	r2, [r7, #32]
 800c66c:	4906      	ldr	r1, [pc, #24]	@ (800c688 <I2C_RequestMemoryRead+0x1cc>)
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f000 f886 	bl	800c780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	00010002 	.word	0x00010002

0800c68c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	4613      	mov	r3, r2
 800c69a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c69c:	e048      	b.n	800c730 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a4:	d044      	beq.n	800c730 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a6:	f7fe fc15 	bl	800aed4 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d302      	bcc.n	800c6bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d139      	bne.n	800c730 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	0c1b      	lsrs	r3, r3, #16
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d10d      	bne.n	800c6e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	43da      	mvns	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bf0c      	ite	eq
 800c6d8:	2301      	moveq	r3, #1
 800c6da:	2300      	movne	r3, #0
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	461a      	mov	r2, r3
 800c6e0:	e00c      	b.n	800c6fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	43da      	mvns	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	bf0c      	ite	eq
 800c6f4:	2301      	moveq	r3, #1
 800c6f6:	2300      	movne	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d116      	bne.n	800c730 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2220      	movs	r2, #32
 800c70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c71c:	f043 0220 	orr.w	r2, r3, #32
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e023      	b.n	800c778 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	0c1b      	lsrs	r3, r3, #16
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b01      	cmp	r3, #1
 800c738:	d10d      	bne.n	800c756 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	43da      	mvns	r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	4013      	ands	r3, r2
 800c746:	b29b      	uxth	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bf0c      	ite	eq
 800c74c:	2301      	moveq	r3, #1
 800c74e:	2300      	movne	r3, #0
 800c750:	b2db      	uxtb	r3, r3
 800c752:	461a      	mov	r2, r3
 800c754:	e00c      	b.n	800c770 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	43da      	mvns	r2, r3
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	4013      	ands	r3, r2
 800c762:	b29b      	uxth	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	bf0c      	ite	eq
 800c768:	2301      	moveq	r3, #1
 800c76a:	2300      	movne	r3, #0
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	461a      	mov	r2, r3
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	429a      	cmp	r2, r3
 800c774:	d093      	beq.n	800c69e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c78e:	e071      	b.n	800c874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c79a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c79e:	d123      	bne.n	800c7e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c7b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d4:	f043 0204 	orr.w	r2, r3, #4
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e067      	b.n	800c8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ee:	d041      	beq.n	800c874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7f0:	f7fe fb70 	bl	800aed4 <HAL_GetTick>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d302      	bcc.n	800c806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d136      	bne.n	800c874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	0c1b      	lsrs	r3, r3, #16
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d10c      	bne.n	800c82a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	43da      	mvns	r2, r3
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	4013      	ands	r3, r2
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bf14      	ite	ne
 800c822:	2301      	movne	r3, #1
 800c824:	2300      	moveq	r3, #0
 800c826:	b2db      	uxtb	r3, r3
 800c828:	e00b      	b.n	800c842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	43da      	mvns	r2, r3
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	4013      	ands	r3, r2
 800c836:	b29b      	uxth	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	bf14      	ite	ne
 800c83c:	2301      	movne	r3, #1
 800c83e:	2300      	moveq	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d016      	beq.n	800c874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2220      	movs	r2, #32
 800c850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c860:	f043 0220 	orr.w	r2, r3, #32
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e021      	b.n	800c8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	0c1b      	lsrs	r3, r3, #16
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d10c      	bne.n	800c898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	695b      	ldr	r3, [r3, #20]
 800c884:	43da      	mvns	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	4013      	ands	r3, r2
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bf14      	ite	ne
 800c890:	2301      	movne	r3, #1
 800c892:	2300      	moveq	r3, #0
 800c894:	b2db      	uxtb	r3, r3
 800c896:	e00b      	b.n	800c8b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	43da      	mvns	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bf14      	ite	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	2300      	moveq	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f47f af6d 	bne.w	800c790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c8cc:	e034      	b.n	800c938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 f89b 	bl	800ca0a <I2C_IsAcknowledgeFailed>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e034      	b.n	800c948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d028      	beq.n	800c938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8e6:	f7fe faf5 	bl	800aed4 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d302      	bcc.n	800c8fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d11d      	bne.n	800c938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c906:	2b80      	cmp	r3, #128	@ 0x80
 800c908:	d016      	beq.n	800c938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2220      	movs	r2, #32
 800c914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c924:	f043 0220 	orr.w	r2, r3, #32
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e007      	b.n	800c948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	695b      	ldr	r3, [r3, #20]
 800c93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c942:	2b80      	cmp	r3, #128	@ 0x80
 800c944:	d1c3      	bne.n	800c8ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c95c:	e049      	b.n	800c9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	f003 0310 	and.w	r3, r3, #16
 800c968:	2b10      	cmp	r3, #16
 800c96a:	d119      	bne.n	800c9a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f06f 0210 	mvn.w	r2, #16
 800c974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2220      	movs	r2, #32
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e030      	b.n	800ca02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9a0:	f7fe fa98 	bl	800aed4 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d302      	bcc.n	800c9b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d11d      	bne.n	800c9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9c0:	2b40      	cmp	r3, #64	@ 0x40
 800c9c2:	d016      	beq.n	800c9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9de:	f043 0220 	orr.w	r2, r3, #32
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e007      	b.n	800ca02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	d1ae      	bne.n	800c95e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca20:	d11b      	bne.n	800ca5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ca2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca46:	f043 0204 	orr.w	r2, r3, #4
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e000      	b.n	800ca5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bc80      	pop	{r7}
 800ca64:	4770      	bx	lr
	...

0800ca68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e272      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 8087 	beq.w	800cb96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca88:	4b92      	ldr	r3, [pc, #584]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f003 030c 	and.w	r3, r3, #12
 800ca90:	2b04      	cmp	r3, #4
 800ca92:	d00c      	beq.n	800caae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ca94:	4b8f      	ldr	r3, [pc, #572]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	f003 030c 	and.w	r3, r3, #12
 800ca9c:	2b08      	cmp	r3, #8
 800ca9e:	d112      	bne.n	800cac6 <HAL_RCC_OscConfig+0x5e>
 800caa0:	4b8c      	ldr	r3, [pc, #560]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800caa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caac:	d10b      	bne.n	800cac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800caae:	4b89      	ldr	r3, [pc, #548]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d06c      	beq.n	800cb94 <HAL_RCC_OscConfig+0x12c>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d168      	bne.n	800cb94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e24c      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cace:	d106      	bne.n	800cade <HAL_RCC_OscConfig+0x76>
 800cad0:	4b80      	ldr	r3, [pc, #512]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a7f      	ldr	r2, [pc, #508]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	e02e      	b.n	800cb3c <HAL_RCC_OscConfig+0xd4>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10c      	bne.n	800cb00 <HAL_RCC_OscConfig+0x98>
 800cae6:	4b7b      	ldr	r3, [pc, #492]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a7a      	ldr	r2, [pc, #488]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800caec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	4b78      	ldr	r3, [pc, #480]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a77      	ldr	r2, [pc, #476]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800caf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	e01d      	b.n	800cb3c <HAL_RCC_OscConfig+0xd4>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb08:	d10c      	bne.n	800cb24 <HAL_RCC_OscConfig+0xbc>
 800cb0a:	4b72      	ldr	r3, [pc, #456]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a71      	ldr	r2, [pc, #452]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	4b6f      	ldr	r3, [pc, #444]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a6e      	ldr	r2, [pc, #440]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	e00b      	b.n	800cb3c <HAL_RCC_OscConfig+0xd4>
 800cb24:	4b6b      	ldr	r3, [pc, #428]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a6a      	ldr	r2, [pc, #424]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	4b68      	ldr	r3, [pc, #416]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a67      	ldr	r2, [pc, #412]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d013      	beq.n	800cb6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb44:	f7fe f9c6 	bl	800aed4 <HAL_GetTick>
 800cb48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb4a:	e008      	b.n	800cb5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb4c:	f7fe f9c2 	bl	800aed4 <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	2b64      	cmp	r3, #100	@ 0x64
 800cb58:	d901      	bls.n	800cb5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e200      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb5e:	4b5d      	ldr	r3, [pc, #372]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0f0      	beq.n	800cb4c <HAL_RCC_OscConfig+0xe4>
 800cb6a:	e014      	b.n	800cb96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb6c:	f7fe f9b2 	bl	800aed4 <HAL_GetTick>
 800cb70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb72:	e008      	b.n	800cb86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb74:	f7fe f9ae 	bl	800aed4 <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b64      	cmp	r3, #100	@ 0x64
 800cb80:	d901      	bls.n	800cb86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e1ec      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb86:	4b53      	ldr	r3, [pc, #332]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1f0      	bne.n	800cb74 <HAL_RCC_OscConfig+0x10c>
 800cb92:	e000      	b.n	800cb96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d063      	beq.n	800cc6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cba2:	4b4c      	ldr	r3, [pc, #304]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f003 030c 	and.w	r3, r3, #12
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00b      	beq.n	800cbc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800cbae:	4b49      	ldr	r3, [pc, #292]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f003 030c 	and.w	r3, r3, #12
 800cbb6:	2b08      	cmp	r3, #8
 800cbb8:	d11c      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x18c>
 800cbba:	4b46      	ldr	r3, [pc, #280]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d116      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbc6:	4b43      	ldr	r3, [pc, #268]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 0302 	and.w	r3, r3, #2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <HAL_RCC_OscConfig+0x176>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d001      	beq.n	800cbde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e1c0      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbde:	4b3d      	ldr	r3, [pc, #244]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	4939      	ldr	r1, [pc, #228]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbf2:	e03a      	b.n	800cc6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d020      	beq.n	800cc3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbfc:	4b36      	ldr	r3, [pc, #216]	@ (800ccd8 <HAL_RCC_OscConfig+0x270>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc02:	f7fe f967 	bl	800aed4 <HAL_GetTick>
 800cc06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc08:	e008      	b.n	800cc1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc0a:	f7fe f963 	bl	800aed4 <HAL_GetTick>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d901      	bls.n	800cc1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e1a1      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc1c:	4b2d      	ldr	r3, [pc, #180]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0302 	and.w	r3, r3, #2
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0f0      	beq.n	800cc0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc28:	4b2a      	ldr	r3, [pc, #168]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	4927      	ldr	r1, [pc, #156]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	600b      	str	r3, [r1, #0]
 800cc3c:	e015      	b.n	800cc6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc3e:	4b26      	ldr	r3, [pc, #152]	@ (800ccd8 <HAL_RCC_OscConfig+0x270>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc44:	f7fe f946 	bl	800aed4 <HAL_GetTick>
 800cc48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc4a:	e008      	b.n	800cc5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc4c:	f7fe f942 	bl	800aed4 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d901      	bls.n	800cc5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e180      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc5e:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0302 	and.w	r3, r3, #2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f0      	bne.n	800cc4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 0308 	and.w	r3, r3, #8
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d03a      	beq.n	800ccec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d019      	beq.n	800ccb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc7e:	4b17      	ldr	r3, [pc, #92]	@ (800ccdc <HAL_RCC_OscConfig+0x274>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc84:	f7fe f926 	bl	800aed4 <HAL_GetTick>
 800cc88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc8a:	e008      	b.n	800cc9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc8c:	f7fe f922 	bl	800aed4 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d901      	bls.n	800cc9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e160      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd4 <HAL_RCC_OscConfig+0x26c>)
 800cca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca2:	f003 0302 	and.w	r3, r3, #2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d0f0      	beq.n	800cc8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ccaa:	2001      	movs	r0, #1
 800ccac:	f000 face 	bl	800d24c <RCC_Delay>
 800ccb0:	e01c      	b.n	800ccec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ccb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ccdc <HAL_RCC_OscConfig+0x274>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ccb8:	f7fe f90c 	bl	800aed4 <HAL_GetTick>
 800ccbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ccbe:	e00f      	b.n	800cce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ccc0:	f7fe f908 	bl	800aed4 <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d908      	bls.n	800cce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e146      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
 800ccd2:	bf00      	nop
 800ccd4:	40021000 	.word	0x40021000
 800ccd8:	42420000 	.word	0x42420000
 800ccdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cce0:	4b92      	ldr	r3, [pc, #584]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e9      	bne.n	800ccc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 0304 	and.w	r3, r3, #4
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 80a6 	beq.w	800ce46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccfe:	4b8b      	ldr	r3, [pc, #556]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10d      	bne.n	800cd26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd0a:	4b88      	ldr	r3, [pc, #544]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	4a87      	ldr	r2, [pc, #540]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd14:	61d3      	str	r3, [r2, #28]
 800cd16:	4b85      	ldr	r3, [pc, #532]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd1e:	60bb      	str	r3, [r7, #8]
 800cd20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd22:	2301      	movs	r3, #1
 800cd24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd26:	4b82      	ldr	r3, [pc, #520]	@ (800cf30 <HAL_RCC_OscConfig+0x4c8>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d118      	bne.n	800cd64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd32:	4b7f      	ldr	r3, [pc, #508]	@ (800cf30 <HAL_RCC_OscConfig+0x4c8>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a7e      	ldr	r2, [pc, #504]	@ (800cf30 <HAL_RCC_OscConfig+0x4c8>)
 800cd38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd3e:	f7fe f8c9 	bl	800aed4 <HAL_GetTick>
 800cd42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd44:	e008      	b.n	800cd58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd46:	f7fe f8c5 	bl	800aed4 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	2b64      	cmp	r3, #100	@ 0x64
 800cd52:	d901      	bls.n	800cd58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e103      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd58:	4b75      	ldr	r3, [pc, #468]	@ (800cf30 <HAL_RCC_OscConfig+0x4c8>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d0f0      	beq.n	800cd46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d106      	bne.n	800cd7a <HAL_RCC_OscConfig+0x312>
 800cd6c:	4b6f      	ldr	r3, [pc, #444]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd6e:	6a1b      	ldr	r3, [r3, #32]
 800cd70:	4a6e      	ldr	r2, [pc, #440]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	6213      	str	r3, [r2, #32]
 800cd78:	e02d      	b.n	800cdd6 <HAL_RCC_OscConfig+0x36e>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10c      	bne.n	800cd9c <HAL_RCC_OscConfig+0x334>
 800cd82:	4b6a      	ldr	r3, [pc, #424]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	4a69      	ldr	r2, [pc, #420]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	6213      	str	r3, [r2, #32]
 800cd8e:	4b67      	ldr	r3, [pc, #412]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	4a66      	ldr	r2, [pc, #408]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cd94:	f023 0304 	bic.w	r3, r3, #4
 800cd98:	6213      	str	r3, [r2, #32]
 800cd9a:	e01c      	b.n	800cdd6 <HAL_RCC_OscConfig+0x36e>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2b05      	cmp	r3, #5
 800cda2:	d10c      	bne.n	800cdbe <HAL_RCC_OscConfig+0x356>
 800cda4:	4b61      	ldr	r3, [pc, #388]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	4a60      	ldr	r2, [pc, #384]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdaa:	f043 0304 	orr.w	r3, r3, #4
 800cdae:	6213      	str	r3, [r2, #32]
 800cdb0:	4b5e      	ldr	r3, [pc, #376]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	4a5d      	ldr	r2, [pc, #372]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
 800cdba:	6213      	str	r3, [r2, #32]
 800cdbc:	e00b      	b.n	800cdd6 <HAL_RCC_OscConfig+0x36e>
 800cdbe:	4b5b      	ldr	r3, [pc, #364]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	4a5a      	ldr	r2, [pc, #360]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdc4:	f023 0301 	bic.w	r3, r3, #1
 800cdc8:	6213      	str	r3, [r2, #32]
 800cdca:	4b58      	ldr	r3, [pc, #352]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	4a57      	ldr	r2, [pc, #348]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdd0:	f023 0304 	bic.w	r3, r3, #4
 800cdd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d015      	beq.n	800ce0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdde:	f7fe f879 	bl	800aed4 <HAL_GetTick>
 800cde2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cde4:	e00a      	b.n	800cdfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cde6:	f7fe f875 	bl	800aed4 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d901      	bls.n	800cdfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e0b1      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdfc:	4b4b      	ldr	r3, [pc, #300]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d0ee      	beq.n	800cde6 <HAL_RCC_OscConfig+0x37e>
 800ce08:	e014      	b.n	800ce34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce0a:	f7fe f863 	bl	800aed4 <HAL_GetTick>
 800ce0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce10:	e00a      	b.n	800ce28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce12:	f7fe f85f 	bl	800aed4 <HAL_GetTick>
 800ce16:	4602      	mov	r2, r0
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d901      	bls.n	800ce28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ce24:	2303      	movs	r3, #3
 800ce26:	e09b      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce28:	4b40      	ldr	r3, [pc, #256]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	f003 0302 	and.w	r3, r3, #2
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1ee      	bne.n	800ce12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d105      	bne.n	800ce46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce3a:	4b3c      	ldr	r3, [pc, #240]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	4a3b      	ldr	r2, [pc, #236]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 8087 	beq.w	800cf5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ce50:	4b36      	ldr	r3, [pc, #216]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f003 030c 	and.w	r3, r3, #12
 800ce58:	2b08      	cmp	r3, #8
 800ce5a:	d061      	beq.n	800cf20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d146      	bne.n	800cef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce64:	4b33      	ldr	r3, [pc, #204]	@ (800cf34 <HAL_RCC_OscConfig+0x4cc>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce6a:	f7fe f833 	bl	800aed4 <HAL_GetTick>
 800ce6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce70:	e008      	b.n	800ce84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce72:	f7fe f82f 	bl	800aed4 <HAL_GetTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d901      	bls.n	800ce84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	e06d      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce84:	4b29      	ldr	r3, [pc, #164]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1f0      	bne.n	800ce72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a1b      	ldr	r3, [r3, #32]
 800ce94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce98:	d108      	bne.n	800ceac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ce9a:	4b24      	ldr	r3, [pc, #144]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	4921      	ldr	r1, [pc, #132]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ceac:	4b1f      	ldr	r3, [pc, #124]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a19      	ldr	r1, [r3, #32]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebc:	430b      	orrs	r3, r1
 800cebe:	491b      	ldr	r1, [pc, #108]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cec4:	4b1b      	ldr	r3, [pc, #108]	@ (800cf34 <HAL_RCC_OscConfig+0x4cc>)
 800cec6:	2201      	movs	r2, #1
 800cec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ceca:	f7fe f803 	bl	800aed4 <HAL_GetTick>
 800cece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ced0:	e008      	b.n	800cee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ced2:	f7fd ffff 	bl	800aed4 <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d901      	bls.n	800cee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e03d      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cee4:	4b11      	ldr	r3, [pc, #68]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0f0      	beq.n	800ced2 <HAL_RCC_OscConfig+0x46a>
 800cef0:	e035      	b.n	800cf5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cef2:	4b10      	ldr	r3, [pc, #64]	@ (800cf34 <HAL_RCC_OscConfig+0x4cc>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cef8:	f7fd ffec 	bl	800aed4 <HAL_GetTick>
 800cefc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cefe:	e008      	b.n	800cf12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf00:	f7fd ffe8 	bl	800aed4 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d901      	bls.n	800cf12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e026      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cf12:	4b06      	ldr	r3, [pc, #24]	@ (800cf2c <HAL_RCC_OscConfig+0x4c4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1f0      	bne.n	800cf00 <HAL_RCC_OscConfig+0x498>
 800cf1e:	e01e      	b.n	800cf5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d107      	bne.n	800cf38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e019      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
 800cf2c:	40021000 	.word	0x40021000
 800cf30:	40007000 	.word	0x40007000
 800cf34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cf38:	4b0b      	ldr	r3, [pc, #44]	@ (800cf68 <HAL_RCC_OscConfig+0x500>)
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d106      	bne.n	800cf5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d001      	beq.n	800cf5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	40021000 	.word	0x40021000

0800cf6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e0d0      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf80:	4b6a      	ldr	r3, [pc, #424]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 0307 	and.w	r3, r3, #7
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d910      	bls.n	800cfb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf8e:	4b67      	ldr	r3, [pc, #412]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f023 0207 	bic.w	r2, r3, #7
 800cf96:	4965      	ldr	r1, [pc, #404]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf9e:	4b63      	ldr	r3, [pc, #396]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d001      	beq.n	800cfb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e0b8      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 0302 	and.w	r3, r3, #2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d020      	beq.n	800cffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d005      	beq.n	800cfd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cfc8:	4b59      	ldr	r3, [pc, #356]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	4a58      	ldr	r2, [pc, #352]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cfce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cfd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 0308 	and.w	r3, r3, #8
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d005      	beq.n	800cfec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cfe0:	4b53      	ldr	r3, [pc, #332]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	4a52      	ldr	r2, [pc, #328]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cfe6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800cfea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cfec:	4b50      	ldr	r3, [pc, #320]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	494d      	ldr	r1, [pc, #308]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800cffa:	4313      	orrs	r3, r2
 800cffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	2b00      	cmp	r3, #0
 800d008:	d040      	beq.n	800d08c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d107      	bne.n	800d022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d012:	4b47      	ldr	r3, [pc, #284]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d115      	bne.n	800d04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e07f      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	2b02      	cmp	r3, #2
 800d028:	d107      	bne.n	800d03a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d02a:	4b41      	ldr	r3, [pc, #260]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d109      	bne.n	800d04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d036:	2301      	movs	r3, #1
 800d038:	e073      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d03a:	4b3d      	ldr	r3, [pc, #244]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e06b      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d04a:	4b39      	ldr	r3, [pc, #228]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	f023 0203 	bic.w	r2, r3, #3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	4936      	ldr	r1, [pc, #216]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d05c:	f7fd ff3a 	bl	800aed4 <HAL_GetTick>
 800d060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d062:	e00a      	b.n	800d07a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d064:	f7fd ff36 	bl	800aed4 <HAL_GetTick>
 800d068:	4602      	mov	r2, r0
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d072:	4293      	cmp	r3, r2
 800d074:	d901      	bls.n	800d07a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d076:	2303      	movs	r3, #3
 800d078:	e053      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d07a:	4b2d      	ldr	r3, [pc, #180]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	f003 020c 	and.w	r2, r3, #12
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	429a      	cmp	r2, r3
 800d08a:	d1eb      	bne.n	800d064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d08c:	4b27      	ldr	r3, [pc, #156]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 0307 	and.w	r3, r3, #7
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	429a      	cmp	r2, r3
 800d098:	d210      	bcs.n	800d0bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d09a:	4b24      	ldr	r3, [pc, #144]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f023 0207 	bic.w	r2, r3, #7
 800d0a2:	4922      	ldr	r1, [pc, #136]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0aa:	4b20      	ldr	r3, [pc, #128]	@ (800d12c <HAL_RCC_ClockConfig+0x1c0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d001      	beq.n	800d0bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e032      	b.n	800d122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0304 	and.w	r3, r3, #4
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d008      	beq.n	800d0da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d0c8:	4b19      	ldr	r3, [pc, #100]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	4916      	ldr	r1, [pc, #88]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f003 0308 	and.w	r3, r3, #8
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d009      	beq.n	800d0fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d0e6:	4b12      	ldr	r3, [pc, #72]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	490e      	ldr	r1, [pc, #56]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d0fa:	f000 f821 	bl	800d140 <HAL_RCC_GetSysClockFreq>
 800d0fe:	4602      	mov	r2, r0
 800d100:	4b0b      	ldr	r3, [pc, #44]	@ (800d130 <HAL_RCC_ClockConfig+0x1c4>)
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	091b      	lsrs	r3, r3, #4
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	490a      	ldr	r1, [pc, #40]	@ (800d134 <HAL_RCC_ClockConfig+0x1c8>)
 800d10c:	5ccb      	ldrb	r3, [r1, r3]
 800d10e:	fa22 f303 	lsr.w	r3, r2, r3
 800d112:	4a09      	ldr	r2, [pc, #36]	@ (800d138 <HAL_RCC_ClockConfig+0x1cc>)
 800d114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d116:	4b09      	ldr	r3, [pc, #36]	@ (800d13c <HAL_RCC_ClockConfig+0x1d0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fd fe98 	bl	800ae50 <HAL_InitTick>

  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	40022000 	.word	0x40022000
 800d130:	40021000 	.word	0x40021000
 800d134:	080125d0 	.word	0x080125d0
 800d138:	20000054 	.word	0x20000054
 800d13c:	20000058 	.word	0x20000058

0800d140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d146:	2300      	movs	r3, #0
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	2300      	movs	r3, #0
 800d14c:	60bb      	str	r3, [r7, #8]
 800d14e:	2300      	movs	r3, #0
 800d150:	617b      	str	r3, [r7, #20]
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d15a:	4b1e      	ldr	r3, [pc, #120]	@ (800d1d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f003 030c 	and.w	r3, r3, #12
 800d166:	2b04      	cmp	r3, #4
 800d168:	d002      	beq.n	800d170 <HAL_RCC_GetSysClockFreq+0x30>
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d003      	beq.n	800d176 <HAL_RCC_GetSysClockFreq+0x36>
 800d16e:	e027      	b.n	800d1c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d170:	4b19      	ldr	r3, [pc, #100]	@ (800d1d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d172:	613b      	str	r3, [r7, #16]
      break;
 800d174:	e027      	b.n	800d1c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	0c9b      	lsrs	r3, r3, #18
 800d17a:	f003 030f 	and.w	r3, r3, #15
 800d17e:	4a17      	ldr	r2, [pc, #92]	@ (800d1dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800d180:	5cd3      	ldrb	r3, [r2, r3]
 800d182:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d010      	beq.n	800d1b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d18e:	4b11      	ldr	r3, [pc, #68]	@ (800d1d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	0c5b      	lsrs	r3, r3, #17
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	4a11      	ldr	r2, [pc, #68]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800d19a:	5cd3      	ldrb	r3, [r2, r3]
 800d19c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a0d      	ldr	r2, [pc, #52]	@ (800d1d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d1a2:	fb03 f202 	mul.w	r2, r3, r2
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	e004      	b.n	800d1ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d1e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d1b4:	fb02 f303 	mul.w	r3, r2, r3
 800d1b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	613b      	str	r3, [r7, #16]
      break;
 800d1be:	e002      	b.n	800d1c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d1c0:	4b05      	ldr	r3, [pc, #20]	@ (800d1d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d1c2:	613b      	str	r3, [r7, #16]
      break;
 800d1c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d1c6:	693b      	ldr	r3, [r7, #16]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bc80      	pop	{r7}
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	40021000 	.word	0x40021000
 800d1d8:	007a1200 	.word	0x007a1200
 800d1dc:	080125e8 	.word	0x080125e8
 800d1e0:	080125f8 	.word	0x080125f8
 800d1e4:	003d0900 	.word	0x003d0900

0800d1e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1ec:	4b02      	ldr	r3, [pc, #8]	@ (800d1f8 <HAL_RCC_GetHCLKFreq+0x10>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bc80      	pop	{r7}
 800d1f6:	4770      	bx	lr
 800d1f8:	20000054 	.word	0x20000054

0800d1fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d200:	f7ff fff2 	bl	800d1e8 <HAL_RCC_GetHCLKFreq>
 800d204:	4602      	mov	r2, r0
 800d206:	4b05      	ldr	r3, [pc, #20]	@ (800d21c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	0a1b      	lsrs	r3, r3, #8
 800d20c:	f003 0307 	and.w	r3, r3, #7
 800d210:	4903      	ldr	r1, [pc, #12]	@ (800d220 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d212:	5ccb      	ldrb	r3, [r1, r3]
 800d214:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d218:	4618      	mov	r0, r3
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	40021000 	.word	0x40021000
 800d220:	080125e0 	.word	0x080125e0

0800d224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d228:	f7ff ffde 	bl	800d1e8 <HAL_RCC_GetHCLKFreq>
 800d22c:	4602      	mov	r2, r0
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	0adb      	lsrs	r3, r3, #11
 800d234:	f003 0307 	and.w	r3, r3, #7
 800d238:	4903      	ldr	r1, [pc, #12]	@ (800d248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d23a:	5ccb      	ldrb	r3, [r1, r3]
 800d23c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d240:	4618      	mov	r0, r3
 800d242:	bd80      	pop	{r7, pc}
 800d244:	40021000 	.word	0x40021000
 800d248:	080125e0 	.word	0x080125e0

0800d24c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d254:	4b0a      	ldr	r3, [pc, #40]	@ (800d280 <RCC_Delay+0x34>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a0a      	ldr	r2, [pc, #40]	@ (800d284 <RCC_Delay+0x38>)
 800d25a:	fba2 2303 	umull	r2, r3, r2, r3
 800d25e:	0a5b      	lsrs	r3, r3, #9
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	fb02 f303 	mul.w	r3, r2, r3
 800d266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d268:	bf00      	nop
  }
  while (Delay --);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	1e5a      	subs	r2, r3, #1
 800d26e:	60fa      	str	r2, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1f9      	bne.n	800d268 <RCC_Delay+0x1c>
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bc80      	pop	{r7}
 800d27e:	4770      	bx	lr
 800d280:	20000054 	.word	0x20000054
 800d284:	10624dd3 	.word	0x10624dd3

0800d288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e041      	b.n	800d31e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d106      	bne.n	800d2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7fd fb8e 	bl	800a9d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	f000 fcea 	bl	800dca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e041      	b.n	800d3bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	2b00      	cmp	r3, #0
 800d342:	d106      	bne.n	800d352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f839 	bl	800d3c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2202      	movs	r2, #2
 800d356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3304      	adds	r3, #4
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f000 fc9b 	bl	800dca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2201      	movs	r2, #1
 800d36e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc80      	pop	{r7}
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d109      	bne.n	800d3fc <HAL_TIM_PWM_Start+0x24>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	e022      	b.n	800d442 <HAL_TIM_PWM_Start+0x6a>
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	d109      	bne.n	800d416 <HAL_TIM_PWM_Start+0x3e>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	bf14      	ite	ne
 800d40e:	2301      	movne	r3, #1
 800d410:	2300      	moveq	r3, #0
 800d412:	b2db      	uxtb	r3, r3
 800d414:	e015      	b.n	800d442 <HAL_TIM_PWM_Start+0x6a>
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d109      	bne.n	800d430 <HAL_TIM_PWM_Start+0x58>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b01      	cmp	r3, #1
 800d426:	bf14      	ite	ne
 800d428:	2301      	movne	r3, #1
 800d42a:	2300      	moveq	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	e008      	b.n	800d442 <HAL_TIM_PWM_Start+0x6a>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b01      	cmp	r3, #1
 800d43a:	bf14      	ite	ne
 800d43c:	2301      	movne	r3, #1
 800d43e:	2300      	moveq	r3, #0
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e072      	b.n	800d530 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <HAL_TIM_PWM_Start+0x82>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d458:	e013      	b.n	800d482 <HAL_TIM_PWM_Start+0xaa>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b04      	cmp	r3, #4
 800d45e:	d104      	bne.n	800d46a <HAL_TIM_PWM_Start+0x92>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d468:	e00b      	b.n	800d482 <HAL_TIM_PWM_Start+0xaa>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d104      	bne.n	800d47a <HAL_TIM_PWM_Start+0xa2>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2202      	movs	r2, #2
 800d474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d478:	e003      	b.n	800d482 <HAL_TIM_PWM_Start+0xaa>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2202      	movs	r2, #2
 800d47e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2201      	movs	r2, #1
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 ffdd 	bl	800e44a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a28      	ldr	r2, [pc, #160]	@ (800d538 <HAL_TIM_PWM_Start+0x160>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d004      	beq.n	800d4a4 <HAL_TIM_PWM_Start+0xcc>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a27      	ldr	r2, [pc, #156]	@ (800d53c <HAL_TIM_PWM_Start+0x164>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d101      	bne.n	800d4a8 <HAL_TIM_PWM_Start+0xd0>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e000      	b.n	800d4aa <HAL_TIM_PWM_Start+0xd2>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d4bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a1d      	ldr	r2, [pc, #116]	@ (800d538 <HAL_TIM_PWM_Start+0x160>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d018      	beq.n	800d4fa <HAL_TIM_PWM_Start+0x122>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d53c <HAL_TIM_PWM_Start+0x164>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d013      	beq.n	800d4fa <HAL_TIM_PWM_Start+0x122>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4da:	d00e      	beq.n	800d4fa <HAL_TIM_PWM_Start+0x122>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a17      	ldr	r2, [pc, #92]	@ (800d540 <HAL_TIM_PWM_Start+0x168>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d009      	beq.n	800d4fa <HAL_TIM_PWM_Start+0x122>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a16      	ldr	r2, [pc, #88]	@ (800d544 <HAL_TIM_PWM_Start+0x16c>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d004      	beq.n	800d4fa <HAL_TIM_PWM_Start+0x122>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a14      	ldr	r2, [pc, #80]	@ (800d548 <HAL_TIM_PWM_Start+0x170>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d111      	bne.n	800d51e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f003 0307 	and.w	r3, r3, #7
 800d504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b06      	cmp	r3, #6
 800d50a:	d010      	beq.n	800d52e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0201 	orr.w	r2, r2, #1
 800d51a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d51c:	e007      	b.n	800d52e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f042 0201 	orr.w	r2, r2, #1
 800d52c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	40012c00 	.word	0x40012c00
 800d53c:	40013400 	.word	0x40013400
 800d540:	40000400 	.word	0x40000400
 800d544:	40000800 	.word	0x40000800
 800d548:	40000c00 	.word	0x40000c00

0800d54c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e041      	b.n	800d5e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f839 	bl	800d5ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f000 fb88 	bl	800dca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d5f2:	bf00      	nop
 800d5f4:	370c      	adds	r7, #12
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bc80      	pop	{r7}
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	f003 0302 	and.w	r3, r3, #2
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d122      	bne.n	800d658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	f003 0302 	and.w	r3, r3, #2
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d11b      	bne.n	800d658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f06f 0202 	mvn.w	r2, #2
 800d628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	f003 0303 	and.w	r3, r3, #3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fb f8a8 	bl	8008794 <HAL_TIM_IC_CaptureCallback>
 800d644:	e005      	b.n	800d652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fb0e 	bl	800dc68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 fb14 	bl	800dc7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	f003 0304 	and.w	r3, r3, #4
 800d662:	2b04      	cmp	r3, #4
 800d664:	d122      	bne.n	800d6ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b04      	cmp	r3, #4
 800d672:	d11b      	bne.n	800d6ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f06f 0204 	mvn.w	r2, #4
 800d67c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2202      	movs	r2, #2
 800d682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7fb f87e 	bl	8008794 <HAL_TIM_IC_CaptureCallback>
 800d698:	e005      	b.n	800d6a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fae4 	bl	800dc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 faea 	bl	800dc7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	f003 0308 	and.w	r3, r3, #8
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d122      	bne.n	800d700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	f003 0308 	and.w	r3, r3, #8
 800d6c4:	2b08      	cmp	r3, #8
 800d6c6:	d11b      	bne.n	800d700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f06f 0208 	mvn.w	r2, #8
 800d6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2204      	movs	r2, #4
 800d6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	69db      	ldr	r3, [r3, #28]
 800d6de:	f003 0303 	and.w	r3, r3, #3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d003      	beq.n	800d6ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7fb f854 	bl	8008794 <HAL_TIM_IC_CaptureCallback>
 800d6ec:	e005      	b.n	800d6fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 faba 	bl	800dc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fac0 	bl	800dc7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	f003 0310 	and.w	r3, r3, #16
 800d70a:	2b10      	cmp	r3, #16
 800d70c:	d122      	bne.n	800d754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	f003 0310 	and.w	r3, r3, #16
 800d718:	2b10      	cmp	r3, #16
 800d71a:	d11b      	bne.n	800d754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f06f 0210 	mvn.w	r2, #16
 800d724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2208      	movs	r2, #8
 800d72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7fb f82a 	bl	8008794 <HAL_TIM_IC_CaptureCallback>
 800d740:	e005      	b.n	800d74e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa90 	bl	800dc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fa96 	bl	800dc7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d10e      	bne.n	800d780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d107      	bne.n	800d780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f06f 0201 	mvn.w	r2, #1
 800d778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fa6b 	bl	800dc56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d78a:	2b80      	cmp	r3, #128	@ 0x80
 800d78c:	d10e      	bne.n	800d7ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d798:	2b80      	cmp	r3, #128	@ 0x80
 800d79a:	d107      	bne.n	800d7ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d7a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 ff3a 	bl	800e620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b6:	2b40      	cmp	r3, #64	@ 0x40
 800d7b8:	d10e      	bne.n	800d7d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c4:	2b40      	cmp	r3, #64	@ 0x40
 800d7c6:	d107      	bne.n	800d7d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fa5a 	bl	800dc8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d10e      	bne.n	800d804 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	f003 0320 	and.w	r3, r3, #32
 800d7f0:	2b20      	cmp	r3, #32
 800d7f2:	d107      	bne.n	800d804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f06f 0220 	mvn.w	r2, #32
 800d7fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 ff05 	bl	800e60e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d822:	2b01      	cmp	r3, #1
 800d824:	d101      	bne.n	800d82a <HAL_TIM_IC_ConfigChannel+0x1e>
 800d826:	2302      	movs	r3, #2
 800d828:	e088      	b.n	800d93c <HAL_TIM_IC_ConfigChannel+0x130>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11b      	bne.n	800d870 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d848:	f000 fc50 	bl	800e0ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	699a      	ldr	r2, [r3, #24]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f022 020c 	bic.w	r2, r2, #12
 800d85a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6999      	ldr	r1, [r3, #24]
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	689a      	ldr	r2, [r3, #8]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	619a      	str	r2, [r3, #24]
 800d86e:	e060      	b.n	800d932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b04      	cmp	r3, #4
 800d874:	d11c      	bne.n	800d8b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d886:	f000 fcc5 	bl	800e214 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	699a      	ldr	r2, [r3, #24]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d898:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6999      	ldr	r1, [r3, #24]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	021a      	lsls	r2, r3, #8
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	619a      	str	r2, [r3, #24]
 800d8ae:	e040      	b.n	800d932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b08      	cmp	r3, #8
 800d8b4:	d11b      	bne.n	800d8ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d8c6:	f000 fd10 	bl	800e2ea <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f022 020c 	bic.w	r2, r2, #12
 800d8d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69d9      	ldr	r1, [r3, #28]
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	689a      	ldr	r2, [r3, #8]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	430a      	orrs	r2, r1
 800d8ea:	61da      	str	r2, [r3, #28]
 800d8ec:	e021      	b.n	800d932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b0c      	cmp	r3, #12
 800d8f2:	d11c      	bne.n	800d92e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d904:	f000 fd2c 	bl	800e360 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69da      	ldr	r2, [r3, #28]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d916:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69d9      	ldr	r1, [r3, #28]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	021a      	lsls	r2, r3, #8
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	430a      	orrs	r2, r1
 800d92a:	61da      	str	r2, [r3, #28]
 800d92c:	e001      	b.n	800d932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d101      	bne.n	800d962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d95e:	2302      	movs	r3, #2
 800d960:	e0ae      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b0c      	cmp	r3, #12
 800d96e:	f200 809f 	bhi.w	800dab0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d972:	a201      	add	r2, pc, #4	@ (adr r2, 800d978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d978:	0800d9ad 	.word	0x0800d9ad
 800d97c:	0800dab1 	.word	0x0800dab1
 800d980:	0800dab1 	.word	0x0800dab1
 800d984:	0800dab1 	.word	0x0800dab1
 800d988:	0800d9ed 	.word	0x0800d9ed
 800d98c:	0800dab1 	.word	0x0800dab1
 800d990:	0800dab1 	.word	0x0800dab1
 800d994:	0800dab1 	.word	0x0800dab1
 800d998:	0800da2f 	.word	0x0800da2f
 800d99c:	0800dab1 	.word	0x0800dab1
 800d9a0:	0800dab1 	.word	0x0800dab1
 800d9a4:	0800dab1 	.word	0x0800dab1
 800d9a8:	0800da6f 	.word	0x0800da6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68b9      	ldr	r1, [r7, #8]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 f9ee 	bl	800dd94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	699a      	ldr	r2, [r3, #24]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f042 0208 	orr.w	r2, r2, #8
 800d9c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	699a      	ldr	r2, [r3, #24]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f022 0204 	bic.w	r2, r2, #4
 800d9d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6999      	ldr	r1, [r3, #24]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	691a      	ldr	r2, [r3, #16]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	430a      	orrs	r2, r1
 800d9e8:	619a      	str	r2, [r3, #24]
      break;
 800d9ea:	e064      	b.n	800dab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	68b9      	ldr	r1, [r7, #8]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 fa3e 	bl	800de74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	699a      	ldr	r2, [r3, #24]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	699a      	ldr	r2, [r3, #24]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6999      	ldr	r1, [r3, #24]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	021a      	lsls	r2, r3, #8
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	619a      	str	r2, [r3, #24]
      break;
 800da2c:	e043      	b.n	800dab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fa91 	bl	800df5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	69da      	ldr	r2, [r3, #28]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f042 0208 	orr.w	r2, r2, #8
 800da48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	69da      	ldr	r2, [r3, #28]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f022 0204 	bic.w	r2, r2, #4
 800da58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	69d9      	ldr	r1, [r3, #28]
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	691a      	ldr	r2, [r3, #16]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	61da      	str	r2, [r3, #28]
      break;
 800da6c:	e023      	b.n	800dab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68b9      	ldr	r1, [r7, #8]
 800da74:	4618      	mov	r0, r3
 800da76:	f000 fae5 	bl	800e044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	69da      	ldr	r2, [r3, #28]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	69da      	ldr	r2, [r3, #28]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	69d9      	ldr	r1, [r3, #28]
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	021a      	lsls	r2, r3, #8
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	61da      	str	r2, [r3, #28]
      break;
 800daae:	e002      	b.n	800dab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	75fb      	strb	r3, [r7, #23]
      break;
 800dab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3718      	adds	r7, #24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d101      	bne.n	800dae4 <HAL_TIM_ConfigClockSource+0x1c>
 800dae0:	2302      	movs	r3, #2
 800dae2:	e0b4      	b.n	800dc4e <HAL_TIM_ConfigClockSource+0x186>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2202      	movs	r2, #2
 800daf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800db02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db1c:	d03e      	beq.n	800db9c <HAL_TIM_ConfigClockSource+0xd4>
 800db1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db22:	f200 8087 	bhi.w	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db2a:	f000 8086 	beq.w	800dc3a <HAL_TIM_ConfigClockSource+0x172>
 800db2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db32:	d87f      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db34:	2b70      	cmp	r3, #112	@ 0x70
 800db36:	d01a      	beq.n	800db6e <HAL_TIM_ConfigClockSource+0xa6>
 800db38:	2b70      	cmp	r3, #112	@ 0x70
 800db3a:	d87b      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db3c:	2b60      	cmp	r3, #96	@ 0x60
 800db3e:	d050      	beq.n	800dbe2 <HAL_TIM_ConfigClockSource+0x11a>
 800db40:	2b60      	cmp	r3, #96	@ 0x60
 800db42:	d877      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db44:	2b50      	cmp	r3, #80	@ 0x50
 800db46:	d03c      	beq.n	800dbc2 <HAL_TIM_ConfigClockSource+0xfa>
 800db48:	2b50      	cmp	r3, #80	@ 0x50
 800db4a:	d873      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db4c:	2b40      	cmp	r3, #64	@ 0x40
 800db4e:	d058      	beq.n	800dc02 <HAL_TIM_ConfigClockSource+0x13a>
 800db50:	2b40      	cmp	r3, #64	@ 0x40
 800db52:	d86f      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db54:	2b30      	cmp	r3, #48	@ 0x30
 800db56:	d064      	beq.n	800dc22 <HAL_TIM_ConfigClockSource+0x15a>
 800db58:	2b30      	cmp	r3, #48	@ 0x30
 800db5a:	d86b      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db5c:	2b20      	cmp	r3, #32
 800db5e:	d060      	beq.n	800dc22 <HAL_TIM_ConfigClockSource+0x15a>
 800db60:	2b20      	cmp	r3, #32
 800db62:	d867      	bhi.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
 800db64:	2b00      	cmp	r3, #0
 800db66:	d05c      	beq.n	800dc22 <HAL_TIM_ConfigClockSource+0x15a>
 800db68:	2b10      	cmp	r3, #16
 800db6a:	d05a      	beq.n	800dc22 <HAL_TIM_ConfigClockSource+0x15a>
 800db6c:	e062      	b.n	800dc34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db7e:	f000 fc45 	bl	800e40c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800db90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	609a      	str	r2, [r3, #8]
      break;
 800db9a:	e04f      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbac:	f000 fc2e 	bl	800e40c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dbbe:	609a      	str	r2, [r3, #8]
      break;
 800dbc0:	e03c      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbce:	461a      	mov	r2, r3
 800dbd0:	f000 faf2 	bl	800e1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2150      	movs	r1, #80	@ 0x50
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 fbfc 	bl	800e3d8 <TIM_ITRx_SetConfig>
      break;
 800dbe0:	e02c      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f000 fb4c 	bl	800e28c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2160      	movs	r1, #96	@ 0x60
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f000 fbec 	bl	800e3d8 <TIM_ITRx_SetConfig>
      break;
 800dc00:	e01c      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f000 fad2 	bl	800e1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2140      	movs	r1, #64	@ 0x40
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fbdc 	bl	800e3d8 <TIM_ITRx_SetConfig>
      break;
 800dc20:	e00c      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f000 fbd3 	bl	800e3d8 <TIM_ITRx_SetConfig>
      break;
 800dc32:	e003      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	73fb      	strb	r3, [r7, #15]
      break;
 800dc38:	e000      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dc3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bc80      	pop	{r7}
 800dc66:	4770      	bx	lr

0800dc68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr

0800dc7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bc80      	pop	{r7}
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bc80      	pop	{r7}
 800dc9c:	4770      	bx	lr
	...

0800dca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a33      	ldr	r2, [pc, #204]	@ (800dd80 <TIM_Base_SetConfig+0xe0>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d013      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a32      	ldr	r2, [pc, #200]	@ (800dd84 <TIM_Base_SetConfig+0xe4>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d00f      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcc6:	d00b      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a2f      	ldr	r2, [pc, #188]	@ (800dd88 <TIM_Base_SetConfig+0xe8>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d007      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a2e      	ldr	r2, [pc, #184]	@ (800dd8c <TIM_Base_SetConfig+0xec>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d003      	beq.n	800dce0 <TIM_Base_SetConfig+0x40>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a2d      	ldr	r2, [pc, #180]	@ (800dd90 <TIM_Base_SetConfig+0xf0>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d108      	bne.n	800dcf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a22      	ldr	r2, [pc, #136]	@ (800dd80 <TIM_Base_SetConfig+0xe0>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d013      	beq.n	800dd22 <TIM_Base_SetConfig+0x82>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a21      	ldr	r2, [pc, #132]	@ (800dd84 <TIM_Base_SetConfig+0xe4>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00f      	beq.n	800dd22 <TIM_Base_SetConfig+0x82>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd08:	d00b      	beq.n	800dd22 <TIM_Base_SetConfig+0x82>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a1e      	ldr	r2, [pc, #120]	@ (800dd88 <TIM_Base_SetConfig+0xe8>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d007      	beq.n	800dd22 <TIM_Base_SetConfig+0x82>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a1d      	ldr	r2, [pc, #116]	@ (800dd8c <TIM_Base_SetConfig+0xec>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d003      	beq.n	800dd22 <TIM_Base_SetConfig+0x82>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a1c      	ldr	r2, [pc, #112]	@ (800dd90 <TIM_Base_SetConfig+0xf0>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d108      	bne.n	800dd34 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	689a      	ldr	r2, [r3, #8]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a09      	ldr	r2, [pc, #36]	@ (800dd80 <TIM_Base_SetConfig+0xe0>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d003      	beq.n	800dd68 <TIM_Base_SetConfig+0xc8>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a08      	ldr	r2, [pc, #32]	@ (800dd84 <TIM_Base_SetConfig+0xe4>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d103      	bne.n	800dd70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	691a      	ldr	r2, [r3, #16]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	615a      	str	r2, [r3, #20]
}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bc80      	pop	{r7}
 800dd7e:	4770      	bx	lr
 800dd80:	40012c00 	.word	0x40012c00
 800dd84:	40013400 	.word	0x40013400
 800dd88:	40000400 	.word	0x40000400
 800dd8c:	40000800 	.word	0x40000800
 800dd90:	40000c00 	.word	0x40000c00

0800dd94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b087      	sub	sp, #28
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f023 0201 	bic.w	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f023 0303 	bic.w	r3, r3, #3
 800ddca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	f023 0302 	bic.w	r3, r3, #2
 800dddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a20      	ldr	r2, [pc, #128]	@ (800de6c <TIM_OC1_SetConfig+0xd8>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d003      	beq.n	800ddf8 <TIM_OC1_SetConfig+0x64>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a1f      	ldr	r2, [pc, #124]	@ (800de70 <TIM_OC1_SetConfig+0xdc>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d10c      	bne.n	800de12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	f023 0308 	bic.w	r3, r3, #8
 800ddfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	697a      	ldr	r2, [r7, #20]
 800de06:	4313      	orrs	r3, r2
 800de08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f023 0304 	bic.w	r3, r3, #4
 800de10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a15      	ldr	r2, [pc, #84]	@ (800de6c <TIM_OC1_SetConfig+0xd8>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d003      	beq.n	800de22 <TIM_OC1_SetConfig+0x8e>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a14      	ldr	r2, [pc, #80]	@ (800de70 <TIM_OC1_SetConfig+0xdc>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d111      	bne.n	800de46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	693a      	ldr	r2, [r7, #16]
 800de38:	4313      	orrs	r3, r2
 800de3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	4313      	orrs	r3, r2
 800de44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	621a      	str	r2, [r3, #32]
}
 800de60:	bf00      	nop
 800de62:	371c      	adds	r7, #28
 800de64:	46bd      	mov	sp, r7
 800de66:	bc80      	pop	{r7}
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	40012c00 	.word	0x40012c00
 800de70:	40013400 	.word	0x40013400

0800de74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de74:	b480      	push	{r7}
 800de76:	b087      	sub	sp, #28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a1b      	ldr	r3, [r3, #32]
 800de82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	f023 0210 	bic.w	r2, r3, #16
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800deaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	021b      	lsls	r3, r3, #8
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	f023 0320 	bic.w	r3, r3, #32
 800debe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	697a      	ldr	r2, [r7, #20]
 800dec8:	4313      	orrs	r3, r2
 800deca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a21      	ldr	r2, [pc, #132]	@ (800df54 <TIM_OC2_SetConfig+0xe0>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d003      	beq.n	800dedc <TIM_OC2_SetConfig+0x68>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a20      	ldr	r2, [pc, #128]	@ (800df58 <TIM_OC2_SetConfig+0xe4>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d10d      	bne.n	800def8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	697a      	ldr	r2, [r7, #20]
 800deec:	4313      	orrs	r3, r2
 800deee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800def6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a16      	ldr	r2, [pc, #88]	@ (800df54 <TIM_OC2_SetConfig+0xe0>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d003      	beq.n	800df08 <TIM_OC2_SetConfig+0x94>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a15      	ldr	r2, [pc, #84]	@ (800df58 <TIM_OC2_SetConfig+0xe4>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d113      	bne.n	800df30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	695b      	ldr	r3, [r3, #20]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	4313      	orrs	r3, r2
 800df22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	693a      	ldr	r2, [r7, #16]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	693a      	ldr	r2, [r7, #16]
 800df34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	621a      	str	r2, [r3, #32]
}
 800df4a:	bf00      	nop
 800df4c:	371c      	adds	r7, #28
 800df4e:	46bd      	mov	sp, r7
 800df50:	bc80      	pop	{r7}
 800df52:	4770      	bx	lr
 800df54:	40012c00 	.word	0x40012c00
 800df58:	40013400 	.word	0x40013400

0800df5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b087      	sub	sp, #28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a1b      	ldr	r3, [r3, #32]
 800df70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dfa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	021b      	lsls	r3, r3, #8
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4a21      	ldr	r2, [pc, #132]	@ (800e03c <TIM_OC3_SetConfig+0xe0>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d003      	beq.n	800dfc2 <TIM_OC3_SetConfig+0x66>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4a20      	ldr	r2, [pc, #128]	@ (800e040 <TIM_OC3_SetConfig+0xe4>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d10d      	bne.n	800dfde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dfc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	021b      	lsls	r3, r3, #8
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dfdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a16      	ldr	r2, [pc, #88]	@ (800e03c <TIM_OC3_SetConfig+0xe0>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d003      	beq.n	800dfee <TIM_OC3_SetConfig+0x92>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a15      	ldr	r2, [pc, #84]	@ (800e040 <TIM_OC3_SetConfig+0xe4>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d113      	bne.n	800e016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	011b      	lsls	r3, r3, #4
 800e004:	693a      	ldr	r2, [r7, #16]
 800e006:	4313      	orrs	r3, r2
 800e008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	011b      	lsls	r3, r3, #4
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	4313      	orrs	r3, r2
 800e014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	621a      	str	r2, [r3, #32]
}
 800e030:	bf00      	nop
 800e032:	371c      	adds	r7, #28
 800e034:	46bd      	mov	sp, r7
 800e036:	bc80      	pop	{r7}
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	40012c00 	.word	0x40012c00
 800e040:	40013400 	.word	0x40013400

0800e044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e044:	b480      	push	{r7}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a1b      	ldr	r3, [r3, #32]
 800e058:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	69db      	ldr	r3, [r3, #28]
 800e06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e07a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	021b      	lsls	r3, r3, #8
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	4313      	orrs	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e08e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	031b      	lsls	r3, r3, #12
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	4313      	orrs	r3, r2
 800e09a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a11      	ldr	r2, [pc, #68]	@ (800e0e4 <TIM_OC4_SetConfig+0xa0>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d003      	beq.n	800e0ac <TIM_OC4_SetConfig+0x68>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a10      	ldr	r2, [pc, #64]	@ (800e0e8 <TIM_OC4_SetConfig+0xa4>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d109      	bne.n	800e0c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	695b      	ldr	r3, [r3, #20]
 800e0b8:	019b      	lsls	r3, r3, #6
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	621a      	str	r2, [r3, #32]
}
 800e0da:	bf00      	nop
 800e0dc:	371c      	adds	r7, #28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bc80      	pop	{r7}
 800e0e2:	4770      	bx	lr
 800e0e4:	40012c00 	.word	0x40012c00
 800e0e8:	40013400 	.word	0x40013400

0800e0ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b087      	sub	sp, #28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6a1b      	ldr	r3, [r3, #32]
 800e104:	f023 0201 	bic.w	r2, r3, #1
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4a23      	ldr	r2, [pc, #140]	@ (800e1a4 <TIM_TI1_SetConfig+0xb8>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d013      	beq.n	800e142 <TIM_TI1_SetConfig+0x56>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	4a22      	ldr	r2, [pc, #136]	@ (800e1a8 <TIM_TI1_SetConfig+0xbc>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d00f      	beq.n	800e142 <TIM_TI1_SetConfig+0x56>
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e128:	d00b      	beq.n	800e142 <TIM_TI1_SetConfig+0x56>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4a1f      	ldr	r2, [pc, #124]	@ (800e1ac <TIM_TI1_SetConfig+0xc0>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d007      	beq.n	800e142 <TIM_TI1_SetConfig+0x56>
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	4a1e      	ldr	r2, [pc, #120]	@ (800e1b0 <TIM_TI1_SetConfig+0xc4>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d003      	beq.n	800e142 <TIM_TI1_SetConfig+0x56>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1b4 <TIM_TI1_SetConfig+0xc8>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d101      	bne.n	800e146 <TIM_TI1_SetConfig+0x5a>
 800e142:	2301      	movs	r3, #1
 800e144:	e000      	b.n	800e148 <TIM_TI1_SetConfig+0x5c>
 800e146:	2300      	movs	r3, #0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d008      	beq.n	800e15e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e154:	697a      	ldr	r2, [r7, #20]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4313      	orrs	r3, r2
 800e15a:	617b      	str	r3, [r7, #20]
 800e15c:	e003      	b.n	800e166 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f043 0301 	orr.w	r3, r3, #1
 800e164:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e16c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	011b      	lsls	r3, r3, #4
 800e172:	b2db      	uxtb	r3, r3
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	4313      	orrs	r3, r2
 800e178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f023 030a 	bic.w	r3, r3, #10
 800e180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f003 030a 	and.w	r3, r3, #10
 800e188:	693a      	ldr	r2, [r7, #16]
 800e18a:	4313      	orrs	r3, r2
 800e18c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	621a      	str	r2, [r3, #32]
}
 800e19a:	bf00      	nop
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bc80      	pop	{r7}
 800e1a2:	4770      	bx	lr
 800e1a4:	40012c00 	.word	0x40012c00
 800e1a8:	40013400 	.word	0x40013400
 800e1ac:	40000400 	.word	0x40000400
 800e1b0:	40000800 	.word	0x40000800
 800e1b4:	40000c00 	.word	0x40000c00

0800e1b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6a1b      	ldr	r3, [r3, #32]
 800e1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	f023 0201 	bic.w	r2, r3, #1
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	011b      	lsls	r3, r3, #4
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f023 030a 	bic.w	r3, r3, #10
 800e1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	621a      	str	r2, [r3, #32]
}
 800e20a:	bf00      	nop
 800e20c:	371c      	adds	r7, #28
 800e20e:	46bd      	mov	sp, r7
 800e210:	bc80      	pop	{r7}
 800e212:	4770      	bx	lr

0800e214 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	f023 0210 	bic.w	r2, r3, #16
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	021b      	lsls	r3, r3, #8
 800e246:	693a      	ldr	r2, [r7, #16]
 800e248:	4313      	orrs	r3, r2
 800e24a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	031b      	lsls	r3, r3, #12
 800e258:	b29b      	uxth	r3, r3
 800e25a:	693a      	ldr	r2, [r7, #16]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e266:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	011b      	lsls	r3, r3, #4
 800e26c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	4313      	orrs	r3, r2
 800e274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	621a      	str	r2, [r3, #32]
}
 800e282:	bf00      	nop
 800e284:	371c      	adds	r7, #28
 800e286:	46bd      	mov	sp, r7
 800e288:	bc80      	pop	{r7}
 800e28a:	4770      	bx	lr

0800e28c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	f023 0210 	bic.w	r2, r3, #16
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	031b      	lsls	r3, r3, #12
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	621a      	str	r2, [r3, #32]
}
 800e2e0:	bf00      	nop
 800e2e2:	371c      	adds	r7, #28
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bc80      	pop	{r7}
 800e2e8:	4770      	bx	lr

0800e2ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e2ea:	b480      	push	{r7}
 800e2ec:	b087      	sub	sp, #28
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	60f8      	str	r0, [r7, #12]
 800e2f2:	60b9      	str	r1, [r7, #8]
 800e2f4:	607a      	str	r2, [r7, #4]
 800e2f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6a1b      	ldr	r3, [r3, #32]
 800e2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800e318:	693a      	ldr	r2, [r7, #16]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e326:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	011b      	lsls	r3, r3, #4
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	4313      	orrs	r3, r2
 800e332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e33a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	021b      	lsls	r3, r3, #8
 800e340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e344:	697a      	ldr	r2, [r7, #20]
 800e346:	4313      	orrs	r3, r2
 800e348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	693a      	ldr	r2, [r7, #16]
 800e34e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	621a      	str	r2, [r3, #32]
}
 800e356:	bf00      	nop
 800e358:	371c      	adds	r7, #28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bc80      	pop	{r7}
 800e35e:	4770      	bx	lr

0800e360 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a1b      	ldr	r3, [r3, #32]
 800e372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6a1b      	ldr	r3, [r3, #32]
 800e378:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e38c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4313      	orrs	r3, r2
 800e396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e39e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	031b      	lsls	r3, r3, #12
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	031b      	lsls	r3, r3, #12
 800e3b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	621a      	str	r2, [r3, #32]
}
 800e3ce:	bf00      	nop
 800e3d0:	371c      	adds	r7, #28
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bc80      	pop	{r7}
 800e3d6:	4770      	bx	lr

0800e3d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	f043 0307 	orr.w	r3, r3, #7
 800e3fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	609a      	str	r2, [r3, #8]
}
 800e402:	bf00      	nop
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	bc80      	pop	{r7}
 800e40a:	4770      	bx	lr

0800e40c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	021a      	lsls	r2, r3, #8
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	431a      	orrs	r2, r3
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	4313      	orrs	r3, r2
 800e434:	697a      	ldr	r2, [r7, #20]
 800e436:	4313      	orrs	r3, r2
 800e438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	609a      	str	r2, [r3, #8]
}
 800e440:	bf00      	nop
 800e442:	371c      	adds	r7, #28
 800e444:	46bd      	mov	sp, r7
 800e446:	bc80      	pop	{r7}
 800e448:	4770      	bx	lr

0800e44a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e44a:	b480      	push	{r7}
 800e44c:	b087      	sub	sp, #28
 800e44e:	af00      	add	r7, sp, #0
 800e450:	60f8      	str	r0, [r7, #12]
 800e452:	60b9      	str	r1, [r7, #8]
 800e454:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	f003 031f 	and.w	r3, r3, #31
 800e45c:	2201      	movs	r2, #1
 800e45e:	fa02 f303 	lsl.w	r3, r2, r3
 800e462:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a1a      	ldr	r2, [r3, #32]
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	43db      	mvns	r3, r3
 800e46c:	401a      	ands	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6a1a      	ldr	r2, [r3, #32]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	f003 031f 	and.w	r3, r3, #31
 800e47c:	6879      	ldr	r1, [r7, #4]
 800e47e:	fa01 f303 	lsl.w	r3, r1, r3
 800e482:	431a      	orrs	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	621a      	str	r2, [r3, #32]
}
 800e488:	bf00      	nop
 800e48a:	371c      	adds	r7, #28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bc80      	pop	{r7}
 800e490:	4770      	bx	lr
	...

0800e494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d101      	bne.n	800e4ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	e050      	b.n	800e54e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e558 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d018      	beq.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a19      	ldr	r2, [pc, #100]	@ (800e55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d013      	beq.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e502:	d00e      	beq.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a15      	ldr	r2, [pc, #84]	@ (800e560 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d009      	beq.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a14      	ldr	r2, [pc, #80]	@ (800e564 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d004      	beq.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a12      	ldr	r2, [pc, #72]	@ (800e568 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d10c      	bne.n	800e53c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	4313      	orrs	r3, r2
 800e532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	bc80      	pop	{r7}
 800e556:	4770      	bx	lr
 800e558:	40012c00 	.word	0x40012c00
 800e55c:	40013400 	.word	0x40013400
 800e560:	40000400 	.word	0x40000400
 800e564:	40000800 	.word	0x40000800
 800e568:	40000c00 	.word	0x40000c00

0800e56c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e576:	2300      	movs	r3, #0
 800e578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e580:	2b01      	cmp	r3, #1
 800e582:	d101      	bne.n	800e588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e584:	2302      	movs	r3, #2
 800e586:	e03d      	b.n	800e604 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	bc80      	pop	{r7}
 800e60c:	4770      	bx	lr

0800e60e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e60e:	b480      	push	{r7}
 800e610:	b083      	sub	sp, #12
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e616:	bf00      	nop
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc80      	pop	{r7}
 800e61e:	4770      	bx	lr

0800e620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bc80      	pop	{r7}
 800e630:	4770      	bx	lr

0800e632 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	e042      	b.n	800e6ca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d106      	bne.n	800e65e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7fc fa49 	bl	800aaf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2224      	movs	r2, #36	@ 0x24
 800e662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68da      	ldr	r2, [r3, #12]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e674:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 ff30 	bl	800f4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	691a      	ldr	r2, [r3, #16]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e68a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	695a      	ldr	r2, [r3, #20]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e69a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68da      	ldr	r2, [r3, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e6aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2220      	movs	r2, #32
 800e6b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2220      	movs	r2, #32
 800e6be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08c      	sub	sp, #48	@ 0x30
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b20      	cmp	r3, #32
 800e6ec:	d156      	bne.n	800e79c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <HAL_UART_Transmit_DMA+0x26>
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e04f      	b.n	800e79e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	88fa      	ldrh	r2, [r7, #6]
 800e708:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2221      	movs	r2, #33	@ 0x21
 800e71a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e722:	4a21      	ldr	r2, [pc, #132]	@ (800e7a8 <HAL_UART_Transmit_DMA+0xd4>)
 800e724:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e72a:	4a20      	ldr	r2, [pc, #128]	@ (800e7ac <HAL_UART_Transmit_DMA+0xd8>)
 800e72c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e732:	4a1f      	ldr	r2, [pc, #124]	@ (800e7b0 <HAL_UART_Transmit_DMA+0xdc>)
 800e734:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e73a:	2200      	movs	r2, #0
 800e73c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800e73e:	f107 0308 	add.w	r3, r7, #8
 800e742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74a:	6819      	ldr	r1, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3304      	adds	r3, #4
 800e752:	461a      	mov	r2, r3
 800e754:	88fb      	ldrh	r3, [r7, #6]
 800e756:	f7fc fd4b 	bl	800b1f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e762:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3314      	adds	r3, #20
 800e76a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	e853 3f00 	ldrex	r3, [r3]
 800e772:	617b      	str	r3, [r7, #20]
   return(result);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e77a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3314      	adds	r3, #20
 800e782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e784:	627a      	str	r2, [r7, #36]	@ 0x24
 800e786:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e788:	6a39      	ldr	r1, [r7, #32]
 800e78a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e78c:	e841 2300 	strex	r3, r2, [r1]
 800e790:	61fb      	str	r3, [r7, #28]
   return(result);
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1e5      	bne.n	800e764 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	e000      	b.n	800e79e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800e79c:	2302      	movs	r3, #2
  }
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3730      	adds	r7, #48	@ 0x30
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	0800ed71 	.word	0x0800ed71
 800e7ac:	0800ee0b 	.word	0x0800ee0b
 800e7b0:	0800ef8f 	.word	0x0800ef8f

0800e7b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	4613      	mov	r3, r2
 800e7c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b20      	cmp	r3, #32
 800e7cc:	d112      	bne.n	800e7f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <HAL_UART_Receive_DMA+0x26>
 800e7d4:	88fb      	ldrh	r3, [r7, #6]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d101      	bne.n	800e7de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e00b      	b.n	800e7f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e7e4:	88fb      	ldrh	r3, [r7, #6]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 fc1a 	bl	800f024 <UART_Start_Receive_DMA>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	e000      	b.n	800e7f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e7f4:	2302      	movs	r3, #2
  }
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b0ba      	sub	sp, #232	@ 0xe8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e826:	2300      	movs	r3, #0
 800e828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e82c:	2300      	movs	r3, #0
 800e82e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e836:	f003 030f 	and.w	r3, r3, #15
 800e83a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e83e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10f      	bne.n	800e866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e84a:	f003 0320 	and.w	r3, r3, #32
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d009      	beq.n	800e866 <HAL_UART_IRQHandler+0x66>
 800e852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fd7e 	bl	800f360 <UART_Receive_IT>
      return;
 800e864:	e25b      	b.n	800ed1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 80de 	beq.w	800ea2c <HAL_UART_IRQHandler+0x22c>
 800e870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d106      	bne.n	800e88a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 80d1 	beq.w	800ea2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e88e:	f003 0301 	and.w	r3, r3, #1
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00b      	beq.n	800e8ae <HAL_UART_IRQHandler+0xae>
 800e896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e89a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d005      	beq.n	800e8ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8a6:	f043 0201 	orr.w	r2, r3, #1
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8b2:	f003 0304 	and.w	r3, r3, #4
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00b      	beq.n	800e8d2 <HAL_UART_IRQHandler+0xd2>
 800e8ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d005      	beq.n	800e8d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ca:	f043 0202 	orr.w	r2, r3, #2
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00b      	beq.n	800e8f6 <HAL_UART_IRQHandler+0xf6>
 800e8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d005      	beq.n	800e8f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ee:	f043 0204 	orr.w	r2, r3, #4
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8fa:	f003 0308 	and.w	r3, r3, #8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d011      	beq.n	800e926 <HAL_UART_IRQHandler+0x126>
 800e902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e906:	f003 0320 	and.w	r3, r3, #32
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d105      	bne.n	800e91a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d005      	beq.n	800e926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e91e:	f043 0208 	orr.w	r2, r3, #8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f000 81f2 	beq.w	800ed14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e934:	f003 0320 	and.w	r3, r3, #32
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d008      	beq.n	800e94e <HAL_UART_IRQHandler+0x14e>
 800e93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e940:	f003 0320 	and.w	r3, r3, #32
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fd09 	bl	800f360 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bf14      	ite	ne
 800e95c:	2301      	movne	r3, #1
 800e95e:	2300      	moveq	r3, #0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e96a:	f003 0308 	and.w	r3, r3, #8
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d103      	bne.n	800e97a <HAL_UART_IRQHandler+0x17a>
 800e972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e976:	2b00      	cmp	r3, #0
 800e978:	d04f      	beq.n	800ea1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 fc13 	bl	800f1a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d041      	beq.n	800ea12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3314      	adds	r3, #20
 800e994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e99c:	e853 3f00 	ldrex	r3, [r3]
 800e9a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e9a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e9a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3314      	adds	r3, #20
 800e9b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e9ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e9be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e9c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e9ca:	e841 2300 	strex	r3, r2, [r1]
 800e9ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e9d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1d9      	bne.n	800e98e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d013      	beq.n	800ea0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9e6:	4a7e      	ldr	r2, [pc, #504]	@ (800ebe0 <HAL_UART_IRQHandler+0x3e0>)
 800e9e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fc fc9a 	bl	800b328 <HAL_DMA_Abort_IT>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d016      	beq.n	800ea28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea08:	e00e      	b.n	800ea28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f99c 	bl	800ed48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea10:	e00a      	b.n	800ea28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f998 	bl	800ed48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea18:	e006      	b.n	800ea28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f994 	bl	800ed48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ea26:	e175      	b.n	800ed14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea28:	bf00      	nop
    return;
 800ea2a:	e173      	b.n	800ed14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	f040 814f 	bne.w	800ecd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ea36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea3a:	f003 0310 	and.w	r3, r3, #16
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 8148 	beq.w	800ecd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ea44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea48:	f003 0310 	and.w	r3, r3, #16
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 8141 	beq.w	800ecd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ea52:	2300      	movs	r3, #0
 800ea54:	60bb      	str	r3, [r7, #8]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	60bb      	str	r3, [r7, #8]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	60bb      	str	r3, [r7, #8]
 800ea66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	695b      	ldr	r3, [r3, #20]
 800ea6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 80b6 	beq.w	800ebe4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ea84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 8145 	beq.w	800ed18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea96:	429a      	cmp	r2, r3
 800ea98:	f080 813e 	bcs.w	800ed18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eaa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	2b20      	cmp	r3, #32
 800eaac:	f000 8088 	beq.w	800ebc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	330c      	adds	r3, #12
 800eab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eabe:	e853 3f00 	ldrex	r3, [r3]
 800eac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eaca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eace:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	330c      	adds	r3, #12
 800ead8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800eadc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800eae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eae8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eaec:	e841 2300 	strex	r3, r2, [r1]
 800eaf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800eaf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1d9      	bne.n	800eab0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3314      	adds	r3, #20
 800eb02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb06:	e853 3f00 	ldrex	r3, [r3]
 800eb0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800eb0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb0e:	f023 0301 	bic.w	r3, r3, #1
 800eb12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3314      	adds	r3, #20
 800eb1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eb20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eb24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eb28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eb2c:	e841 2300 	strex	r3, r2, [r1]
 800eb30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eb32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e1      	bne.n	800eafc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	3314      	adds	r3, #20
 800eb3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb42:	e853 3f00 	ldrex	r3, [r3]
 800eb46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eb48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	3314      	adds	r3, #20
 800eb58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eb5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eb5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eb64:	e841 2300 	strex	r3, r2, [r1]
 800eb68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eb6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1e3      	bne.n	800eb38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	330c      	adds	r3, #12
 800eb84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb88:	e853 3f00 	ldrex	r3, [r3]
 800eb8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eb8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb90:	f023 0310 	bic.w	r3, r3, #16
 800eb94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	330c      	adds	r3, #12
 800eb9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800eba2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800eba4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebaa:	e841 2300 	strex	r3, r2, [r1]
 800ebae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ebb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e3      	bne.n	800eb7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fc fb78 	bl	800b2b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 f8bf 	bl	800ed5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ebdc:	e09c      	b.n	800ed18 <HAL_UART_IRQHandler+0x518>
 800ebde:	bf00      	nop
 800ebe0:	0800f26b 	.word	0x0800f26b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f000 808e 	beq.w	800ed1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ec00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 8089 	beq.w	800ed1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	330c      	adds	r3, #12
 800ec10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec14:	e853 3f00 	ldrex	r3, [r3]
 800ec18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	330c      	adds	r3, #12
 800ec2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ec2e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ec30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec36:	e841 2300 	strex	r3, r2, [r1]
 800ec3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1e3      	bne.n	800ec0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3314      	adds	r3, #20
 800ec48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4c:	e853 3f00 	ldrex	r3, [r3]
 800ec50:	623b      	str	r3, [r7, #32]
   return(result);
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	f023 0301 	bic.w	r3, r3, #1
 800ec58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3314      	adds	r3, #20
 800ec62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ec66:	633a      	str	r2, [r7, #48]	@ 0x30
 800ec68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec6e:	e841 2300 	strex	r3, r2, [r1]
 800ec72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1e3      	bne.n	800ec42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2220      	movs	r2, #32
 800ec7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	330c      	adds	r3, #12
 800ec8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	e853 3f00 	ldrex	r3, [r3]
 800ec96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f023 0310 	bic.w	r3, r3, #16
 800ec9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	330c      	adds	r3, #12
 800eca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ecac:	61fa      	str	r2, [r7, #28]
 800ecae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb0:	69b9      	ldr	r1, [r7, #24]
 800ecb2:	69fa      	ldr	r2, [r7, #28]
 800ecb4:	e841 2300 	strex	r3, r2, [r1]
 800ecb8:	617b      	str	r3, [r7, #20]
   return(result);
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1e3      	bne.n	800ec88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ecc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 f844 	bl	800ed5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ecd2:	e023      	b.n	800ed1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ecd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d009      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x4f4>
 800ece0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ece4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 fad0 	bl	800f292 <UART_Transmit_IT>
    return;
 800ecf2:	e014      	b.n	800ed1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ecf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00e      	beq.n	800ed1e <HAL_UART_IRQHandler+0x51e>
 800ed00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d008      	beq.n	800ed1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fb0f 	bl	800f330 <UART_EndTransmit_IT>
    return;
 800ed12:	e004      	b.n	800ed1e <HAL_UART_IRQHandler+0x51e>
    return;
 800ed14:	bf00      	nop
 800ed16:	e002      	b.n	800ed1e <HAL_UART_IRQHandler+0x51e>
      return;
 800ed18:	bf00      	nop
 800ed1a:	e000      	b.n	800ed1e <HAL_UART_IRQHandler+0x51e>
      return;
 800ed1c:	bf00      	nop
  }
}
 800ed1e:	37e8      	adds	r7, #232	@ 0xe8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bc80      	pop	{r7}
 800ed34:	4770      	bx	lr

0800ed36 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ed3e:	bf00      	nop
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bc80      	pop	{r7}
 800ed46:	4770      	bx	lr

0800ed48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ed50:	bf00      	nop
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bc80      	pop	{r7}
 800ed58:	4770      	bx	lr

0800ed5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b083      	sub	sp, #12
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
 800ed62:	460b      	mov	r3, r1
 800ed64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed66:	bf00      	nop
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bc80      	pop	{r7}
 800ed6e:	4770      	bx	lr

0800ed70 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b090      	sub	sp, #64	@ 0x40
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f003 0320 	and.w	r3, r3, #32
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d137      	bne.n	800edfc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ed8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed8e:	2200      	movs	r2, #0
 800ed90:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3314      	adds	r3, #20
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9c:	e853 3f00 	ldrex	r3, [r3]
 800eda0:	623b      	str	r3, [r7, #32]
   return(result);
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eda8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800edaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3314      	adds	r3, #20
 800edb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800edb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edba:	e841 2300 	strex	r3, r2, [r1]
 800edbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800edc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e5      	bne.n	800ed92 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	330c      	adds	r3, #12
 800edcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	e853 3f00 	ldrex	r3, [r3]
 800edd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eddc:	637b      	str	r3, [r7, #52]	@ 0x34
 800edde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	330c      	adds	r3, #12
 800ede4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ede6:	61fa      	str	r2, [r7, #28]
 800ede8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edea:	69b9      	ldr	r1, [r7, #24]
 800edec:	69fa      	ldr	r2, [r7, #28]
 800edee:	e841 2300 	strex	r3, r2, [r1]
 800edf2:	617b      	str	r3, [r7, #20]
   return(result);
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1e5      	bne.n	800edc6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edfa:	e002      	b.n	800ee02 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800edfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800edfe:	f7f9 fcad 	bl	800875c <HAL_UART_TxCpltCallback>
}
 800ee02:	bf00      	nop
 800ee04:	3740      	adds	r7, #64	@ 0x40
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff ff83 	bl	800ed24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee1e:	bf00      	nop
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b09c      	sub	sp, #112	@ 0x70
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee32:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 0320 	and.w	r3, r3, #32
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d172      	bne.n	800ef28 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ee42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee44:	2200      	movs	r2, #0
 800ee46:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	330c      	adds	r3, #12
 800ee4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee52:	e853 3f00 	ldrex	r3, [r3]
 800ee56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ee60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	330c      	adds	r3, #12
 800ee66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ee68:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ee6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee70:	e841 2300 	strex	r3, r2, [r1]
 800ee74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1e5      	bne.n	800ee48 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3314      	adds	r3, #20
 800ee82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee86:	e853 3f00 	ldrex	r3, [r3]
 800ee8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ee8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8e:	f023 0301 	bic.w	r3, r3, #1
 800ee92:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3314      	adds	r3, #20
 800ee9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ee9c:	647a      	str	r2, [r7, #68]	@ 0x44
 800ee9e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eea4:	e841 2300 	strex	r3, r2, [r1]
 800eea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eeaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1e5      	bne.n	800ee7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eeb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3314      	adds	r3, #20
 800eeb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	e853 3f00 	ldrex	r3, [r3]
 800eebe:	623b      	str	r3, [r7, #32]
   return(result);
 800eec0:	6a3b      	ldr	r3, [r7, #32]
 800eec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eec6:	663b      	str	r3, [r7, #96]	@ 0x60
 800eec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3314      	adds	r3, #20
 800eece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eed0:	633a      	str	r2, [r7, #48]	@ 0x30
 800eed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eed8:	e841 2300 	strex	r3, r2, [r1]
 800eedc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1e5      	bne.n	800eeb0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eee6:	2220      	movs	r2, #32
 800eee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eeec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eeee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d119      	bne.n	800ef28 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	330c      	adds	r3, #12
 800eefa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	e853 3f00 	ldrex	r3, [r3]
 800ef02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f023 0310 	bic.w	r3, r3, #16
 800ef0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	330c      	adds	r3, #12
 800ef12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef14:	61fa      	str	r2, [r7, #28]
 800ef16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef18:	69b9      	ldr	r1, [r7, #24]
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	e841 2300 	strex	r3, r2, [r1]
 800ef20:	617b      	str	r3, [r7, #20]
   return(result);
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e5      	bne.n	800eef4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d106      	bne.n	800ef44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ef3e:	f7ff ff0c 	bl	800ed5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef42:	e002      	b.n	800ef4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ef44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ef46:	f7f9 fc17 	bl	8008778 <HAL_UART_RxCpltCallback>
}
 800ef4a:	bf00      	nop
 800ef4c:	3770      	adds	r7, #112	@ 0x70
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2201      	movs	r2, #1
 800ef64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d108      	bne.n	800ef80 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ef72:	085b      	lsrs	r3, r3, #1
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	4619      	mov	r1, r3
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff feee 	bl	800ed5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef7e:	e002      	b.n	800ef86 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7ff fed8 	bl	800ed36 <HAL_UART_RxHalfCpltCallback>
}
 800ef86:	bf00      	nop
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ef96:	2300      	movs	r3, #0
 800ef98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	695b      	ldr	r3, [r3, #20]
 800efa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efaa:	2b00      	cmp	r3, #0
 800efac:	bf14      	ite	ne
 800efae:	2301      	movne	r3, #1
 800efb0:	2300      	moveq	r3, #0
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	2b21      	cmp	r3, #33	@ 0x21
 800efc0:	d108      	bne.n	800efd4 <UART_DMAError+0x46>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d005      	beq.n	800efd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2200      	movs	r2, #0
 800efcc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800efce:	68b8      	ldr	r0, [r7, #8]
 800efd0:	f000 f8c2 	bl	800f158 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	695b      	ldr	r3, [r3, #20]
 800efda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bf14      	ite	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	2300      	moveq	r3, #0
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	2b22      	cmp	r3, #34	@ 0x22
 800eff4:	d108      	bne.n	800f008 <UART_DMAError+0x7a>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d005      	beq.n	800f008 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2200      	movs	r2, #0
 800f000:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800f002:	68b8      	ldr	r0, [r7, #8]
 800f004:	f000 f8cf 	bl	800f1a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f00c:	f043 0210 	orr.w	r2, r3, #16
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f014:	68b8      	ldr	r0, [r7, #8]
 800f016:	f7ff fe97 	bl	800ed48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f01a:	bf00      	nop
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
	...

0800f024 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b098      	sub	sp, #96	@ 0x60
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	88fa      	ldrh	r2, [r7, #6]
 800f03c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2222      	movs	r2, #34	@ 0x22
 800f048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f050:	4a3e      	ldr	r2, [pc, #248]	@ (800f14c <UART_Start_Receive_DMA+0x128>)
 800f052:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f058:	4a3d      	ldr	r2, [pc, #244]	@ (800f150 <UART_Start_Receive_DMA+0x12c>)
 800f05a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f060:	4a3c      	ldr	r2, [pc, #240]	@ (800f154 <UART_Start_Receive_DMA+0x130>)
 800f062:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f068:	2200      	movs	r2, #0
 800f06a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f06c:	f107 0308 	add.w	r3, r7, #8
 800f070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3304      	adds	r3, #4
 800f07c:	4619      	mov	r1, r3
 800f07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	88fb      	ldrh	r3, [r7, #6]
 800f084:	f7fc f8b4 	bl	800b1f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f088:	2300      	movs	r3, #0
 800f08a:	613b      	str	r3, [r7, #16]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	613b      	str	r3, [r7, #16]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	613b      	str	r3, [r7, #16]
 800f09c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d019      	beq.n	800f0da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	330c      	adds	r3, #12
 800f0ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b0:	e853 3f00 	ldrex	r3, [r3]
 800f0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f0bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	330c      	adds	r3, #12
 800f0c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f0cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f0ce:	e841 2300 	strex	r3, r2, [r1]
 800f0d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1e5      	bne.n	800f0a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3314      	adds	r3, #20
 800f0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	e853 3f00 	ldrex	r3, [r3]
 800f0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ec:	f043 0301 	orr.w	r3, r3, #1
 800f0f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3314      	adds	r3, #20
 800f0f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f0fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f0fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f102:	e841 2300 	strex	r3, r2, [r1]
 800f106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1e5      	bne.n	800f0da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	3314      	adds	r3, #20
 800f114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	e853 3f00 	ldrex	r3, [r3]
 800f11c:	617b      	str	r3, [r7, #20]
   return(result);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f124:	653b      	str	r3, [r7, #80]	@ 0x50
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3314      	adds	r3, #20
 800f12c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f12e:	627a      	str	r2, [r7, #36]	@ 0x24
 800f130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f132:	6a39      	ldr	r1, [r7, #32]
 800f134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f136:	e841 2300 	strex	r3, r2, [r1]
 800f13a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e5      	bne.n	800f10e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3760      	adds	r7, #96	@ 0x60
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	0800ee27 	.word	0x0800ee27
 800f150:	0800ef53 	.word	0x0800ef53
 800f154:	0800ef8f 	.word	0x0800ef8f

0800f158 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f158:	b480      	push	{r7}
 800f15a:	b089      	sub	sp, #36	@ 0x24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	330c      	adds	r3, #12
 800f166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	e853 3f00 	ldrex	r3, [r3]
 800f16e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	330c      	adds	r3, #12
 800f17e:	69fa      	ldr	r2, [r7, #28]
 800f180:	61ba      	str	r2, [r7, #24]
 800f182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f184:	6979      	ldr	r1, [r7, #20]
 800f186:	69ba      	ldr	r2, [r7, #24]
 800f188:	e841 2300 	strex	r3, r2, [r1]
 800f18c:	613b      	str	r3, [r7, #16]
   return(result);
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1e5      	bne.n	800f160 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2220      	movs	r2, #32
 800f198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800f19c:	bf00      	nop
 800f19e:	3724      	adds	r7, #36	@ 0x24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bc80      	pop	{r7}
 800f1a4:	4770      	bx	lr

0800f1a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1a6:	b480      	push	{r7}
 800f1a8:	b095      	sub	sp, #84	@ 0x54
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	330c      	adds	r3, #12
 800f1b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b8:	e853 3f00 	ldrex	r3, [r3]
 800f1bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f1c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	330c      	adds	r3, #12
 800f1cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1ce:	643a      	str	r2, [r7, #64]	@ 0x40
 800f1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f1d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1d6:	e841 2300 	strex	r3, r2, [r1]
 800f1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1e5      	bne.n	800f1ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	3314      	adds	r3, #20
 800f1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	e853 3f00 	ldrex	r3, [r3]
 800f1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	f023 0301 	bic.w	r3, r3, #1
 800f1f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	3314      	adds	r3, #20
 800f200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f20a:	e841 2300 	strex	r3, r2, [r1]
 800f20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1e5      	bne.n	800f1e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d119      	bne.n	800f252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	330c      	adds	r3, #12
 800f224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	e853 3f00 	ldrex	r3, [r3]
 800f22c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	f023 0310 	bic.w	r3, r3, #16
 800f234:	647b      	str	r3, [r7, #68]	@ 0x44
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	330c      	adds	r3, #12
 800f23c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f23e:	61ba      	str	r2, [r7, #24]
 800f240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f242:	6979      	ldr	r1, [r7, #20]
 800f244:	69ba      	ldr	r2, [r7, #24]
 800f246:	e841 2300 	strex	r3, r2, [r1]
 800f24a:	613b      	str	r3, [r7, #16]
   return(result);
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1e5      	bne.n	800f21e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2220      	movs	r2, #32
 800f256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800f260:	bf00      	nop
 800f262:	3754      	adds	r7, #84	@ 0x54
 800f264:	46bd      	mov	sp, r7
 800f266:	bc80      	pop	{r7}
 800f268:	4770      	bx	lr

0800f26a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b084      	sub	sp, #16
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2200      	movs	r2, #0
 800f27c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff fd5f 	bl	800ed48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f28a:	bf00      	nop
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f292:	b480      	push	{r7}
 800f294:	b085      	sub	sp, #20
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b21      	cmp	r3, #33	@ 0x21
 800f2a4:	d13e      	bne.n	800f324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2ae:	d114      	bne.n	800f2da <UART_Transmit_IT+0x48>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d110      	bne.n	800f2da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a1b      	ldr	r3, [r3, #32]
 800f2d2:	1c9a      	adds	r2, r3, #2
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	621a      	str	r2, [r3, #32]
 800f2d8:	e008      	b.n	800f2ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	1c59      	adds	r1, r3, #1
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	6211      	str	r1, [r2, #32]
 800f2e4:	781a      	ldrb	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10f      	bne.n	800f320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68da      	ldr	r2, [r3, #12]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f30e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68da      	ldr	r2, [r3, #12]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f31e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	e000      	b.n	800f326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f324:	2302      	movs	r3, #2
  }
}
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bc80      	pop	{r7}
 800f32e:	4770      	bx	lr

0800f330 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68da      	ldr	r2, [r3, #12]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f346:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2220      	movs	r2, #32
 800f34c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7f9 fa03 	bl	800875c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f356:	2300      	movs	r3, #0
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b08c      	sub	sp, #48	@ 0x30
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b22      	cmp	r3, #34	@ 0x22
 800f372:	f040 80ae 	bne.w	800f4d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f37e:	d117      	bne.n	800f3b0 <UART_Receive_IT+0x50>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d113      	bne.n	800f3b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800f388:	2300      	movs	r3, #0
 800f38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f390:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a8:	1c9a      	adds	r2, r3, #2
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	629a      	str	r2, [r3, #40]	@ 0x28
 800f3ae:	e026      	b.n	800f3fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3c2:	d007      	beq.n	800f3d4 <UART_Receive_IT+0x74>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10a      	bne.n	800f3e2 <UART_Receive_IT+0x82>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d106      	bne.n	800f3e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	b2da      	uxtb	r2, r3
 800f3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3de:	701a      	strb	r2, [r3, #0]
 800f3e0:	e008      	b.n	800f3f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f402:	b29b      	uxth	r3, r3
 800f404:	3b01      	subs	r3, #1
 800f406:	b29b      	uxth	r3, r3
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	4619      	mov	r1, r3
 800f40c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d15d      	bne.n	800f4ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68da      	ldr	r2, [r3, #12]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f022 0220 	bic.w	r2, r2, #32
 800f420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68da      	ldr	r2, [r3, #12]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	695a      	ldr	r2, [r3, #20]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f022 0201 	bic.w	r2, r2, #1
 800f440:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2220      	movs	r2, #32
 800f446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f454:	2b01      	cmp	r3, #1
 800f456:	d135      	bne.n	800f4c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	330c      	adds	r3, #12
 800f464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	e853 3f00 	ldrex	r3, [r3]
 800f46c:	613b      	str	r3, [r7, #16]
   return(result);
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	f023 0310 	bic.w	r3, r3, #16
 800f474:	627b      	str	r3, [r7, #36]	@ 0x24
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	330c      	adds	r3, #12
 800f47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f47e:	623a      	str	r2, [r7, #32]
 800f480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f482:	69f9      	ldr	r1, [r7, #28]
 800f484:	6a3a      	ldr	r2, [r7, #32]
 800f486:	e841 2300 	strex	r3, r2, [r1]
 800f48a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e5      	bne.n	800f45e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f003 0310 	and.w	r3, r3, #16
 800f49c:	2b10      	cmp	r3, #16
 800f49e:	d10a      	bne.n	800f4b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff fc4c 	bl	800ed5a <HAL_UARTEx_RxEventCallback>
 800f4c2:	e002      	b.n	800f4ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7f9 f957 	bl	8008778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e002      	b.n	800f4d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	e000      	b.n	800f4d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800f4d2:	2302      	movs	r3, #2
  }
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3730      	adds	r7, #48	@ 0x30
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68da      	ldr	r2, [r3, #12]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	430a      	orrs	r2, r1
 800f4f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689a      	ldr	r2, [r3, #8]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	431a      	orrs	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800f516:	f023 030c 	bic.w	r3, r3, #12
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	6812      	ldr	r2, [r2, #0]
 800f51e:	68b9      	ldr	r1, [r7, #8]
 800f520:	430b      	orrs	r3, r1
 800f522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	699a      	ldr	r2, [r3, #24]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	430a      	orrs	r2, r1
 800f538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a2c      	ldr	r2, [pc, #176]	@ (800f5f0 <UART_SetConfig+0x114>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d103      	bne.n	800f54c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f544:	f7fd fe6e 	bl	800d224 <HAL_RCC_GetPCLK2Freq>
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	e002      	b.n	800f552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800f54c:	f7fd fe56 	bl	800d1fc <HAL_RCC_GetPCLK1Freq>
 800f550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4613      	mov	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4413      	add	r3, r2
 800f55a:	009a      	lsls	r2, r3, #2
 800f55c:	441a      	add	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	fbb2 f3f3 	udiv	r3, r2, r3
 800f568:	4a22      	ldr	r2, [pc, #136]	@ (800f5f4 <UART_SetConfig+0x118>)
 800f56a:	fba2 2303 	umull	r2, r3, r2, r3
 800f56e:	095b      	lsrs	r3, r3, #5
 800f570:	0119      	lsls	r1, r3, #4
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	009a      	lsls	r2, r3, #2
 800f57c:	441a      	add	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	fbb2 f2f3 	udiv	r2, r2, r3
 800f588:	4b1a      	ldr	r3, [pc, #104]	@ (800f5f4 <UART_SetConfig+0x118>)
 800f58a:	fba3 0302 	umull	r0, r3, r3, r2
 800f58e:	095b      	lsrs	r3, r3, #5
 800f590:	2064      	movs	r0, #100	@ 0x64
 800f592:	fb00 f303 	mul.w	r3, r0, r3
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	3332      	adds	r3, #50	@ 0x32
 800f59c:	4a15      	ldr	r2, [pc, #84]	@ (800f5f4 <UART_SetConfig+0x118>)
 800f59e:	fba2 2303 	umull	r2, r3, r2, r3
 800f5a2:	095b      	lsrs	r3, r3, #5
 800f5a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f5a8:	4419      	add	r1, r3
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	009a      	lsls	r2, r3, #2
 800f5b4:	441a      	add	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800f5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f5f4 <UART_SetConfig+0x118>)
 800f5c2:	fba3 0302 	umull	r0, r3, r3, r2
 800f5c6:	095b      	lsrs	r3, r3, #5
 800f5c8:	2064      	movs	r0, #100	@ 0x64
 800f5ca:	fb00 f303 	mul.w	r3, r0, r3
 800f5ce:	1ad3      	subs	r3, r2, r3
 800f5d0:	011b      	lsls	r3, r3, #4
 800f5d2:	3332      	adds	r3, #50	@ 0x32
 800f5d4:	4a07      	ldr	r2, [pc, #28]	@ (800f5f4 <UART_SetConfig+0x118>)
 800f5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f5da:	095b      	lsrs	r3, r3, #5
 800f5dc:	f003 020f 	and.w	r2, r3, #15
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	440a      	add	r2, r1
 800f5e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800f5e8:	bf00      	nop
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	40013800 	.word	0x40013800
 800f5f4:	51eb851f 	.word	0x51eb851f

0800f5f8 <atan2>:
 800f5f8:	f000 bb9a 	b.w	800fd30 <__ieee754_atan2>

0800f5fc <fmod>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	4680      	mov	r8, r0
 800f602:	4689      	mov	r9, r1
 800f604:	4616      	mov	r6, r2
 800f606:	461f      	mov	r7, r3
 800f608:	f000 fc64 	bl	800fed4 <__ieee754_fmod>
 800f60c:	4632      	mov	r2, r6
 800f60e:	4604      	mov	r4, r0
 800f610:	460d      	mov	r5, r1
 800f612:	463b      	mov	r3, r7
 800f614:	4640      	mov	r0, r8
 800f616:	4649      	mov	r1, r9
 800f618:	f7f1 fa64 	bl	8000ae4 <__aeabi_dcmpun>
 800f61c:	b990      	cbnz	r0, 800f644 <fmod+0x48>
 800f61e:	2200      	movs	r2, #0
 800f620:	2300      	movs	r3, #0
 800f622:	4630      	mov	r0, r6
 800f624:	4639      	mov	r1, r7
 800f626:	f7f1 fa2b 	bl	8000a80 <__aeabi_dcmpeq>
 800f62a:	b158      	cbz	r0, 800f644 <fmod+0x48>
 800f62c:	f002 fba6 	bl	8011d7c <__errno>
 800f630:	2321      	movs	r3, #33	@ 0x21
 800f632:	2200      	movs	r2, #0
 800f634:	6003      	str	r3, [r0, #0]
 800f636:	2300      	movs	r3, #0
 800f638:	4610      	mov	r0, r2
 800f63a:	4619      	mov	r1, r3
 800f63c:	f7f1 f8e2 	bl	8000804 <__aeabi_ddiv>
 800f640:	4604      	mov	r4, r0
 800f642:	460d      	mov	r5, r1
 800f644:	4620      	mov	r0, r4
 800f646:	4629      	mov	r1, r5
 800f648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f64c <sqrt>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	4606      	mov	r6, r0
 800f650:	460f      	mov	r7, r1
 800f652:	f000 f91d 	bl	800f890 <__ieee754_sqrt>
 800f656:	4632      	mov	r2, r6
 800f658:	4604      	mov	r4, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	463b      	mov	r3, r7
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f1 fa3f 	bl	8000ae4 <__aeabi_dcmpun>
 800f666:	b990      	cbnz	r0, 800f68e <sqrt+0x42>
 800f668:	2200      	movs	r2, #0
 800f66a:	2300      	movs	r3, #0
 800f66c:	4630      	mov	r0, r6
 800f66e:	4639      	mov	r1, r7
 800f670:	f7f1 fa10 	bl	8000a94 <__aeabi_dcmplt>
 800f674:	b158      	cbz	r0, 800f68e <sqrt+0x42>
 800f676:	f002 fb81 	bl	8011d7c <__errno>
 800f67a:	2321      	movs	r3, #33	@ 0x21
 800f67c:	2200      	movs	r2, #0
 800f67e:	6003      	str	r3, [r0, #0]
 800f680:	2300      	movs	r3, #0
 800f682:	4610      	mov	r0, r2
 800f684:	4619      	mov	r1, r3
 800f686:	f7f1 f8bd 	bl	8000804 <__aeabi_ddiv>
 800f68a:	4604      	mov	r4, r0
 800f68c:	460d      	mov	r5, r1
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f694 <cos>:
 800f694:	b530      	push	{r4, r5, lr}
 800f696:	4d20      	ldr	r5, [pc, #128]	@ (800f718 <cos+0x84>)
 800f698:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800f69c:	42ac      	cmp	r4, r5
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	b087      	sub	sp, #28
 800f6a4:	d806      	bhi.n	800f6b4 <cos+0x20>
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	b007      	add	sp, #28
 800f6ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6b0:	f000 b9c6 	b.w	800fa40 <__kernel_cos>
 800f6b4:	4d19      	ldr	r5, [pc, #100]	@ (800f71c <cos+0x88>)
 800f6b6:	42ac      	cmp	r4, r5
 800f6b8:	d903      	bls.n	800f6c2 <cos+0x2e>
 800f6ba:	f7f0 fdc1 	bl	8000240 <__aeabi_dsub>
 800f6be:	b007      	add	sp, #28
 800f6c0:	bd30      	pop	{r4, r5, pc}
 800f6c2:	aa02      	add	r2, sp, #8
 800f6c4:	f000 fd0c 	bl	80100e0 <__ieee754_rem_pio2>
 800f6c8:	f000 0003 	and.w	r0, r0, #3
 800f6cc:	2801      	cmp	r0, #1
 800f6ce:	d009      	beq.n	800f6e4 <cos+0x50>
 800f6d0:	2802      	cmp	r0, #2
 800f6d2:	d011      	beq.n	800f6f8 <cos+0x64>
 800f6d4:	b9b8      	cbnz	r0, 800f706 <cos+0x72>
 800f6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6de:	f000 f9af 	bl	800fa40 <__kernel_cos>
 800f6e2:	e7ec      	b.n	800f6be <cos+0x2a>
 800f6e4:	9000      	str	r0, [sp, #0]
 800f6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ee:	f000 fa67 	bl	800fbc0 <__kernel_sin>
 800f6f2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800f6f6:	e7e2      	b.n	800f6be <cos+0x2a>
 800f6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f700:	f000 f99e 	bl	800fa40 <__kernel_cos>
 800f704:	e7f5      	b.n	800f6f2 <cos+0x5e>
 800f706:	2301      	movs	r3, #1
 800f708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f70c:	9300      	str	r3, [sp, #0]
 800f70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f712:	f000 fa55 	bl	800fbc0 <__kernel_sin>
 800f716:	e7d2      	b.n	800f6be <cos+0x2a>
 800f718:	3fe921fb 	.word	0x3fe921fb
 800f71c:	7fefffff 	.word	0x7fefffff

0800f720 <sin>:
 800f720:	b530      	push	{r4, r5, lr}
 800f722:	4d20      	ldr	r5, [pc, #128]	@ (800f7a4 <sin+0x84>)
 800f724:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800f728:	42ac      	cmp	r4, r5
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	b087      	sub	sp, #28
 800f730:	d806      	bhi.n	800f740 <sin+0x20>
 800f732:	2300      	movs	r3, #0
 800f734:	2200      	movs	r2, #0
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2300      	movs	r3, #0
 800f73a:	f000 fa41 	bl	800fbc0 <__kernel_sin>
 800f73e:	e004      	b.n	800f74a <sin+0x2a>
 800f740:	4d19      	ldr	r5, [pc, #100]	@ (800f7a8 <sin+0x88>)
 800f742:	42ac      	cmp	r4, r5
 800f744:	d903      	bls.n	800f74e <sin+0x2e>
 800f746:	f7f0 fd7b 	bl	8000240 <__aeabi_dsub>
 800f74a:	b007      	add	sp, #28
 800f74c:	bd30      	pop	{r4, r5, pc}
 800f74e:	aa02      	add	r2, sp, #8
 800f750:	f000 fcc6 	bl	80100e0 <__ieee754_rem_pio2>
 800f754:	f000 0003 	and.w	r0, r0, #3
 800f758:	2801      	cmp	r0, #1
 800f75a:	d009      	beq.n	800f770 <sin+0x50>
 800f75c:	2802      	cmp	r0, #2
 800f75e:	d00e      	beq.n	800f77e <sin+0x5e>
 800f760:	b9c0      	cbnz	r0, 800f794 <sin+0x74>
 800f762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f766:	2301      	movs	r3, #1
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f76e:	e7e4      	b.n	800f73a <sin+0x1a>
 800f770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f778:	f000 f962 	bl	800fa40 <__kernel_cos>
 800f77c:	e7e5      	b.n	800f74a <sin+0x2a>
 800f77e:	2301      	movs	r3, #1
 800f780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f78a:	f000 fa19 	bl	800fbc0 <__kernel_sin>
 800f78e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800f792:	e7da      	b.n	800f74a <sin+0x2a>
 800f794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f79c:	f000 f950 	bl	800fa40 <__kernel_cos>
 800f7a0:	e7f5      	b.n	800f78e <sin+0x6e>
 800f7a2:	bf00      	nop
 800f7a4:	3fe921fb 	.word	0x3fe921fb
 800f7a8:	7fefffff 	.word	0x7fefffff

0800f7ac <cosf>:
 800f7ac:	b507      	push	{r0, r1, r2, lr}
 800f7ae:	4a1a      	ldr	r2, [pc, #104]	@ (800f818 <cosf+0x6c>)
 800f7b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	4601      	mov	r1, r0
 800f7b8:	d805      	bhi.n	800f7c6 <cosf+0x1a>
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	b003      	add	sp, #12
 800f7be:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7c2:	f001 b819 	b.w	80107f8 <__kernel_cosf>
 800f7c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f7ca:	d304      	bcc.n	800f7d6 <cosf+0x2a>
 800f7cc:	f7f1 fa3c 	bl	8000c48 <__aeabi_fsub>
 800f7d0:	b003      	add	sp, #12
 800f7d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7d6:	4669      	mov	r1, sp
 800f7d8:	f001 f904 	bl	80109e4 <__ieee754_rem_pio2f>
 800f7dc:	f000 0203 	and.w	r2, r0, #3
 800f7e0:	2a01      	cmp	r2, #1
 800f7e2:	d007      	beq.n	800f7f4 <cosf+0x48>
 800f7e4:	2a02      	cmp	r2, #2
 800f7e6:	d00c      	beq.n	800f802 <cosf+0x56>
 800f7e8:	b982      	cbnz	r2, 800f80c <cosf+0x60>
 800f7ea:	9901      	ldr	r1, [sp, #4]
 800f7ec:	9800      	ldr	r0, [sp, #0]
 800f7ee:	f001 f803 	bl	80107f8 <__kernel_cosf>
 800f7f2:	e7ed      	b.n	800f7d0 <cosf+0x24>
 800f7f4:	9901      	ldr	r1, [sp, #4]
 800f7f6:	9800      	ldr	r0, [sp, #0]
 800f7f8:	f001 f87e 	bl	80108f8 <__kernel_sinf>
 800f7fc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f800:	e7e6      	b.n	800f7d0 <cosf+0x24>
 800f802:	9901      	ldr	r1, [sp, #4]
 800f804:	9800      	ldr	r0, [sp, #0]
 800f806:	f000 fff7 	bl	80107f8 <__kernel_cosf>
 800f80a:	e7f7      	b.n	800f7fc <cosf+0x50>
 800f80c:	2201      	movs	r2, #1
 800f80e:	9901      	ldr	r1, [sp, #4]
 800f810:	9800      	ldr	r0, [sp, #0]
 800f812:	f001 f871 	bl	80108f8 <__kernel_sinf>
 800f816:	e7db      	b.n	800f7d0 <cosf+0x24>
 800f818:	3f490fd8 	.word	0x3f490fd8

0800f81c <sinf>:
 800f81c:	b507      	push	{r0, r1, r2, lr}
 800f81e:	4a1b      	ldr	r2, [pc, #108]	@ (800f88c <sinf+0x70>)
 800f820:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f824:	4293      	cmp	r3, r2
 800f826:	4601      	mov	r1, r0
 800f828:	d806      	bhi.n	800f838 <sinf+0x1c>
 800f82a:	2200      	movs	r2, #0
 800f82c:	2100      	movs	r1, #0
 800f82e:	b003      	add	sp, #12
 800f830:	f85d eb04 	ldr.w	lr, [sp], #4
 800f834:	f001 b860 	b.w	80108f8 <__kernel_sinf>
 800f838:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f83c:	d304      	bcc.n	800f848 <sinf+0x2c>
 800f83e:	f7f1 fa03 	bl	8000c48 <__aeabi_fsub>
 800f842:	b003      	add	sp, #12
 800f844:	f85d fb04 	ldr.w	pc, [sp], #4
 800f848:	4669      	mov	r1, sp
 800f84a:	f001 f8cb 	bl	80109e4 <__ieee754_rem_pio2f>
 800f84e:	f000 0003 	and.w	r0, r0, #3
 800f852:	2801      	cmp	r0, #1
 800f854:	d008      	beq.n	800f868 <sinf+0x4c>
 800f856:	2802      	cmp	r0, #2
 800f858:	d00b      	beq.n	800f872 <sinf+0x56>
 800f85a:	b990      	cbnz	r0, 800f882 <sinf+0x66>
 800f85c:	2201      	movs	r2, #1
 800f85e:	9901      	ldr	r1, [sp, #4]
 800f860:	9800      	ldr	r0, [sp, #0]
 800f862:	f001 f849 	bl	80108f8 <__kernel_sinf>
 800f866:	e7ec      	b.n	800f842 <sinf+0x26>
 800f868:	9901      	ldr	r1, [sp, #4]
 800f86a:	9800      	ldr	r0, [sp, #0]
 800f86c:	f000 ffc4 	bl	80107f8 <__kernel_cosf>
 800f870:	e7e7      	b.n	800f842 <sinf+0x26>
 800f872:	2201      	movs	r2, #1
 800f874:	9901      	ldr	r1, [sp, #4]
 800f876:	9800      	ldr	r0, [sp, #0]
 800f878:	f001 f83e 	bl	80108f8 <__kernel_sinf>
 800f87c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f880:	e7df      	b.n	800f842 <sinf+0x26>
 800f882:	9901      	ldr	r1, [sp, #4]
 800f884:	9800      	ldr	r0, [sp, #0]
 800f886:	f000 ffb7 	bl	80107f8 <__kernel_cosf>
 800f88a:	e7f7      	b.n	800f87c <sinf+0x60>
 800f88c:	3f490fd8 	.word	0x3f490fd8

0800f890 <__ieee754_sqrt>:
 800f890:	4a67      	ldr	r2, [pc, #412]	@ (800fa30 <__ieee754_sqrt+0x1a0>)
 800f892:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f896:	438a      	bics	r2, r1
 800f898:	4606      	mov	r6, r0
 800f89a:	460f      	mov	r7, r1
 800f89c:	460b      	mov	r3, r1
 800f89e:	4604      	mov	r4, r0
 800f8a0:	d10e      	bne.n	800f8c0 <__ieee754_sqrt+0x30>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	f7f0 fe84 	bl	80005b0 <__aeabi_dmul>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	f7f0 fcc8 	bl	8000244 <__adddf3>
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	460f      	mov	r7, r1
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	2900      	cmp	r1, #0
 800f8c2:	dc0c      	bgt.n	800f8de <__ieee754_sqrt+0x4e>
 800f8c4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800f8c8:	4302      	orrs	r2, r0
 800f8ca:	d0f5      	beq.n	800f8b8 <__ieee754_sqrt+0x28>
 800f8cc:	b189      	cbz	r1, 800f8f2 <__ieee754_sqrt+0x62>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	f7f0 fcb6 	bl	8000240 <__aeabi_dsub>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	f7f0 ff94 	bl	8000804 <__aeabi_ddiv>
 800f8dc:	e7ea      	b.n	800f8b4 <__ieee754_sqrt+0x24>
 800f8de:	150a      	asrs	r2, r1, #20
 800f8e0:	d115      	bne.n	800f90e <__ieee754_sqrt+0x7e>
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	e009      	b.n	800f8fa <__ieee754_sqrt+0x6a>
 800f8e6:	0ae3      	lsrs	r3, r4, #11
 800f8e8:	3a15      	subs	r2, #21
 800f8ea:	0564      	lsls	r4, r4, #21
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d0fa      	beq.n	800f8e6 <__ieee754_sqrt+0x56>
 800f8f0:	e7f7      	b.n	800f8e2 <__ieee754_sqrt+0x52>
 800f8f2:	460a      	mov	r2, r1
 800f8f4:	e7fa      	b.n	800f8ec <__ieee754_sqrt+0x5c>
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	3101      	adds	r1, #1
 800f8fa:	02d8      	lsls	r0, r3, #11
 800f8fc:	d5fb      	bpl.n	800f8f6 <__ieee754_sqrt+0x66>
 800f8fe:	1e48      	subs	r0, r1, #1
 800f900:	1a12      	subs	r2, r2, r0
 800f902:	f1c1 0020 	rsb	r0, r1, #32
 800f906:	fa24 f000 	lsr.w	r0, r4, r0
 800f90a:	4303      	orrs	r3, r0
 800f90c:	408c      	lsls	r4, r1
 800f90e:	2600      	movs	r6, #0
 800f910:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f914:	2116      	movs	r1, #22
 800f916:	07d2      	lsls	r2, r2, #31
 800f918:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800f91c:	4632      	mov	r2, r6
 800f91e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f926:	bf5c      	itt	pl
 800f928:	005b      	lslpl	r3, r3, #1
 800f92a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800f92e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f932:	bf58      	it	pl
 800f934:	0064      	lslpl	r4, r4, #1
 800f936:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f93a:	107f      	asrs	r7, r7, #1
 800f93c:	0064      	lsls	r4, r4, #1
 800f93e:	1815      	adds	r5, r2, r0
 800f940:	429d      	cmp	r5, r3
 800f942:	bfde      	ittt	le
 800f944:	182a      	addle	r2, r5, r0
 800f946:	1b5b      	suble	r3, r3, r5
 800f948:	1836      	addle	r6, r6, r0
 800f94a:	0fe5      	lsrs	r5, r4, #31
 800f94c:	3901      	subs	r1, #1
 800f94e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f952:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f956:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800f95a:	d1f0      	bne.n	800f93e <__ieee754_sqrt+0xae>
 800f95c:	460d      	mov	r5, r1
 800f95e:	f04f 0a20 	mov.w	sl, #32
 800f962:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800f966:	429a      	cmp	r2, r3
 800f968:	eb01 0c00 	add.w	ip, r1, r0
 800f96c:	db02      	blt.n	800f974 <__ieee754_sqrt+0xe4>
 800f96e:	d113      	bne.n	800f998 <__ieee754_sqrt+0x108>
 800f970:	45a4      	cmp	ip, r4
 800f972:	d811      	bhi.n	800f998 <__ieee754_sqrt+0x108>
 800f974:	f1bc 0f00 	cmp.w	ip, #0
 800f978:	eb0c 0100 	add.w	r1, ip, r0
 800f97c:	da42      	bge.n	800fa04 <__ieee754_sqrt+0x174>
 800f97e:	2900      	cmp	r1, #0
 800f980:	db40      	blt.n	800fa04 <__ieee754_sqrt+0x174>
 800f982:	f102 0e01 	add.w	lr, r2, #1
 800f986:	1a9b      	subs	r3, r3, r2
 800f988:	4672      	mov	r2, lr
 800f98a:	45a4      	cmp	ip, r4
 800f98c:	bf88      	it	hi
 800f98e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f992:	eba4 040c 	sub.w	r4, r4, ip
 800f996:	4405      	add	r5, r0
 800f998:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800f99c:	f1ba 0a01 	subs.w	sl, sl, #1
 800f9a0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800f9a4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f9a8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800f9ac:	d1db      	bne.n	800f966 <__ieee754_sqrt+0xd6>
 800f9ae:	431c      	orrs	r4, r3
 800f9b0:	d01a      	beq.n	800f9e8 <__ieee754_sqrt+0x158>
 800f9b2:	4c20      	ldr	r4, [pc, #128]	@ (800fa34 <__ieee754_sqrt+0x1a4>)
 800f9b4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800fa38 <__ieee754_sqrt+0x1a8>
 800f9b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f9bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800f9c0:	f7f0 fc3e 	bl	8000240 <__aeabi_dsub>
 800f9c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4640      	mov	r0, r8
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	f7f1 f86a 	bl	8000aa8 <__aeabi_dcmple>
 800f9d4:	b140      	cbz	r0, 800f9e8 <__ieee754_sqrt+0x158>
 800f9d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f9da:	e9db 2300 	ldrd	r2, r3, [fp]
 800f9de:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f9e2:	d111      	bne.n	800fa08 <__ieee754_sqrt+0x178>
 800f9e4:	4655      	mov	r5, sl
 800f9e6:	3601      	adds	r6, #1
 800f9e8:	1072      	asrs	r2, r6, #1
 800f9ea:	086b      	lsrs	r3, r5, #1
 800f9ec:	07f1      	lsls	r1, r6, #31
 800f9ee:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f9f2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f9f6:	bf48      	it	mi
 800f9f8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800fa02:	e757      	b.n	800f8b4 <__ieee754_sqrt+0x24>
 800fa04:	4696      	mov	lr, r2
 800fa06:	e7be      	b.n	800f986 <__ieee754_sqrt+0xf6>
 800fa08:	f7f0 fc1c 	bl	8000244 <__adddf3>
 800fa0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4640      	mov	r0, r8
 800fa16:	4649      	mov	r1, r9
 800fa18:	f7f1 f83c 	bl	8000a94 <__aeabi_dcmplt>
 800fa1c:	b120      	cbz	r0, 800fa28 <__ieee754_sqrt+0x198>
 800fa1e:	1ca8      	adds	r0, r5, #2
 800fa20:	bf08      	it	eq
 800fa22:	3601      	addeq	r6, #1
 800fa24:	3502      	adds	r5, #2
 800fa26:	e7df      	b.n	800f9e8 <__ieee754_sqrt+0x158>
 800fa28:	1c6b      	adds	r3, r5, #1
 800fa2a:	f023 0501 	bic.w	r5, r3, #1
 800fa2e:	e7db      	b.n	800f9e8 <__ieee754_sqrt+0x158>
 800fa30:	7ff00000 	.word	0x7ff00000
 800fa34:	20000068 	.word	0x20000068
 800fa38:	20000060 	.word	0x20000060
 800fa3c:	00000000 	.word	0x00000000

0800fa40 <__kernel_cos>:
 800fa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa44:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800fa48:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800fa4c:	4680      	mov	r8, r0
 800fa4e:	4689      	mov	r9, r1
 800fa50:	e9cd 2300 	strd	r2, r3, [sp]
 800fa54:	d204      	bcs.n	800fa60 <__kernel_cos+0x20>
 800fa56:	f7f1 f85b 	bl	8000b10 <__aeabi_d2iz>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	f000 8086 	beq.w	800fb6c <__kernel_cos+0x12c>
 800fa60:	4642      	mov	r2, r8
 800fa62:	464b      	mov	r3, r9
 800fa64:	4640      	mov	r0, r8
 800fa66:	4649      	mov	r1, r9
 800fa68:	f7f0 fda2 	bl	80005b0 <__aeabi_dmul>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	4b4e      	ldr	r3, [pc, #312]	@ (800fba8 <__kernel_cos+0x168>)
 800fa70:	4604      	mov	r4, r0
 800fa72:	460d      	mov	r5, r1
 800fa74:	f7f0 fd9c 	bl	80005b0 <__aeabi_dmul>
 800fa78:	a33f      	add	r3, pc, #252	@ (adr r3, 800fb78 <__kernel_cos+0x138>)
 800fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7e:	4682      	mov	sl, r0
 800fa80:	468b      	mov	fp, r1
 800fa82:	4620      	mov	r0, r4
 800fa84:	4629      	mov	r1, r5
 800fa86:	f7f0 fd93 	bl	80005b0 <__aeabi_dmul>
 800fa8a:	a33d      	add	r3, pc, #244	@ (adr r3, 800fb80 <__kernel_cos+0x140>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f7f0 fbd8 	bl	8000244 <__adddf3>
 800fa94:	4622      	mov	r2, r4
 800fa96:	462b      	mov	r3, r5
 800fa98:	f7f0 fd8a 	bl	80005b0 <__aeabi_dmul>
 800fa9c:	a33a      	add	r3, pc, #232	@ (adr r3, 800fb88 <__kernel_cos+0x148>)
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f7f0 fbcd 	bl	8000240 <__aeabi_dsub>
 800faa6:	4622      	mov	r2, r4
 800faa8:	462b      	mov	r3, r5
 800faaa:	f7f0 fd81 	bl	80005b0 <__aeabi_dmul>
 800faae:	a338      	add	r3, pc, #224	@ (adr r3, 800fb90 <__kernel_cos+0x150>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fbc6 	bl	8000244 <__adddf3>
 800fab8:	4622      	mov	r2, r4
 800faba:	462b      	mov	r3, r5
 800fabc:	f7f0 fd78 	bl	80005b0 <__aeabi_dmul>
 800fac0:	a335      	add	r3, pc, #212	@ (adr r3, 800fb98 <__kernel_cos+0x158>)
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	f7f0 fbbb 	bl	8000240 <__aeabi_dsub>
 800faca:	4622      	mov	r2, r4
 800facc:	462b      	mov	r3, r5
 800face:	f7f0 fd6f 	bl	80005b0 <__aeabi_dmul>
 800fad2:	a333      	add	r3, pc, #204	@ (adr r3, 800fba0 <__kernel_cos+0x160>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	f7f0 fbb4 	bl	8000244 <__adddf3>
 800fadc:	4622      	mov	r2, r4
 800fade:	462b      	mov	r3, r5
 800fae0:	f7f0 fd66 	bl	80005b0 <__aeabi_dmul>
 800fae4:	4622      	mov	r2, r4
 800fae6:	462b      	mov	r3, r5
 800fae8:	f7f0 fd62 	bl	80005b0 <__aeabi_dmul>
 800faec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faf0:	4604      	mov	r4, r0
 800faf2:	460d      	mov	r5, r1
 800faf4:	4640      	mov	r0, r8
 800faf6:	4649      	mov	r1, r9
 800faf8:	f7f0 fd5a 	bl	80005b0 <__aeabi_dmul>
 800fafc:	460b      	mov	r3, r1
 800fafe:	4602      	mov	r2, r0
 800fb00:	4629      	mov	r1, r5
 800fb02:	4620      	mov	r0, r4
 800fb04:	f7f0 fb9c 	bl	8000240 <__aeabi_dsub>
 800fb08:	4b28      	ldr	r3, [pc, #160]	@ (800fbac <__kernel_cos+0x16c>)
 800fb0a:	4680      	mov	r8, r0
 800fb0c:	429e      	cmp	r6, r3
 800fb0e:	4689      	mov	r9, r1
 800fb10:	d80e      	bhi.n	800fb30 <__kernel_cos+0xf0>
 800fb12:	4602      	mov	r2, r0
 800fb14:	460b      	mov	r3, r1
 800fb16:	4650      	mov	r0, sl
 800fb18:	4659      	mov	r1, fp
 800fb1a:	f7f0 fb91 	bl	8000240 <__aeabi_dsub>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	2000      	movs	r0, #0
 800fb22:	460b      	mov	r3, r1
 800fb24:	4922      	ldr	r1, [pc, #136]	@ (800fbb0 <__kernel_cos+0x170>)
 800fb26:	f7f0 fb8b 	bl	8000240 <__aeabi_dsub>
 800fb2a:	b003      	add	sp, #12
 800fb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb30:	2400      	movs	r4, #0
 800fb32:	4b20      	ldr	r3, [pc, #128]	@ (800fbb4 <__kernel_cos+0x174>)
 800fb34:	4622      	mov	r2, r4
 800fb36:	429e      	cmp	r6, r3
 800fb38:	bf8c      	ite	hi
 800fb3a:	4d1f      	ldrhi	r5, [pc, #124]	@ (800fbb8 <__kernel_cos+0x178>)
 800fb3c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800fb40:	462b      	mov	r3, r5
 800fb42:	2000      	movs	r0, #0
 800fb44:	491a      	ldr	r1, [pc, #104]	@ (800fbb0 <__kernel_cos+0x170>)
 800fb46:	f7f0 fb7b 	bl	8000240 <__aeabi_dsub>
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	462b      	mov	r3, r5
 800fb52:	4650      	mov	r0, sl
 800fb54:	4659      	mov	r1, fp
 800fb56:	f7f0 fb73 	bl	8000240 <__aeabi_dsub>
 800fb5a:	4642      	mov	r2, r8
 800fb5c:	464b      	mov	r3, r9
 800fb5e:	f7f0 fb6f 	bl	8000240 <__aeabi_dsub>
 800fb62:	4602      	mov	r2, r0
 800fb64:	460b      	mov	r3, r1
 800fb66:	4630      	mov	r0, r6
 800fb68:	4639      	mov	r1, r7
 800fb6a:	e7dc      	b.n	800fb26 <__kernel_cos+0xe6>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	4910      	ldr	r1, [pc, #64]	@ (800fbb0 <__kernel_cos+0x170>)
 800fb70:	e7db      	b.n	800fb2a <__kernel_cos+0xea>
 800fb72:	bf00      	nop
 800fb74:	f3af 8000 	nop.w
 800fb78:	be8838d4 	.word	0xbe8838d4
 800fb7c:	bda8fae9 	.word	0xbda8fae9
 800fb80:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb84:	3e21ee9e 	.word	0x3e21ee9e
 800fb88:	809c52ad 	.word	0x809c52ad
 800fb8c:	3e927e4f 	.word	0x3e927e4f
 800fb90:	19cb1590 	.word	0x19cb1590
 800fb94:	3efa01a0 	.word	0x3efa01a0
 800fb98:	16c15177 	.word	0x16c15177
 800fb9c:	3f56c16c 	.word	0x3f56c16c
 800fba0:	5555554c 	.word	0x5555554c
 800fba4:	3fa55555 	.word	0x3fa55555
 800fba8:	3fe00000 	.word	0x3fe00000
 800fbac:	3fd33332 	.word	0x3fd33332
 800fbb0:	3ff00000 	.word	0x3ff00000
 800fbb4:	3fe90000 	.word	0x3fe90000
 800fbb8:	3fd20000 	.word	0x3fd20000
 800fbbc:	00000000 	.word	0x00000000

0800fbc0 <__kernel_sin>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	461f      	mov	r7, r3
 800fbc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbca:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fbce:	4604      	mov	r4, r0
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	4616      	mov	r6, r2
 800fbd4:	b085      	sub	sp, #20
 800fbd6:	d203      	bcs.n	800fbe0 <__kernel_sin+0x20>
 800fbd8:	f7f0 ff9a 	bl	8000b10 <__aeabi_d2iz>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d051      	beq.n	800fc84 <__kernel_sin+0xc4>
 800fbe0:	4622      	mov	r2, r4
 800fbe2:	462b      	mov	r3, r5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	f7f0 fce2 	bl	80005b0 <__aeabi_dmul>
 800fbec:	4682      	mov	sl, r0
 800fbee:	468b      	mov	fp, r1
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	f7f0 fcda 	bl	80005b0 <__aeabi_dmul>
 800fbfc:	a33e      	add	r3, pc, #248	@ (adr r3, 800fcf8 <__kernel_sin+0x138>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	4680      	mov	r8, r0
 800fc04:	4689      	mov	r9, r1
 800fc06:	4650      	mov	r0, sl
 800fc08:	4659      	mov	r1, fp
 800fc0a:	f7f0 fcd1 	bl	80005b0 <__aeabi_dmul>
 800fc0e:	a33c      	add	r3, pc, #240	@ (adr r3, 800fd00 <__kernel_sin+0x140>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f7f0 fb14 	bl	8000240 <__aeabi_dsub>
 800fc18:	4652      	mov	r2, sl
 800fc1a:	465b      	mov	r3, fp
 800fc1c:	f7f0 fcc8 	bl	80005b0 <__aeabi_dmul>
 800fc20:	a339      	add	r3, pc, #228	@ (adr r3, 800fd08 <__kernel_sin+0x148>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f7f0 fb0d 	bl	8000244 <__adddf3>
 800fc2a:	4652      	mov	r2, sl
 800fc2c:	465b      	mov	r3, fp
 800fc2e:	f7f0 fcbf 	bl	80005b0 <__aeabi_dmul>
 800fc32:	a337      	add	r3, pc, #220	@ (adr r3, 800fd10 <__kernel_sin+0x150>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 fb02 	bl	8000240 <__aeabi_dsub>
 800fc3c:	4652      	mov	r2, sl
 800fc3e:	465b      	mov	r3, fp
 800fc40:	f7f0 fcb6 	bl	80005b0 <__aeabi_dmul>
 800fc44:	a334      	add	r3, pc, #208	@ (adr r3, 800fd18 <__kernel_sin+0x158>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f0 fafb 	bl	8000244 <__adddf3>
 800fc4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc50:	e9cd 0100 	strd	r0, r1, [sp]
 800fc54:	b9db      	cbnz	r3, 800fc8e <__kernel_sin+0xce>
 800fc56:	4602      	mov	r2, r0
 800fc58:	460b      	mov	r3, r1
 800fc5a:	4650      	mov	r0, sl
 800fc5c:	4659      	mov	r1, fp
 800fc5e:	f7f0 fca7 	bl	80005b0 <__aeabi_dmul>
 800fc62:	a32f      	add	r3, pc, #188	@ (adr r3, 800fd20 <__kernel_sin+0x160>)
 800fc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc68:	f7f0 faea 	bl	8000240 <__aeabi_dsub>
 800fc6c:	4642      	mov	r2, r8
 800fc6e:	464b      	mov	r3, r9
 800fc70:	f7f0 fc9e 	bl	80005b0 <__aeabi_dmul>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4620      	mov	r0, r4
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f7f0 fae2 	bl	8000244 <__adddf3>
 800fc80:	4604      	mov	r4, r0
 800fc82:	460d      	mov	r5, r1
 800fc84:	4620      	mov	r0, r4
 800fc86:	4629      	mov	r1, r5
 800fc88:	b005      	add	sp, #20
 800fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8e:	2200      	movs	r2, #0
 800fc90:	4630      	mov	r0, r6
 800fc92:	4639      	mov	r1, r7
 800fc94:	4b24      	ldr	r3, [pc, #144]	@ (800fd28 <__kernel_sin+0x168>)
 800fc96:	f7f0 fc8b 	bl	80005b0 <__aeabi_dmul>
 800fc9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 fc83 	bl	80005b0 <__aeabi_dmul>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcb2:	f7f0 fac5 	bl	8000240 <__aeabi_dsub>
 800fcb6:	4652      	mov	r2, sl
 800fcb8:	465b      	mov	r3, fp
 800fcba:	f7f0 fc79 	bl	80005b0 <__aeabi_dmul>
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	f7f0 fabd 	bl	8000240 <__aeabi_dsub>
 800fcc6:	a316      	add	r3, pc, #88	@ (adr r3, 800fd20 <__kernel_sin+0x160>)
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	4606      	mov	r6, r0
 800fcce:	460f      	mov	r7, r1
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	4649      	mov	r1, r9
 800fcd4:	f7f0 fc6c 	bl	80005b0 <__aeabi_dmul>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4630      	mov	r0, r6
 800fcde:	4639      	mov	r1, r7
 800fce0:	f7f0 fab0 	bl	8000244 <__adddf3>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	4620      	mov	r0, r4
 800fcea:	4629      	mov	r1, r5
 800fcec:	f7f0 faa8 	bl	8000240 <__aeabi_dsub>
 800fcf0:	e7c6      	b.n	800fc80 <__kernel_sin+0xc0>
 800fcf2:	bf00      	nop
 800fcf4:	f3af 8000 	nop.w
 800fcf8:	5acfd57c 	.word	0x5acfd57c
 800fcfc:	3de5d93a 	.word	0x3de5d93a
 800fd00:	8a2b9ceb 	.word	0x8a2b9ceb
 800fd04:	3e5ae5e6 	.word	0x3e5ae5e6
 800fd08:	57b1fe7d 	.word	0x57b1fe7d
 800fd0c:	3ec71de3 	.word	0x3ec71de3
 800fd10:	19c161d5 	.word	0x19c161d5
 800fd14:	3f2a01a0 	.word	0x3f2a01a0
 800fd18:	1110f8a6 	.word	0x1110f8a6
 800fd1c:	3f811111 	.word	0x3f811111
 800fd20:	55555549 	.word	0x55555549
 800fd24:	3fc55555 	.word	0x3fc55555
 800fd28:	3fe00000 	.word	0x3fe00000
 800fd2c:	00000000 	.word	0x00000000

0800fd30 <__ieee754_atan2>:
 800fd30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	4617      	mov	r7, r2
 800fd36:	4690      	mov	r8, r2
 800fd38:	4699      	mov	r9, r3
 800fd3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fd3e:	427b      	negs	r3, r7
 800fd40:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800fec8 <__ieee754_atan2+0x198>
 800fd44:	433b      	orrs	r3, r7
 800fd46:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fd4a:	4553      	cmp	r3, sl
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	460d      	mov	r5, r1
 800fd50:	d809      	bhi.n	800fd66 <__ieee754_atan2+0x36>
 800fd52:	4246      	negs	r6, r0
 800fd54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fd58:	4306      	orrs	r6, r0
 800fd5a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800fd5e:	4556      	cmp	r6, sl
 800fd60:	468e      	mov	lr, r1
 800fd62:	4683      	mov	fp, r0
 800fd64:	d908      	bls.n	800fd78 <__ieee754_atan2+0x48>
 800fd66:	4642      	mov	r2, r8
 800fd68:	464b      	mov	r3, r9
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	4629      	mov	r1, r5
 800fd6e:	f7f0 fa69 	bl	8000244 <__adddf3>
 800fd72:	4604      	mov	r4, r0
 800fd74:	460d      	mov	r5, r1
 800fd76:	e016      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fd78:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800fd7c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800fd80:	433e      	orrs	r6, r7
 800fd82:	d103      	bne.n	800fd8c <__ieee754_atan2+0x5c>
 800fd84:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd88:	f000 bba2 	b.w	80104d0 <atan>
 800fd8c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800fd90:	f006 0602 	and.w	r6, r6, #2
 800fd94:	ea53 0b0b 	orrs.w	fp, r3, fp
 800fd98:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800fd9c:	d107      	bne.n	800fdae <__ieee754_atan2+0x7e>
 800fd9e:	2e02      	cmp	r6, #2
 800fda0:	d064      	beq.n	800fe6c <__ieee754_atan2+0x13c>
 800fda2:	2e03      	cmp	r6, #3
 800fda4:	d066      	beq.n	800fe74 <__ieee754_atan2+0x144>
 800fda6:	4620      	mov	r0, r4
 800fda8:	4629      	mov	r1, r5
 800fdaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdae:	4317      	orrs	r7, r2
 800fdb0:	d106      	bne.n	800fdc0 <__ieee754_atan2+0x90>
 800fdb2:	f1be 0f00 	cmp.w	lr, #0
 800fdb6:	da68      	bge.n	800fe8a <__ieee754_atan2+0x15a>
 800fdb8:	a537      	add	r5, pc, #220	@ (adr r5, 800fe98 <__ieee754_atan2+0x168>)
 800fdba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdbe:	e7f2      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fdc0:	4552      	cmp	r2, sl
 800fdc2:	d10f      	bne.n	800fde4 <__ieee754_atan2+0xb4>
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	f106 36ff 	add.w	r6, r6, #4294967295
 800fdca:	d107      	bne.n	800fddc <__ieee754_atan2+0xac>
 800fdcc:	2e02      	cmp	r6, #2
 800fdce:	d855      	bhi.n	800fe7c <__ieee754_atan2+0x14c>
 800fdd0:	4b3e      	ldr	r3, [pc, #248]	@ (800fecc <__ieee754_atan2+0x19c>)
 800fdd2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fdd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fdda:	e7e4      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fddc:	2e02      	cmp	r6, #2
 800fdde:	d851      	bhi.n	800fe84 <__ieee754_atan2+0x154>
 800fde0:	4b3b      	ldr	r3, [pc, #236]	@ (800fed0 <__ieee754_atan2+0x1a0>)
 800fde2:	e7f6      	b.n	800fdd2 <__ieee754_atan2+0xa2>
 800fde4:	4553      	cmp	r3, sl
 800fde6:	d0e4      	beq.n	800fdb2 <__ieee754_atan2+0x82>
 800fde8:	1a9b      	subs	r3, r3, r2
 800fdea:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fdee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fdf2:	da21      	bge.n	800fe38 <__ieee754_atan2+0x108>
 800fdf4:	f1b9 0f00 	cmp.w	r9, #0
 800fdf8:	da01      	bge.n	800fdfe <__ieee754_atan2+0xce>
 800fdfa:	323c      	adds	r2, #60	@ 0x3c
 800fdfc:	db20      	blt.n	800fe40 <__ieee754_atan2+0x110>
 800fdfe:	4642      	mov	r2, r8
 800fe00:	464b      	mov	r3, r9
 800fe02:	4620      	mov	r0, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7f0 fcfd 	bl	8000804 <__aeabi_ddiv>
 800fe0a:	f000 fcf1 	bl	80107f0 <fabs>
 800fe0e:	f000 fb5f 	bl	80104d0 <atan>
 800fe12:	4604      	mov	r4, r0
 800fe14:	460d      	mov	r5, r1
 800fe16:	2e01      	cmp	r6, #1
 800fe18:	d015      	beq.n	800fe46 <__ieee754_atan2+0x116>
 800fe1a:	2e02      	cmp	r6, #2
 800fe1c:	d017      	beq.n	800fe4e <__ieee754_atan2+0x11e>
 800fe1e:	2e00      	cmp	r6, #0
 800fe20:	d0c1      	beq.n	800fda6 <__ieee754_atan2+0x76>
 800fe22:	a31f      	add	r3, pc, #124	@ (adr r3, 800fea0 <__ieee754_atan2+0x170>)
 800fe24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe28:	4620      	mov	r0, r4
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	f7f0 fa08 	bl	8000240 <__aeabi_dsub>
 800fe30:	a31d      	add	r3, pc, #116	@ (adr r3, 800fea8 <__ieee754_atan2+0x178>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	e016      	b.n	800fe66 <__ieee754_atan2+0x136>
 800fe38:	a51d      	add	r5, pc, #116	@ (adr r5, 800feb0 <__ieee754_atan2+0x180>)
 800fe3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe3e:	e7ea      	b.n	800fe16 <__ieee754_atan2+0xe6>
 800fe40:	2400      	movs	r4, #0
 800fe42:	2500      	movs	r5, #0
 800fe44:	e7e7      	b.n	800fe16 <__ieee754_atan2+0xe6>
 800fe46:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800fe4a:	461d      	mov	r5, r3
 800fe4c:	e7ab      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe4e:	a314      	add	r3, pc, #80	@ (adr r3, 800fea0 <__ieee754_atan2+0x170>)
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	4620      	mov	r0, r4
 800fe56:	4629      	mov	r1, r5
 800fe58:	f7f0 f9f2 	bl	8000240 <__aeabi_dsub>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	460b      	mov	r3, r1
 800fe60:	a111      	add	r1, pc, #68	@ (adr r1, 800fea8 <__ieee754_atan2+0x178>)
 800fe62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe66:	f7f0 f9eb 	bl	8000240 <__aeabi_dsub>
 800fe6a:	e782      	b.n	800fd72 <__ieee754_atan2+0x42>
 800fe6c:	a50e      	add	r5, pc, #56	@ (adr r5, 800fea8 <__ieee754_atan2+0x178>)
 800fe6e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe72:	e798      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe74:	a510      	add	r5, pc, #64	@ (adr r5, 800feb8 <__ieee754_atan2+0x188>)
 800fe76:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe7a:	e794      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe7c:	a510      	add	r5, pc, #64	@ (adr r5, 800fec0 <__ieee754_atan2+0x190>)
 800fe7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe82:	e790      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe84:	2400      	movs	r4, #0
 800fe86:	2500      	movs	r5, #0
 800fe88:	e78d      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe8a:	a509      	add	r5, pc, #36	@ (adr r5, 800feb0 <__ieee754_atan2+0x180>)
 800fe8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe90:	e789      	b.n	800fda6 <__ieee754_atan2+0x76>
 800fe92:	bf00      	nop
 800fe94:	f3af 8000 	nop.w
 800fe98:	54442d18 	.word	0x54442d18
 800fe9c:	bff921fb 	.word	0xbff921fb
 800fea0:	33145c07 	.word	0x33145c07
 800fea4:	3ca1a626 	.word	0x3ca1a626
 800fea8:	54442d18 	.word	0x54442d18
 800feac:	400921fb 	.word	0x400921fb
 800feb0:	54442d18 	.word	0x54442d18
 800feb4:	3ff921fb 	.word	0x3ff921fb
 800feb8:	54442d18 	.word	0x54442d18
 800febc:	c00921fb 	.word	0xc00921fb
 800fec0:	54442d18 	.word	0x54442d18
 800fec4:	3fe921fb 	.word	0x3fe921fb
 800fec8:	7ff00000 	.word	0x7ff00000
 800fecc:	08012618 	.word	0x08012618
 800fed0:	08012600 	.word	0x08012600

0800fed4 <__ieee754_fmod>:
 800fed4:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800fed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fedc:	ea52 040c 	orrs.w	r4, r2, ip
 800fee0:	461e      	mov	r6, r3
 800fee2:	4617      	mov	r7, r2
 800fee4:	4696      	mov	lr, r2
 800fee6:	d00c      	beq.n	800ff02 <__ieee754_fmod+0x2e>
 800fee8:	4c76      	ldr	r4, [pc, #472]	@ (80100c4 <__ieee754_fmod+0x1f0>)
 800feea:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800feee:	45a0      	cmp	r8, r4
 800fef0:	4689      	mov	r9, r1
 800fef2:	d806      	bhi.n	800ff02 <__ieee754_fmod+0x2e>
 800fef4:	4254      	negs	r4, r2
 800fef6:	4d74      	ldr	r5, [pc, #464]	@ (80100c8 <__ieee754_fmod+0x1f4>)
 800fef8:	4314      	orrs	r4, r2
 800fefa:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800fefe:	42ac      	cmp	r4, r5
 800ff00:	d907      	bls.n	800ff12 <__ieee754_fmod+0x3e>
 800ff02:	f7f0 fb55 	bl	80005b0 <__aeabi_dmul>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	f7f0 fc7b 	bl	8000804 <__aeabi_ddiv>
 800ff0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff12:	45e0      	cmp	r8, ip
 800ff14:	4682      	mov	sl, r0
 800ff16:	4604      	mov	r4, r0
 800ff18:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ff1c:	dc09      	bgt.n	800ff32 <__ieee754_fmod+0x5e>
 800ff1e:	dbf6      	blt.n	800ff0e <__ieee754_fmod+0x3a>
 800ff20:	4282      	cmp	r2, r0
 800ff22:	d8f4      	bhi.n	800ff0e <__ieee754_fmod+0x3a>
 800ff24:	d105      	bne.n	800ff32 <__ieee754_fmod+0x5e>
 800ff26:	4b69      	ldr	r3, [pc, #420]	@ (80100cc <__ieee754_fmod+0x1f8>)
 800ff28:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800ff2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff30:	e7ed      	b.n	800ff0e <__ieee754_fmod+0x3a>
 800ff32:	4a65      	ldr	r2, [pc, #404]	@ (80100c8 <__ieee754_fmod+0x1f4>)
 800ff34:	ea19 0f02 	tst.w	r9, r2
 800ff38:	d148      	bne.n	800ffcc <__ieee754_fmod+0xf8>
 800ff3a:	f1b8 0f00 	cmp.w	r8, #0
 800ff3e:	d13d      	bne.n	800ffbc <__ieee754_fmod+0xe8>
 800ff40:	4653      	mov	r3, sl
 800ff42:	4963      	ldr	r1, [pc, #396]	@ (80100d0 <__ieee754_fmod+0x1fc>)
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dc36      	bgt.n	800ffb6 <__ieee754_fmod+0xe2>
 800ff48:	4216      	tst	r6, r2
 800ff4a:	d14f      	bne.n	800ffec <__ieee754_fmod+0x118>
 800ff4c:	f1bc 0f00 	cmp.w	ip, #0
 800ff50:	d144      	bne.n	800ffdc <__ieee754_fmod+0x108>
 800ff52:	463b      	mov	r3, r7
 800ff54:	4a5e      	ldr	r2, [pc, #376]	@ (80100d0 <__ieee754_fmod+0x1fc>)
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	dc3d      	bgt.n	800ffd6 <__ieee754_fmod+0x102>
 800ff5a:	485e      	ldr	r0, [pc, #376]	@ (80100d4 <__ieee754_fmod+0x200>)
 800ff5c:	4281      	cmp	r1, r0
 800ff5e:	db4a      	blt.n	800fff6 <__ieee754_fmod+0x122>
 800ff60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff68:	485a      	ldr	r0, [pc, #360]	@ (80100d4 <__ieee754_fmod+0x200>)
 800ff6a:	4282      	cmp	r2, r0
 800ff6c:	db57      	blt.n	801001e <__ieee754_fmod+0x14a>
 800ff6e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ff72:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800ff76:	1a89      	subs	r1, r1, r2
 800ff78:	1b98      	subs	r0, r3, r6
 800ff7a:	eba4 070e 	sub.w	r7, r4, lr
 800ff7e:	2900      	cmp	r1, #0
 800ff80:	d162      	bne.n	8010048 <__ieee754_fmod+0x174>
 800ff82:	4574      	cmp	r4, lr
 800ff84:	bf38      	it	cc
 800ff86:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	bfa4      	itt	ge
 800ff8e:	463c      	movge	r4, r7
 800ff90:	4603      	movge	r3, r0
 800ff92:	ea53 0104 	orrs.w	r1, r3, r4
 800ff96:	d0c6      	beq.n	800ff26 <__ieee754_fmod+0x52>
 800ff98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff9c:	db69      	blt.n	8010072 <__ieee754_fmod+0x19e>
 800ff9e:	494d      	ldr	r1, [pc, #308]	@ (80100d4 <__ieee754_fmod+0x200>)
 800ffa0:	428a      	cmp	r2, r1
 800ffa2:	db6c      	blt.n	801007e <__ieee754_fmod+0x1aa>
 800ffa4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ffa8:	432b      	orrs	r3, r5
 800ffaa:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800ffae:	4620      	mov	r0, r4
 800ffb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffb4:	e7ab      	b.n	800ff0e <__ieee754_fmod+0x3a>
 800ffb6:	3901      	subs	r1, #1
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	e7c3      	b.n	800ff44 <__ieee754_fmod+0x70>
 800ffbc:	4945      	ldr	r1, [pc, #276]	@ (80100d4 <__ieee754_fmod+0x200>)
 800ffbe:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	ddc0      	ble.n	800ff48 <__ieee754_fmod+0x74>
 800ffc6:	3901      	subs	r1, #1
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	e7fa      	b.n	800ffc2 <__ieee754_fmod+0xee>
 800ffcc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ffd0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ffd4:	e7b8      	b.n	800ff48 <__ieee754_fmod+0x74>
 800ffd6:	3a01      	subs	r2, #1
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	e7bc      	b.n	800ff56 <__ieee754_fmod+0x82>
 800ffdc:	4a3d      	ldr	r2, [pc, #244]	@ (80100d4 <__ieee754_fmod+0x200>)
 800ffde:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	ddb9      	ble.n	800ff5a <__ieee754_fmod+0x86>
 800ffe6:	3a01      	subs	r2, #1
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	e7fa      	b.n	800ffe2 <__ieee754_fmod+0x10e>
 800ffec:	ea4f 522c 	mov.w	r2, ip, asr #20
 800fff0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fff4:	e7b1      	b.n	800ff5a <__ieee754_fmod+0x86>
 800fff6:	1a40      	subs	r0, r0, r1
 800fff8:	281f      	cmp	r0, #31
 800fffa:	dc0a      	bgt.n	8010012 <__ieee754_fmod+0x13e>
 800fffc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8010000:	fa08 f800 	lsl.w	r8, r8, r0
 8010004:	fa2a f303 	lsr.w	r3, sl, r3
 8010008:	ea43 0308 	orr.w	r3, r3, r8
 801000c:	fa0a f400 	lsl.w	r4, sl, r0
 8010010:	e7aa      	b.n	800ff68 <__ieee754_fmod+0x94>
 8010012:	4b31      	ldr	r3, [pc, #196]	@ (80100d8 <__ieee754_fmod+0x204>)
 8010014:	2400      	movs	r4, #0
 8010016:	1a5b      	subs	r3, r3, r1
 8010018:	fa0a f303 	lsl.w	r3, sl, r3
 801001c:	e7a4      	b.n	800ff68 <__ieee754_fmod+0x94>
 801001e:	1a80      	subs	r0, r0, r2
 8010020:	281f      	cmp	r0, #31
 8010022:	dc0a      	bgt.n	801003a <__ieee754_fmod+0x166>
 8010024:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8010028:	fa0c fc00 	lsl.w	ip, ip, r0
 801002c:	fa27 f606 	lsr.w	r6, r7, r6
 8010030:	ea46 060c 	orr.w	r6, r6, ip
 8010034:	fa07 fe00 	lsl.w	lr, r7, r0
 8010038:	e79d      	b.n	800ff76 <__ieee754_fmod+0xa2>
 801003a:	4e27      	ldr	r6, [pc, #156]	@ (80100d8 <__ieee754_fmod+0x204>)
 801003c:	f04f 0e00 	mov.w	lr, #0
 8010040:	1ab6      	subs	r6, r6, r2
 8010042:	fa07 f606 	lsl.w	r6, r7, r6
 8010046:	e796      	b.n	800ff76 <__ieee754_fmod+0xa2>
 8010048:	4574      	cmp	r4, lr
 801004a:	bf38      	it	cc
 801004c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010050:	2800      	cmp	r0, #0
 8010052:	da05      	bge.n	8010060 <__ieee754_fmod+0x18c>
 8010054:	0fe0      	lsrs	r0, r4, #31
 8010056:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801005a:	0064      	lsls	r4, r4, #1
 801005c:	3901      	subs	r1, #1
 801005e:	e78b      	b.n	800ff78 <__ieee754_fmod+0xa4>
 8010060:	ea50 0307 	orrs.w	r3, r0, r7
 8010064:	f43f af5f 	beq.w	800ff26 <__ieee754_fmod+0x52>
 8010068:	0ffb      	lsrs	r3, r7, #31
 801006a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801006e:	007c      	lsls	r4, r7, #1
 8010070:	e7f4      	b.n	801005c <__ieee754_fmod+0x188>
 8010072:	0fe1      	lsrs	r1, r4, #31
 8010074:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010078:	0064      	lsls	r4, r4, #1
 801007a:	3a01      	subs	r2, #1
 801007c:	e78c      	b.n	800ff98 <__ieee754_fmod+0xc4>
 801007e:	1a89      	subs	r1, r1, r2
 8010080:	2914      	cmp	r1, #20
 8010082:	dc0a      	bgt.n	801009a <__ieee754_fmod+0x1c6>
 8010084:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010088:	fa03 f202 	lsl.w	r2, r3, r2
 801008c:	40cc      	lsrs	r4, r1
 801008e:	4322      	orrs	r2, r4
 8010090:	410b      	asrs	r3, r1
 8010092:	4610      	mov	r0, r2
 8010094:	ea43 0105 	orr.w	r1, r3, r5
 8010098:	e739      	b.n	800ff0e <__ieee754_fmod+0x3a>
 801009a:	291f      	cmp	r1, #31
 801009c:	dc07      	bgt.n	80100ae <__ieee754_fmod+0x1da>
 801009e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80100a2:	40cc      	lsrs	r4, r1
 80100a4:	fa03 f202 	lsl.w	r2, r3, r2
 80100a8:	4322      	orrs	r2, r4
 80100aa:	462b      	mov	r3, r5
 80100ac:	e7f1      	b.n	8010092 <__ieee754_fmod+0x1be>
 80100ae:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80100b2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80100b6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80100ba:	32e2      	adds	r2, #226	@ 0xe2
 80100bc:	fa43 f202 	asr.w	r2, r3, r2
 80100c0:	e7f3      	b.n	80100aa <__ieee754_fmod+0x1d6>
 80100c2:	bf00      	nop
 80100c4:	7fefffff 	.word	0x7fefffff
 80100c8:	7ff00000 	.word	0x7ff00000
 80100cc:	08012630 	.word	0x08012630
 80100d0:	fffffbed 	.word	0xfffffbed
 80100d4:	fffffc02 	.word	0xfffffc02
 80100d8:	fffffbe2 	.word	0xfffffbe2
 80100dc:	00000000 	.word	0x00000000

080100e0 <__ieee754_rem_pio2>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	4bc4      	ldr	r3, [pc, #784]	@ (80103f8 <__ieee754_rem_pio2+0x318>)
 80100e6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80100ea:	b08d      	sub	sp, #52	@ 0x34
 80100ec:	4598      	cmp	r8, r3
 80100ee:	4606      	mov	r6, r0
 80100f0:	460f      	mov	r7, r1
 80100f2:	4614      	mov	r4, r2
 80100f4:	9104      	str	r1, [sp, #16]
 80100f6:	d807      	bhi.n	8010108 <__ieee754_rem_pio2+0x28>
 80100f8:	e9c2 6700 	strd	r6, r7, [r2]
 80100fc:	2300      	movs	r3, #0
 80100fe:	2200      	movs	r2, #0
 8010100:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010104:	2500      	movs	r5, #0
 8010106:	e026      	b.n	8010156 <__ieee754_rem_pio2+0x76>
 8010108:	4bbc      	ldr	r3, [pc, #752]	@ (80103fc <__ieee754_rem_pio2+0x31c>)
 801010a:	4598      	cmp	r8, r3
 801010c:	d876      	bhi.n	80101fc <__ieee754_rem_pio2+0x11c>
 801010e:	9b04      	ldr	r3, [sp, #16]
 8010110:	4dbb      	ldr	r5, [pc, #748]	@ (8010400 <__ieee754_rem_pio2+0x320>)
 8010112:	2b00      	cmp	r3, #0
 8010114:	a3aa      	add	r3, pc, #680	@ (adr r3, 80103c0 <__ieee754_rem_pio2+0x2e0>)
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	dd38      	ble.n	801018e <__ieee754_rem_pio2+0xae>
 801011c:	f7f0 f890 	bl	8000240 <__aeabi_dsub>
 8010120:	45a8      	cmp	r8, r5
 8010122:	4606      	mov	r6, r0
 8010124:	460f      	mov	r7, r1
 8010126:	d01a      	beq.n	801015e <__ieee754_rem_pio2+0x7e>
 8010128:	a3a7      	add	r3, pc, #668	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2e8>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	f7f0 f887 	bl	8000240 <__aeabi_dsub>
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	4680      	mov	r8, r0
 8010138:	4689      	mov	r9, r1
 801013a:	4630      	mov	r0, r6
 801013c:	4639      	mov	r1, r7
 801013e:	f7f0 f87f 	bl	8000240 <__aeabi_dsub>
 8010142:	a3a1      	add	r3, pc, #644	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2e8>)
 8010144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010148:	f7f0 f87a 	bl	8000240 <__aeabi_dsub>
 801014c:	2501      	movs	r5, #1
 801014e:	e9c4 8900 	strd	r8, r9, [r4]
 8010152:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010156:	4628      	mov	r0, r5
 8010158:	b00d      	add	sp, #52	@ 0x34
 801015a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015e:	a39c      	add	r3, pc, #624	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f0>)
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	f7f0 f86c 	bl	8000240 <__aeabi_dsub>
 8010168:	a39b      	add	r3, pc, #620	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x2f8>)
 801016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016e:	4606      	mov	r6, r0
 8010170:	460f      	mov	r7, r1
 8010172:	f7f0 f865 	bl	8000240 <__aeabi_dsub>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	4680      	mov	r8, r0
 801017c:	4689      	mov	r9, r1
 801017e:	4630      	mov	r0, r6
 8010180:	4639      	mov	r1, r7
 8010182:	f7f0 f85d 	bl	8000240 <__aeabi_dsub>
 8010186:	a394      	add	r3, pc, #592	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x2f8>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	e7dc      	b.n	8010148 <__ieee754_rem_pio2+0x68>
 801018e:	f7f0 f859 	bl	8000244 <__adddf3>
 8010192:	45a8      	cmp	r8, r5
 8010194:	4606      	mov	r6, r0
 8010196:	460f      	mov	r7, r1
 8010198:	d018      	beq.n	80101cc <__ieee754_rem_pio2+0xec>
 801019a:	a38b      	add	r3, pc, #556	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2e8>)
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	f7f0 f850 	bl	8000244 <__adddf3>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4680      	mov	r8, r0
 80101aa:	4689      	mov	r9, r1
 80101ac:	4630      	mov	r0, r6
 80101ae:	4639      	mov	r1, r7
 80101b0:	f7f0 f846 	bl	8000240 <__aeabi_dsub>
 80101b4:	a384      	add	r3, pc, #528	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2e8>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	f7f0 f843 	bl	8000244 <__adddf3>
 80101be:	f04f 35ff 	mov.w	r5, #4294967295
 80101c2:	e9c4 8900 	strd	r8, r9, [r4]
 80101c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101ca:	e7c4      	b.n	8010156 <__ieee754_rem_pio2+0x76>
 80101cc:	a380      	add	r3, pc, #512	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f0>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f7f0 f837 	bl	8000244 <__adddf3>
 80101d6:	a380      	add	r3, pc, #512	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x2f8>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	4606      	mov	r6, r0
 80101de:	460f      	mov	r7, r1
 80101e0:	f7f0 f830 	bl	8000244 <__adddf3>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4680      	mov	r8, r0
 80101ea:	4689      	mov	r9, r1
 80101ec:	4630      	mov	r0, r6
 80101ee:	4639      	mov	r1, r7
 80101f0:	f7f0 f826 	bl	8000240 <__aeabi_dsub>
 80101f4:	a378      	add	r3, pc, #480	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x2f8>)
 80101f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fa:	e7de      	b.n	80101ba <__ieee754_rem_pio2+0xda>
 80101fc:	4b81      	ldr	r3, [pc, #516]	@ (8010404 <__ieee754_rem_pio2+0x324>)
 80101fe:	4598      	cmp	r8, r3
 8010200:	f200 80cf 	bhi.w	80103a2 <__ieee754_rem_pio2+0x2c2>
 8010204:	f000 faf4 	bl	80107f0 <fabs>
 8010208:	a375      	add	r3, pc, #468	@ (adr r3, 80103e0 <__ieee754_rem_pio2+0x300>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	4606      	mov	r6, r0
 8010210:	460f      	mov	r7, r1
 8010212:	f7f0 f9cd 	bl	80005b0 <__aeabi_dmul>
 8010216:	2200      	movs	r2, #0
 8010218:	4b7b      	ldr	r3, [pc, #492]	@ (8010408 <__ieee754_rem_pio2+0x328>)
 801021a:	f7f0 f813 	bl	8000244 <__adddf3>
 801021e:	f7f0 fc77 	bl	8000b10 <__aeabi_d2iz>
 8010222:	4605      	mov	r5, r0
 8010224:	f7f0 f95a 	bl	80004dc <__aeabi_i2d>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010230:	a363      	add	r3, pc, #396	@ (adr r3, 80103c0 <__ieee754_rem_pio2+0x2e0>)
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	f7f0 f9bb 	bl	80005b0 <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4630      	mov	r0, r6
 8010240:	4639      	mov	r1, r7
 8010242:	f7ef fffd 	bl	8000240 <__aeabi_dsub>
 8010246:	a360      	add	r3, pc, #384	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2e8>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4682      	mov	sl, r0
 801024e:	468b      	mov	fp, r1
 8010250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010254:	f7f0 f9ac 	bl	80005b0 <__aeabi_dmul>
 8010258:	2d1f      	cmp	r5, #31
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	dc0c      	bgt.n	801027a <__ieee754_rem_pio2+0x19a>
 8010260:	4b6a      	ldr	r3, [pc, #424]	@ (801040c <__ieee754_rem_pio2+0x32c>)
 8010262:	1e6a      	subs	r2, r5, #1
 8010264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010268:	4543      	cmp	r3, r8
 801026a:	d006      	beq.n	801027a <__ieee754_rem_pio2+0x19a>
 801026c:	4632      	mov	r2, r6
 801026e:	463b      	mov	r3, r7
 8010270:	4650      	mov	r0, sl
 8010272:	4659      	mov	r1, fp
 8010274:	f7ef ffe4 	bl	8000240 <__aeabi_dsub>
 8010278:	e00e      	b.n	8010298 <__ieee754_rem_pio2+0x1b8>
 801027a:	463b      	mov	r3, r7
 801027c:	4632      	mov	r2, r6
 801027e:	4650      	mov	r0, sl
 8010280:	4659      	mov	r1, fp
 8010282:	f7ef ffdd 	bl	8000240 <__aeabi_dsub>
 8010286:	ea4f 5328 	mov.w	r3, r8, asr #20
 801028a:	9305      	str	r3, [sp, #20]
 801028c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010290:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010294:	2b10      	cmp	r3, #16
 8010296:	dc02      	bgt.n	801029e <__ieee754_rem_pio2+0x1be>
 8010298:	e9c4 0100 	strd	r0, r1, [r4]
 801029c:	e039      	b.n	8010312 <__ieee754_rem_pio2+0x232>
 801029e:	a34c      	add	r3, pc, #304	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f0>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102a8:	f7f0 f982 	bl	80005b0 <__aeabi_dmul>
 80102ac:	4606      	mov	r6, r0
 80102ae:	460f      	mov	r7, r1
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4650      	mov	r0, sl
 80102b6:	4659      	mov	r1, fp
 80102b8:	f7ef ffc2 	bl	8000240 <__aeabi_dsub>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4680      	mov	r8, r0
 80102c2:	4689      	mov	r9, r1
 80102c4:	4650      	mov	r0, sl
 80102c6:	4659      	mov	r1, fp
 80102c8:	f7ef ffba 	bl	8000240 <__aeabi_dsub>
 80102cc:	4632      	mov	r2, r6
 80102ce:	463b      	mov	r3, r7
 80102d0:	f7ef ffb6 	bl	8000240 <__aeabi_dsub>
 80102d4:	a340      	add	r3, pc, #256	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x2f8>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e2:	f7f0 f965 	bl	80005b0 <__aeabi_dmul>
 80102e6:	4632      	mov	r2, r6
 80102e8:	463b      	mov	r3, r7
 80102ea:	f7ef ffa9 	bl	8000240 <__aeabi_dsub>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4606      	mov	r6, r0
 80102f4:	460f      	mov	r7, r1
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7ef ffa1 	bl	8000240 <__aeabi_dsub>
 80102fe:	9a05      	ldr	r2, [sp, #20]
 8010300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	2b31      	cmp	r3, #49	@ 0x31
 8010308:	dc20      	bgt.n	801034c <__ieee754_rem_pio2+0x26c>
 801030a:	46c2      	mov	sl, r8
 801030c:	46cb      	mov	fp, r9
 801030e:	e9c4 0100 	strd	r0, r1, [r4]
 8010312:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010316:	4650      	mov	r0, sl
 8010318:	4642      	mov	r2, r8
 801031a:	464b      	mov	r3, r9
 801031c:	4659      	mov	r1, fp
 801031e:	f7ef ff8f 	bl	8000240 <__aeabi_dsub>
 8010322:	463b      	mov	r3, r7
 8010324:	4632      	mov	r2, r6
 8010326:	f7ef ff8b 	bl	8000240 <__aeabi_dsub>
 801032a:	9b04      	ldr	r3, [sp, #16]
 801032c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f6bf af10 	bge.w	8010156 <__ieee754_rem_pio2+0x76>
 8010336:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801033a:	6063      	str	r3, [r4, #4]
 801033c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010340:	f8c4 8000 	str.w	r8, [r4]
 8010344:	60a0      	str	r0, [r4, #8]
 8010346:	60e3      	str	r3, [r4, #12]
 8010348:	426d      	negs	r5, r5
 801034a:	e704      	b.n	8010156 <__ieee754_rem_pio2+0x76>
 801034c:	a326      	add	r3, pc, #152	@ (adr r3, 80103e8 <__ieee754_rem_pio2+0x308>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010356:	f7f0 f92b 	bl	80005b0 <__aeabi_dmul>
 801035a:	4606      	mov	r6, r0
 801035c:	460f      	mov	r7, r1
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7ef ff6b 	bl	8000240 <__aeabi_dsub>
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	4682      	mov	sl, r0
 8010370:	468b      	mov	fp, r1
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	f7ef ff63 	bl	8000240 <__aeabi_dsub>
 801037a:	4632      	mov	r2, r6
 801037c:	463b      	mov	r3, r7
 801037e:	f7ef ff5f 	bl	8000240 <__aeabi_dsub>
 8010382:	a31b      	add	r3, pc, #108	@ (adr r3, 80103f0 <__ieee754_rem_pio2+0x310>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010390:	f7f0 f90e 	bl	80005b0 <__aeabi_dmul>
 8010394:	4632      	mov	r2, r6
 8010396:	463b      	mov	r3, r7
 8010398:	f7ef ff52 	bl	8000240 <__aeabi_dsub>
 801039c:	4606      	mov	r6, r0
 801039e:	460f      	mov	r7, r1
 80103a0:	e764      	b.n	801026c <__ieee754_rem_pio2+0x18c>
 80103a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010410 <__ieee754_rem_pio2+0x330>)
 80103a4:	4598      	cmp	r8, r3
 80103a6:	d935      	bls.n	8010414 <__ieee754_rem_pio2+0x334>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	f7ef ff48 	bl	8000240 <__aeabi_dsub>
 80103b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80103b4:	e9c4 0100 	strd	r0, r1, [r4]
 80103b8:	e6a4      	b.n	8010104 <__ieee754_rem_pio2+0x24>
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w
 80103c0:	54400000 	.word	0x54400000
 80103c4:	3ff921fb 	.word	0x3ff921fb
 80103c8:	1a626331 	.word	0x1a626331
 80103cc:	3dd0b461 	.word	0x3dd0b461
 80103d0:	1a600000 	.word	0x1a600000
 80103d4:	3dd0b461 	.word	0x3dd0b461
 80103d8:	2e037073 	.word	0x2e037073
 80103dc:	3ba3198a 	.word	0x3ba3198a
 80103e0:	6dc9c883 	.word	0x6dc9c883
 80103e4:	3fe45f30 	.word	0x3fe45f30
 80103e8:	2e000000 	.word	0x2e000000
 80103ec:	3ba3198a 	.word	0x3ba3198a
 80103f0:	252049c1 	.word	0x252049c1
 80103f4:	397b839a 	.word	0x397b839a
 80103f8:	3fe921fb 	.word	0x3fe921fb
 80103fc:	4002d97b 	.word	0x4002d97b
 8010400:	3ff921fb 	.word	0x3ff921fb
 8010404:	413921fb 	.word	0x413921fb
 8010408:	3fe00000 	.word	0x3fe00000
 801040c:	08012640 	.word	0x08012640
 8010410:	7fefffff 	.word	0x7fefffff
 8010414:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010418:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801041c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010420:	460f      	mov	r7, r1
 8010422:	f7f0 fb75 	bl	8000b10 <__aeabi_d2iz>
 8010426:	f7f0 f859 	bl	80004dc <__aeabi_i2d>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	4630      	mov	r0, r6
 8010430:	4639      	mov	r1, r7
 8010432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010436:	f7ef ff03 	bl	8000240 <__aeabi_dsub>
 801043a:	2200      	movs	r2, #0
 801043c:	4b21      	ldr	r3, [pc, #132]	@ (80104c4 <__ieee754_rem_pio2+0x3e4>)
 801043e:	f7f0 f8b7 	bl	80005b0 <__aeabi_dmul>
 8010442:	460f      	mov	r7, r1
 8010444:	4606      	mov	r6, r0
 8010446:	f7f0 fb63 	bl	8000b10 <__aeabi_d2iz>
 801044a:	f7f0 f847 	bl	80004dc <__aeabi_i2d>
 801044e:	4602      	mov	r2, r0
 8010450:	460b      	mov	r3, r1
 8010452:	4630      	mov	r0, r6
 8010454:	4639      	mov	r1, r7
 8010456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801045a:	f7ef fef1 	bl	8000240 <__aeabi_dsub>
 801045e:	2200      	movs	r2, #0
 8010460:	4b18      	ldr	r3, [pc, #96]	@ (80104c4 <__ieee754_rem_pio2+0x3e4>)
 8010462:	f7f0 f8a5 	bl	80005b0 <__aeabi_dmul>
 8010466:	f04f 0803 	mov.w	r8, #3
 801046a:	2600      	movs	r6, #0
 801046c:	2700      	movs	r7, #0
 801046e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010472:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010476:	4632      	mov	r2, r6
 8010478:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801047c:	463b      	mov	r3, r7
 801047e:	46c2      	mov	sl, r8
 8010480:	f108 38ff 	add.w	r8, r8, #4294967295
 8010484:	f7f0 fafc 	bl	8000a80 <__aeabi_dcmpeq>
 8010488:	2800      	cmp	r0, #0
 801048a:	d1f4      	bne.n	8010476 <__ieee754_rem_pio2+0x396>
 801048c:	4b0e      	ldr	r3, [pc, #56]	@ (80104c8 <__ieee754_rem_pio2+0x3e8>)
 801048e:	462a      	mov	r2, r5
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	2302      	movs	r3, #2
 8010494:	4621      	mov	r1, r4
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	a806      	add	r0, sp, #24
 801049a:	4653      	mov	r3, sl
 801049c:	f000 fc0c 	bl	8010cb8 <__kernel_rem_pio2>
 80104a0:	9b04      	ldr	r3, [sp, #16]
 80104a2:	4605      	mov	r5, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f6bf ae56 	bge.w	8010156 <__ieee754_rem_pio2+0x76>
 80104aa:	e9d4 2100 	ldrd	r2, r1, [r4]
 80104ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104b2:	e9c4 2300 	strd	r2, r3, [r4]
 80104b6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80104ba:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80104c2:	e741      	b.n	8010348 <__ieee754_rem_pio2+0x268>
 80104c4:	41700000 	.word	0x41700000
 80104c8:	080126c0 	.word	0x080126c0
 80104cc:	00000000 	.word	0x00000000

080104d0 <atan>:
 80104d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	4bbc      	ldr	r3, [pc, #752]	@ (80107c8 <atan+0x2f8>)
 80104d6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80104da:	429e      	cmp	r6, r3
 80104dc:	4604      	mov	r4, r0
 80104de:	460d      	mov	r5, r1
 80104e0:	468b      	mov	fp, r1
 80104e2:	d918      	bls.n	8010516 <atan+0x46>
 80104e4:	4bb9      	ldr	r3, [pc, #740]	@ (80107cc <atan+0x2fc>)
 80104e6:	429e      	cmp	r6, r3
 80104e8:	d801      	bhi.n	80104ee <atan+0x1e>
 80104ea:	d109      	bne.n	8010500 <atan+0x30>
 80104ec:	b140      	cbz	r0, 8010500 <atan+0x30>
 80104ee:	4622      	mov	r2, r4
 80104f0:	462b      	mov	r3, r5
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7ef fea5 	bl	8000244 <__adddf3>
 80104fa:	4604      	mov	r4, r0
 80104fc:	460d      	mov	r5, r1
 80104fe:	e006      	b.n	801050e <atan+0x3e>
 8010500:	f1bb 0f00 	cmp.w	fp, #0
 8010504:	f340 8123 	ble.w	801074e <atan+0x27e>
 8010508:	a593      	add	r5, pc, #588	@ (adr r5, 8010758 <atan+0x288>)
 801050a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010516:	4bae      	ldr	r3, [pc, #696]	@ (80107d0 <atan+0x300>)
 8010518:	429e      	cmp	r6, r3
 801051a:	d811      	bhi.n	8010540 <atan+0x70>
 801051c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010520:	429e      	cmp	r6, r3
 8010522:	d80a      	bhi.n	801053a <atan+0x6a>
 8010524:	a38e      	add	r3, pc, #568	@ (adr r3, 8010760 <atan+0x290>)
 8010526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052a:	f7ef fe8b 	bl	8000244 <__adddf3>
 801052e:	2200      	movs	r2, #0
 8010530:	4ba8      	ldr	r3, [pc, #672]	@ (80107d4 <atan+0x304>)
 8010532:	f7f0 facd 	bl	8000ad0 <__aeabi_dcmpgt>
 8010536:	2800      	cmp	r0, #0
 8010538:	d1e9      	bne.n	801050e <atan+0x3e>
 801053a:	f04f 3aff 	mov.w	sl, #4294967295
 801053e:	e027      	b.n	8010590 <atan+0xc0>
 8010540:	f000 f956 	bl	80107f0 <fabs>
 8010544:	4ba4      	ldr	r3, [pc, #656]	@ (80107d8 <atan+0x308>)
 8010546:	4604      	mov	r4, r0
 8010548:	429e      	cmp	r6, r3
 801054a:	460d      	mov	r5, r1
 801054c:	f200 80b8 	bhi.w	80106c0 <atan+0x1f0>
 8010550:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010554:	429e      	cmp	r6, r3
 8010556:	f200 809c 	bhi.w	8010692 <atan+0x1c2>
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	f7ef fe71 	bl	8000244 <__adddf3>
 8010562:	2200      	movs	r2, #0
 8010564:	4b9b      	ldr	r3, [pc, #620]	@ (80107d4 <atan+0x304>)
 8010566:	f7ef fe6b 	bl	8000240 <__aeabi_dsub>
 801056a:	2200      	movs	r2, #0
 801056c:	4606      	mov	r6, r0
 801056e:	460f      	mov	r7, r1
 8010570:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010574:	4620      	mov	r0, r4
 8010576:	4629      	mov	r1, r5
 8010578:	f7ef fe64 	bl	8000244 <__adddf3>
 801057c:	4602      	mov	r2, r0
 801057e:	460b      	mov	r3, r1
 8010580:	4630      	mov	r0, r6
 8010582:	4639      	mov	r1, r7
 8010584:	f7f0 f93e 	bl	8000804 <__aeabi_ddiv>
 8010588:	f04f 0a00 	mov.w	sl, #0
 801058c:	4604      	mov	r4, r0
 801058e:	460d      	mov	r5, r1
 8010590:	4622      	mov	r2, r4
 8010592:	462b      	mov	r3, r5
 8010594:	4620      	mov	r0, r4
 8010596:	4629      	mov	r1, r5
 8010598:	f7f0 f80a 	bl	80005b0 <__aeabi_dmul>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	4680      	mov	r8, r0
 80105a2:	4689      	mov	r9, r1
 80105a4:	f7f0 f804 	bl	80005b0 <__aeabi_dmul>
 80105a8:	a36f      	add	r3, pc, #444	@ (adr r3, 8010768 <atan+0x298>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	4606      	mov	r6, r0
 80105b0:	460f      	mov	r7, r1
 80105b2:	f7ef fffd 	bl	80005b0 <__aeabi_dmul>
 80105b6:	a36e      	add	r3, pc, #440	@ (adr r3, 8010770 <atan+0x2a0>)
 80105b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105bc:	f7ef fe42 	bl	8000244 <__adddf3>
 80105c0:	4632      	mov	r2, r6
 80105c2:	463b      	mov	r3, r7
 80105c4:	f7ef fff4 	bl	80005b0 <__aeabi_dmul>
 80105c8:	a36b      	add	r3, pc, #428	@ (adr r3, 8010778 <atan+0x2a8>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7ef fe39 	bl	8000244 <__adddf3>
 80105d2:	4632      	mov	r2, r6
 80105d4:	463b      	mov	r3, r7
 80105d6:	f7ef ffeb 	bl	80005b0 <__aeabi_dmul>
 80105da:	a369      	add	r3, pc, #420	@ (adr r3, 8010780 <atan+0x2b0>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	f7ef fe30 	bl	8000244 <__adddf3>
 80105e4:	4632      	mov	r2, r6
 80105e6:	463b      	mov	r3, r7
 80105e8:	f7ef ffe2 	bl	80005b0 <__aeabi_dmul>
 80105ec:	a366      	add	r3, pc, #408	@ (adr r3, 8010788 <atan+0x2b8>)
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	f7ef fe27 	bl	8000244 <__adddf3>
 80105f6:	4632      	mov	r2, r6
 80105f8:	463b      	mov	r3, r7
 80105fa:	f7ef ffd9 	bl	80005b0 <__aeabi_dmul>
 80105fe:	a364      	add	r3, pc, #400	@ (adr r3, 8010790 <atan+0x2c0>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	f7ef fe1e 	bl	8000244 <__adddf3>
 8010608:	4642      	mov	r2, r8
 801060a:	464b      	mov	r3, r9
 801060c:	f7ef ffd0 	bl	80005b0 <__aeabi_dmul>
 8010610:	a361      	add	r3, pc, #388	@ (adr r3, 8010798 <atan+0x2c8>)
 8010612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010616:	4680      	mov	r8, r0
 8010618:	4689      	mov	r9, r1
 801061a:	4630      	mov	r0, r6
 801061c:	4639      	mov	r1, r7
 801061e:	f7ef ffc7 	bl	80005b0 <__aeabi_dmul>
 8010622:	a35f      	add	r3, pc, #380	@ (adr r3, 80107a0 <atan+0x2d0>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7ef fe0a 	bl	8000240 <__aeabi_dsub>
 801062c:	4632      	mov	r2, r6
 801062e:	463b      	mov	r3, r7
 8010630:	f7ef ffbe 	bl	80005b0 <__aeabi_dmul>
 8010634:	a35c      	add	r3, pc, #368	@ (adr r3, 80107a8 <atan+0x2d8>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	f7ef fe01 	bl	8000240 <__aeabi_dsub>
 801063e:	4632      	mov	r2, r6
 8010640:	463b      	mov	r3, r7
 8010642:	f7ef ffb5 	bl	80005b0 <__aeabi_dmul>
 8010646:	a35a      	add	r3, pc, #360	@ (adr r3, 80107b0 <atan+0x2e0>)
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	f7ef fdf8 	bl	8000240 <__aeabi_dsub>
 8010650:	4632      	mov	r2, r6
 8010652:	463b      	mov	r3, r7
 8010654:	f7ef ffac 	bl	80005b0 <__aeabi_dmul>
 8010658:	a357      	add	r3, pc, #348	@ (adr r3, 80107b8 <atan+0x2e8>)
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	f7ef fdef 	bl	8000240 <__aeabi_dsub>
 8010662:	4632      	mov	r2, r6
 8010664:	463b      	mov	r3, r7
 8010666:	f7ef ffa3 	bl	80005b0 <__aeabi_dmul>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	4640      	mov	r0, r8
 8010670:	4649      	mov	r1, r9
 8010672:	f7ef fde7 	bl	8000244 <__adddf3>
 8010676:	4622      	mov	r2, r4
 8010678:	462b      	mov	r3, r5
 801067a:	f7ef ff99 	bl	80005b0 <__aeabi_dmul>
 801067e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	d144      	bne.n	8010712 <atan+0x242>
 8010688:	4620      	mov	r0, r4
 801068a:	4629      	mov	r1, r5
 801068c:	f7ef fdd8 	bl	8000240 <__aeabi_dsub>
 8010690:	e733      	b.n	80104fa <atan+0x2a>
 8010692:	2200      	movs	r2, #0
 8010694:	4b4f      	ldr	r3, [pc, #316]	@ (80107d4 <atan+0x304>)
 8010696:	f7ef fdd3 	bl	8000240 <__aeabi_dsub>
 801069a:	2200      	movs	r2, #0
 801069c:	4606      	mov	r6, r0
 801069e:	460f      	mov	r7, r1
 80106a0:	4620      	mov	r0, r4
 80106a2:	4629      	mov	r1, r5
 80106a4:	4b4b      	ldr	r3, [pc, #300]	@ (80107d4 <atan+0x304>)
 80106a6:	f7ef fdcd 	bl	8000244 <__adddf3>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	4630      	mov	r0, r6
 80106b0:	4639      	mov	r1, r7
 80106b2:	f7f0 f8a7 	bl	8000804 <__aeabi_ddiv>
 80106b6:	f04f 0a01 	mov.w	sl, #1
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	e767      	b.n	8010590 <atan+0xc0>
 80106c0:	4b46      	ldr	r3, [pc, #280]	@ (80107dc <atan+0x30c>)
 80106c2:	429e      	cmp	r6, r3
 80106c4:	d21a      	bcs.n	80106fc <atan+0x22c>
 80106c6:	2200      	movs	r2, #0
 80106c8:	4b45      	ldr	r3, [pc, #276]	@ (80107e0 <atan+0x310>)
 80106ca:	f7ef fdb9 	bl	8000240 <__aeabi_dsub>
 80106ce:	2200      	movs	r2, #0
 80106d0:	4606      	mov	r6, r0
 80106d2:	460f      	mov	r7, r1
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	4b41      	ldr	r3, [pc, #260]	@ (80107e0 <atan+0x310>)
 80106da:	f7ef ff69 	bl	80005b0 <__aeabi_dmul>
 80106de:	2200      	movs	r2, #0
 80106e0:	4b3c      	ldr	r3, [pc, #240]	@ (80107d4 <atan+0x304>)
 80106e2:	f7ef fdaf 	bl	8000244 <__adddf3>
 80106e6:	4602      	mov	r2, r0
 80106e8:	460b      	mov	r3, r1
 80106ea:	4630      	mov	r0, r6
 80106ec:	4639      	mov	r1, r7
 80106ee:	f7f0 f889 	bl	8000804 <__aeabi_ddiv>
 80106f2:	f04f 0a02 	mov.w	sl, #2
 80106f6:	4604      	mov	r4, r0
 80106f8:	460d      	mov	r5, r1
 80106fa:	e749      	b.n	8010590 <atan+0xc0>
 80106fc:	4602      	mov	r2, r0
 80106fe:	460b      	mov	r3, r1
 8010700:	2000      	movs	r0, #0
 8010702:	4938      	ldr	r1, [pc, #224]	@ (80107e4 <atan+0x314>)
 8010704:	f7f0 f87e 	bl	8000804 <__aeabi_ddiv>
 8010708:	f04f 0a03 	mov.w	sl, #3
 801070c:	4604      	mov	r4, r0
 801070e:	460d      	mov	r5, r1
 8010710:	e73e      	b.n	8010590 <atan+0xc0>
 8010712:	4b35      	ldr	r3, [pc, #212]	@ (80107e8 <atan+0x318>)
 8010714:	4e35      	ldr	r6, [pc, #212]	@ (80107ec <atan+0x31c>)
 8010716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	f7ef fd8f 	bl	8000240 <__aeabi_dsub>
 8010722:	4622      	mov	r2, r4
 8010724:	462b      	mov	r3, r5
 8010726:	f7ef fd8b 	bl	8000240 <__aeabi_dsub>
 801072a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010736:	f7ef fd83 	bl	8000240 <__aeabi_dsub>
 801073a:	f1bb 0f00 	cmp.w	fp, #0
 801073e:	4604      	mov	r4, r0
 8010740:	460d      	mov	r5, r1
 8010742:	f6bf aee4 	bge.w	801050e <atan+0x3e>
 8010746:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801074a:	461d      	mov	r5, r3
 801074c:	e6df      	b.n	801050e <atan+0x3e>
 801074e:	a51c      	add	r5, pc, #112	@ (adr r5, 80107c0 <atan+0x2f0>)
 8010750:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010754:	e6db      	b.n	801050e <atan+0x3e>
 8010756:	bf00      	nop
 8010758:	54442d18 	.word	0x54442d18
 801075c:	3ff921fb 	.word	0x3ff921fb
 8010760:	8800759c 	.word	0x8800759c
 8010764:	7e37e43c 	.word	0x7e37e43c
 8010768:	e322da11 	.word	0xe322da11
 801076c:	3f90ad3a 	.word	0x3f90ad3a
 8010770:	24760deb 	.word	0x24760deb
 8010774:	3fa97b4b 	.word	0x3fa97b4b
 8010778:	a0d03d51 	.word	0xa0d03d51
 801077c:	3fb10d66 	.word	0x3fb10d66
 8010780:	c54c206e 	.word	0xc54c206e
 8010784:	3fb745cd 	.word	0x3fb745cd
 8010788:	920083ff 	.word	0x920083ff
 801078c:	3fc24924 	.word	0x3fc24924
 8010790:	5555550d 	.word	0x5555550d
 8010794:	3fd55555 	.word	0x3fd55555
 8010798:	2c6a6c2f 	.word	0x2c6a6c2f
 801079c:	bfa2b444 	.word	0xbfa2b444
 80107a0:	52defd9a 	.word	0x52defd9a
 80107a4:	3fadde2d 	.word	0x3fadde2d
 80107a8:	af749a6d 	.word	0xaf749a6d
 80107ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80107b0:	fe231671 	.word	0xfe231671
 80107b4:	3fbc71c6 	.word	0x3fbc71c6
 80107b8:	9998ebc4 	.word	0x9998ebc4
 80107bc:	3fc99999 	.word	0x3fc99999
 80107c0:	54442d18 	.word	0x54442d18
 80107c4:	bff921fb 	.word	0xbff921fb
 80107c8:	440fffff 	.word	0x440fffff
 80107cc:	7ff00000 	.word	0x7ff00000
 80107d0:	3fdbffff 	.word	0x3fdbffff
 80107d4:	3ff00000 	.word	0x3ff00000
 80107d8:	3ff2ffff 	.word	0x3ff2ffff
 80107dc:	40038000 	.word	0x40038000
 80107e0:	3ff80000 	.word	0x3ff80000
 80107e4:	bff00000 	.word	0xbff00000
 80107e8:	080127c8 	.word	0x080127c8
 80107ec:	080127e8 	.word	0x080127e8

080107f0 <fabs>:
 80107f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80107f4:	4619      	mov	r1, r3
 80107f6:	4770      	bx	lr

080107f8 <__kernel_cosf>:
 80107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8010800:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8010804:	4606      	mov	r6, r0
 8010806:	4688      	mov	r8, r1
 8010808:	d203      	bcs.n	8010812 <__kernel_cosf+0x1a>
 801080a:	f7f0 fced 	bl	80011e8 <__aeabi_f2iz>
 801080e:	2800      	cmp	r0, #0
 8010810:	d05c      	beq.n	80108cc <__kernel_cosf+0xd4>
 8010812:	4631      	mov	r1, r6
 8010814:	4630      	mov	r0, r6
 8010816:	f7f0 fb21 	bl	8000e5c <__aeabi_fmul>
 801081a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801081e:	4604      	mov	r4, r0
 8010820:	f7f0 fb1c 	bl	8000e5c <__aeabi_fmul>
 8010824:	492b      	ldr	r1, [pc, #172]	@ (80108d4 <__kernel_cosf+0xdc>)
 8010826:	4607      	mov	r7, r0
 8010828:	4620      	mov	r0, r4
 801082a:	f7f0 fb17 	bl	8000e5c <__aeabi_fmul>
 801082e:	492a      	ldr	r1, [pc, #168]	@ (80108d8 <__kernel_cosf+0xe0>)
 8010830:	f7f0 fa0c 	bl	8000c4c <__addsf3>
 8010834:	4621      	mov	r1, r4
 8010836:	f7f0 fb11 	bl	8000e5c <__aeabi_fmul>
 801083a:	4928      	ldr	r1, [pc, #160]	@ (80108dc <__kernel_cosf+0xe4>)
 801083c:	f7f0 fa04 	bl	8000c48 <__aeabi_fsub>
 8010840:	4621      	mov	r1, r4
 8010842:	f7f0 fb0b 	bl	8000e5c <__aeabi_fmul>
 8010846:	4926      	ldr	r1, [pc, #152]	@ (80108e0 <__kernel_cosf+0xe8>)
 8010848:	f7f0 fa00 	bl	8000c4c <__addsf3>
 801084c:	4621      	mov	r1, r4
 801084e:	f7f0 fb05 	bl	8000e5c <__aeabi_fmul>
 8010852:	4924      	ldr	r1, [pc, #144]	@ (80108e4 <__kernel_cosf+0xec>)
 8010854:	f7f0 f9f8 	bl	8000c48 <__aeabi_fsub>
 8010858:	4621      	mov	r1, r4
 801085a:	f7f0 faff 	bl	8000e5c <__aeabi_fmul>
 801085e:	4922      	ldr	r1, [pc, #136]	@ (80108e8 <__kernel_cosf+0xf0>)
 8010860:	f7f0 f9f4 	bl	8000c4c <__addsf3>
 8010864:	4621      	mov	r1, r4
 8010866:	f7f0 faf9 	bl	8000e5c <__aeabi_fmul>
 801086a:	4621      	mov	r1, r4
 801086c:	f7f0 faf6 	bl	8000e5c <__aeabi_fmul>
 8010870:	4641      	mov	r1, r8
 8010872:	4604      	mov	r4, r0
 8010874:	4630      	mov	r0, r6
 8010876:	f7f0 faf1 	bl	8000e5c <__aeabi_fmul>
 801087a:	4601      	mov	r1, r0
 801087c:	4620      	mov	r0, r4
 801087e:	f7f0 f9e3 	bl	8000c48 <__aeabi_fsub>
 8010882:	4b1a      	ldr	r3, [pc, #104]	@ (80108ec <__kernel_cosf+0xf4>)
 8010884:	4604      	mov	r4, r0
 8010886:	429d      	cmp	r5, r3
 8010888:	d80a      	bhi.n	80108a0 <__kernel_cosf+0xa8>
 801088a:	4601      	mov	r1, r0
 801088c:	4638      	mov	r0, r7
 801088e:	f7f0 f9db 	bl	8000c48 <__aeabi_fsub>
 8010892:	4601      	mov	r1, r0
 8010894:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8010898:	f7f0 f9d6 	bl	8000c48 <__aeabi_fsub>
 801089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a0:	4b13      	ldr	r3, [pc, #76]	@ (80108f0 <__kernel_cosf+0xf8>)
 80108a2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80108a6:	429d      	cmp	r5, r3
 80108a8:	bf8c      	ite	hi
 80108aa:	4d12      	ldrhi	r5, [pc, #72]	@ (80108f4 <__kernel_cosf+0xfc>)
 80108ac:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80108b0:	4629      	mov	r1, r5
 80108b2:	f7f0 f9c9 	bl	8000c48 <__aeabi_fsub>
 80108b6:	4629      	mov	r1, r5
 80108b8:	4606      	mov	r6, r0
 80108ba:	4638      	mov	r0, r7
 80108bc:	f7f0 f9c4 	bl	8000c48 <__aeabi_fsub>
 80108c0:	4621      	mov	r1, r4
 80108c2:	f7f0 f9c1 	bl	8000c48 <__aeabi_fsub>
 80108c6:	4601      	mov	r1, r0
 80108c8:	4630      	mov	r0, r6
 80108ca:	e7e5      	b.n	8010898 <__kernel_cosf+0xa0>
 80108cc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80108d0:	e7e4      	b.n	801089c <__kernel_cosf+0xa4>
 80108d2:	bf00      	nop
 80108d4:	ad47d74e 	.word	0xad47d74e
 80108d8:	310f74f6 	.word	0x310f74f6
 80108dc:	3493f27c 	.word	0x3493f27c
 80108e0:	37d00d01 	.word	0x37d00d01
 80108e4:	3ab60b61 	.word	0x3ab60b61
 80108e8:	3d2aaaab 	.word	0x3d2aaaab
 80108ec:	3e999999 	.word	0x3e999999
 80108f0:	3f480000 	.word	0x3f480000
 80108f4:	3e900000 	.word	0x3e900000

080108f8 <__kernel_sinf>:
 80108f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010900:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010904:	4604      	mov	r4, r0
 8010906:	460f      	mov	r7, r1
 8010908:	4691      	mov	r9, r2
 801090a:	d203      	bcs.n	8010914 <__kernel_sinf+0x1c>
 801090c:	f7f0 fc6c 	bl	80011e8 <__aeabi_f2iz>
 8010910:	2800      	cmp	r0, #0
 8010912:	d035      	beq.n	8010980 <__kernel_sinf+0x88>
 8010914:	4621      	mov	r1, r4
 8010916:	4620      	mov	r0, r4
 8010918:	f7f0 faa0 	bl	8000e5c <__aeabi_fmul>
 801091c:	4605      	mov	r5, r0
 801091e:	4601      	mov	r1, r0
 8010920:	4620      	mov	r0, r4
 8010922:	f7f0 fa9b 	bl	8000e5c <__aeabi_fmul>
 8010926:	4929      	ldr	r1, [pc, #164]	@ (80109cc <__kernel_sinf+0xd4>)
 8010928:	4606      	mov	r6, r0
 801092a:	4628      	mov	r0, r5
 801092c:	f7f0 fa96 	bl	8000e5c <__aeabi_fmul>
 8010930:	4927      	ldr	r1, [pc, #156]	@ (80109d0 <__kernel_sinf+0xd8>)
 8010932:	f7f0 f989 	bl	8000c48 <__aeabi_fsub>
 8010936:	4629      	mov	r1, r5
 8010938:	f7f0 fa90 	bl	8000e5c <__aeabi_fmul>
 801093c:	4925      	ldr	r1, [pc, #148]	@ (80109d4 <__kernel_sinf+0xdc>)
 801093e:	f7f0 f985 	bl	8000c4c <__addsf3>
 8010942:	4629      	mov	r1, r5
 8010944:	f7f0 fa8a 	bl	8000e5c <__aeabi_fmul>
 8010948:	4923      	ldr	r1, [pc, #140]	@ (80109d8 <__kernel_sinf+0xe0>)
 801094a:	f7f0 f97d 	bl	8000c48 <__aeabi_fsub>
 801094e:	4629      	mov	r1, r5
 8010950:	f7f0 fa84 	bl	8000e5c <__aeabi_fmul>
 8010954:	4921      	ldr	r1, [pc, #132]	@ (80109dc <__kernel_sinf+0xe4>)
 8010956:	f7f0 f979 	bl	8000c4c <__addsf3>
 801095a:	4680      	mov	r8, r0
 801095c:	f1b9 0f00 	cmp.w	r9, #0
 8010960:	d111      	bne.n	8010986 <__kernel_sinf+0x8e>
 8010962:	4601      	mov	r1, r0
 8010964:	4628      	mov	r0, r5
 8010966:	f7f0 fa79 	bl	8000e5c <__aeabi_fmul>
 801096a:	491d      	ldr	r1, [pc, #116]	@ (80109e0 <__kernel_sinf+0xe8>)
 801096c:	f7f0 f96c 	bl	8000c48 <__aeabi_fsub>
 8010970:	4631      	mov	r1, r6
 8010972:	f7f0 fa73 	bl	8000e5c <__aeabi_fmul>
 8010976:	4601      	mov	r1, r0
 8010978:	4620      	mov	r0, r4
 801097a:	f7f0 f967 	bl	8000c4c <__addsf3>
 801097e:	4604      	mov	r4, r0
 8010980:	4620      	mov	r0, r4
 8010982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010986:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801098a:	4638      	mov	r0, r7
 801098c:	f7f0 fa66 	bl	8000e5c <__aeabi_fmul>
 8010990:	4641      	mov	r1, r8
 8010992:	4681      	mov	r9, r0
 8010994:	4630      	mov	r0, r6
 8010996:	f7f0 fa61 	bl	8000e5c <__aeabi_fmul>
 801099a:	4601      	mov	r1, r0
 801099c:	4648      	mov	r0, r9
 801099e:	f7f0 f953 	bl	8000c48 <__aeabi_fsub>
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7f0 fa5a 	bl	8000e5c <__aeabi_fmul>
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7f0 f94d 	bl	8000c48 <__aeabi_fsub>
 80109ae:	490c      	ldr	r1, [pc, #48]	@ (80109e0 <__kernel_sinf+0xe8>)
 80109b0:	4605      	mov	r5, r0
 80109b2:	4630      	mov	r0, r6
 80109b4:	f7f0 fa52 	bl	8000e5c <__aeabi_fmul>
 80109b8:	4601      	mov	r1, r0
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7f0 f946 	bl	8000c4c <__addsf3>
 80109c0:	4601      	mov	r1, r0
 80109c2:	4620      	mov	r0, r4
 80109c4:	f7f0 f940 	bl	8000c48 <__aeabi_fsub>
 80109c8:	e7d9      	b.n	801097e <__kernel_sinf+0x86>
 80109ca:	bf00      	nop
 80109cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80109d0:	32d72f34 	.word	0x32d72f34
 80109d4:	3638ef1b 	.word	0x3638ef1b
 80109d8:	39500d01 	.word	0x39500d01
 80109dc:	3c088889 	.word	0x3c088889
 80109e0:	3e2aaaab 	.word	0x3e2aaaab

080109e4 <__ieee754_rem_pio2f>:
 80109e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e8:	4aa4      	ldr	r2, [pc, #656]	@ (8010c7c <__ieee754_rem_pio2f+0x298>)
 80109ea:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80109ee:	4590      	cmp	r8, r2
 80109f0:	460c      	mov	r4, r1
 80109f2:	4682      	mov	sl, r0
 80109f4:	b087      	sub	sp, #28
 80109f6:	d804      	bhi.n	8010a02 <__ieee754_rem_pio2f+0x1e>
 80109f8:	2300      	movs	r3, #0
 80109fa:	6008      	str	r0, [r1, #0]
 80109fc:	604b      	str	r3, [r1, #4]
 80109fe:	2500      	movs	r5, #0
 8010a00:	e01d      	b.n	8010a3e <__ieee754_rem_pio2f+0x5a>
 8010a02:	4a9f      	ldr	r2, [pc, #636]	@ (8010c80 <__ieee754_rem_pio2f+0x29c>)
 8010a04:	4590      	cmp	r8, r2
 8010a06:	d84f      	bhi.n	8010aa8 <__ieee754_rem_pio2f+0xc4>
 8010a08:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	499d      	ldr	r1, [pc, #628]	@ (8010c84 <__ieee754_rem_pio2f+0x2a0>)
 8010a10:	4f9d      	ldr	r7, [pc, #628]	@ (8010c88 <__ieee754_rem_pio2f+0x2a4>)
 8010a12:	f025 050f 	bic.w	r5, r5, #15
 8010a16:	dd24      	ble.n	8010a62 <__ieee754_rem_pio2f+0x7e>
 8010a18:	f7f0 f916 	bl	8000c48 <__aeabi_fsub>
 8010a1c:	42bd      	cmp	r5, r7
 8010a1e:	4606      	mov	r6, r0
 8010a20:	d011      	beq.n	8010a46 <__ieee754_rem_pio2f+0x62>
 8010a22:	499a      	ldr	r1, [pc, #616]	@ (8010c8c <__ieee754_rem_pio2f+0x2a8>)
 8010a24:	f7f0 f910 	bl	8000c48 <__aeabi_fsub>
 8010a28:	4601      	mov	r1, r0
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7f0 f90b 	bl	8000c48 <__aeabi_fsub>
 8010a32:	4996      	ldr	r1, [pc, #600]	@ (8010c8c <__ieee754_rem_pio2f+0x2a8>)
 8010a34:	f7f0 f908 	bl	8000c48 <__aeabi_fsub>
 8010a38:	6025      	str	r5, [r4, #0]
 8010a3a:	2501      	movs	r5, #1
 8010a3c:	6060      	str	r0, [r4, #4]
 8010a3e:	4628      	mov	r0, r5
 8010a40:	b007      	add	sp, #28
 8010a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a46:	4992      	ldr	r1, [pc, #584]	@ (8010c90 <__ieee754_rem_pio2f+0x2ac>)
 8010a48:	f7f0 f8fe 	bl	8000c48 <__aeabi_fsub>
 8010a4c:	4991      	ldr	r1, [pc, #580]	@ (8010c94 <__ieee754_rem_pio2f+0x2b0>)
 8010a4e:	4606      	mov	r6, r0
 8010a50:	f7f0 f8fa 	bl	8000c48 <__aeabi_fsub>
 8010a54:	4601      	mov	r1, r0
 8010a56:	4605      	mov	r5, r0
 8010a58:	4630      	mov	r0, r6
 8010a5a:	f7f0 f8f5 	bl	8000c48 <__aeabi_fsub>
 8010a5e:	498d      	ldr	r1, [pc, #564]	@ (8010c94 <__ieee754_rem_pio2f+0x2b0>)
 8010a60:	e7e8      	b.n	8010a34 <__ieee754_rem_pio2f+0x50>
 8010a62:	f7f0 f8f3 	bl	8000c4c <__addsf3>
 8010a66:	42bd      	cmp	r5, r7
 8010a68:	4606      	mov	r6, r0
 8010a6a:	d00f      	beq.n	8010a8c <__ieee754_rem_pio2f+0xa8>
 8010a6c:	4987      	ldr	r1, [pc, #540]	@ (8010c8c <__ieee754_rem_pio2f+0x2a8>)
 8010a6e:	f7f0 f8ed 	bl	8000c4c <__addsf3>
 8010a72:	4601      	mov	r1, r0
 8010a74:	4605      	mov	r5, r0
 8010a76:	4630      	mov	r0, r6
 8010a78:	f7f0 f8e6 	bl	8000c48 <__aeabi_fsub>
 8010a7c:	4983      	ldr	r1, [pc, #524]	@ (8010c8c <__ieee754_rem_pio2f+0x2a8>)
 8010a7e:	f7f0 f8e5 	bl	8000c4c <__addsf3>
 8010a82:	6025      	str	r5, [r4, #0]
 8010a84:	6060      	str	r0, [r4, #4]
 8010a86:	f04f 35ff 	mov.w	r5, #4294967295
 8010a8a:	e7d8      	b.n	8010a3e <__ieee754_rem_pio2f+0x5a>
 8010a8c:	4980      	ldr	r1, [pc, #512]	@ (8010c90 <__ieee754_rem_pio2f+0x2ac>)
 8010a8e:	f7f0 f8dd 	bl	8000c4c <__addsf3>
 8010a92:	4980      	ldr	r1, [pc, #512]	@ (8010c94 <__ieee754_rem_pio2f+0x2b0>)
 8010a94:	4606      	mov	r6, r0
 8010a96:	f7f0 f8d9 	bl	8000c4c <__addsf3>
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	4605      	mov	r5, r0
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7f0 f8d2 	bl	8000c48 <__aeabi_fsub>
 8010aa4:	497b      	ldr	r1, [pc, #492]	@ (8010c94 <__ieee754_rem_pio2f+0x2b0>)
 8010aa6:	e7ea      	b.n	8010a7e <__ieee754_rem_pio2f+0x9a>
 8010aa8:	4a7b      	ldr	r2, [pc, #492]	@ (8010c98 <__ieee754_rem_pio2f+0x2b4>)
 8010aaa:	4590      	cmp	r8, r2
 8010aac:	f200 8095 	bhi.w	8010bda <__ieee754_rem_pio2f+0x1f6>
 8010ab0:	f000 f8fe 	bl	8010cb0 <fabsf>
 8010ab4:	4979      	ldr	r1, [pc, #484]	@ (8010c9c <__ieee754_rem_pio2f+0x2b8>)
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	f7f0 f9d0 	bl	8000e5c <__aeabi_fmul>
 8010abc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8010ac0:	f7f0 f8c4 	bl	8000c4c <__addsf3>
 8010ac4:	f7f0 fb90 	bl	80011e8 <__aeabi_f2iz>
 8010ac8:	4605      	mov	r5, r0
 8010aca:	f7f0 f973 	bl	8000db4 <__aeabi_i2f>
 8010ace:	496d      	ldr	r1, [pc, #436]	@ (8010c84 <__ieee754_rem_pio2f+0x2a0>)
 8010ad0:	4681      	mov	r9, r0
 8010ad2:	f7f0 f9c3 	bl	8000e5c <__aeabi_fmul>
 8010ad6:	4601      	mov	r1, r0
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f7f0 f8b5 	bl	8000c48 <__aeabi_fsub>
 8010ade:	496b      	ldr	r1, [pc, #428]	@ (8010c8c <__ieee754_rem_pio2f+0x2a8>)
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	4648      	mov	r0, r9
 8010ae4:	f7f0 f9ba 	bl	8000e5c <__aeabi_fmul>
 8010ae8:	2d1f      	cmp	r5, #31
 8010aea:	4606      	mov	r6, r0
 8010aec:	dc0e      	bgt.n	8010b0c <__ieee754_rem_pio2f+0x128>
 8010aee:	4a6c      	ldr	r2, [pc, #432]	@ (8010ca0 <__ieee754_rem_pio2f+0x2bc>)
 8010af0:	1e69      	subs	r1, r5, #1
 8010af2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010af6:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8010afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d004      	beq.n	8010b0c <__ieee754_rem_pio2f+0x128>
 8010b02:	4631      	mov	r1, r6
 8010b04:	4638      	mov	r0, r7
 8010b06:	f7f0 f89f 	bl	8000c48 <__aeabi_fsub>
 8010b0a:	e00b      	b.n	8010b24 <__ieee754_rem_pio2f+0x140>
 8010b0c:	4631      	mov	r1, r6
 8010b0e:	4638      	mov	r0, r7
 8010b10:	f7f0 f89a 	bl	8000c48 <__aeabi_fsub>
 8010b14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010b18:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8010b1c:	2b08      	cmp	r3, #8
 8010b1e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8010b22:	dc01      	bgt.n	8010b28 <__ieee754_rem_pio2f+0x144>
 8010b24:	6020      	str	r0, [r4, #0]
 8010b26:	e026      	b.n	8010b76 <__ieee754_rem_pio2f+0x192>
 8010b28:	4959      	ldr	r1, [pc, #356]	@ (8010c90 <__ieee754_rem_pio2f+0x2ac>)
 8010b2a:	4648      	mov	r0, r9
 8010b2c:	f7f0 f996 	bl	8000e5c <__aeabi_fmul>
 8010b30:	4606      	mov	r6, r0
 8010b32:	4601      	mov	r1, r0
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7f0 f887 	bl	8000c48 <__aeabi_fsub>
 8010b3a:	4601      	mov	r1, r0
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	4638      	mov	r0, r7
 8010b40:	f7f0 f882 	bl	8000c48 <__aeabi_fsub>
 8010b44:	4631      	mov	r1, r6
 8010b46:	f7f0 f87f 	bl	8000c48 <__aeabi_fsub>
 8010b4a:	4606      	mov	r6, r0
 8010b4c:	4951      	ldr	r1, [pc, #324]	@ (8010c94 <__ieee754_rem_pio2f+0x2b0>)
 8010b4e:	4648      	mov	r0, r9
 8010b50:	f7f0 f984 	bl	8000e5c <__aeabi_fmul>
 8010b54:	4631      	mov	r1, r6
 8010b56:	f7f0 f877 	bl	8000c48 <__aeabi_fsub>
 8010b5a:	4601      	mov	r1, r0
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	4640      	mov	r0, r8
 8010b60:	f7f0 f872 	bl	8000c48 <__aeabi_fsub>
 8010b64:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010b68:	ebab 0b03 	sub.w	fp, fp, r3
 8010b6c:	f1bb 0f19 	cmp.w	fp, #25
 8010b70:	dc18      	bgt.n	8010ba4 <__ieee754_rem_pio2f+0x1c0>
 8010b72:	4647      	mov	r7, r8
 8010b74:	6020      	str	r0, [r4, #0]
 8010b76:	f8d4 8000 	ldr.w	r8, [r4]
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	4641      	mov	r1, r8
 8010b7e:	f7f0 f863 	bl	8000c48 <__aeabi_fsub>
 8010b82:	4631      	mov	r1, r6
 8010b84:	f7f0 f860 	bl	8000c48 <__aeabi_fsub>
 8010b88:	f1ba 0f00 	cmp.w	sl, #0
 8010b8c:	6060      	str	r0, [r4, #4]
 8010b8e:	f6bf af56 	bge.w	8010a3e <__ieee754_rem_pio2f+0x5a>
 8010b92:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8010b96:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8010b9a:	f8c4 8000 	str.w	r8, [r4]
 8010b9e:	6060      	str	r0, [r4, #4]
 8010ba0:	426d      	negs	r5, r5
 8010ba2:	e74c      	b.n	8010a3e <__ieee754_rem_pio2f+0x5a>
 8010ba4:	493f      	ldr	r1, [pc, #252]	@ (8010ca4 <__ieee754_rem_pio2f+0x2c0>)
 8010ba6:	4648      	mov	r0, r9
 8010ba8:	f7f0 f958 	bl	8000e5c <__aeabi_fmul>
 8010bac:	4606      	mov	r6, r0
 8010bae:	4601      	mov	r1, r0
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	f7f0 f849 	bl	8000c48 <__aeabi_fsub>
 8010bb6:	4601      	mov	r1, r0
 8010bb8:	4607      	mov	r7, r0
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7f0 f844 	bl	8000c48 <__aeabi_fsub>
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	f7f0 f841 	bl	8000c48 <__aeabi_fsub>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	4937      	ldr	r1, [pc, #220]	@ (8010ca8 <__ieee754_rem_pio2f+0x2c4>)
 8010bca:	4648      	mov	r0, r9
 8010bcc:	f7f0 f946 	bl	8000e5c <__aeabi_fmul>
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	f7f0 f839 	bl	8000c48 <__aeabi_fsub>
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	e793      	b.n	8010b02 <__ieee754_rem_pio2f+0x11e>
 8010bda:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010bde:	d305      	bcc.n	8010bec <__ieee754_rem_pio2f+0x208>
 8010be0:	4601      	mov	r1, r0
 8010be2:	f7f0 f831 	bl	8000c48 <__aeabi_fsub>
 8010be6:	6060      	str	r0, [r4, #4]
 8010be8:	6020      	str	r0, [r4, #0]
 8010bea:	e708      	b.n	80109fe <__ieee754_rem_pio2f+0x1a>
 8010bec:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8010bf0:	3e86      	subs	r6, #134	@ 0x86
 8010bf2:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	f7f0 faf6 	bl	80011e8 <__aeabi_f2iz>
 8010bfc:	f7f0 f8da 	bl	8000db4 <__aeabi_i2f>
 8010c00:	4601      	mov	r1, r0
 8010c02:	9003      	str	r0, [sp, #12]
 8010c04:	4640      	mov	r0, r8
 8010c06:	f7f0 f81f 	bl	8000c48 <__aeabi_fsub>
 8010c0a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8010c0e:	f7f0 f925 	bl	8000e5c <__aeabi_fmul>
 8010c12:	4607      	mov	r7, r0
 8010c14:	f7f0 fae8 	bl	80011e8 <__aeabi_f2iz>
 8010c18:	f7f0 f8cc 	bl	8000db4 <__aeabi_i2f>
 8010c1c:	4601      	mov	r1, r0
 8010c1e:	9004      	str	r0, [sp, #16]
 8010c20:	4605      	mov	r5, r0
 8010c22:	4638      	mov	r0, r7
 8010c24:	f7f0 f810 	bl	8000c48 <__aeabi_fsub>
 8010c28:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8010c2c:	f7f0 f916 	bl	8000e5c <__aeabi_fmul>
 8010c30:	2100      	movs	r1, #0
 8010c32:	9005      	str	r0, [sp, #20]
 8010c34:	f7f0 faa6 	bl	8001184 <__aeabi_fcmpeq>
 8010c38:	b1f0      	cbz	r0, 8010c78 <__ieee754_rem_pio2f+0x294>
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	f7f0 faa1 	bl	8001184 <__aeabi_fcmpeq>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	bf14      	ite	ne
 8010c46:	2301      	movne	r3, #1
 8010c48:	2302      	moveq	r3, #2
 8010c4a:	4a18      	ldr	r2, [pc, #96]	@ (8010cac <__ieee754_rem_pio2f+0x2c8>)
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	9201      	str	r2, [sp, #4]
 8010c50:	2202      	movs	r2, #2
 8010c52:	a803      	add	r0, sp, #12
 8010c54:	9200      	str	r2, [sp, #0]
 8010c56:	4632      	mov	r2, r6
 8010c58:	f000 fb52 	bl	8011300 <__kernel_rem_pio2f>
 8010c5c:	f1ba 0f00 	cmp.w	sl, #0
 8010c60:	4605      	mov	r5, r0
 8010c62:	f6bf aeec 	bge.w	8010a3e <__ieee754_rem_pio2f+0x5a>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	6863      	ldr	r3, [r4, #4]
 8010c70:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010c74:	6063      	str	r3, [r4, #4]
 8010c76:	e793      	b.n	8010ba0 <__ieee754_rem_pio2f+0x1bc>
 8010c78:	2303      	movs	r3, #3
 8010c7a:	e7e6      	b.n	8010c4a <__ieee754_rem_pio2f+0x266>
 8010c7c:	3f490fd8 	.word	0x3f490fd8
 8010c80:	4016cbe3 	.word	0x4016cbe3
 8010c84:	3fc90f80 	.word	0x3fc90f80
 8010c88:	3fc90fd0 	.word	0x3fc90fd0
 8010c8c:	37354443 	.word	0x37354443
 8010c90:	37354400 	.word	0x37354400
 8010c94:	2e85a308 	.word	0x2e85a308
 8010c98:	43490f80 	.word	0x43490f80
 8010c9c:	3f22f984 	.word	0x3f22f984
 8010ca0:	08012808 	.word	0x08012808
 8010ca4:	2e85a300 	.word	0x2e85a300
 8010ca8:	248d3132 	.word	0x248d3132
 8010cac:	08012888 	.word	0x08012888

08010cb0 <fabsf>:
 8010cb0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010cb4:	4770      	bx	lr
	...

08010cb8 <__kernel_rem_pio2>:
 8010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010cc0:	9308      	str	r3, [sp, #32]
 8010cc2:	9104      	str	r1, [sp, #16]
 8010cc4:	4bb6      	ldr	r3, [pc, #728]	@ (8010fa0 <__kernel_rem_pio2+0x2e8>)
 8010cc6:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8010cc8:	f112 0f14 	cmn.w	r2, #20
 8010ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010cd0:	bfa8      	it	ge
 8010cd2:	1ed4      	subge	r4, r2, #3
 8010cd4:	9302      	str	r3, [sp, #8]
 8010cd6:	9b08      	ldr	r3, [sp, #32]
 8010cd8:	bfb8      	it	lt
 8010cda:	2400      	movlt	r4, #0
 8010cdc:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ce0:	9306      	str	r3, [sp, #24]
 8010ce2:	bfa4      	itt	ge
 8010ce4:	2318      	movge	r3, #24
 8010ce6:	fb94 f4f3 	sdivge	r4, r4, r3
 8010cea:	f06f 0317 	mvn.w	r3, #23
 8010cee:	fb04 3303 	mla	r3, r4, r3, r3
 8010cf2:	eb03 0a02 	add.w	sl, r3, r2
 8010cf6:	9a06      	ldr	r2, [sp, #24]
 8010cf8:	9b02      	ldr	r3, [sp, #8]
 8010cfa:	1aa7      	subs	r7, r4, r2
 8010cfc:	eb03 0802 	add.w	r8, r3, r2
 8010d00:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8010d02:	2500      	movs	r5, #0
 8010d04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010d08:	2200      	movs	r2, #0
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8010d0e:	ae20      	add	r6, sp, #128	@ 0x80
 8010d10:	4545      	cmp	r5, r8
 8010d12:	dd14      	ble.n	8010d3e <__kernel_rem_pio2+0x86>
 8010d14:	f04f 0800 	mov.w	r8, #0
 8010d18:	9a08      	ldr	r2, [sp, #32]
 8010d1a:	ab20      	add	r3, sp, #128	@ 0x80
 8010d1c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8010d20:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8010d24:	9b02      	ldr	r3, [sp, #8]
 8010d26:	4598      	cmp	r8, r3
 8010d28:	dc35      	bgt.n	8010d96 <__kernel_rem_pio2+0xde>
 8010d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f1a3 0908 	sub.w	r9, r3, #8
 8010d32:	2300      	movs	r3, #0
 8010d34:	462f      	mov	r7, r5
 8010d36:	2600      	movs	r6, #0
 8010d38:	e9cd 2300 	strd	r2, r3, [sp]
 8010d3c:	e01f      	b.n	8010d7e <__kernel_rem_pio2+0xc6>
 8010d3e:	42ef      	cmn	r7, r5
 8010d40:	d40b      	bmi.n	8010d5a <__kernel_rem_pio2+0xa2>
 8010d42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010d46:	e9cd 2300 	strd	r2, r3, [sp]
 8010d4a:	f7ef fbc7 	bl	80004dc <__aeabi_i2d>
 8010d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010d56:	3501      	adds	r5, #1
 8010d58:	e7da      	b.n	8010d10 <__kernel_rem_pio2+0x58>
 8010d5a:	4610      	mov	r0, r2
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	e7f8      	b.n	8010d52 <__kernel_rem_pio2+0x9a>
 8010d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d64:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8010d68:	f7ef fc22 	bl	80005b0 <__aeabi_dmul>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d74:	f7ef fa66 	bl	8000244 <__adddf3>
 8010d78:	e9cd 0100 	strd	r0, r1, [sp]
 8010d7c:	3601      	adds	r6, #1
 8010d7e:	9b06      	ldr	r3, [sp, #24]
 8010d80:	3f08      	subs	r7, #8
 8010d82:	429e      	cmp	r6, r3
 8010d84:	ddec      	ble.n	8010d60 <__kernel_rem_pio2+0xa8>
 8010d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d8a:	f108 0801 	add.w	r8, r8, #1
 8010d8e:	e8eb 2302 	strd	r2, r3, [fp], #8
 8010d92:	3508      	adds	r5, #8
 8010d94:	e7c6      	b.n	8010d24 <__kernel_rem_pio2+0x6c>
 8010d96:	9b02      	ldr	r3, [sp, #8]
 8010d98:	aa0c      	add	r2, sp, #48	@ 0x30
 8010d9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010da0:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8010da2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010da6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8010dac:	ab98      	add	r3, sp, #608	@ 0x260
 8010dae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010db2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8010db6:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010dbc:	ae0c      	add	r6, sp, #48	@ 0x30
 8010dbe:	4698      	mov	r8, r3
 8010dc0:	46b1      	mov	r9, r6
 8010dc2:	465f      	mov	r7, fp
 8010dc4:	9307      	str	r3, [sp, #28]
 8010dc6:	2f00      	cmp	r7, #0
 8010dc8:	f1a8 0808 	sub.w	r8, r8, #8
 8010dcc:	dc71      	bgt.n	8010eb2 <__kernel_rem_pio2+0x1fa>
 8010dce:	4652      	mov	r2, sl
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	f000 fd34 	bl	8011840 <scalbn>
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010dde:	4604      	mov	r4, r0
 8010de0:	460d      	mov	r5, r1
 8010de2:	f7ef fbe5 	bl	80005b0 <__aeabi_dmul>
 8010de6:	f000 fdef 	bl	80119c8 <floor>
 8010dea:	2200      	movs	r2, #0
 8010dec:	4b6d      	ldr	r3, [pc, #436]	@ (8010fa4 <__kernel_rem_pio2+0x2ec>)
 8010dee:	f7ef fbdf 	bl	80005b0 <__aeabi_dmul>
 8010df2:	4602      	mov	r2, r0
 8010df4:	460b      	mov	r3, r1
 8010df6:	4620      	mov	r0, r4
 8010df8:	4629      	mov	r1, r5
 8010dfa:	f7ef fa21 	bl	8000240 <__aeabi_dsub>
 8010dfe:	460d      	mov	r5, r1
 8010e00:	4604      	mov	r4, r0
 8010e02:	f7ef fe85 	bl	8000b10 <__aeabi_d2iz>
 8010e06:	9005      	str	r0, [sp, #20]
 8010e08:	f7ef fb68 	bl	80004dc <__aeabi_i2d>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	4620      	mov	r0, r4
 8010e12:	4629      	mov	r1, r5
 8010e14:	f7ef fa14 	bl	8000240 <__aeabi_dsub>
 8010e18:	f1ba 0f00 	cmp.w	sl, #0
 8010e1c:	4680      	mov	r8, r0
 8010e1e:	4689      	mov	r9, r1
 8010e20:	dd6d      	ble.n	8010efe <__kernel_rem_pio2+0x246>
 8010e22:	f10b 31ff 	add.w	r1, fp, #4294967295
 8010e26:	ab0c      	add	r3, sp, #48	@ 0x30
 8010e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e2c:	9c05      	ldr	r4, [sp, #20]
 8010e2e:	f1ca 0018 	rsb	r0, sl, #24
 8010e32:	fa43 f200 	asr.w	r2, r3, r0
 8010e36:	4414      	add	r4, r2
 8010e38:	4082      	lsls	r2, r0
 8010e3a:	1a9b      	subs	r3, r3, r2
 8010e3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010e42:	f1ca 0217 	rsb	r2, sl, #23
 8010e46:	9405      	str	r4, [sp, #20]
 8010e48:	4113      	asrs	r3, r2
 8010e4a:	9300      	str	r3, [sp, #0]
 8010e4c:	9b00      	ldr	r3, [sp, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	dd64      	ble.n	8010f1c <__kernel_rem_pio2+0x264>
 8010e52:	2200      	movs	r2, #0
 8010e54:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010e58:	4614      	mov	r4, r2
 8010e5a:	9b05      	ldr	r3, [sp, #20]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	9305      	str	r3, [sp, #20]
 8010e60:	4593      	cmp	fp, r2
 8010e62:	f300 80ab 	bgt.w	8010fbc <__kernel_rem_pio2+0x304>
 8010e66:	f1ba 0f00 	cmp.w	sl, #0
 8010e6a:	dd07      	ble.n	8010e7c <__kernel_rem_pio2+0x1c4>
 8010e6c:	f1ba 0f01 	cmp.w	sl, #1
 8010e70:	f000 80b2 	beq.w	8010fd8 <__kernel_rem_pio2+0x320>
 8010e74:	f1ba 0f02 	cmp.w	sl, #2
 8010e78:	f000 80b9 	beq.w	8010fee <__kernel_rem_pio2+0x336>
 8010e7c:	9b00      	ldr	r3, [sp, #0]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d14c      	bne.n	8010f1c <__kernel_rem_pio2+0x264>
 8010e82:	4642      	mov	r2, r8
 8010e84:	464b      	mov	r3, r9
 8010e86:	2000      	movs	r0, #0
 8010e88:	4947      	ldr	r1, [pc, #284]	@ (8010fa8 <__kernel_rem_pio2+0x2f0>)
 8010e8a:	f7ef f9d9 	bl	8000240 <__aeabi_dsub>
 8010e8e:	4680      	mov	r8, r0
 8010e90:	4689      	mov	r9, r1
 8010e92:	2c00      	cmp	r4, #0
 8010e94:	d042      	beq.n	8010f1c <__kernel_rem_pio2+0x264>
 8010e96:	4652      	mov	r2, sl
 8010e98:	2000      	movs	r0, #0
 8010e9a:	4943      	ldr	r1, [pc, #268]	@ (8010fa8 <__kernel_rem_pio2+0x2f0>)
 8010e9c:	f000 fcd0 	bl	8011840 <scalbn>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4640      	mov	r0, r8
 8010ea6:	4649      	mov	r1, r9
 8010ea8:	f7ef f9ca 	bl	8000240 <__aeabi_dsub>
 8010eac:	4680      	mov	r8, r0
 8010eae:	4689      	mov	r9, r1
 8010eb0:	e034      	b.n	8010f1c <__kernel_rem_pio2+0x264>
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8010fac <__kernel_rem_pio2+0x2f4>)
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	4629      	mov	r1, r5
 8010eba:	f7ef fb79 	bl	80005b0 <__aeabi_dmul>
 8010ebe:	f7ef fe27 	bl	8000b10 <__aeabi_d2iz>
 8010ec2:	f7ef fb0b 	bl	80004dc <__aeabi_i2d>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	e9cd 2300 	strd	r2, r3, [sp]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	4b37      	ldr	r3, [pc, #220]	@ (8010fb0 <__kernel_rem_pio2+0x2f8>)
 8010ed2:	f7ef fb6d 	bl	80005b0 <__aeabi_dmul>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	4620      	mov	r0, r4
 8010edc:	4629      	mov	r1, r5
 8010ede:	f7ef f9af 	bl	8000240 <__aeabi_dsub>
 8010ee2:	f7ef fe15 	bl	8000b10 <__aeabi_d2iz>
 8010ee6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010eea:	f849 0b04 	str.w	r0, [r9], #4
 8010eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ef2:	f7ef f9a7 	bl	8000244 <__adddf3>
 8010ef6:	3f01      	subs	r7, #1
 8010ef8:	4604      	mov	r4, r0
 8010efa:	460d      	mov	r5, r1
 8010efc:	e763      	b.n	8010dc6 <__kernel_rem_pio2+0x10e>
 8010efe:	d106      	bne.n	8010f0e <__kernel_rem_pio2+0x256>
 8010f00:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f04:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f0a:	15db      	asrs	r3, r3, #23
 8010f0c:	e79d      	b.n	8010e4a <__kernel_rem_pio2+0x192>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	4b28      	ldr	r3, [pc, #160]	@ (8010fb4 <__kernel_rem_pio2+0x2fc>)
 8010f12:	f7ef fdd3 	bl	8000abc <__aeabi_dcmpge>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d13f      	bne.n	8010f9a <__kernel_rem_pio2+0x2e2>
 8010f1a:	9000      	str	r0, [sp, #0]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	2300      	movs	r3, #0
 8010f20:	4640      	mov	r0, r8
 8010f22:	4649      	mov	r1, r9
 8010f24:	f7ef fdac 	bl	8000a80 <__aeabi_dcmpeq>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f000 80af 	beq.w	801108c <__kernel_rem_pio2+0x3d4>
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f34:	9902      	ldr	r1, [sp, #8]
 8010f36:	428b      	cmp	r3, r1
 8010f38:	da61      	bge.n	8010ffe <__kernel_rem_pio2+0x346>
 8010f3a:	2a00      	cmp	r2, #0
 8010f3c:	d076      	beq.n	801102c <__kernel_rem_pio2+0x374>
 8010f3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f44:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010f48:	f1aa 0a18 	sub.w	sl, sl, #24
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d0f6      	beq.n	8010f3e <__kernel_rem_pio2+0x286>
 8010f50:	4652      	mov	r2, sl
 8010f52:	2000      	movs	r0, #0
 8010f54:	4914      	ldr	r1, [pc, #80]	@ (8010fa8 <__kernel_rem_pio2+0x2f0>)
 8010f56:	f000 fc73 	bl	8011840 <scalbn>
 8010f5a:	465d      	mov	r5, fp
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	460f      	mov	r7, r1
 8010f60:	f04f 0900 	mov.w	r9, #0
 8010f64:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010f66:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8010fac <__kernel_rem_pio2+0x2f4>
 8010f6a:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8010f6e:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8010f72:	2d00      	cmp	r5, #0
 8010f74:	f280 80c0 	bge.w	80110f8 <__kernel_rem_pio2+0x440>
 8010f78:	465d      	mov	r5, fp
 8010f7a:	2d00      	cmp	r5, #0
 8010f7c:	f2c0 80f0 	blt.w	8011160 <__kernel_rem_pio2+0x4a8>
 8010f80:	4b0d      	ldr	r3, [pc, #52]	@ (8010fb8 <__kernel_rem_pio2+0x300>)
 8010f82:	f04f 0900 	mov.w	r9, #0
 8010f86:	9306      	str	r3, [sp, #24]
 8010f88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010f8a:	f04f 0a00 	mov.w	sl, #0
 8010f8e:	2700      	movs	r7, #0
 8010f90:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8010f94:	ebab 0605 	sub.w	r6, fp, r5
 8010f98:	e0d6      	b.n	8011148 <__kernel_rem_pio2+0x490>
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	e758      	b.n	8010e52 <__kernel_rem_pio2+0x19a>
 8010fa0:	08012be0 	.word	0x08012be0
 8010fa4:	40200000 	.word	0x40200000
 8010fa8:	3ff00000 	.word	0x3ff00000
 8010fac:	3e700000 	.word	0x3e700000
 8010fb0:	41700000 	.word	0x41700000
 8010fb4:	3fe00000 	.word	0x3fe00000
 8010fb8:	08012ba0 	.word	0x08012ba0
 8010fbc:	f856 3b04 	ldr.w	r3, [r6], #4
 8010fc0:	b944      	cbnz	r4, 8010fd4 <__kernel_rem_pio2+0x31c>
 8010fc2:	b123      	cbz	r3, 8010fce <__kernel_rem_pio2+0x316>
 8010fc4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010fc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8010fcc:	2301      	movs	r3, #1
 8010fce:	461c      	mov	r4, r3
 8010fd0:	3201      	adds	r2, #1
 8010fd2:	e745      	b.n	8010e60 <__kernel_rem_pio2+0x1a8>
 8010fd4:	1acb      	subs	r3, r1, r3
 8010fd6:	e7f7      	b.n	8010fc8 <__kernel_rem_pio2+0x310>
 8010fd8:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010fdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fe2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010fe6:	a90c      	add	r1, sp, #48	@ 0x30
 8010fe8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010fec:	e746      	b.n	8010e7c <__kernel_rem_pio2+0x1c4>
 8010fee:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010ff2:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ff8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010ffc:	e7f3      	b.n	8010fe6 <__kernel_rem_pio2+0x32e>
 8010ffe:	a90c      	add	r1, sp, #48	@ 0x30
 8011000:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011004:	3b01      	subs	r3, #1
 8011006:	430a      	orrs	r2, r1
 8011008:	e794      	b.n	8010f34 <__kernel_rem_pio2+0x27c>
 801100a:	3401      	adds	r4, #1
 801100c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011010:	2a00      	cmp	r2, #0
 8011012:	d0fa      	beq.n	801100a <__kernel_rem_pio2+0x352>
 8011014:	9b08      	ldr	r3, [sp, #32]
 8011016:	aa20      	add	r2, sp, #128	@ 0x80
 8011018:	445b      	add	r3, fp
 801101a:	f10b 0801 	add.w	r8, fp, #1
 801101e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011022:	445c      	add	r4, fp
 8011024:	4544      	cmp	r4, r8
 8011026:	da04      	bge.n	8011032 <__kernel_rem_pio2+0x37a>
 8011028:	46a3      	mov	fp, r4
 801102a:	e6bf      	b.n	8010dac <__kernel_rem_pio2+0xf4>
 801102c:	2401      	movs	r4, #1
 801102e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011030:	e7ec      	b.n	801100c <__kernel_rem_pio2+0x354>
 8011032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011034:	46ab      	mov	fp, r5
 8011036:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801103a:	f7ef fa4f 	bl	80004dc <__aeabi_i2d>
 801103e:	f04f 0900 	mov.w	r9, #0
 8011042:	2600      	movs	r6, #0
 8011044:	2700      	movs	r7, #0
 8011046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011048:	e9c5 0100 	strd	r0, r1, [r5]
 801104c:	3b08      	subs	r3, #8
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	9b06      	ldr	r3, [sp, #24]
 8011052:	4599      	cmp	r9, r3
 8011054:	dd07      	ble.n	8011066 <__kernel_rem_pio2+0x3ae>
 8011056:	9b07      	ldr	r3, [sp, #28]
 8011058:	f108 0801 	add.w	r8, r8, #1
 801105c:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8011060:	3508      	adds	r5, #8
 8011062:	9307      	str	r3, [sp, #28]
 8011064:	e7de      	b.n	8011024 <__kernel_rem_pio2+0x36c>
 8011066:	9900      	ldr	r1, [sp, #0]
 8011068:	f109 0901 	add.w	r9, r9, #1
 801106c:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8011070:	9100      	str	r1, [sp, #0]
 8011072:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8011076:	f7ef fa9b 	bl	80005b0 <__aeabi_dmul>
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4630      	mov	r0, r6
 8011080:	4639      	mov	r1, r7
 8011082:	f7ef f8df 	bl	8000244 <__adddf3>
 8011086:	4606      	mov	r6, r0
 8011088:	460f      	mov	r7, r1
 801108a:	e7e1      	b.n	8011050 <__kernel_rem_pio2+0x398>
 801108c:	f1ca 0200 	rsb	r2, sl, #0
 8011090:	4640      	mov	r0, r8
 8011092:	4649      	mov	r1, r9
 8011094:	f000 fbd4 	bl	8011840 <scalbn>
 8011098:	2200      	movs	r2, #0
 801109a:	4b97      	ldr	r3, [pc, #604]	@ (80112f8 <__kernel_rem_pio2+0x640>)
 801109c:	4604      	mov	r4, r0
 801109e:	460d      	mov	r5, r1
 80110a0:	f7ef fd0c 	bl	8000abc <__aeabi_dcmpge>
 80110a4:	b300      	cbz	r0, 80110e8 <__kernel_rem_pio2+0x430>
 80110a6:	2200      	movs	r2, #0
 80110a8:	4b94      	ldr	r3, [pc, #592]	@ (80112fc <__kernel_rem_pio2+0x644>)
 80110aa:	4620      	mov	r0, r4
 80110ac:	4629      	mov	r1, r5
 80110ae:	f7ef fa7f 	bl	80005b0 <__aeabi_dmul>
 80110b2:	f7ef fd2d 	bl	8000b10 <__aeabi_d2iz>
 80110b6:	4606      	mov	r6, r0
 80110b8:	f7ef fa10 	bl	80004dc <__aeabi_i2d>
 80110bc:	2200      	movs	r2, #0
 80110be:	4b8e      	ldr	r3, [pc, #568]	@ (80112f8 <__kernel_rem_pio2+0x640>)
 80110c0:	f7ef fa76 	bl	80005b0 <__aeabi_dmul>
 80110c4:	460b      	mov	r3, r1
 80110c6:	4602      	mov	r2, r0
 80110c8:	4629      	mov	r1, r5
 80110ca:	4620      	mov	r0, r4
 80110cc:	f7ef f8b8 	bl	8000240 <__aeabi_dsub>
 80110d0:	f7ef fd1e 	bl	8000b10 <__aeabi_d2iz>
 80110d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80110d6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80110da:	f10b 0b01 	add.w	fp, fp, #1
 80110de:	f10a 0a18 	add.w	sl, sl, #24
 80110e2:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80110e6:	e733      	b.n	8010f50 <__kernel_rem_pio2+0x298>
 80110e8:	4620      	mov	r0, r4
 80110ea:	4629      	mov	r1, r5
 80110ec:	f7ef fd10 	bl	8000b10 <__aeabi_d2iz>
 80110f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80110f2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80110f6:	e72b      	b.n	8010f50 <__kernel_rem_pio2+0x298>
 80110f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80110fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110fe:	f7ef f9ed 	bl	80004dc <__aeabi_i2d>
 8011102:	4632      	mov	r2, r6
 8011104:	463b      	mov	r3, r7
 8011106:	f7ef fa53 	bl	80005b0 <__aeabi_dmul>
 801110a:	464a      	mov	r2, r9
 801110c:	e868 0102 	strd	r0, r1, [r8], #-8
 8011110:	4653      	mov	r3, sl
 8011112:	4630      	mov	r0, r6
 8011114:	4639      	mov	r1, r7
 8011116:	f7ef fa4b 	bl	80005b0 <__aeabi_dmul>
 801111a:	3d01      	subs	r5, #1
 801111c:	4606      	mov	r6, r0
 801111e:	460f      	mov	r7, r1
 8011120:	e727      	b.n	8010f72 <__kernel_rem_pio2+0x2ba>
 8011122:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011126:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801112a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 801112e:	f8cd c018 	str.w	ip, [sp, #24]
 8011132:	f7ef fa3d 	bl	80005b0 <__aeabi_dmul>
 8011136:	4602      	mov	r2, r0
 8011138:	460b      	mov	r3, r1
 801113a:	4648      	mov	r0, r9
 801113c:	4651      	mov	r1, sl
 801113e:	f7ef f881 	bl	8000244 <__adddf3>
 8011142:	4681      	mov	r9, r0
 8011144:	468a      	mov	sl, r1
 8011146:	3701      	adds	r7, #1
 8011148:	9b02      	ldr	r3, [sp, #8]
 801114a:	429f      	cmp	r7, r3
 801114c:	dc01      	bgt.n	8011152 <__kernel_rem_pio2+0x49a>
 801114e:	42be      	cmp	r6, r7
 8011150:	dae7      	bge.n	8011122 <__kernel_rem_pio2+0x46a>
 8011152:	ab48      	add	r3, sp, #288	@ 0x120
 8011154:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011158:	e9c6 9a00 	strd	r9, sl, [r6]
 801115c:	3d01      	subs	r5, #1
 801115e:	e70c      	b.n	8010f7a <__kernel_rem_pio2+0x2c2>
 8011160:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8011162:	2b02      	cmp	r3, #2
 8011164:	dc09      	bgt.n	801117a <__kernel_rem_pio2+0x4c2>
 8011166:	2b00      	cmp	r3, #0
 8011168:	dc2c      	bgt.n	80111c4 <__kernel_rem_pio2+0x50c>
 801116a:	d04e      	beq.n	801120a <__kernel_rem_pio2+0x552>
 801116c:	9b05      	ldr	r3, [sp, #20]
 801116e:	f003 0007 	and.w	r0, r3, #7
 8011172:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801117c:	2b03      	cmp	r3, #3
 801117e:	d1f5      	bne.n	801116c <__kernel_rem_pio2+0x4b4>
 8011180:	ab48      	add	r3, sp, #288	@ 0x120
 8011182:	441c      	add	r4, r3
 8011184:	4625      	mov	r5, r4
 8011186:	46da      	mov	sl, fp
 8011188:	f1ba 0f00 	cmp.w	sl, #0
 801118c:	dc63      	bgt.n	8011256 <__kernel_rem_pio2+0x59e>
 801118e:	4625      	mov	r5, r4
 8011190:	46da      	mov	sl, fp
 8011192:	f1ba 0f01 	cmp.w	sl, #1
 8011196:	dc7b      	bgt.n	8011290 <__kernel_rem_pio2+0x5d8>
 8011198:	2000      	movs	r0, #0
 801119a:	2100      	movs	r1, #0
 801119c:	f1bb 0f01 	cmp.w	fp, #1
 80111a0:	f300 8093 	bgt.w	80112ca <__kernel_rem_pio2+0x612>
 80111a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80111a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80111ac:	9b00      	ldr	r3, [sp, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f040 8092 	bne.w	80112d8 <__kernel_rem_pio2+0x620>
 80111b4:	9b04      	ldr	r3, [sp, #16]
 80111b6:	e9c3 7800 	strd	r7, r8, [r3]
 80111ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80111be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80111c2:	e7d3      	b.n	801116c <__kernel_rem_pio2+0x4b4>
 80111c4:	465d      	mov	r5, fp
 80111c6:	2000      	movs	r0, #0
 80111c8:	2100      	movs	r1, #0
 80111ca:	ab48      	add	r3, sp, #288	@ 0x120
 80111cc:	441c      	add	r4, r3
 80111ce:	2d00      	cmp	r5, #0
 80111d0:	da32      	bge.n	8011238 <__kernel_rem_pio2+0x580>
 80111d2:	9b00      	ldr	r3, [sp, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d035      	beq.n	8011244 <__kernel_rem_pio2+0x58c>
 80111d8:	4602      	mov	r2, r0
 80111da:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111de:	9c04      	ldr	r4, [sp, #16]
 80111e0:	2501      	movs	r5, #1
 80111e2:	e9c4 2300 	strd	r2, r3, [r4]
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80111ee:	f7ef f827 	bl	8000240 <__aeabi_dsub>
 80111f2:	ac48      	add	r4, sp, #288	@ 0x120
 80111f4:	45ab      	cmp	fp, r5
 80111f6:	da28      	bge.n	801124a <__kernel_rem_pio2+0x592>
 80111f8:	9b00      	ldr	r3, [sp, #0]
 80111fa:	b113      	cbz	r3, 8011202 <__kernel_rem_pio2+0x54a>
 80111fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011200:	4619      	mov	r1, r3
 8011202:	9b04      	ldr	r3, [sp, #16]
 8011204:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011208:	e7b0      	b.n	801116c <__kernel_rem_pio2+0x4b4>
 801120a:	2000      	movs	r0, #0
 801120c:	2100      	movs	r1, #0
 801120e:	ab48      	add	r3, sp, #288	@ 0x120
 8011210:	441c      	add	r4, r3
 8011212:	f1bb 0f00 	cmp.w	fp, #0
 8011216:	da08      	bge.n	801122a <__kernel_rem_pio2+0x572>
 8011218:	9b00      	ldr	r3, [sp, #0]
 801121a:	b113      	cbz	r3, 8011222 <__kernel_rem_pio2+0x56a>
 801121c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011220:	4619      	mov	r1, r3
 8011222:	9b04      	ldr	r3, [sp, #16]
 8011224:	e9c3 0100 	strd	r0, r1, [r3]
 8011228:	e7a0      	b.n	801116c <__kernel_rem_pio2+0x4b4>
 801122a:	e874 2302 	ldrd	r2, r3, [r4], #-8
 801122e:	f7ef f809 	bl	8000244 <__adddf3>
 8011232:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011236:	e7ec      	b.n	8011212 <__kernel_rem_pio2+0x55a>
 8011238:	e874 2302 	ldrd	r2, r3, [r4], #-8
 801123c:	f7ef f802 	bl	8000244 <__adddf3>
 8011240:	3d01      	subs	r5, #1
 8011242:	e7c4      	b.n	80111ce <__kernel_rem_pio2+0x516>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	e7c9      	b.n	80111de <__kernel_rem_pio2+0x526>
 801124a:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 801124e:	f7ee fff9 	bl	8000244 <__adddf3>
 8011252:	3501      	adds	r5, #1
 8011254:	e7ce      	b.n	80111f4 <__kernel_rem_pio2+0x53c>
 8011256:	e9d5 2300 	ldrd	r2, r3, [r5]
 801125a:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 801125e:	4640      	mov	r0, r8
 8011260:	4649      	mov	r1, r9
 8011262:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011266:	f7ee ffed 	bl	8000244 <__adddf3>
 801126a:	4602      	mov	r2, r0
 801126c:	460b      	mov	r3, r1
 801126e:	4606      	mov	r6, r0
 8011270:	460f      	mov	r7, r1
 8011272:	4640      	mov	r0, r8
 8011274:	4649      	mov	r1, r9
 8011276:	f7ee ffe3 	bl	8000240 <__aeabi_dsub>
 801127a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801127e:	f7ee ffe1 	bl	8000244 <__adddf3>
 8011282:	e865 0102 	strd	r0, r1, [r5], #-8
 8011286:	f10a 3aff 	add.w	sl, sl, #4294967295
 801128a:	e9c5 6700 	strd	r6, r7, [r5]
 801128e:	e77b      	b.n	8011188 <__kernel_rem_pio2+0x4d0>
 8011290:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011294:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8011298:	4640      	mov	r0, r8
 801129a:	4649      	mov	r1, r9
 801129c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112a0:	f7ee ffd0 	bl	8000244 <__adddf3>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4606      	mov	r6, r0
 80112aa:	460f      	mov	r7, r1
 80112ac:	4640      	mov	r0, r8
 80112ae:	4649      	mov	r1, r9
 80112b0:	f7ee ffc6 	bl	8000240 <__aeabi_dsub>
 80112b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112b8:	f7ee ffc4 	bl	8000244 <__adddf3>
 80112bc:	e865 0102 	strd	r0, r1, [r5], #-8
 80112c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112c4:	e9c5 6700 	strd	r6, r7, [r5]
 80112c8:	e763      	b.n	8011192 <__kernel_rem_pio2+0x4da>
 80112ca:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80112ce:	f7ee ffb9 	bl	8000244 <__adddf3>
 80112d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80112d6:	e761      	b.n	801119c <__kernel_rem_pio2+0x4e4>
 80112d8:	9b04      	ldr	r3, [sp, #16]
 80112da:	9a04      	ldr	r2, [sp, #16]
 80112dc:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80112e0:	601f      	str	r7, [r3, #0]
 80112e2:	605c      	str	r4, [r3, #4]
 80112e4:	609d      	str	r5, [r3, #8]
 80112e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80112ea:	60d3      	str	r3, [r2, #12]
 80112ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112f0:	6110      	str	r0, [r2, #16]
 80112f2:	6153      	str	r3, [r2, #20]
 80112f4:	e73a      	b.n	801116c <__kernel_rem_pio2+0x4b4>
 80112f6:	bf00      	nop
 80112f8:	41700000 	.word	0x41700000
 80112fc:	3e700000 	.word	0x3e700000

08011300 <__kernel_rem_pio2f>:
 8011300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011304:	b0db      	sub	sp, #364	@ 0x16c
 8011306:	9202      	str	r2, [sp, #8]
 8011308:	9304      	str	r3, [sp, #16]
 801130a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801130c:	4bad      	ldr	r3, [pc, #692]	@ (80115c4 <__kernel_rem_pio2f+0x2c4>)
 801130e:	9005      	str	r0, [sp, #20]
 8011310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011314:	9100      	str	r1, [sp, #0]
 8011316:	9301      	str	r3, [sp, #4]
 8011318:	9b04      	ldr	r3, [sp, #16]
 801131a:	3b01      	subs	r3, #1
 801131c:	9303      	str	r3, [sp, #12]
 801131e:	9b02      	ldr	r3, [sp, #8]
 8011320:	1d1a      	adds	r2, r3, #4
 8011322:	f2c0 8099 	blt.w	8011458 <__kernel_rem_pio2f+0x158>
 8011326:	1edc      	subs	r4, r3, #3
 8011328:	bf48      	it	mi
 801132a:	1d1c      	addmi	r4, r3, #4
 801132c:	10e4      	asrs	r4, r4, #3
 801132e:	2500      	movs	r5, #0
 8011330:	f04f 0b00 	mov.w	fp, #0
 8011334:	1c67      	adds	r7, r4, #1
 8011336:	00fb      	lsls	r3, r7, #3
 8011338:	9306      	str	r3, [sp, #24]
 801133a:	9b02      	ldr	r3, [sp, #8]
 801133c:	9a03      	ldr	r2, [sp, #12]
 801133e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8011342:	9b01      	ldr	r3, [sp, #4]
 8011344:	eba4 0802 	sub.w	r8, r4, r2
 8011348:	eb03 0902 	add.w	r9, r3, r2
 801134c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 801134e:	ae1e      	add	r6, sp, #120	@ 0x78
 8011350:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8011354:	454d      	cmp	r5, r9
 8011356:	f340 8081 	ble.w	801145c <__kernel_rem_pio2f+0x15c>
 801135a:	9a04      	ldr	r2, [sp, #16]
 801135c:	ab1e      	add	r3, sp, #120	@ 0x78
 801135e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8011362:	f04f 0900 	mov.w	r9, #0
 8011366:	2300      	movs	r3, #0
 8011368:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 801136c:	9a01      	ldr	r2, [sp, #4]
 801136e:	4591      	cmp	r9, r2
 8011370:	f340 809c 	ble.w	80114ac <__kernel_rem_pio2f+0x1ac>
 8011374:	4613      	mov	r3, r2
 8011376:	aa0a      	add	r2, sp, #40	@ 0x28
 8011378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801137c:	9308      	str	r3, [sp, #32]
 801137e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8011380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011384:	9c01      	ldr	r4, [sp, #4]
 8011386:	9307      	str	r3, [sp, #28]
 8011388:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801138c:	4646      	mov	r6, r8
 801138e:	4625      	mov	r5, r4
 8011390:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8011394:	ab5a      	add	r3, sp, #360	@ 0x168
 8011396:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801139a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 801139e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80113a2:	2d00      	cmp	r5, #0
 80113a4:	f300 8087 	bgt.w	80114b6 <__kernel_rem_pio2f+0x1b6>
 80113a8:	4639      	mov	r1, r7
 80113aa:	4658      	mov	r0, fp
 80113ac:	f000 fabe 	bl	801192c <scalbnf>
 80113b0:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80113b4:	4605      	mov	r5, r0
 80113b6:	f7ef fd51 	bl	8000e5c <__aeabi_fmul>
 80113ba:	f000 fb85 	bl	8011ac8 <floorf>
 80113be:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80113c2:	f7ef fd4b 	bl	8000e5c <__aeabi_fmul>
 80113c6:	4601      	mov	r1, r0
 80113c8:	4628      	mov	r0, r5
 80113ca:	f7ef fc3d 	bl	8000c48 <__aeabi_fsub>
 80113ce:	4605      	mov	r5, r0
 80113d0:	f7ef ff0a 	bl	80011e8 <__aeabi_f2iz>
 80113d4:	4606      	mov	r6, r0
 80113d6:	f7ef fced 	bl	8000db4 <__aeabi_i2f>
 80113da:	4601      	mov	r1, r0
 80113dc:	4628      	mov	r0, r5
 80113de:	f7ef fc33 	bl	8000c48 <__aeabi_fsub>
 80113e2:	2f00      	cmp	r7, #0
 80113e4:	4681      	mov	r9, r0
 80113e6:	f340 8083 	ble.w	80114f0 <__kernel_rem_pio2f+0x1f0>
 80113ea:	1e62      	subs	r2, r4, #1
 80113ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80113ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80113f2:	f1c7 0108 	rsb	r1, r7, #8
 80113f6:	fa45 f301 	asr.w	r3, r5, r1
 80113fa:	441e      	add	r6, r3
 80113fc:	408b      	lsls	r3, r1
 80113fe:	1aed      	subs	r5, r5, r3
 8011400:	ab0a      	add	r3, sp, #40	@ 0x28
 8011402:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011406:	f1c7 0307 	rsb	r3, r7, #7
 801140a:	411d      	asrs	r5, r3
 801140c:	2d00      	cmp	r5, #0
 801140e:	dd7c      	ble.n	801150a <__kernel_rem_pio2f+0x20a>
 8011410:	2200      	movs	r2, #0
 8011412:	4692      	mov	sl, r2
 8011414:	3601      	adds	r6, #1
 8011416:	4294      	cmp	r4, r2
 8011418:	f300 80ac 	bgt.w	8011574 <__kernel_rem_pio2f+0x274>
 801141c:	2f00      	cmp	r7, #0
 801141e:	dd05      	ble.n	801142c <__kernel_rem_pio2f+0x12c>
 8011420:	2f01      	cmp	r7, #1
 8011422:	f000 80b8 	beq.w	8011596 <__kernel_rem_pio2f+0x296>
 8011426:	2f02      	cmp	r7, #2
 8011428:	f000 80bf 	beq.w	80115aa <__kernel_rem_pio2f+0x2aa>
 801142c:	2d02      	cmp	r5, #2
 801142e:	d16c      	bne.n	801150a <__kernel_rem_pio2f+0x20a>
 8011430:	4649      	mov	r1, r9
 8011432:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8011436:	f7ef fc07 	bl	8000c48 <__aeabi_fsub>
 801143a:	4681      	mov	r9, r0
 801143c:	f1ba 0f00 	cmp.w	sl, #0
 8011440:	d063      	beq.n	801150a <__kernel_rem_pio2f+0x20a>
 8011442:	4639      	mov	r1, r7
 8011444:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8011448:	f000 fa70 	bl	801192c <scalbnf>
 801144c:	4601      	mov	r1, r0
 801144e:	4648      	mov	r0, r9
 8011450:	f7ef fbfa 	bl	8000c48 <__aeabi_fsub>
 8011454:	4681      	mov	r9, r0
 8011456:	e058      	b.n	801150a <__kernel_rem_pio2f+0x20a>
 8011458:	2400      	movs	r4, #0
 801145a:	e768      	b.n	801132e <__kernel_rem_pio2f+0x2e>
 801145c:	eb18 0f05 	cmn.w	r8, r5
 8011460:	d407      	bmi.n	8011472 <__kernel_rem_pio2f+0x172>
 8011462:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8011466:	f7ef fca5 	bl	8000db4 <__aeabi_i2f>
 801146a:	f846 0b04 	str.w	r0, [r6], #4
 801146e:	3501      	adds	r5, #1
 8011470:	e770      	b.n	8011354 <__kernel_rem_pio2f+0x54>
 8011472:	4658      	mov	r0, fp
 8011474:	e7f9      	b.n	801146a <__kernel_rem_pio2f+0x16a>
 8011476:	9307      	str	r3, [sp, #28]
 8011478:	9b05      	ldr	r3, [sp, #20]
 801147a:	f8da 1000 	ldr.w	r1, [sl]
 801147e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011482:	f7ef fceb 	bl	8000e5c <__aeabi_fmul>
 8011486:	4601      	mov	r1, r0
 8011488:	4630      	mov	r0, r6
 801148a:	f7ef fbdf 	bl	8000c4c <__addsf3>
 801148e:	4606      	mov	r6, r0
 8011490:	9b07      	ldr	r3, [sp, #28]
 8011492:	f108 0801 	add.w	r8, r8, #1
 8011496:	9a03      	ldr	r2, [sp, #12]
 8011498:	f1aa 0a04 	sub.w	sl, sl, #4
 801149c:	4590      	cmp	r8, r2
 801149e:	ddea      	ble.n	8011476 <__kernel_rem_pio2f+0x176>
 80114a0:	f84b 6b04 	str.w	r6, [fp], #4
 80114a4:	f109 0901 	add.w	r9, r9, #1
 80114a8:	3504      	adds	r5, #4
 80114aa:	e75f      	b.n	801136c <__kernel_rem_pio2f+0x6c>
 80114ac:	46aa      	mov	sl, r5
 80114ae:	461e      	mov	r6, r3
 80114b0:	f04f 0800 	mov.w	r8, #0
 80114b4:	e7ef      	b.n	8011496 <__kernel_rem_pio2f+0x196>
 80114b6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80114ba:	4658      	mov	r0, fp
 80114bc:	f7ef fcce 	bl	8000e5c <__aeabi_fmul>
 80114c0:	f7ef fe92 	bl	80011e8 <__aeabi_f2iz>
 80114c4:	f7ef fc76 	bl	8000db4 <__aeabi_i2f>
 80114c8:	4649      	mov	r1, r9
 80114ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80114cc:	f7ef fcc6 	bl	8000e5c <__aeabi_fmul>
 80114d0:	4601      	mov	r1, r0
 80114d2:	4658      	mov	r0, fp
 80114d4:	f7ef fbb8 	bl	8000c48 <__aeabi_fsub>
 80114d8:	f7ef fe86 	bl	80011e8 <__aeabi_f2iz>
 80114dc:	3d01      	subs	r5, #1
 80114de:	f846 0b04 	str.w	r0, [r6], #4
 80114e2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80114e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114e8:	f7ef fbb0 	bl	8000c4c <__addsf3>
 80114ec:	4683      	mov	fp, r0
 80114ee:	e758      	b.n	80113a2 <__kernel_rem_pio2f+0xa2>
 80114f0:	d105      	bne.n	80114fe <__kernel_rem_pio2f+0x1fe>
 80114f2:	1e63      	subs	r3, r4, #1
 80114f4:	aa0a      	add	r2, sp, #40	@ 0x28
 80114f6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80114fa:	11ed      	asrs	r5, r5, #7
 80114fc:	e786      	b.n	801140c <__kernel_rem_pio2f+0x10c>
 80114fe:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8011502:	f7ef fe5d 	bl	80011c0 <__aeabi_fcmpge>
 8011506:	4605      	mov	r5, r0
 8011508:	bb90      	cbnz	r0, 8011570 <__kernel_rem_pio2f+0x270>
 801150a:	2100      	movs	r1, #0
 801150c:	4648      	mov	r0, r9
 801150e:	f7ef fe39 	bl	8001184 <__aeabi_fcmpeq>
 8011512:	2800      	cmp	r0, #0
 8011514:	f000 8090 	beq.w	8011638 <__kernel_rem_pio2f+0x338>
 8011518:	2200      	movs	r2, #0
 801151a:	1e63      	subs	r3, r4, #1
 801151c:	9901      	ldr	r1, [sp, #4]
 801151e:	428b      	cmp	r3, r1
 8011520:	da4a      	bge.n	80115b8 <__kernel_rem_pio2f+0x2b8>
 8011522:	2a00      	cmp	r2, #0
 8011524:	d076      	beq.n	8011614 <__kernel_rem_pio2f+0x314>
 8011526:	3c01      	subs	r4, #1
 8011528:	ab0a      	add	r3, sp, #40	@ 0x28
 801152a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801152e:	3f08      	subs	r7, #8
 8011530:	2b00      	cmp	r3, #0
 8011532:	d0f8      	beq.n	8011526 <__kernel_rem_pio2f+0x226>
 8011534:	4639      	mov	r1, r7
 8011536:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 801153a:	f000 f9f7 	bl	801192c <scalbnf>
 801153e:	46a2      	mov	sl, r4
 8011540:	4607      	mov	r7, r0
 8011542:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8011546:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 801154a:	f1ba 0f00 	cmp.w	sl, #0
 801154e:	f280 80a1 	bge.w	8011694 <__kernel_rem_pio2f+0x394>
 8011552:	4627      	mov	r7, r4
 8011554:	2200      	movs	r2, #0
 8011556:	2f00      	cmp	r7, #0
 8011558:	f2c0 80cb 	blt.w	80116f2 <__kernel_rem_pio2f+0x3f2>
 801155c:	a946      	add	r1, sp, #280	@ 0x118
 801155e:	4690      	mov	r8, r2
 8011560:	f04f 0a00 	mov.w	sl, #0
 8011564:	4b18      	ldr	r3, [pc, #96]	@ (80115c8 <__kernel_rem_pio2f+0x2c8>)
 8011566:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 801156a:	eba4 0907 	sub.w	r9, r4, r7
 801156e:	e0b4      	b.n	80116da <__kernel_rem_pio2f+0x3da>
 8011570:	2502      	movs	r5, #2
 8011572:	e74d      	b.n	8011410 <__kernel_rem_pio2f+0x110>
 8011574:	f858 3b04 	ldr.w	r3, [r8], #4
 8011578:	f1ba 0f00 	cmp.w	sl, #0
 801157c:	d108      	bne.n	8011590 <__kernel_rem_pio2f+0x290>
 801157e:	b123      	cbz	r3, 801158a <__kernel_rem_pio2f+0x28a>
 8011580:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8011584:	f848 3c04 	str.w	r3, [r8, #-4]
 8011588:	2301      	movs	r3, #1
 801158a:	469a      	mov	sl, r3
 801158c:	3201      	adds	r2, #1
 801158e:	e742      	b.n	8011416 <__kernel_rem_pio2f+0x116>
 8011590:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8011594:	e7f6      	b.n	8011584 <__kernel_rem_pio2f+0x284>
 8011596:	1e62      	subs	r2, r4, #1
 8011598:	ab0a      	add	r3, sp, #40	@ 0x28
 801159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801159e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115a2:	a90a      	add	r1, sp, #40	@ 0x28
 80115a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80115a8:	e740      	b.n	801142c <__kernel_rem_pio2f+0x12c>
 80115aa:	1e62      	subs	r2, r4, #1
 80115ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80115ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80115b6:	e7f4      	b.n	80115a2 <__kernel_rem_pio2f+0x2a2>
 80115b8:	a90a      	add	r1, sp, #40	@ 0x28
 80115ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80115be:	3b01      	subs	r3, #1
 80115c0:	430a      	orrs	r2, r1
 80115c2:	e7ab      	b.n	801151c <__kernel_rem_pio2f+0x21c>
 80115c4:	08012c1c 	.word	0x08012c1c
 80115c8:	08012bf0 	.word	0x08012bf0
 80115cc:	3301      	adds	r3, #1
 80115ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80115d2:	2900      	cmp	r1, #0
 80115d4:	d0fa      	beq.n	80115cc <__kernel_rem_pio2f+0x2cc>
 80115d6:	9a04      	ldr	r2, [sp, #16]
 80115d8:	a91e      	add	r1, sp, #120	@ 0x78
 80115da:	18a2      	adds	r2, r4, r2
 80115dc:	1c66      	adds	r6, r4, #1
 80115de:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80115e2:	441c      	add	r4, r3
 80115e4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80115e8:	42b4      	cmp	r4, r6
 80115ea:	f6ff aecd 	blt.w	8011388 <__kernel_rem_pio2f+0x88>
 80115ee:	9b07      	ldr	r3, [sp, #28]
 80115f0:	46ab      	mov	fp, r5
 80115f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80115f6:	f7ef fbdd 	bl	8000db4 <__aeabi_i2f>
 80115fa:	f04f 0a00 	mov.w	sl, #0
 80115fe:	f04f 0800 	mov.w	r8, #0
 8011602:	6028      	str	r0, [r5, #0]
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	459a      	cmp	sl, r3
 8011608:	dd07      	ble.n	801161a <__kernel_rem_pio2f+0x31a>
 801160a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 801160e:	3504      	adds	r5, #4
 8011610:	3601      	adds	r6, #1
 8011612:	e7e9      	b.n	80115e8 <__kernel_rem_pio2f+0x2e8>
 8011614:	2301      	movs	r3, #1
 8011616:	9a08      	ldr	r2, [sp, #32]
 8011618:	e7d9      	b.n	80115ce <__kernel_rem_pio2f+0x2ce>
 801161a:	9b05      	ldr	r3, [sp, #20]
 801161c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8011620:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8011624:	f7ef fc1a 	bl	8000e5c <__aeabi_fmul>
 8011628:	4601      	mov	r1, r0
 801162a:	4640      	mov	r0, r8
 801162c:	f7ef fb0e 	bl	8000c4c <__addsf3>
 8011630:	f10a 0a01 	add.w	sl, sl, #1
 8011634:	4680      	mov	r8, r0
 8011636:	e7e5      	b.n	8011604 <__kernel_rem_pio2f+0x304>
 8011638:	9b06      	ldr	r3, [sp, #24]
 801163a:	9a02      	ldr	r2, [sp, #8]
 801163c:	4648      	mov	r0, r9
 801163e:	1a99      	subs	r1, r3, r2
 8011640:	f000 f974 	bl	801192c <scalbnf>
 8011644:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8011648:	4680      	mov	r8, r0
 801164a:	f7ef fdb9 	bl	80011c0 <__aeabi_fcmpge>
 801164e:	b1f8      	cbz	r0, 8011690 <__kernel_rem_pio2f+0x390>
 8011650:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8011654:	4640      	mov	r0, r8
 8011656:	f7ef fc01 	bl	8000e5c <__aeabi_fmul>
 801165a:	f7ef fdc5 	bl	80011e8 <__aeabi_f2iz>
 801165e:	f7ef fba9 	bl	8000db4 <__aeabi_i2f>
 8011662:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8011666:	4681      	mov	r9, r0
 8011668:	f7ef fbf8 	bl	8000e5c <__aeabi_fmul>
 801166c:	4601      	mov	r1, r0
 801166e:	4640      	mov	r0, r8
 8011670:	f7ef faea 	bl	8000c48 <__aeabi_fsub>
 8011674:	f7ef fdb8 	bl	80011e8 <__aeabi_f2iz>
 8011678:	ab0a      	add	r3, sp, #40	@ 0x28
 801167a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801167e:	4648      	mov	r0, r9
 8011680:	3401      	adds	r4, #1
 8011682:	3708      	adds	r7, #8
 8011684:	f7ef fdb0 	bl	80011e8 <__aeabi_f2iz>
 8011688:	ab0a      	add	r3, sp, #40	@ 0x28
 801168a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801168e:	e751      	b.n	8011534 <__kernel_rem_pio2f+0x234>
 8011690:	4640      	mov	r0, r8
 8011692:	e7f7      	b.n	8011684 <__kernel_rem_pio2f+0x384>
 8011694:	ab0a      	add	r3, sp, #40	@ 0x28
 8011696:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801169a:	f7ef fb8b 	bl	8000db4 <__aeabi_i2f>
 801169e:	4639      	mov	r1, r7
 80116a0:	f7ef fbdc 	bl	8000e5c <__aeabi_fmul>
 80116a4:	4649      	mov	r1, r9
 80116a6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80116aa:	4638      	mov	r0, r7
 80116ac:	f7ef fbd6 	bl	8000e5c <__aeabi_fmul>
 80116b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116b4:	4607      	mov	r7, r0
 80116b6:	e748      	b.n	801154a <__kernel_rem_pio2f+0x24a>
 80116b8:	f853 0b04 	ldr.w	r0, [r3], #4
 80116bc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80116c0:	9203      	str	r2, [sp, #12]
 80116c2:	9302      	str	r3, [sp, #8]
 80116c4:	f7ef fbca 	bl	8000e5c <__aeabi_fmul>
 80116c8:	4601      	mov	r1, r0
 80116ca:	4640      	mov	r0, r8
 80116cc:	f7ef fabe 	bl	8000c4c <__addsf3>
 80116d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80116d4:	4680      	mov	r8, r0
 80116d6:	f10a 0a01 	add.w	sl, sl, #1
 80116da:	9901      	ldr	r1, [sp, #4]
 80116dc:	458a      	cmp	sl, r1
 80116de:	dc01      	bgt.n	80116e4 <__kernel_rem_pio2f+0x3e4>
 80116e0:	45d1      	cmp	r9, sl
 80116e2:	dae9      	bge.n	80116b8 <__kernel_rem_pio2f+0x3b8>
 80116e4:	ab5a      	add	r3, sp, #360	@ 0x168
 80116e6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80116ea:	f849 8ca0 	str.w	r8, [r9, #-160]
 80116ee:	3f01      	subs	r7, #1
 80116f0:	e731      	b.n	8011556 <__kernel_rem_pio2f+0x256>
 80116f2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80116f4:	2b02      	cmp	r3, #2
 80116f6:	dc07      	bgt.n	8011708 <__kernel_rem_pio2f+0x408>
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	dc4e      	bgt.n	801179a <__kernel_rem_pio2f+0x49a>
 80116fc:	d02e      	beq.n	801175c <__kernel_rem_pio2f+0x45c>
 80116fe:	f006 0007 	and.w	r0, r6, #7
 8011702:	b05b      	add	sp, #364	@ 0x16c
 8011704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011708:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801170a:	2b03      	cmp	r3, #3
 801170c:	d1f7      	bne.n	80116fe <__kernel_rem_pio2f+0x3fe>
 801170e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8011712:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8011716:	46b8      	mov	r8, r7
 8011718:	46a2      	mov	sl, r4
 801171a:	f1ba 0f00 	cmp.w	sl, #0
 801171e:	dc49      	bgt.n	80117b4 <__kernel_rem_pio2f+0x4b4>
 8011720:	46a1      	mov	r9, r4
 8011722:	f1b9 0f01 	cmp.w	r9, #1
 8011726:	dc60      	bgt.n	80117ea <__kernel_rem_pio2f+0x4ea>
 8011728:	2000      	movs	r0, #0
 801172a:	2c01      	cmp	r4, #1
 801172c:	dc76      	bgt.n	801181c <__kernel_rem_pio2f+0x51c>
 801172e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8011730:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8011732:	2d00      	cmp	r5, #0
 8011734:	d178      	bne.n	8011828 <__kernel_rem_pio2f+0x528>
 8011736:	9900      	ldr	r1, [sp, #0]
 8011738:	600a      	str	r2, [r1, #0]
 801173a:	460a      	mov	r2, r1
 801173c:	604b      	str	r3, [r1, #4]
 801173e:	6090      	str	r0, [r2, #8]
 8011740:	e7dd      	b.n	80116fe <__kernel_rem_pio2f+0x3fe>
 8011742:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8011746:	f7ef fa81 	bl	8000c4c <__addsf3>
 801174a:	3c01      	subs	r4, #1
 801174c:	2c00      	cmp	r4, #0
 801174e:	daf8      	bge.n	8011742 <__kernel_rem_pio2f+0x442>
 8011750:	b10d      	cbz	r5, 8011756 <__kernel_rem_pio2f+0x456>
 8011752:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8011756:	9b00      	ldr	r3, [sp, #0]
 8011758:	6018      	str	r0, [r3, #0]
 801175a:	e7d0      	b.n	80116fe <__kernel_rem_pio2f+0x3fe>
 801175c:	2000      	movs	r0, #0
 801175e:	af32      	add	r7, sp, #200	@ 0xc8
 8011760:	e7f4      	b.n	801174c <__kernel_rem_pio2f+0x44c>
 8011762:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8011766:	f7ef fa71 	bl	8000c4c <__addsf3>
 801176a:	f108 38ff 	add.w	r8, r8, #4294967295
 801176e:	f1b8 0f00 	cmp.w	r8, #0
 8011772:	daf6      	bge.n	8011762 <__kernel_rem_pio2f+0x462>
 8011774:	b1ad      	cbz	r5, 80117a2 <__kernel_rem_pio2f+0x4a2>
 8011776:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 801177a:	9a00      	ldr	r2, [sp, #0]
 801177c:	4601      	mov	r1, r0
 801177e:	6013      	str	r3, [r2, #0]
 8011780:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8011782:	f7ef fa61 	bl	8000c48 <__aeabi_fsub>
 8011786:	f04f 0801 	mov.w	r8, #1
 801178a:	4544      	cmp	r4, r8
 801178c:	da0b      	bge.n	80117a6 <__kernel_rem_pio2f+0x4a6>
 801178e:	b10d      	cbz	r5, 8011794 <__kernel_rem_pio2f+0x494>
 8011790:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8011794:	9b00      	ldr	r3, [sp, #0]
 8011796:	6058      	str	r0, [r3, #4]
 8011798:	e7b1      	b.n	80116fe <__kernel_rem_pio2f+0x3fe>
 801179a:	46a0      	mov	r8, r4
 801179c:	2000      	movs	r0, #0
 801179e:	af32      	add	r7, sp, #200	@ 0xc8
 80117a0:	e7e5      	b.n	801176e <__kernel_rem_pio2f+0x46e>
 80117a2:	4603      	mov	r3, r0
 80117a4:	e7e9      	b.n	801177a <__kernel_rem_pio2f+0x47a>
 80117a6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80117aa:	f7ef fa4f 	bl	8000c4c <__addsf3>
 80117ae:	f108 0801 	add.w	r8, r8, #1
 80117b2:	e7ea      	b.n	801178a <__kernel_rem_pio2f+0x48a>
 80117b4:	f8d8 3000 	ldr.w	r3, [r8]
 80117b8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80117bc:	4619      	mov	r1, r3
 80117be:	4610      	mov	r0, r2
 80117c0:	9302      	str	r3, [sp, #8]
 80117c2:	9201      	str	r2, [sp, #4]
 80117c4:	f7ef fa42 	bl	8000c4c <__addsf3>
 80117c8:	9a01      	ldr	r2, [sp, #4]
 80117ca:	4601      	mov	r1, r0
 80117cc:	4681      	mov	r9, r0
 80117ce:	4610      	mov	r0, r2
 80117d0:	f7ef fa3a 	bl	8000c48 <__aeabi_fsub>
 80117d4:	9b02      	ldr	r3, [sp, #8]
 80117d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117da:	4619      	mov	r1, r3
 80117dc:	f7ef fa36 	bl	8000c4c <__addsf3>
 80117e0:	f848 0904 	str.w	r0, [r8], #-4
 80117e4:	f8c8 9000 	str.w	r9, [r8]
 80117e8:	e797      	b.n	801171a <__kernel_rem_pio2f+0x41a>
 80117ea:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80117ee:	f8d7 a000 	ldr.w	sl, [r7]
 80117f2:	4618      	mov	r0, r3
 80117f4:	4651      	mov	r1, sl
 80117f6:	9301      	str	r3, [sp, #4]
 80117f8:	f7ef fa28 	bl	8000c4c <__addsf3>
 80117fc:	9b01      	ldr	r3, [sp, #4]
 80117fe:	4601      	mov	r1, r0
 8011800:	4680      	mov	r8, r0
 8011802:	4618      	mov	r0, r3
 8011804:	f7ef fa20 	bl	8000c48 <__aeabi_fsub>
 8011808:	4651      	mov	r1, sl
 801180a:	f7ef fa1f 	bl	8000c4c <__addsf3>
 801180e:	f847 0904 	str.w	r0, [r7], #-4
 8011812:	f109 39ff 	add.w	r9, r9, #4294967295
 8011816:	f8c7 8000 	str.w	r8, [r7]
 801181a:	e782      	b.n	8011722 <__kernel_rem_pio2f+0x422>
 801181c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8011820:	f7ef fa14 	bl	8000c4c <__addsf3>
 8011824:	3c01      	subs	r4, #1
 8011826:	e780      	b.n	801172a <__kernel_rem_pio2f+0x42a>
 8011828:	9900      	ldr	r1, [sp, #0]
 801182a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801182e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011832:	600a      	str	r2, [r1, #0]
 8011834:	604b      	str	r3, [r1, #4]
 8011836:	460a      	mov	r2, r1
 8011838:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801183c:	e77f      	b.n	801173e <__kernel_rem_pio2f+0x43e>
 801183e:	bf00      	nop

08011840 <scalbn>:
 8011840:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8011844:	4616      	mov	r6, r2
 8011846:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801184a:	4683      	mov	fp, r0
 801184c:	468c      	mov	ip, r1
 801184e:	460b      	mov	r3, r1
 8011850:	b982      	cbnz	r2, 8011874 <scalbn+0x34>
 8011852:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011856:	4303      	orrs	r3, r0
 8011858:	d039      	beq.n	80118ce <scalbn+0x8e>
 801185a:	4b2f      	ldr	r3, [pc, #188]	@ (8011918 <scalbn+0xd8>)
 801185c:	2200      	movs	r2, #0
 801185e:	f7ee fea7 	bl	80005b0 <__aeabi_dmul>
 8011862:	4b2e      	ldr	r3, [pc, #184]	@ (801191c <scalbn+0xdc>)
 8011864:	4683      	mov	fp, r0
 8011866:	429e      	cmp	r6, r3
 8011868:	468c      	mov	ip, r1
 801186a:	da0d      	bge.n	8011888 <scalbn+0x48>
 801186c:	a326      	add	r3, pc, #152	@ (adr r3, 8011908 <scalbn+0xc8>)
 801186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011872:	e01b      	b.n	80118ac <scalbn+0x6c>
 8011874:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8011878:	42ba      	cmp	r2, r7
 801187a:	d109      	bne.n	8011890 <scalbn+0x50>
 801187c:	4602      	mov	r2, r0
 801187e:	f7ee fce1 	bl	8000244 <__adddf3>
 8011882:	4683      	mov	fp, r0
 8011884:	468c      	mov	ip, r1
 8011886:	e022      	b.n	80118ce <scalbn+0x8e>
 8011888:	460b      	mov	r3, r1
 801188a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801188e:	3a36      	subs	r2, #54	@ 0x36
 8011890:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011894:	428e      	cmp	r6, r1
 8011896:	dd0c      	ble.n	80118b2 <scalbn+0x72>
 8011898:	a31d      	add	r3, pc, #116	@ (adr r3, 8011910 <scalbn+0xd0>)
 801189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189e:	461c      	mov	r4, r3
 80118a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80118a4:	f361 74df 	bfi	r4, r1, #31, #1
 80118a8:	4621      	mov	r1, r4
 80118aa:	481d      	ldr	r0, [pc, #116]	@ (8011920 <scalbn+0xe0>)
 80118ac:	f7ee fe80 	bl	80005b0 <__aeabi_dmul>
 80118b0:	e7e7      	b.n	8011882 <scalbn+0x42>
 80118b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80118b6:	4432      	add	r2, r6
 80118b8:	428a      	cmp	r2, r1
 80118ba:	dced      	bgt.n	8011898 <scalbn+0x58>
 80118bc:	2a00      	cmp	r2, #0
 80118be:	dd0a      	ble.n	80118d6 <scalbn+0x96>
 80118c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80118c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80118c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80118cc:	46ac      	mov	ip, r5
 80118ce:	4658      	mov	r0, fp
 80118d0:	4661      	mov	r1, ip
 80118d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80118d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80118da:	da09      	bge.n	80118f0 <scalbn+0xb0>
 80118dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80118e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80118e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80118e8:	480e      	ldr	r0, [pc, #56]	@ (8011924 <scalbn+0xe4>)
 80118ea:	f041 011f 	orr.w	r1, r1, #31
 80118ee:	e7bd      	b.n	801186c <scalbn+0x2c>
 80118f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80118f4:	3236      	adds	r2, #54	@ 0x36
 80118f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80118fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80118fe:	4658      	mov	r0, fp
 8011900:	4629      	mov	r1, r5
 8011902:	2200      	movs	r2, #0
 8011904:	4b08      	ldr	r3, [pc, #32]	@ (8011928 <scalbn+0xe8>)
 8011906:	e7d1      	b.n	80118ac <scalbn+0x6c>
 8011908:	c2f8f359 	.word	0xc2f8f359
 801190c:	01a56e1f 	.word	0x01a56e1f
 8011910:	8800759c 	.word	0x8800759c
 8011914:	7e37e43c 	.word	0x7e37e43c
 8011918:	43500000 	.word	0x43500000
 801191c:	ffff3cb0 	.word	0xffff3cb0
 8011920:	8800759c 	.word	0x8800759c
 8011924:	c2f8f359 	.word	0xc2f8f359
 8011928:	3c900000 	.word	0x3c900000

0801192c <scalbnf>:
 801192c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	4603      	mov	r3, r0
 8011934:	460d      	mov	r5, r1
 8011936:	4604      	mov	r4, r0
 8011938:	d02e      	beq.n	8011998 <scalbnf+0x6c>
 801193a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801193e:	d304      	bcc.n	801194a <scalbnf+0x1e>
 8011940:	4601      	mov	r1, r0
 8011942:	f7ef f983 	bl	8000c4c <__addsf3>
 8011946:	4603      	mov	r3, r0
 8011948:	e026      	b.n	8011998 <scalbnf+0x6c>
 801194a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 801194e:	d118      	bne.n	8011982 <scalbnf+0x56>
 8011950:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8011954:	f7ef fa82 	bl	8000e5c <__aeabi_fmul>
 8011958:	4a17      	ldr	r2, [pc, #92]	@ (80119b8 <scalbnf+0x8c>)
 801195a:	4603      	mov	r3, r0
 801195c:	4295      	cmp	r5, r2
 801195e:	db0c      	blt.n	801197a <scalbnf+0x4e>
 8011960:	4604      	mov	r4, r0
 8011962:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011966:	3a19      	subs	r2, #25
 8011968:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801196c:	428d      	cmp	r5, r1
 801196e:	dd0a      	ble.n	8011986 <scalbnf+0x5a>
 8011970:	4912      	ldr	r1, [pc, #72]	@ (80119bc <scalbnf+0x90>)
 8011972:	4618      	mov	r0, r3
 8011974:	f361 001e 	bfi	r0, r1, #0, #31
 8011978:	e000      	b.n	801197c <scalbnf+0x50>
 801197a:	4911      	ldr	r1, [pc, #68]	@ (80119c0 <scalbnf+0x94>)
 801197c:	f7ef fa6e 	bl	8000e5c <__aeabi_fmul>
 8011980:	e7e1      	b.n	8011946 <scalbnf+0x1a>
 8011982:	0dd2      	lsrs	r2, r2, #23
 8011984:	e7f0      	b.n	8011968 <scalbnf+0x3c>
 8011986:	1951      	adds	r1, r2, r5
 8011988:	29fe      	cmp	r1, #254	@ 0xfe
 801198a:	dcf1      	bgt.n	8011970 <scalbnf+0x44>
 801198c:	2900      	cmp	r1, #0
 801198e:	dd05      	ble.n	801199c <scalbnf+0x70>
 8011990:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8011994:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8011998:	4618      	mov	r0, r3
 801199a:	bd38      	pop	{r3, r4, r5, pc}
 801199c:	f111 0f16 	cmn.w	r1, #22
 80119a0:	da01      	bge.n	80119a6 <scalbnf+0x7a>
 80119a2:	4907      	ldr	r1, [pc, #28]	@ (80119c0 <scalbnf+0x94>)
 80119a4:	e7e5      	b.n	8011972 <scalbnf+0x46>
 80119a6:	f101 0019 	add.w	r0, r1, #25
 80119aa:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80119ae:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80119b2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80119b6:	e7e1      	b.n	801197c <scalbnf+0x50>
 80119b8:	ffff3cb0 	.word	0xffff3cb0
 80119bc:	7149f2ca 	.word	0x7149f2ca
 80119c0:	0da24260 	.word	0x0da24260
 80119c4:	00000000 	.word	0x00000000

080119c8 <floor>:
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80119d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80119d4:	2e13      	cmp	r6, #19
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	460c      	mov	r4, r1
 80119dc:	4605      	mov	r5, r0
 80119de:	4680      	mov	r8, r0
 80119e0:	dc35      	bgt.n	8011a4e <floor+0x86>
 80119e2:	2e00      	cmp	r6, #0
 80119e4:	da17      	bge.n	8011a16 <floor+0x4e>
 80119e6:	a334      	add	r3, pc, #208	@ (adr r3, 8011ab8 <floor+0xf0>)
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	f7ee fc2a 	bl	8000244 <__adddf3>
 80119f0:	2200      	movs	r2, #0
 80119f2:	2300      	movs	r3, #0
 80119f4:	f7ef f86c 	bl	8000ad0 <__aeabi_dcmpgt>
 80119f8:	b150      	cbz	r0, 8011a10 <floor+0x48>
 80119fa:	2c00      	cmp	r4, #0
 80119fc:	da57      	bge.n	8011aae <floor+0xe6>
 80119fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011a02:	432c      	orrs	r4, r5
 8011a04:	2500      	movs	r5, #0
 8011a06:	42ac      	cmp	r4, r5
 8011a08:	4c2d      	ldr	r4, [pc, #180]	@ (8011ac0 <floor+0xf8>)
 8011a0a:	bf08      	it	eq
 8011a0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011a10:	4623      	mov	r3, r4
 8011a12:	462a      	mov	r2, r5
 8011a14:	e024      	b.n	8011a60 <floor+0x98>
 8011a16:	4f2b      	ldr	r7, [pc, #172]	@ (8011ac4 <floor+0xfc>)
 8011a18:	4137      	asrs	r7, r6
 8011a1a:	ea01 0c07 	and.w	ip, r1, r7
 8011a1e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8011a22:	d01d      	beq.n	8011a60 <floor+0x98>
 8011a24:	a324      	add	r3, pc, #144	@ (adr r3, 8011ab8 <floor+0xf0>)
 8011a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2a:	f7ee fc0b 	bl	8000244 <__adddf3>
 8011a2e:	2200      	movs	r2, #0
 8011a30:	2300      	movs	r3, #0
 8011a32:	f7ef f84d 	bl	8000ad0 <__aeabi_dcmpgt>
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d0ea      	beq.n	8011a10 <floor+0x48>
 8011a3a:	2c00      	cmp	r4, #0
 8011a3c:	bfbe      	ittt	lt
 8011a3e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011a42:	4133      	asrlt	r3, r6
 8011a44:	18e4      	addlt	r4, r4, r3
 8011a46:	2500      	movs	r5, #0
 8011a48:	ea24 0407 	bic.w	r4, r4, r7
 8011a4c:	e7e0      	b.n	8011a10 <floor+0x48>
 8011a4e:	2e33      	cmp	r6, #51	@ 0x33
 8011a50:	dd0a      	ble.n	8011a68 <floor+0xa0>
 8011a52:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8011a56:	d103      	bne.n	8011a60 <floor+0x98>
 8011a58:	f7ee fbf4 	bl	8000244 <__adddf3>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4610      	mov	r0, r2
 8011a62:	4619      	mov	r1, r3
 8011a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a68:	f04f 3cff 	mov.w	ip, #4294967295
 8011a6c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8011a70:	fa2c f707 	lsr.w	r7, ip, r7
 8011a74:	4207      	tst	r7, r0
 8011a76:	d0f3      	beq.n	8011a60 <floor+0x98>
 8011a78:	a30f      	add	r3, pc, #60	@ (adr r3, 8011ab8 <floor+0xf0>)
 8011a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7e:	f7ee fbe1 	bl	8000244 <__adddf3>
 8011a82:	2200      	movs	r2, #0
 8011a84:	2300      	movs	r3, #0
 8011a86:	f7ef f823 	bl	8000ad0 <__aeabi_dcmpgt>
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	d0c0      	beq.n	8011a10 <floor+0x48>
 8011a8e:	2c00      	cmp	r4, #0
 8011a90:	da0a      	bge.n	8011aa8 <floor+0xe0>
 8011a92:	2e14      	cmp	r6, #20
 8011a94:	d101      	bne.n	8011a9a <floor+0xd2>
 8011a96:	3401      	adds	r4, #1
 8011a98:	e006      	b.n	8011aa8 <floor+0xe0>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011aa0:	40b3      	lsls	r3, r6
 8011aa2:	441d      	add	r5, r3
 8011aa4:	4545      	cmp	r5, r8
 8011aa6:	d3f6      	bcc.n	8011a96 <floor+0xce>
 8011aa8:	ea25 0507 	bic.w	r5, r5, r7
 8011aac:	e7b0      	b.n	8011a10 <floor+0x48>
 8011aae:	2500      	movs	r5, #0
 8011ab0:	462c      	mov	r4, r5
 8011ab2:	e7ad      	b.n	8011a10 <floor+0x48>
 8011ab4:	f3af 8000 	nop.w
 8011ab8:	8800759c 	.word	0x8800759c
 8011abc:	7e37e43c 	.word	0x7e37e43c
 8011ac0:	bff00000 	.word	0xbff00000
 8011ac4:	000fffff 	.word	0x000fffff

08011ac8 <floorf>:
 8011ac8:	b570      	push	{r4, r5, r6, lr}
 8011aca:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8011ace:	3d7f      	subs	r5, #127	@ 0x7f
 8011ad0:	2d16      	cmp	r5, #22
 8011ad2:	4601      	mov	r1, r0
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8011ada:	dc26      	bgt.n	8011b2a <floorf+0x62>
 8011adc:	2d00      	cmp	r5, #0
 8011ade:	da0f      	bge.n	8011b00 <floorf+0x38>
 8011ae0:	4917      	ldr	r1, [pc, #92]	@ (8011b40 <floorf+0x78>)
 8011ae2:	f7ef f8b3 	bl	8000c4c <__addsf3>
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	f7ef fb74 	bl	80011d4 <__aeabi_fcmpgt>
 8011aec:	b130      	cbz	r0, 8011afc <floorf+0x34>
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	da23      	bge.n	8011b3a <floorf+0x72>
 8011af2:	2e00      	cmp	r6, #0
 8011af4:	4c13      	ldr	r4, [pc, #76]	@ (8011b44 <floorf+0x7c>)
 8011af6:	bf08      	it	eq
 8011af8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011afc:	4621      	mov	r1, r4
 8011afe:	e01a      	b.n	8011b36 <floorf+0x6e>
 8011b00:	4e11      	ldr	r6, [pc, #68]	@ (8011b48 <floorf+0x80>)
 8011b02:	412e      	asrs	r6, r5
 8011b04:	4230      	tst	r0, r6
 8011b06:	d016      	beq.n	8011b36 <floorf+0x6e>
 8011b08:	490d      	ldr	r1, [pc, #52]	@ (8011b40 <floorf+0x78>)
 8011b0a:	f7ef f89f 	bl	8000c4c <__addsf3>
 8011b0e:	2100      	movs	r1, #0
 8011b10:	f7ef fb60 	bl	80011d4 <__aeabi_fcmpgt>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d0f1      	beq.n	8011afc <floorf+0x34>
 8011b18:	2c00      	cmp	r4, #0
 8011b1a:	bfbe      	ittt	lt
 8011b1c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8011b20:	412b      	asrlt	r3, r5
 8011b22:	18e4      	addlt	r4, r4, r3
 8011b24:	ea24 0406 	bic.w	r4, r4, r6
 8011b28:	e7e8      	b.n	8011afc <floorf+0x34>
 8011b2a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8011b2e:	d302      	bcc.n	8011b36 <floorf+0x6e>
 8011b30:	f7ef f88c 	bl	8000c4c <__addsf3>
 8011b34:	4601      	mov	r1, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	bd70      	pop	{r4, r5, r6, pc}
 8011b3a:	2400      	movs	r4, #0
 8011b3c:	e7de      	b.n	8011afc <floorf+0x34>
 8011b3e:	bf00      	nop
 8011b40:	7149f2ca 	.word	0x7149f2ca
 8011b44:	bf800000 	.word	0xbf800000
 8011b48:	007fffff 	.word	0x007fffff

08011b4c <calloc>:
 8011b4c:	4b02      	ldr	r3, [pc, #8]	@ (8011b58 <calloc+0xc>)
 8011b4e:	460a      	mov	r2, r1
 8011b50:	4601      	mov	r1, r0
 8011b52:	6818      	ldr	r0, [r3, #0]
 8011b54:	f000 b802 	b.w	8011b5c <_calloc_r>
 8011b58:	20000070 	.word	0x20000070

08011b5c <_calloc_r>:
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8011b62:	b93c      	cbnz	r4, 8011b74 <_calloc_r+0x18>
 8011b64:	4629      	mov	r1, r5
 8011b66:	f000 f82f 	bl	8011bc8 <_malloc_r>
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	b928      	cbnz	r0, 8011b7a <_calloc_r+0x1e>
 8011b6e:	2600      	movs	r6, #0
 8011b70:	4630      	mov	r0, r6
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	220c      	movs	r2, #12
 8011b76:	6002      	str	r2, [r0, #0]
 8011b78:	e7f9      	b.n	8011b6e <_calloc_r+0x12>
 8011b7a:	462a      	mov	r2, r5
 8011b7c:	4621      	mov	r1, r4
 8011b7e:	f000 f8e5 	bl	8011d4c <memset>
 8011b82:	e7f5      	b.n	8011b70 <_calloc_r+0x14>

08011b84 <sbrk_aligned>:
 8011b84:	b570      	push	{r4, r5, r6, lr}
 8011b86:	4e0f      	ldr	r6, [pc, #60]	@ (8011bc4 <sbrk_aligned+0x40>)
 8011b88:	460c      	mov	r4, r1
 8011b8a:	6831      	ldr	r1, [r6, #0]
 8011b8c:	4605      	mov	r5, r0
 8011b8e:	b911      	cbnz	r1, 8011b96 <sbrk_aligned+0x12>
 8011b90:	f000 f8e4 	bl	8011d5c <_sbrk_r>
 8011b94:	6030      	str	r0, [r6, #0]
 8011b96:	4621      	mov	r1, r4
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f000 f8df 	bl	8011d5c <_sbrk_r>
 8011b9e:	1c43      	adds	r3, r0, #1
 8011ba0:	d103      	bne.n	8011baa <sbrk_aligned+0x26>
 8011ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}
 8011baa:	1cc4      	adds	r4, r0, #3
 8011bac:	f024 0403 	bic.w	r4, r4, #3
 8011bb0:	42a0      	cmp	r0, r4
 8011bb2:	d0f8      	beq.n	8011ba6 <sbrk_aligned+0x22>
 8011bb4:	1a21      	subs	r1, r4, r0
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f000 f8d0 	bl	8011d5c <_sbrk_r>
 8011bbc:	3001      	adds	r0, #1
 8011bbe:	d1f2      	bne.n	8011ba6 <sbrk_aligned+0x22>
 8011bc0:	e7ef      	b.n	8011ba2 <sbrk_aligned+0x1e>
 8011bc2:	bf00      	nop
 8011bc4:	20004a88 	.word	0x20004a88

08011bc8 <_malloc_r>:
 8011bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bcc:	1ccd      	adds	r5, r1, #3
 8011bce:	f025 0503 	bic.w	r5, r5, #3
 8011bd2:	3508      	adds	r5, #8
 8011bd4:	2d0c      	cmp	r5, #12
 8011bd6:	bf38      	it	cc
 8011bd8:	250c      	movcc	r5, #12
 8011bda:	2d00      	cmp	r5, #0
 8011bdc:	4606      	mov	r6, r0
 8011bde:	db01      	blt.n	8011be4 <_malloc_r+0x1c>
 8011be0:	42a9      	cmp	r1, r5
 8011be2:	d904      	bls.n	8011bee <_malloc_r+0x26>
 8011be4:	230c      	movs	r3, #12
 8011be6:	6033      	str	r3, [r6, #0]
 8011be8:	2000      	movs	r0, #0
 8011bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011cc4 <_malloc_r+0xfc>
 8011bf2:	f000 f869 	bl	8011cc8 <__malloc_lock>
 8011bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8011bfa:	461c      	mov	r4, r3
 8011bfc:	bb44      	cbnz	r4, 8011c50 <_malloc_r+0x88>
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff ffbf 	bl	8011b84 <sbrk_aligned>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	4604      	mov	r4, r0
 8011c0a:	d158      	bne.n	8011cbe <_malloc_r+0xf6>
 8011c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8011c10:	4627      	mov	r7, r4
 8011c12:	2f00      	cmp	r7, #0
 8011c14:	d143      	bne.n	8011c9e <_malloc_r+0xd6>
 8011c16:	2c00      	cmp	r4, #0
 8011c18:	d04b      	beq.n	8011cb2 <_malloc_r+0xea>
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	4630      	mov	r0, r6
 8011c20:	eb04 0903 	add.w	r9, r4, r3
 8011c24:	f000 f89a 	bl	8011d5c <_sbrk_r>
 8011c28:	4581      	cmp	r9, r0
 8011c2a:	d142      	bne.n	8011cb2 <_malloc_r+0xea>
 8011c2c:	6821      	ldr	r1, [r4, #0]
 8011c2e:	4630      	mov	r0, r6
 8011c30:	1a6d      	subs	r5, r5, r1
 8011c32:	4629      	mov	r1, r5
 8011c34:	f7ff ffa6 	bl	8011b84 <sbrk_aligned>
 8011c38:	3001      	adds	r0, #1
 8011c3a:	d03a      	beq.n	8011cb2 <_malloc_r+0xea>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	442b      	add	r3, r5
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	f8d8 3000 	ldr.w	r3, [r8]
 8011c46:	685a      	ldr	r2, [r3, #4]
 8011c48:	bb62      	cbnz	r2, 8011ca4 <_malloc_r+0xdc>
 8011c4a:	f8c8 7000 	str.w	r7, [r8]
 8011c4e:	e00f      	b.n	8011c70 <_malloc_r+0xa8>
 8011c50:	6822      	ldr	r2, [r4, #0]
 8011c52:	1b52      	subs	r2, r2, r5
 8011c54:	d420      	bmi.n	8011c98 <_malloc_r+0xd0>
 8011c56:	2a0b      	cmp	r2, #11
 8011c58:	d917      	bls.n	8011c8a <_malloc_r+0xc2>
 8011c5a:	1961      	adds	r1, r4, r5
 8011c5c:	42a3      	cmp	r3, r4
 8011c5e:	6025      	str	r5, [r4, #0]
 8011c60:	bf18      	it	ne
 8011c62:	6059      	strne	r1, [r3, #4]
 8011c64:	6863      	ldr	r3, [r4, #4]
 8011c66:	bf08      	it	eq
 8011c68:	f8c8 1000 	streq.w	r1, [r8]
 8011c6c:	5162      	str	r2, [r4, r5]
 8011c6e:	604b      	str	r3, [r1, #4]
 8011c70:	4630      	mov	r0, r6
 8011c72:	f000 f82f 	bl	8011cd4 <__malloc_unlock>
 8011c76:	f104 000b 	add.w	r0, r4, #11
 8011c7a:	1d23      	adds	r3, r4, #4
 8011c7c:	f020 0007 	bic.w	r0, r0, #7
 8011c80:	1ac2      	subs	r2, r0, r3
 8011c82:	bf1c      	itt	ne
 8011c84:	1a1b      	subne	r3, r3, r0
 8011c86:	50a3      	strne	r3, [r4, r2]
 8011c88:	e7af      	b.n	8011bea <_malloc_r+0x22>
 8011c8a:	6862      	ldr	r2, [r4, #4]
 8011c8c:	42a3      	cmp	r3, r4
 8011c8e:	bf0c      	ite	eq
 8011c90:	f8c8 2000 	streq.w	r2, [r8]
 8011c94:	605a      	strne	r2, [r3, #4]
 8011c96:	e7eb      	b.n	8011c70 <_malloc_r+0xa8>
 8011c98:	4623      	mov	r3, r4
 8011c9a:	6864      	ldr	r4, [r4, #4]
 8011c9c:	e7ae      	b.n	8011bfc <_malloc_r+0x34>
 8011c9e:	463c      	mov	r4, r7
 8011ca0:	687f      	ldr	r7, [r7, #4]
 8011ca2:	e7b6      	b.n	8011c12 <_malloc_r+0x4a>
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	42a3      	cmp	r3, r4
 8011caa:	d1fb      	bne.n	8011ca4 <_malloc_r+0xdc>
 8011cac:	2300      	movs	r3, #0
 8011cae:	6053      	str	r3, [r2, #4]
 8011cb0:	e7de      	b.n	8011c70 <_malloc_r+0xa8>
 8011cb2:	230c      	movs	r3, #12
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	6033      	str	r3, [r6, #0]
 8011cb8:	f000 f80c 	bl	8011cd4 <__malloc_unlock>
 8011cbc:	e794      	b.n	8011be8 <_malloc_r+0x20>
 8011cbe:	6005      	str	r5, [r0, #0]
 8011cc0:	e7d6      	b.n	8011c70 <_malloc_r+0xa8>
 8011cc2:	bf00      	nop
 8011cc4:	20004a8c 	.word	0x20004a8c

08011cc8 <__malloc_lock>:
 8011cc8:	4801      	ldr	r0, [pc, #4]	@ (8011cd0 <__malloc_lock+0x8>)
 8011cca:	f000 b881 	b.w	8011dd0 <__retarget_lock_acquire_recursive>
 8011cce:	bf00      	nop
 8011cd0:	20004bcc 	.word	0x20004bcc

08011cd4 <__malloc_unlock>:
 8011cd4:	4801      	ldr	r0, [pc, #4]	@ (8011cdc <__malloc_unlock+0x8>)
 8011cd6:	f000 b87c 	b.w	8011dd2 <__retarget_lock_release_recursive>
 8011cda:	bf00      	nop
 8011cdc:	20004bcc 	.word	0x20004bcc

08011ce0 <realloc>:
 8011ce0:	4b02      	ldr	r3, [pc, #8]	@ (8011cec <realloc+0xc>)
 8011ce2:	460a      	mov	r2, r1
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	6818      	ldr	r0, [r3, #0]
 8011ce8:	f000 b802 	b.w	8011cf0 <_realloc_r>
 8011cec:	20000070 	.word	0x20000070

08011cf0 <_realloc_r>:
 8011cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf4:	4680      	mov	r8, r0
 8011cf6:	4615      	mov	r5, r2
 8011cf8:	460c      	mov	r4, r1
 8011cfa:	b921      	cbnz	r1, 8011d06 <_realloc_r+0x16>
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d02:	f7ff bf61 	b.w	8011bc8 <_malloc_r>
 8011d06:	b92a      	cbnz	r2, 8011d14 <_realloc_r+0x24>
 8011d08:	f000 f872 	bl	8011df0 <_free_r>
 8011d0c:	2400      	movs	r4, #0
 8011d0e:	4620      	mov	r0, r4
 8011d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d14:	f000 f8b4 	bl	8011e80 <_malloc_usable_size_r>
 8011d18:	4285      	cmp	r5, r0
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	d802      	bhi.n	8011d24 <_realloc_r+0x34>
 8011d1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d22:	d8f4      	bhi.n	8011d0e <_realloc_r+0x1e>
 8011d24:	4629      	mov	r1, r5
 8011d26:	4640      	mov	r0, r8
 8011d28:	f7ff ff4e 	bl	8011bc8 <_malloc_r>
 8011d2c:	4607      	mov	r7, r0
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	d0ec      	beq.n	8011d0c <_realloc_r+0x1c>
 8011d32:	42b5      	cmp	r5, r6
 8011d34:	462a      	mov	r2, r5
 8011d36:	4621      	mov	r1, r4
 8011d38:	bf28      	it	cs
 8011d3a:	4632      	movcs	r2, r6
 8011d3c:	f000 f84a 	bl	8011dd4 <memcpy>
 8011d40:	4621      	mov	r1, r4
 8011d42:	4640      	mov	r0, r8
 8011d44:	f000 f854 	bl	8011df0 <_free_r>
 8011d48:	463c      	mov	r4, r7
 8011d4a:	e7e0      	b.n	8011d0e <_realloc_r+0x1e>

08011d4c <memset>:
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	4402      	add	r2, r0
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d100      	bne.n	8011d56 <memset+0xa>
 8011d54:	4770      	bx	lr
 8011d56:	f803 1b01 	strb.w	r1, [r3], #1
 8011d5a:	e7f9      	b.n	8011d50 <memset+0x4>

08011d5c <_sbrk_r>:
 8011d5c:	b538      	push	{r3, r4, r5, lr}
 8011d5e:	2300      	movs	r3, #0
 8011d60:	4d05      	ldr	r5, [pc, #20]	@ (8011d78 <_sbrk_r+0x1c>)
 8011d62:	4604      	mov	r4, r0
 8011d64:	4608      	mov	r0, r1
 8011d66:	602b      	str	r3, [r5, #0]
 8011d68:	f7f8 ffce 	bl	800ad08 <_sbrk>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d102      	bne.n	8011d76 <_sbrk_r+0x1a>
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	b103      	cbz	r3, 8011d76 <_sbrk_r+0x1a>
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	20004bc8 	.word	0x20004bc8

08011d7c <__errno>:
 8011d7c:	4b01      	ldr	r3, [pc, #4]	@ (8011d84 <__errno+0x8>)
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20000070 	.word	0x20000070

08011d88 <__libc_init_array>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	2600      	movs	r6, #0
 8011d8c:	4d0c      	ldr	r5, [pc, #48]	@ (8011dc0 <__libc_init_array+0x38>)
 8011d8e:	4c0d      	ldr	r4, [pc, #52]	@ (8011dc4 <__libc_init_array+0x3c>)
 8011d90:	1b64      	subs	r4, r4, r5
 8011d92:	10a4      	asrs	r4, r4, #2
 8011d94:	42a6      	cmp	r6, r4
 8011d96:	d109      	bne.n	8011dac <__libc_init_array+0x24>
 8011d98:	f000 f87a 	bl	8011e90 <_init>
 8011d9c:	2600      	movs	r6, #0
 8011d9e:	4d0a      	ldr	r5, [pc, #40]	@ (8011dc8 <__libc_init_array+0x40>)
 8011da0:	4c0a      	ldr	r4, [pc, #40]	@ (8011dcc <__libc_init_array+0x44>)
 8011da2:	1b64      	subs	r4, r4, r5
 8011da4:	10a4      	asrs	r4, r4, #2
 8011da6:	42a6      	cmp	r6, r4
 8011da8:	d105      	bne.n	8011db6 <__libc_init_array+0x2e>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db0:	4798      	blx	r3
 8011db2:	3601      	adds	r6, #1
 8011db4:	e7ee      	b.n	8011d94 <__libc_init_array+0xc>
 8011db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dba:	4798      	blx	r3
 8011dbc:	3601      	adds	r6, #1
 8011dbe:	e7f2      	b.n	8011da6 <__libc_init_array+0x1e>
 8011dc0:	08012c30 	.word	0x08012c30
 8011dc4:	08012c30 	.word	0x08012c30
 8011dc8:	08012c30 	.word	0x08012c30
 8011dcc:	08012c38 	.word	0x08012c38

08011dd0 <__retarget_lock_acquire_recursive>:
 8011dd0:	4770      	bx	lr

08011dd2 <__retarget_lock_release_recursive>:
 8011dd2:	4770      	bx	lr

08011dd4 <memcpy>:
 8011dd4:	440a      	add	r2, r1
 8011dd6:	4291      	cmp	r1, r2
 8011dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ddc:	d100      	bne.n	8011de0 <memcpy+0xc>
 8011dde:	4770      	bx	lr
 8011de0:	b510      	push	{r4, lr}
 8011de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011de6:	4291      	cmp	r1, r2
 8011de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dec:	d1f9      	bne.n	8011de2 <memcpy+0xe>
 8011dee:	bd10      	pop	{r4, pc}

08011df0 <_free_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4605      	mov	r5, r0
 8011df4:	2900      	cmp	r1, #0
 8011df6:	d040      	beq.n	8011e7a <_free_r+0x8a>
 8011df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dfc:	1f0c      	subs	r4, r1, #4
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	bfb8      	it	lt
 8011e02:	18e4      	addlt	r4, r4, r3
 8011e04:	f7ff ff60 	bl	8011cc8 <__malloc_lock>
 8011e08:	4a1c      	ldr	r2, [pc, #112]	@ (8011e7c <_free_r+0x8c>)
 8011e0a:	6813      	ldr	r3, [r2, #0]
 8011e0c:	b933      	cbnz	r3, 8011e1c <_free_r+0x2c>
 8011e0e:	6063      	str	r3, [r4, #4]
 8011e10:	6014      	str	r4, [r2, #0]
 8011e12:	4628      	mov	r0, r5
 8011e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e18:	f7ff bf5c 	b.w	8011cd4 <__malloc_unlock>
 8011e1c:	42a3      	cmp	r3, r4
 8011e1e:	d908      	bls.n	8011e32 <_free_r+0x42>
 8011e20:	6820      	ldr	r0, [r4, #0]
 8011e22:	1821      	adds	r1, r4, r0
 8011e24:	428b      	cmp	r3, r1
 8011e26:	bf01      	itttt	eq
 8011e28:	6819      	ldreq	r1, [r3, #0]
 8011e2a:	685b      	ldreq	r3, [r3, #4]
 8011e2c:	1809      	addeq	r1, r1, r0
 8011e2e:	6021      	streq	r1, [r4, #0]
 8011e30:	e7ed      	b.n	8011e0e <_free_r+0x1e>
 8011e32:	461a      	mov	r2, r3
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	b10b      	cbz	r3, 8011e3c <_free_r+0x4c>
 8011e38:	42a3      	cmp	r3, r4
 8011e3a:	d9fa      	bls.n	8011e32 <_free_r+0x42>
 8011e3c:	6811      	ldr	r1, [r2, #0]
 8011e3e:	1850      	adds	r0, r2, r1
 8011e40:	42a0      	cmp	r0, r4
 8011e42:	d10b      	bne.n	8011e5c <_free_r+0x6c>
 8011e44:	6820      	ldr	r0, [r4, #0]
 8011e46:	4401      	add	r1, r0
 8011e48:	1850      	adds	r0, r2, r1
 8011e4a:	4283      	cmp	r3, r0
 8011e4c:	6011      	str	r1, [r2, #0]
 8011e4e:	d1e0      	bne.n	8011e12 <_free_r+0x22>
 8011e50:	6818      	ldr	r0, [r3, #0]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	4408      	add	r0, r1
 8011e56:	6010      	str	r0, [r2, #0]
 8011e58:	6053      	str	r3, [r2, #4]
 8011e5a:	e7da      	b.n	8011e12 <_free_r+0x22>
 8011e5c:	d902      	bls.n	8011e64 <_free_r+0x74>
 8011e5e:	230c      	movs	r3, #12
 8011e60:	602b      	str	r3, [r5, #0]
 8011e62:	e7d6      	b.n	8011e12 <_free_r+0x22>
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	1821      	adds	r1, r4, r0
 8011e68:	428b      	cmp	r3, r1
 8011e6a:	bf01      	itttt	eq
 8011e6c:	6819      	ldreq	r1, [r3, #0]
 8011e6e:	685b      	ldreq	r3, [r3, #4]
 8011e70:	1809      	addeq	r1, r1, r0
 8011e72:	6021      	streq	r1, [r4, #0]
 8011e74:	6063      	str	r3, [r4, #4]
 8011e76:	6054      	str	r4, [r2, #4]
 8011e78:	e7cb      	b.n	8011e12 <_free_r+0x22>
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	20004a8c 	.word	0x20004a8c

08011e80 <_malloc_usable_size_r>:
 8011e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e84:	1f18      	subs	r0, r3, #4
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	bfbc      	itt	lt
 8011e8a:	580b      	ldrlt	r3, [r1, r0]
 8011e8c:	18c0      	addlt	r0, r0, r3
 8011e8e:	4770      	bx	lr

08011e90 <_init>:
 8011e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e92:	bf00      	nop
 8011e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e96:	bc08      	pop	{r3}
 8011e98:	469e      	mov	lr, r3
 8011e9a:	4770      	bx	lr

08011e9c <_fini>:
 8011e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e9e:	bf00      	nop
 8011ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ea2:	bc08      	pop	{r3}
 8011ea4:	469e      	mov	lr, r3
 8011ea6:	4770      	bx	lr
