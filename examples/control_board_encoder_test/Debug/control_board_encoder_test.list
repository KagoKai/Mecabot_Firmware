
control_board_encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004f60  08004f60  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f60  08004f60  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f60  08004f60  00005f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000068  08004fd0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004fd0  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b906  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002243  00000000  00000000  00011997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00013be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a3  00000000  00000000  00014740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d330  00000000  00000000  00014fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd0f  00000000  00000000  00032313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac07  00000000  00000000  00040022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dac29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000dac6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000de270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000068 	.word	0x20000068
 8000204:	00000000 	.word	0x00000000
 8000208:	08004efc 	.word	0x08004efc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000006c 	.word	0x2000006c
 8000224:	08004efc 	.word	0x08004efc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e32:	2afd      	cmp	r2, #253	@ 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	@ 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, const float (&b_coefficient)[2], const float (&a_coefficient)[2])
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e013      	b.n	8001232 <FO_IIR_Init+0x3a>
    {
        instance->b[i] = b_coefficient[i];
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	3202      	adds	r2, #2
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	dde8      	ble.n	800120a <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 8001252:	b5b0      	push	{r4, r5, r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f7ff fdb8 	bl	8000de0 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	461c      	mov	r4, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fdb0 	bl	8000de0 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	461d      	mov	r5, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f7ff fda6 	bl	8000de0 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fc99 	bl	8000bd0 <__addsf3>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc94 	bl	8000bd0 <__addsf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	615a      	str	r2, [r3, #20]

    return output;
 80012b8:	68fb      	ldr	r3, [r7, #12]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012c4 <Motor_Init>:
#include "dc_motor_2.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	463c      	mov	r4, r7
 80012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 80012d0:	2110      	movs	r1, #16
 80012d2:	2001      	movs	r0, #1
 80012d4:	f003 fcb8 	bl	8004c48 <calloc>
 80012d8:	4603      	mov	r3, r0
 80012da:	617b      	str	r3, [r7, #20]

    object->state = STATE_STOP;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    object->direction = DIRECTION_STOP;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2200      	movs	r2, #0
 80012e6:	705a      	strb	r2, [r3, #1]
    object->pwm_duty = 0;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2200      	movs	r2, #0
 80012ec:	709a      	strb	r2, [r3, #2]

    object->pwm_channel = handle.pwm_channel;
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 80012fa:	893a      	ldrh	r2, [r7, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <Motor_Init+0x60>)
 8001304:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001306:	2100      	movs	r1, #0
 8001308:	6978      	ldr	r0, [r7, #20]
 800130a:	f000 f833 	bl	8001374 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <Motor_Init+0x60>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f808 	bl	8001328 <Motor_Set_PWM_Frequency>

    return object;
 8001318:	697b      	ldr	r3, [r7, #20]
}
 800131a:	4618      	mov	r0, r3
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000084 	.word	0x20000084

08001328 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <Motor_Set_PWM_Frequency+0x40>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <Motor_Set_PWM_Frequency+0x44>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <Motor_Set_PWM_Frequency+0x40>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <Motor_Set_PWM_Frequency+0x48>)
 800134c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <Motor_Set_PWM_Frequency+0x44>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000084 	.word	0x20000084
 800136c:	20000088 	.word	0x20000088
 8001370:	01e84800 	.word	0x01e84800

08001374 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, int16_t duty)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
    switch (motor->state)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f993 3000 	ldrsb.w	r3, [r3]
 8001386:	3301      	adds	r3, #1
 8001388:	2b03      	cmp	r3, #3
 800138a:	d85b      	bhi.n	8001444 <Motor_Set_PWM_Duty+0xd0>
 800138c:	a201      	add	r2, pc, #4	@ (adr r2, 8001394 <Motor_Set_PWM_Duty+0x20>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013cf 	.word	0x080013cf
 8001398:	080013fd 	.word	0x080013fd
 800139c:	080013a5 	.word	0x080013a5
 80013a0:	0800143f 	.word	0x0800143f
    {
        case STATE_FORWARD:
        {
            if (duty > 0)
 80013a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dd04      	ble.n	80013b6 <Motor_Set_PWM_Duty+0x42>
                motor->pwm_duty = duty;            // duty: 0 - Min, 255 - Max
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	709a      	strb	r2, [r3, #2]
            {
                Motor_ChangeState(motor, STATE_BRAKE);
                motor->pwm_duty =  0;
            } 
        }
            break;
 80013b4:	e048      	b.n	8001448 <Motor_Set_PWM_Duty+0xd4>
            else if (duty <= 0)
 80013b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dc44      	bgt.n	8001448 <Motor_Set_PWM_Duty+0xd4>
                Motor_ChangeState(motor, STATE_BRAKE);
 80013be:	2102      	movs	r1, #2
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f8ab 	bl	800151c <Motor_ChangeState>
                motor->pwm_duty =  0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	709a      	strb	r2, [r3, #2]
            break;
 80013cc:	e03c      	b.n	8001448 <Motor_Set_PWM_Duty+0xd4>
        case STATE_BACKWARD:
            {
                if (duty >= 0)
 80013ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db07      	blt.n	80013e6 <Motor_Set_PWM_Duty+0x72>
                {
                    Motor_ChangeState(motor, STATE_BRAKE);
 80013d6:	2102      	movs	r1, #2
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f89f 	bl	800151c <Motor_ChangeState>
                    motor->pwm_duty = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	709a      	strb	r2, [r3, #2]
                }
                else if (duty < 0)
                    motor->pwm_duty = 255 + duty;
            }
            break;
 80013e4:	e032      	b.n	800144c <Motor_Set_PWM_Duty+0xd8>
                else if (duty < 0)
 80013e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da2e      	bge.n	800144c <Motor_Set_PWM_Duty+0xd8>
                    motor->pwm_duty = 255 + duty;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	709a      	strb	r2, [r3, #2]
            break;
 80013fa:	e027      	b.n	800144c <Motor_Set_PWM_Duty+0xd8>
        case STATE_STOP:
            {
                if (duty > MIN_DUTY)
 80013fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd08      	ble.n	8001416 <Motor_Set_PWM_Duty+0xa2>
                {
                    Motor_ChangeState(motor, STATE_FORWARD);
 8001404:	2101      	movs	r1, #1
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f888 	bl	800151c <Motor_ChangeState>
                    motor->pwm_duty = duty;
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	709a      	strb	r2, [r3, #2]
                else
                {
                    motor->pwm_duty = 0;
                }
            }
            break;
 8001414:	e01b      	b.n	800144e <Motor_Set_PWM_Duty+0xda>
                else if (duty < -MIN_DUTY)
 8001416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da0b      	bge.n	8001436 <Motor_Set_PWM_Duty+0xc2>
                    Motor_ChangeState(motor, STATE_BACKWARD);
 800141e:	f04f 31ff 	mov.w	r1, #4294967295
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f87a 	bl	800151c <Motor_ChangeState>
                    motor->pwm_duty = 255 + duty;
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3b01      	subs	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	709a      	strb	r2, [r3, #2]
            break;
 8001434:	e00b      	b.n	800144e <Motor_Set_PWM_Duty+0xda>
                    motor->pwm_duty = 0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	709a      	strb	r2, [r3, #2]
            break;
 800143c:	e007      	b.n	800144e <Motor_Set_PWM_Duty+0xda>
        case STATE_BRAKE:
            {
                motor->pwm_duty = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	709a      	strb	r2, [r3, #2]
            }
        default:
            break;
 8001444:	bf00      	nop
 8001446:	e002      	b.n	800144e <Motor_Set_PWM_Duty+0xda>
            break;
 8001448:	bf00      	nop
 800144a:	e000      	b.n	800144e <Motor_Set_PWM_Duty+0xda>
            break;
 800144c:	bf00      	nop
    }

    float duty_percentage = motor->pwm_duty / 255.0f;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fc70 	bl	8000d38 <__aeabi_i2f>
 8001458:	4603      	mov	r3, r0
 800145a:	491e      	ldr	r1, [pc, #120]	@ (80014d4 <Motor_Set_PWM_Duty+0x160>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd73 	bl	8000f48 <__aeabi_fdiv>
 8001462:	4603      	mov	r3, r0
 8001464:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <Motor_Set_PWM_Duty+0x164>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f7ff fc5e 	bl	8000d30 <__aeabi_ui2f>
 8001474:	4603      	mov	r3, r0
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fcb1 	bl	8000de0 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe99 	bl	80011b8 <__aeabi_f2uiz>
 8001486:	4603      	mov	r3, r0
 8001488:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <Motor_Set_PWM_Duty+0x128>
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <Motor_Set_PWM_Duty+0x164>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
 800149a:	e015      	b.n	80014c8 <Motor_Set_PWM_Duty+0x154>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d104      	bne.n	80014ae <Motor_Set_PWM_Duty+0x13a>
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <Motor_Set_PWM_Duty+0x164>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80014ac:	e00c      	b.n	80014c8 <Motor_Set_PWM_Duty+0x154>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d104      	bne.n	80014c0 <Motor_Set_PWM_Duty+0x14c>
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <Motor_Set_PWM_Duty+0x164>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014be:	e003      	b.n	80014c8 <Motor_Set_PWM_Duty+0x154>
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <Motor_Set_PWM_Duty+0x164>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	437f0000 	.word	0x437f0000
 80014d8:	20000088 	.word	0x20000088

080014dc <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    Motor_ChangeState(motor, motor->state);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ea:	4619      	mov	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f815 	bl	800151c <Motor_ChangeState>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <Motor_Start+0x3c>)
 80014fa:	f002 f93d 	bl	8003778 <HAL_TIM_PWM_Start>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <Motor_Start+0x32>
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	e000      	b.n	8001510 <Motor_Start+0x34>

    return STATUS_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000088 	.word	0x20000088

0800151c <Motor_ChangeState>:

    return STATUS_OK;
}

status_t Motor_ChangeState(Motor_t *motor, int8_t state)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
    motor->state = state;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	701a      	strb	r2, [r3, #0]

    if (state != STATE_BRAKE)
 800152e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d005      	beq.n	8001542 <Motor_ChangeState+0x26>
    {
        Motor_SetDirection(motor, state);
 8001536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f805 	bl	800154c <Motor_SetDirection>
    }

    return STATUS_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Motor_SetDirection>:

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	705a      	strb	r2, [r3, #1]

    switch (direction)
 800155e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d007      	beq.n	8001576 <Motor_SetDirection+0x2a>
 8001566:	2b01      	cmp	r3, #1
 8001568:	dc20      	bgt.n	80015ac <Motor_SetDirection+0x60>
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d014      	beq.n	800159a <Motor_SetDirection+0x4e>
 8001570:	2b00      	cmp	r3, #0
 8001572:	d009      	beq.n	8001588 <Motor_SetDirection+0x3c>
        break;
    case DIRECTION_BACKWARD:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
        break;
    default:
        break;
 8001574:	e01a      	b.n	80015ac <Motor_SetDirection+0x60>
    	HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6898      	ldr	r0, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	899b      	ldrh	r3, [r3, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f001 fc5b 	bl	8002e3c <HAL_GPIO_WritePin>
        break;
 8001586:	e012      	b.n	80015ae <Motor_SetDirection+0x62>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	899b      	ldrh	r3, [r3, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	f001 fc52 	bl	8002e3c <HAL_GPIO_WritePin>
        break;
 8001598:	e009      	b.n	80015ae <Motor_SetDirection+0x62>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6898      	ldr	r0, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	f001 fc49 	bl	8002e3c <HAL_GPIO_WritePin>
        break;
 80015aa:	e000      	b.n	80015ae <Motor_SetDirection+0x62>
        break;
 80015ac:	bf00      	nop
    }

    return STATUS_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	463b      	mov	r3, r7
 80015c0:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 80015c4:	210c      	movs	r1, #12
 80015c6:	2001      	movs	r0, #1
 80015c8:	f003 fb3e 	bl	8004c48 <calloc>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	609a      	str	r2, [r3, #8]

    return object;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4808      	ldr	r0, [pc, #32]	@ (8001620 <Encoder_Start+0x30>)
 8001600:	f002 f9cc 	bl	800399c <HAL_TIM_IC_Start_IT>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <Encoder_Start+0x24>
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e000      	b.n	8001616 <Encoder_Start+0x26>

    return STATUS_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000d0 	.word	0x200000d0

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f001 f904 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f80b 	bl	8001646 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f000 f9a2 	bl	8001978 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001634:	f000 f848 	bl	80016c8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001638:	f000 f90a 	bl	8001850 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800163c:	f000 fb22 	bl	8001c84 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001640:	f000 fb4a 	bl	8001cd8 <loop>
 8001644:	e7fc      	b.n	8001640 <main+0x1c>

08001646 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b090      	sub	sp, #64	@ 0x40
 800164a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	2228      	movs	r2, #40	@ 0x28
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fbc9 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001670:	2310      	movs	r3, #16
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001678:	2300      	movs	r3, #0
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800167c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fbf0 	bl	8002e6c <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001692:	f000 f9c1 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	230f      	movs	r3, #15
 8001698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169a:	2302      	movs	r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fe5e 	bl	8003370 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016ba:	f000 f9ad 	bl	8001a18 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3740      	adds	r7, #64	@ 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b096      	sub	sp, #88	@ 0x58
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2220      	movs	r2, #32
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fb73 	bl	8004dec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 8001706:	4b50      	ldr	r3, [pc, #320]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001708:	4a50      	ldr	r2, [pc, #320]	@ (800184c <MX_TIM1_Init+0x184>)
 800170a:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 32-1;
 800170c:	4b4e      	ldr	r3, [pc, #312]	@ (8001848 <MX_TIM1_Init+0x180>)
 800170e:	221f      	movs	r2, #31
 8001710:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 1000-1;
 8001718:	4b4b      	ldr	r3, [pc, #300]	@ (8001848 <MX_TIM1_Init+0x180>)
 800171a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800171e:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b49      	ldr	r3, [pc, #292]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 8001726:	4b48      	ldr	r3, [pc, #288]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <MX_TIM1_Init+0x180>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 8001732:	4845      	ldr	r0, [pc, #276]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001734:	f001 ff78 	bl	8003628 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800173e:	f000 f96b 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800174c:	4619      	mov	r1, r3
 800174e:	483e      	ldr	r0, [pc, #248]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001750:	f002 fca4 	bl	800409c <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800175a:	f000 f95d 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 800175e:	483a      	ldr	r0, [pc, #232]	@ (8001848 <MX_TIM1_Init+0x180>)
 8001760:	f001 ffb1 	bl	80036c6 <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800176a:	f000 f955 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8001776:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800177a:	4619      	mov	r1, r3
 800177c:	4832      	ldr	r0, [pc, #200]	@ (8001848 <MX_TIM1_Init+0x180>)
 800177e:	f003 f973 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001788:	f000 f946 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	@ 0x60
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4825      	ldr	r0, [pc, #148]	@ (8001848 <MX_TIM1_Init+0x180>)
 80017b2:	f002 fbb1 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017bc:	f000 f92c 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	2204      	movs	r2, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	481f      	ldr	r0, [pc, #124]	@ (8001848 <MX_TIM1_Init+0x180>)
 80017ca:	f002 fba5 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017d4:	f000 f920 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	2208      	movs	r2, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	4819      	ldr	r0, [pc, #100]	@ (8001848 <MX_TIM1_Init+0x180>)
 80017e2:	f002 fb99 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017ec:	f000 f914 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	220c      	movs	r2, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4813      	ldr	r0, [pc, #76]	@ (8001848 <MX_TIM1_Init+0x180>)
 80017fa:	f002 fb8d 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001804:	f000 f908 	bl	8001a18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800181c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001820:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	@ (8001848 <MX_TIM1_Init+0x180>)
 800182c:	f003 f988 	bl	8004b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001836:	f000 f8ef 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <MX_TIM1_Init+0x180>)
 800183c:	f000 ff0c 	bl	8002658 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3758      	adds	r7, #88	@ 0x58
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000088 	.word	0x20000088
 800184c:	40012c00 	.word	0x40012c00

08001850 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 800187a:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <MX_TIM8_Init+0x120>)
 800187c:	4a3d      	ldr	r2, [pc, #244]	@ (8001974 <MX_TIM8_Init+0x124>)
 800187e:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8001880:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <MX_TIM8_Init+0x120>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_TIM8_Init+0x120>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 800188c:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <MX_TIM8_Init+0x120>)
 800188e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001892:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <MX_TIM8_Init+0x120>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 800189a:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <MX_TIM8_Init+0x120>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <MX_TIM8_Init+0x120>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 80018a6:	4832      	ldr	r0, [pc, #200]	@ (8001970 <MX_TIM8_Init+0x120>)
 80018a8:	f001 febe 	bl	8003628 <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80018b2:	f000 f8b1 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 80018bc:	f107 0318 	add.w	r3, r7, #24
 80018c0:	4619      	mov	r1, r3
 80018c2:	482b      	ldr	r0, [pc, #172]	@ (8001970 <MX_TIM8_Init+0x120>)
 80018c4:	f002 fbea 	bl	800409c <HAL_TIM_ConfigClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80018ce:	f000 f8a3 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 80018d2:	4827      	ldr	r0, [pc, #156]	@ (8001970 <MX_TIM8_Init+0x120>)
 80018d4:	f002 f80a 	bl	80038ec <HAL_TIM_IC_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80018de:	f000 f89b 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4619      	mov	r1, r3
 80018f0:	481f      	ldr	r0, [pc, #124]	@ (8001970 <MX_TIM8_Init+0x120>)
 80018f2:	f003 f8b9 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80018fc:	f000 f88c 	bl	8001a18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800190c:	230f      	movs	r3, #15
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	4816      	ldr	r0, [pc, #88]	@ (8001970 <MX_TIM8_Init+0x120>)
 8001918:	f002 fa62 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001922:	f000 f879 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4810      	ldr	r0, [pc, #64]	@ (8001970 <MX_TIM8_Init+0x120>)
 800192e:	f002 fa57 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001938:	f000 f86e 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	2208      	movs	r2, #8
 8001940:	4619      	mov	r1, r3
 8001942:	480b      	ldr	r0, [pc, #44]	@ (8001970 <MX_TIM8_Init+0x120>)
 8001944:	f002 fa4c 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 800194e:	f000 f863 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	220c      	movs	r2, #12
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_TIM8_Init+0x120>)
 800195a:	f002 fa41 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001964:	f000 f858 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	@ 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000d0 	.word	0x200000d0
 8001974:	40013400 	.word	0x40013400

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_GPIO_Init+0x98>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <MX_GPIO_Init+0x98>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_GPIO_Init+0x98>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_GPIO_Init+0x98>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019da:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <MX_GPIO_Init+0x9c>)
 80019dc:	f001 fa2e 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	210f      	movs	r1, #15
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <MX_GPIO_Init+0x9c>)
 80019e6:	f001 fa29 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80019ea:	f242 030f 	movw	r3, #8207	@ 0x200f
 80019ee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	4804      	ldr	r0, [pc, #16]	@ (8001a14 <MX_GPIO_Init+0x9c>)
 8001a04:	f001 f886 	bl	8002b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40011000 	.word	0x40011000

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <_Z18mecabot_motor_initv>:
bool is_pid = true;			// Set to true to test PID
bool speed_changed_100 = false, speed_changed_175 = false, speed_changed_250 = false, speed_changed_stop = false;


status_t mecabot_motor_init(void)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <_Z18mecabot_motor_initv+0x78>)
 8001a2c:	463c      	mov	r4, r7
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 8001a34:	463b      	mov	r3, r7
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	f7ff fc44 	bl	80012c4 <Motor_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <_Z18mecabot_motor_initv+0x7c>)
 8001a40:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <_Z18mecabot_motor_initv+0x80>)
 8001a48:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a52:	f7ff fc37 	bl	80012c4 <Motor_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <_Z18mecabot_motor_initv+0x7c>)
 8001a5a:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8001a60:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <_Z18mecabot_motor_initv+0x80>)
 8001a62:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 8001a64:	2301      	movs	r3, #1
 8001a66:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a6c:	f7ff fc2a 	bl	80012c4 <Motor_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <_Z18mecabot_motor_initv+0x7c>)
 8001a74:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 8001a76:	2304      	movs	r3, #4
 8001a78:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <_Z18mecabot_motor_initv+0x80>)
 8001a7c:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 8001a82:	463b      	mov	r3, r7
 8001a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a86:	f7ff fc1d 	bl	80012c4 <Motor_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <_Z18mecabot_motor_initv+0x7c>)
 8001a8e:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	08004f14 	.word	0x08004f14
 8001aa0:	20000158 	.word	0x20000158
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <_Z20mecabot_encoder_initv>:

status_t mecabot_encoder_init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 8001aae:	4a2f      	ldr	r2, [pc, #188]	@ (8001b6c <_Z20mecabot_encoder_initv+0xc4>)
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab8:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac4:	f7ff fd78 	bl	80015b8 <Encoder_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <_Z20mecabot_encoder_initv+0xc8>)
 8001acc:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	833b      	strh	r3, [r7, #24]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ada:	f7ff fd6d 	bl	80015b8 <Encoder_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <_Z20mecabot_encoder_initv+0xc8>)
 8001ae2:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	833b      	strh	r3, [r7, #24]
    encoder[back_left] = Encoder_Init(handle_encoder);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001af0:	f7ff fd62 	bl	80015b8 <Encoder_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <_Z20mecabot_encoder_initv+0xc8>)
 8001af8:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 8001afa:	2304      	movs	r3, #4
 8001afc:	833b      	strh	r3, [r7, #24]
    encoder[back_right] = Encoder_Init(handle_encoder);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b06:	f7ff fd57 	bl	80015b8 <Encoder_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <_Z20mecabot_encoder_initv+0xc8>)
 8001b0e:	60d3      	str	r3, [r2, #12]

    // Initialize the encoder Low-pass Filter
    float b_coeff[] = { 0.2452,	0.2452 };
 8001b10:	4a18      	ldr	r2, [pc, #96]	@ (8001b74 <_Z20mecabot_encoder_initv+0xcc>)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1a:	e883 0003 	stmia.w	r3, {r0, r1}
    float a_coeff[] = {    1.0, -0.5095 };
 8001b1e:	4a16      	ldr	r2, [pc, #88]	@ (8001b78 <_Z20mecabot_encoder_initv+0xd0>)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 4; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e015      	b.n	8001b5c <_Z20mecabot_encoder_initv+0xb4>
	{
		encoder_filter[i] = new FO_IIR_Filter_t;
 8001b30:	2018      	movs	r0, #24
 8001b32:	f003 f868 	bl	8004c06 <_Znwj>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <_Z20mecabot_encoder_initv+0xd4>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		FO_IIR_Init(encoder_filter[i], b_coeff, a_coeff);
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <_Z20mecabot_encoder_initv+0xd4>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	1d3a      	adds	r2, r7, #4
 8001b4c:	f107 010c 	add.w	r1, r7, #12
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fb51 	bl	80011f8 <FO_IIR_Init>
	for (int i = 0; i < 4; i++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	dde6      	ble.n	8001b30 <_Z20mecabot_encoder_initv+0x88>
	}
    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08004f24 	.word	0x08004f24
 8001b70:	20000148 	.word	0x20000148
 8001b74:	08004f2c 	.word	0x08004f2c
 8001b78:	08004f34 	.word	0x08004f34
 8001b7c:	20000168 	.word	0x20000168

08001b80 <_Z16mecabot_pid_initv>:

status_t mecabot_pid_init(void)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af02      	add	r7, sp, #8
	for (int i = 0; i < 4; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e023      	b.n	8001bd4 <_Z16mecabot_pid_initv+0x54>
	{
		my_controller[i] = PID_Init(KP, KI, KD);
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9cd 2300 	strd	r2, r3, [sp]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <_Z16mecabot_pid_initv+0x64>)
 8001b9e:	f04f 0000 	mov.w	r0, #0
 8001ba2:	4911      	ldr	r1, [pc, #68]	@ (8001be8 <_Z16mecabot_pid_initv+0x68>)
 8001ba4:	f000 fb90 	bl	80022c8 <PID_Init>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4910      	ldr	r1, [pc, #64]	@ (8001bec <_Z16mecabot_pid_initv+0x6c>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		my_controller[i]->set_point = vel_setpoint;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <_Z16mecabot_pid_initv+0x70>)
 8001bb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <_Z16mecabot_pid_initv+0x6c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7fe fc83 	bl	80004cc <__aeabi_i2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c4 2300 	strd	r2, r3, [r4]
	for (int i = 0; i < 4; i++)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	ddd8      	ble.n	8001b8c <_Z16mecabot_pid_initv+0xc>
	}

	return STATUS_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	40390000 	.word	0x40390000
 8001be8:	40218000 	.word	0x40218000
 8001bec:	20000178 	.word	0x20000178
 8001bf0:	200001e8 	.word	0x200001e8

08001bf4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	switch (htim->Channel)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7f1b      	ldrb	r3, [r3, #28]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	d82d      	bhi.n	8001c62 <HAL_TIM_IC_CaptureCallback+0x6e>
 8001c06:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <HAL_TIM_IC_CaptureCallback+0x18>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c3b 	.word	0x08001c3b
 8001c10:	08001c57 	.word	0x08001c57
 8001c14:	08001c63 	.word	0x08001c63
 8001c18:	08001c2d 	.word	0x08001c2d
 8001c1c:	08001c63 	.word	0x08001c63
 8001c20:	08001c63 	.word	0x08001c63
 8001c24:	08001c63 	.word	0x08001c63
 8001c28:	08001c49 	.word	0x08001c49
	{
	case HAL_TIM_ACTIVE_CHANNEL_3:
		encoder[front_left]->tick++;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	3201      	adds	r2, #1
 8001c34:	b292      	uxth	r2, r2
 8001c36:	801a      	strh	r2, [r3, #0]
		break;
 8001c38:	e014      	b.n	8001c64 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_1:
		encoder[front_right]->tick++;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	3201      	adds	r2, #1
 8001c42:	b292      	uxth	r2, r2
 8001c44:	801a      	strh	r2, [r3, #0]
		break;
 8001c46:	e00d      	b.n	8001c64 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		encoder[back_left]->tick++;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	3201      	adds	r2, #1
 8001c50:	b292      	uxth	r2, r2
 8001c52:	801a      	strh	r2, [r3, #0]
		break;
 8001c54:	e006      	b.n	8001c64 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		encoder[back_right]->tick++;
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	3201      	adds	r2, #1
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	801a      	strh	r2, [r3, #0]
	default:
		break;
 8001c62:	bf00      	nop
	}
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000148 	.word	0x20000148

08001c74 <_Z6millisv>:

uint32_t millis()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001c78:	f000 fe34 	bl	80028e4 <HAL_GetTick>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <setup>:

void updateRpm(void);

void setup()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	mecabot_motor_init();
 8001c8a:	f7ff fecb 	bl	8001a24 <_Z18mecabot_motor_initv>
	mecabot_encoder_init();
 8001c8e:	f7ff ff0b 	bl	8001aa8 <_Z20mecabot_encoder_initv>
	mecabot_pid_init();
 8001c92:	f7ff ff75 	bl	8001b80 <_Z16mecabot_pid_initv>

	for (int i=0; i<4; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	e010      	b.n	8001cbe <setup+0x3a>
	{
		Motor_Start(mecabot_motor[i]);
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <setup+0x4c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fc19 	bl	80014dc <Motor_Start>
		Encoder_Start(encoder[i]);
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <setup+0x50>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fc9c 	bl	80015f0 <Encoder_Start>
	for (int i=0; i<4; i++)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	ddeb      	ble.n	8001c9c <setup+0x18>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000158 	.word	0x20000158
 8001cd4:	20000148 	.word	0x20000148

08001cd8 <loop>:

int8_t direction;
uint8_t duty_debug;
void loop()
{
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af02      	add	r7, sp, #8
	t = millis();
 8001cde:	f7ff ffc9 	bl	8001c74 <_Z6millisv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a94      	ldr	r2, [pc, #592]	@ (8001f38 <loop+0x260>)
 8001ce6:	6013      	str	r3, [r2, #0]

	if ((t - t_motor_rpm_prev) >= dt[0])
 8001ce8:	4b93      	ldr	r3, [pc, #588]	@ (8001f38 <loop+0x260>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b93      	ldr	r3, [pc, #588]	@ (8001f3c <loop+0x264>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	4a93      	ldr	r2, [pc, #588]	@ (8001f40 <loop+0x268>)
 8001cf4:	8812      	ldrh	r2, [r2, #0]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d305      	bcc.n	8001d06 <loop+0x2e>
	{
		updateRpm();
 8001cfa:	f000 f96d 	bl	8001fd8 <_Z9updateRpmv>
		//publishRpmMsg();

		t_motor_rpm_prev = t;
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8001f38 <loop+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a8e      	ldr	r2, [pc, #568]	@ (8001f3c <loop+0x264>)
 8001d04:	6013      	str	r3, [r2, #0]
	}

	if ((t - t_motor_control_prev) >= dt[1])
 8001d06:	4b8c      	ldr	r3, [pc, #560]	@ (8001f38 <loop+0x260>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f44 <loop+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a8b      	ldr	r2, [pc, #556]	@ (8001f40 <loop+0x268>)
 8001d12:	8852      	ldrh	r2, [r2, #2]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	f0c0 808b 	bcc.w	8001e30 <loop+0x158>
	{
		int8_t direction;
		for (int i = 0; i < 4; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e06b      	b.n	8001df8 <loop+0x120>
		{
			if (mecabot_motor[i]->state == STATE_BRAKE)
 8001d20:	4a89      	ldr	r2, [pc, #548]	@ (8001f48 <loop+0x270>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d11d      	bne.n	8001d6c <loop+0x94>
			{
				if ((filtered_vel_data[i] > -0.001f) && (filtered_vel_data[i] < 0.001f))
 8001d30:	4a86      	ldr	r2, [pc, #536]	@ (8001f4c <loop+0x274>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	4985      	ldr	r1, [pc, #532]	@ (8001f50 <loop+0x278>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fa0c 	bl	8001158 <__aeabi_fcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <loop+0x94>
 8001d46:	4a81      	ldr	r2, [pc, #516]	@ (8001f4c <loop+0x274>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	4981      	ldr	r1, [pc, #516]	@ (8001f54 <loop+0x27c>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f9e3 	bl	800111c <__aeabi_fcmplt>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <loop+0x94>
				{
					Motor_ChangeState(mecabot_motor[i], STATE_STOP);
 8001d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8001f48 <loop+0x270>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fbd8 	bl	800151c <Motor_ChangeState>
				}
			}

			if (use_pid) { duty[i] = PID_Compute(my_controller[i], filtered_vel_data[i], dt[1]); }
 8001d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f58 <loop+0x280>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d027      	beq.n	8001dc4 <loop+0xec>
 8001d74:	4a79      	ldr	r2, [pc, #484]	@ (8001f5c <loop+0x284>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8001d7c:	4a73      	ldr	r2, [pc, #460]	@ (8001f4c <loop+0x274>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbb3 	bl	80004f0 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001f40 <loop+0x268>)
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb8a 	bl	80004ac <__aeabi_ui2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001da0:	4622      	mov	r2, r4
 8001da2:	462b      	mov	r3, r5
 8001da4:	4630      	mov	r0, r6
 8001da6:	f000 fae3 	bl	8002370 <PID_Compute>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fe8f 	bl	8000ad4 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b219      	sxth	r1, r3
 8001dba:	4a69      	ldr	r2, [pc, #420]	@ (8001f60 <loop+0x288>)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dc2:	e016      	b.n	8001df2 <loop+0x11a>
			else		 { duty[i] = filtered_vel_data[i]/WHEEL_MAX_ANGULAR_VELOCITY * 255; }
 8001dc4:	4a61      	ldr	r2, [pc, #388]	@ (8001f4c <loop+0x274>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	4965      	ldr	r1, [pc, #404]	@ (8001f64 <loop+0x28c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8ba 	bl	8000f48 <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4964      	ldr	r1, [pc, #400]	@ (8001f68 <loop+0x290>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f801 	bl	8000de0 <__aeabi_fmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f9c3 	bl	800116c <__aeabi_f2iz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b219      	sxth	r1, r3
 8001dea:	4a5d      	ldr	r2, [pc, #372]	@ (8001f60 <loop+0x288>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	dd90      	ble.n	8001d20 <loop+0x48>
		}

		for (int i = 0; i < 4; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e00e      	b.n	8001e22 <loop+0x14a>
		{
			Motor_Set_PWM_Duty(mecabot_motor[i], duty[i]);
 8001e04:	4a50      	ldr	r2, [pc, #320]	@ (8001f48 <loop+0x270>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e0c:	4954      	ldr	r1, [pc, #336]	@ (8001f60 <loop+0x288>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7ff faac 	bl	8001374 <Motor_Set_PWM_Duty>
		for (int i = 0; i < 4; i++)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	dded      	ble.n	8001e04 <loop+0x12c>
		}

		t_motor_control_prev = t;
 8001e28:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <loop+0x260>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <loop+0x26c>)
 8001e2e:	6013      	str	r3, [r2, #0]
	}

	if (is_pid)
 8001e30:	4b4e      	ldr	r3, [pc, #312]	@ (8001f6c <loop+0x294>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80c2 	beq.w	8001fbe <loop+0x2e6>
	{
		if ((t >= 5000) && (speed_changed_100 == false))
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <loop+0x260>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d91b      	bls.n	8001e7e <loop+0x1a6>
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <loop+0x298>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d117      	bne.n	8001e7e <loop+0x1a6>
		{
			for (int i=0; i<4; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e00b      	b.n	8001e6c <loop+0x194>
			{
				my_controller[i]->set_point = SET_POINT_100;
 8001e54:	4a41      	ldr	r2, [pc, #260]	@ (8001f5c <loop+0x284>)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e5c:	a330      	add	r3, pc, #192	@ (adr r3, 8001f20 <loop+0x248>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<4; i++)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	ddf0      	ble.n	8001e54 <loop+0x17c>
				//motor_duty[i] = 60;
			}
			set_point = 100;
 8001e72:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <loop+0x29c>)
 8001e74:	4a40      	ldr	r2, [pc, #256]	@ (8001f78 <loop+0x2a0>)
 8001e76:	601a      	str	r2, [r3, #0]
			speed_changed_100 = true;
 8001e78:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <loop+0x298>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
		}
		if ((t >= 15000) && (speed_changed_175 == false))
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <loop+0x260>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d91b      	bls.n	8001ec2 <loop+0x1ea>
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <loop+0x2a4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d117      	bne.n	8001ec2 <loop+0x1ea>
		{
			for (int i=0; i<4; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	e00b      	b.n	8001eb0 <loop+0x1d8>
			{
				my_controller[i]->set_point = SET_POINT_175;
 8001e98:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <loop+0x284>)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ea0:	a321      	add	r3, pc, #132	@ (adr r3, 8001f28 <loop+0x250>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<4; i++)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	ddf0      	ble.n	8001e98 <loop+0x1c0>
				//motor_duty[i] = 80;
			}
			set_point = 175;
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <loop+0x29c>)
 8001eb8:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <loop+0x2a8>)
 8001eba:	601a      	str	r2, [r3, #0]
			speed_changed_175 = true;
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <loop+0x2a4>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
		}
		if ((t >= 20000) && (speed_changed_250 == false))
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <loop+0x260>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d91b      	bls.n	8001f06 <loop+0x22e>
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <loop+0x2ac>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d117      	bne.n	8001f06 <loop+0x22e>
		{
			for (int i=0; i<4; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e00b      	b.n	8001ef4 <loop+0x21c>
			{
				my_controller[i]->set_point = SET_POINT_250;
 8001edc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <loop+0x284>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ee4:	a312      	add	r3, pc, #72	@ (adr r3, 8001f30 <loop+0x258>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<4; i++)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	ddf0      	ble.n	8001edc <loop+0x204>
				//motor_duty[i] = 130;
			}
			set_point = 250;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <loop+0x29c>)
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <loop+0x2b0>)
 8001efe:	601a      	str	r2, [r3, #0]
			speed_changed_250 = true;
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <loop+0x2ac>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
		}
		if ((t >= 25000) && (speed_changed_stop == false))
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <loop+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d955      	bls.n	8001fbe <loop+0x2e6>
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <loop+0x2b4>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d151      	bne.n	8001fbe <loop+0x2e6>
		{
			for (int i=0; i<4; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	e044      	b.n	8001faa <loop+0x2d2>
 8001f20:	bdd828a7 	.word	0xbdd828a7
 8001f24:	4024f1a6 	.word	0x4024f1a6
 8001f28:	f5d260a7 	.word	0xf5d260a7
 8001f2c:	40325371 	.word	0x40325371
 8001f30:	6705b3fc 	.word	0x6705b3fc
 8001f34:	403a2e10 	.word	0x403a2e10
 8001f38:	20000190 	.word	0x20000190
 8001f3c:	20000198 	.word	0x20000198
 8001f40:	20000004 	.word	0x20000004
 8001f44:	20000194 	.word	0x20000194
 8001f48:	20000158 	.word	0x20000158
 8001f4c:	200001d8 	.word	0x200001d8
 8001f50:	ba83126f 	.word	0xba83126f
 8001f54:	3a83126f 	.word	0x3a83126f
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000178 	.word	0x20000178
 8001f60:	20000188 	.word	0x20000188
 8001f64:	43700000 	.word	0x43700000
 8001f68:	437f0000 	.word	0x437f0000
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	200001f0 	.word	0x200001f0
 8001f74:	200001ec 	.word	0x200001ec
 8001f78:	42c80000 	.word	0x42c80000
 8001f7c:	200001f1 	.word	0x200001f1
 8001f80:	432f0000 	.word	0x432f0000
 8001f84:	200001f2 	.word	0x200001f2
 8001f88:	437a0000 	.word	0x437a0000
 8001f8c:	200001f3 	.word	0x200001f3
			{
				my_controller[i]->set_point = 0;
 8001f90:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <loop+0x2f0>)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i=0; i<4; i++)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	ddef      	ble.n	8001f90 <loop+0x2b8>
				//motor_duty[i] = 0;
			}
			set_point = 0;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <loop+0x2f4>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
			speed_changed_stop = true;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <loop+0x2f8>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000178 	.word	0x20000178
 8001fcc:	200001ec 	.word	0x200001ec
 8001fd0:	200001f3 	.word	0x200001f3
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <_Z9updateRpmv>:

void updateRpm()
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e112      	b.n	800220a <_Z9updateRpmv+0x232>
	{
		if (encoder[i]->tick < prev_tick[i])	// Over-flow
 8001fe4:	4aa0      	ldr	r2, [pc, #640]	@ (8002268 <_Z9updateRpmv+0x290>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	881a      	ldrh	r2, [r3, #0]
 8001fee:	499f      	ldr	r1, [pc, #636]	@ (800226c <_Z9updateRpmv+0x294>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d215      	bcs.n	8002026 <_Z9updateRpmv+0x4e>
		{
			d_tick = encoder[i]->tick + (encoder[i]->max_count - prev_tick[i]);
 8001ffa:	4a9b      	ldr	r2, [pc, #620]	@ (8002268 <_Z9updateRpmv+0x290>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	4998      	ldr	r1, [pc, #608]	@ (8002268 <_Z9updateRpmv+0x290>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	b299      	uxth	r1, r3
 8002010:	4896      	ldr	r0, [pc, #600]	@ (800226c <_Z9updateRpmv+0x294>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002018:	1acb      	subs	r3, r1, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b93      	ldr	r3, [pc, #588]	@ (8002270 <_Z9updateRpmv+0x298>)
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	e01b      	b.n	800205e <_Z9updateRpmv+0x86>
		}
		else if (encoder[i]->tick > prev_tick[i])
 8002026:	4a90      	ldr	r2, [pc, #576]	@ (8002268 <_Z9updateRpmv+0x290>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	498e      	ldr	r1, [pc, #568]	@ (800226c <_Z9updateRpmv+0x294>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002038:	429a      	cmp	r2, r3
 800203a:	d90d      	bls.n	8002058 <_Z9updateRpmv+0x80>
		{
			d_tick = encoder[i]->tick - prev_tick[i];
 800203c:	4a8a      	ldr	r2, [pc, #552]	@ (8002268 <_Z9updateRpmv+0x290>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	4989      	ldr	r1, [pc, #548]	@ (800226c <_Z9updateRpmv+0x294>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b87      	ldr	r3, [pc, #540]	@ (8002270 <_Z9updateRpmv+0x298>)
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <_Z9updateRpmv+0x86>
		}
		else
		{
			d_tick = 0;
 8002058:	4b85      	ldr	r3, [pc, #532]	@ (8002270 <_Z9updateRpmv+0x298>)
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
		}

		switch (i) // Debug
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d82f      	bhi.n	80020c4 <_Z9updateRpmv+0xec>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <_Z9updateRpmv+0x94>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	0800207d 	.word	0x0800207d
 8002070:	0800208f 	.word	0x0800208f
 8002074:	080020a1 	.word	0x080020a1
 8002078:	080020b3 	.word	0x080020b3
		{
			case 0:
				FL_dtick = d_tick;
 800207c:	4b7c      	ldr	r3, [pc, #496]	@ (8002270 <_Z9updateRpmv+0x298>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fe55 	bl	8000d30 <__aeabi_ui2f>
 8002086:	4603      	mov	r3, r0
 8002088:	4a7a      	ldr	r2, [pc, #488]	@ (8002274 <_Z9updateRpmv+0x29c>)
 800208a:	6013      	str	r3, [r2, #0]
				break;
 800208c:	e01b      	b.n	80020c6 <_Z9updateRpmv+0xee>
			case 1:
				FR_dtick = d_tick;
 800208e:	4b78      	ldr	r3, [pc, #480]	@ (8002270 <_Z9updateRpmv+0x298>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe4c 	bl	8000d30 <__aeabi_ui2f>
 8002098:	4603      	mov	r3, r0
 800209a:	4a77      	ldr	r2, [pc, #476]	@ (8002278 <_Z9updateRpmv+0x2a0>)
 800209c:	6013      	str	r3, [r2, #0]
				break;
 800209e:	e012      	b.n	80020c6 <_Z9updateRpmv+0xee>
			case 2:
				BL_dtick = d_tick;
 80020a0:	4b73      	ldr	r3, [pc, #460]	@ (8002270 <_Z9updateRpmv+0x298>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fe43 	bl	8000d30 <__aeabi_ui2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a73      	ldr	r2, [pc, #460]	@ (800227c <_Z9updateRpmv+0x2a4>)
 80020ae:	6013      	str	r3, [r2, #0]
				break;
 80020b0:	e009      	b.n	80020c6 <_Z9updateRpmv+0xee>
			case 3:
				BR_dtick = d_tick;
 80020b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002270 <_Z9updateRpmv+0x298>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fe3a 	bl	8000d30 <__aeabi_ui2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a70      	ldr	r2, [pc, #448]	@ (8002280 <_Z9updateRpmv+0x2a8>)
 80020c0:	6013      	str	r3, [r2, #0]
				break;
 80020c2:	e000      	b.n	80020c6 <_Z9updateRpmv+0xee>
			default:
				break;
 80020c4:	bf00      	nop
		}

		prev_tick[i] = encoder[i]->tick;
 80020c6:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <_Z9updateRpmv+0x290>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	8819      	ldrh	r1, [r3, #0]
 80020d0:	4a66      	ldr	r2, [pc, #408]	@ (800226c <_Z9updateRpmv+0x294>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		raw_vel_data[i] = static_cast<float>(d_tick) / ENCODER_RESOLUTION;
 80020d8:	4b65      	ldr	r3, [pc, #404]	@ (8002270 <_Z9updateRpmv+0x298>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe27 	bl	8000d30 <__aeabi_ui2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4967      	ldr	r1, [pc, #412]	@ (8002284 <_Z9updateRpmv+0x2ac>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe ff2e 	bl	8000f48 <__aeabi_fdiv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4a65      	ldr	r2, [pc, #404]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per second
		raw_vel_data[i] *= VEL_FEEDBACK_FREQUENCY;
 80020f8:	4a63      	ldr	r2, [pc, #396]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	4962      	ldr	r1, [pc, #392]	@ (800228c <_Z9updateRpmv+0x2b4>)
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fe6c 	bl	8000de0 <__aeabi_fmul>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4a5e      	ldr	r2, [pc, #376]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the radians per second
		raw_vel_data[i] *= 2 * PI;
 8002114:	4a5c      	ldr	r2, [pc, #368]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9e7 	bl	80004f0 <__aeabi_f2d>
 8002122:	a34f      	add	r3, pc, #316	@ (adr r3, 8002260 <_Z9updateRpmv+0x288>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa3a 	bl	80005a0 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fcf6 	bl	8000b24 <__aeabi_d2f>
 8002138:	4602      	mov	r2, r0
 800213a:	4953      	ldr	r1, [pc, #332]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Apply Low Pass filter
		filtered_vel_data[i] = mecabot_motor[i]->direction * FO_IIR_Compute(encoder_filter[i], raw_vel_data[i]);
 8002142:	4a53      	ldr	r2, [pc, #332]	@ (8002290 <_Z9updateRpmv+0x2b8>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdf2 	bl	8000d38 <__aeabi_i2f>
 8002154:	4604      	mov	r4, r0
 8002156:	4a4f      	ldr	r2, [pc, #316]	@ (8002294 <_Z9updateRpmv+0x2bc>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800215e:	494a      	ldr	r1, [pc, #296]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f7ff f872 	bl	8001252 <FO_IIR_Compute>
 800216e:	4603      	mov	r3, r0
 8002170:	4619      	mov	r1, r3
 8002172:	4620      	mov	r0, r4
 8002174:	f7fe fe34 	bl	8000de0 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <_Z9updateRpmv+0x2c0>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		raw_rpm_data[i] = raw_vel_data[i] / (2 * PI) * 60;
 8002184:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <_Z9updateRpmv+0x2b0>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9af 	bl	80004f0 <__aeabi_f2d>
 8002192:	a333      	add	r3, pc, #204	@ (adr r3, 8002260 <_Z9updateRpmv+0x288>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fb2c 	bl	80007f4 <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b3c      	ldr	r3, [pc, #240]	@ (800229c <_Z9updateRpmv+0x2c4>)
 80021aa:	f7fe f9f9 	bl	80005a0 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fcb5 	bl	8000b24 <__aeabi_d2f>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4938      	ldr	r1, [pc, #224]	@ (80022a0 <_Z9updateRpmv+0x2c8>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		filtered_rpm_data[i] = filtered_vel_data[i] / (2 * PI) * 60;
 80021c4:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <_Z9updateRpmv+0x2c0>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f98f 	bl	80004f0 <__aeabi_f2d>
 80021d2:	a323      	add	r3, pc, #140	@ (adr r3, 8002260 <_Z9updateRpmv+0x288>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe fb0c 	bl	80007f4 <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <_Z9updateRpmv+0x2c4>)
 80021ea:	f7fe f9d9 	bl	80005a0 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fc95 	bl	8000b24 <__aeabi_d2f>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4929      	ldr	r1, [pc, #164]	@ (80022a4 <_Z9updateRpmv+0x2cc>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; ++i)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b03      	cmp	r3, #3
 800220e:	f77f aee9 	ble.w	8001fe4 <_Z9updateRpmv+0xc>
	}

	raw_FL_rpm = raw_rpm_data[front_left]; raw_FR_rpm = raw_rpm_data[front_right];
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <_Z9updateRpmv+0x2c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a24      	ldr	r2, [pc, #144]	@ (80022a8 <_Z9updateRpmv+0x2d0>)
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <_Z9updateRpmv+0x2c8>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <_Z9updateRpmv+0x2d4>)
 8002220:	6013      	str	r3, [r2, #0]
	raw_BL_rpm = raw_rpm_data[back_left];  raw_BR_rpm = raw_rpm_data[back_right];
 8002222:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <_Z9updateRpmv+0x2c8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <_Z9updateRpmv+0x2d8>)
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <_Z9updateRpmv+0x2c8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <_Z9updateRpmv+0x2dc>)
 8002230:	6013      	str	r3, [r2, #0]

	FL_rpm = filtered_rpm_data[front_left]; FR_rpm = filtered_rpm_data[front_right];
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <_Z9updateRpmv+0x2cc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <_Z9updateRpmv+0x2e0>)
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <_Z9updateRpmv+0x2cc>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <_Z9updateRpmv+0x2e4>)
 8002240:	6013      	str	r3, [r2, #0]
	BL_rpm = filtered_rpm_data[back_left];  BR_rpm = filtered_rpm_data[back_right];
 8002242:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <_Z9updateRpmv+0x2cc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <_Z9updateRpmv+0x2e8>)
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <_Z9updateRpmv+0x2cc>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <_Z9updateRpmv+0x2ec>)
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	54442eea 	.word	0x54442eea
 8002264:	401921fb 	.word	0x401921fb
 8002268:	20000148 	.word	0x20000148
 800226c:	200001a0 	.word	0x200001a0
 8002270:	2000019c 	.word	0x2000019c
 8002274:	20000138 	.word	0x20000138
 8002278:	2000013c 	.word	0x2000013c
 800227c:	20000140 	.word	0x20000140
 8002280:	20000144 	.word	0x20000144
 8002284:	41a00000 	.word	0x41a00000
 8002288:	200001c8 	.word	0x200001c8
 800228c:	41200000 	.word	0x41200000
 8002290:	20000158 	.word	0x20000158
 8002294:	20000168 	.word	0x20000168
 8002298:	200001d8 	.word	0x200001d8
 800229c:	404e0000 	.word	0x404e0000
 80022a0:	200001a8 	.word	0x200001a8
 80022a4:	200001b8 	.word	0x200001b8
 80022a8:	20000118 	.word	0x20000118
 80022ac:	2000011c 	.word	0x2000011c
 80022b0:	20000120 	.word	0x20000120
 80022b4:	20000124 	.word	0x20000124
 80022b8:	20000128 	.word	0x20000128
 80022bc:	2000012c 	.word	0x2000012c
 80022c0:	20000130 	.word	0x20000130
 80022c4:	20000134 	.word	0x20000134

080022c8 <PID_Init>:
#include "pid.h"

PID_t* PID_Init(double p, double i, double d)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022d2:	e9c7 2300 	strd	r2, r3, [r7]
    PID_t *object = calloc(1, sizeof(PID_t));
 80022d6:	2150      	movs	r1, #80	@ 0x50
 80022d8:	2001      	movs	r0, #1
 80022da:	f002 fcb5 	bl	8004c48 <calloc>
 80022de:	4603      	mov	r3, r0
 80022e0:	617b      	str	r3, [r7, #20]

    object->set_point = 0;
 80022e2:	6979      	ldr	r1, [r7, #20]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c1 2300 	strd	r2, r3, [r1]
    object->error = 0;
 80022f0:	6979      	ldr	r1, [r7, #20]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    
    object->kp = p;
 80022fe:	6979      	ldr	r1, [r7, #20]
 8002300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002304:	e9c1 2304 	strd	r2, r3, [r1, #16]
    object->ki = i;
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    object->kd = d;
 8002312:	6979      	ldr	r1, [r7, #20]
 8002314:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002318:	e9c1 2308 	strd	r2, r3, [r1, #32]

    object->P = 0;
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    object->I = 0;
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    object->D = 0;
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    object->integral_sum = 0;
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    object->last_input = 0;
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    return object;
 8002362:	697b      	ldr	r3, [r7, #20]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	0000      	movs	r0, r0
	...

08002370 <PID_Compute>:
    controller->ki = i;
    controller->kd = d;
}

double PID_Compute(PID_t *controller, double input, double dt)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	e9c7 2300 	strd	r2, r3, [r7]
    // Error calculation
    controller->error = controller->set_point - input;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002386:	f7fd ff53 	bl	8000230 <__aeabi_dsub>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	e9c1 2302 	strd	r2, r3, [r1, #8]

    double err = controller->error;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800239a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // P
    controller->P = err * controller->kp;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a8:	f7fe f8fa 	bl	80005a0 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // I
    controller->integral_sum += err * (dt/1000);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <PID_Compute+0x1c0>)
 80023c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80023c6:	f7fe fa15 	bl	80007f4 <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d6:	f7fe f8e3 	bl	80005a0 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	f7fd ff27 	bl	8000234 <__adddf3>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    controller->I = controller->integral_sum * controller->ki;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023fc:	f7fe f8d0 	bl	80005a0 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    if (controller->I >= MAX_INTEGRAL)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <PID_Compute+0x1c4>)
 8002416:	f7fe fb49 	bl	8000aac <__aeabi_dcmpge>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <PID_Compute+0xbc>
    {
        controller->I = MAX_INTEGRAL;
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b43      	ldr	r3, [pc, #268]	@ (8002534 <PID_Compute+0x1c4>)
 8002428:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    }
    if (controller->I <= MIN_INTEGRAL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b40      	ldr	r3, [pc, #256]	@ (8002538 <PID_Compute+0x1c8>)
 8002438:	f7fe fb2e 	bl	8000a98 <__aeabi_dcmple>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <PID_Compute+0xde>
    {
        controller->I = MIN_INTEGRAL;
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <PID_Compute+0x1c8>)
 800244a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    }

    // D
    double dError = (input - controller->last_input) / (dt/1000);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002458:	f7fd feea 	bl	8000230 <__aeabi_dsub>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <PID_Compute+0x1c0>)
 800246a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800246e:	f7fe f9c1 	bl	80007f4 <__aeabi_ddiv>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fe f9bb 	bl	80007f4 <__aeabi_ddiv>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	e9c7 2304 	strd	r2, r3, [r7, #16]
    controller->last_input = input;
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    controller->D = dError  * controller->kd;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002496:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800249a:	f7fe f881 	bl	80005a0 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Calculate the output
    double output = controller->P + controller->I + controller->D;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80024b4:	f7fd febe 	bl	8000234 <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80024c6:	f7fd feb5 	bl	8000234 <__adddf3>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if (output >= MAX_PID_OUTPUT)
 80024d2:	a313      	add	r3, pc, #76	@ (adr r3, 8002520 <PID_Compute+0x1b0>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024dc:	f7fe fae6 	bl	8000aac <__aeabi_dcmpge>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <PID_Compute+0x182>
    {
        output = MAX_PID_OUTPUT;
 80024e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002520 <PID_Compute+0x1b0>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80024f0:	e00e      	b.n	8002510 <PID_Compute+0x1a0>
    }
    else if (output <= MIN_PID_OUTPUT)
 80024f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8002528 <PID_Compute+0x1b8>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024fc:	f7fe facc 	bl	8000a98 <__aeabi_dcmple>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <PID_Compute+0x1a0>
    {
        output = MIN_PID_OUTPUT;
 8002506:	a308      	add	r3, pc, #32	@ (adr r3, 8002528 <PID_Compute+0x1b8>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return output;
 8002510:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bdb0      	pop	{r4, r5, r7, pc}
 800251e:	bf00      	nop
 8002520:	00000000 	.word	0x00000000
 8002524:	406fe000 	.word	0x406fe000
 8002528:	00000000 	.word	0x00000000
 800252c:	c06fe000 	.word	0xc06fe000
 8002530:	408f4000 	.word	0x408f4000
 8002534:	40640000 	.word	0x40640000
 8002538:	c0640000 	.word	0xc0640000

0800253c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <HAL_MspInit+0x5c>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_MspInit+0x5c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <HAL_MspInit+0x5c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <HAL_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_MspInit+0x60>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_MspInit+0x60>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000

080025a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_TIM_Base_MspInit+0xa8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c0:	4b22      	ldr	r3, [pc, #136]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80025d8:	e031      	b.n	800263e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_TIM_Base_MspInit+0xb0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d12c      	bne.n	800263e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a12      	ldr	r2, [pc, #72]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_TIM_Base_MspInit+0xac>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002614:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	4619      	mov	r1, r3
 8002628:	480a      	ldr	r0, [pc, #40]	@ (8002654 <HAL_TIM_Base_MspInit+0xb4>)
 800262a:	f000 fa73 	bl	8002b14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	202e      	movs	r0, #46	@ 0x2e
 8002634:	f000 fa37 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002638:	202e      	movs	r0, #46	@ 0x2e
 800263a:	f000 fa50 	bl	8002ade <HAL_NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40013400 	.word	0x40013400
 8002654:	40011000 	.word	0x40011000

08002658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a10      	ldr	r2, [pc, #64]	@ (80026b4 <HAL_TIM_MspPostInit+0x5c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d118      	bne.n	80026aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_TIM_MspPostInit+0x60>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002690:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2302      	movs	r3, #2
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <HAL_TIM_MspPostInit+0x64>)
 80026a6:	f000 fa35 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010800 	.word	0x40010800

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <NMI_Handler+0x4>

080026c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <MemManage_Handler+0x4>

080026d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <BusFault_Handler+0x4>

080026e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <UsageFault_Handler+0x4>

080026e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002710:	f000 f8d6 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <TIM8_CC_IRQHandler+0x10>)
 800271e:	f001 fa57 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200000d0 	.word	0x200000d0

0800272c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <_kill>:

int _kill(int pid, int sig)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002744:	f002 fbae 	bl	8004ea4 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	2216      	movs	r2, #22
 800274c:	601a      	str	r2, [r3, #0]
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_exit>:

void _exit (int status)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002762:	f04f 31ff 	mov.w	r1, #4294967295
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffe7 	bl	800273a <_kill>
  while (1) {}    /* Make sure we hang here */
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <_exit+0x12>

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f002 fb80 	bl	8004ea4 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000c000 	.word	0x2000c000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	200001f4 	.word	0x200001f4
 80027d8:	20000348 	.word	0x20000348

080027dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e8:	f7ff fff8 	bl	80027dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480b      	ldr	r0, [pc, #44]	@ (800281c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ee:	490c      	ldr	r1, [pc, #48]	@ (8002820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002804:	4c09      	ldr	r4, [pc, #36]	@ (800282c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002812:	f002 fb4d 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002816:	f7fe ff05 	bl	8001624 <main>
  bx lr
 800281a:	4770      	bx	lr
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002824:	08004f68 	.word	0x08004f68
  ldr r2, =_sbss
 8002828:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800282c:	20000348 	.word	0x20000348

08002830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_2_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_Init+0x28>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_Init+0x28>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002844:	2003      	movs	r0, #3
 8002846:	f000 f923 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284a:	200f      	movs	r0, #15
 800284c:	f000 f808 	bl	8002860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002850:	f7ff fe74 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_InitTick+0x54>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_InitTick+0x58>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002876:	fbb3 f3f1 	udiv	r3, r3, r1
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f93b 	bl	8002afa <HAL_SYSTICK_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00e      	b.n	80028ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b0f      	cmp	r3, #15
 8002892:	d80a      	bhi.n	80028aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002894:	2200      	movs	r2, #0
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f000 f903 	bl	8002aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a0:	4a06      	ldr	r2, [pc, #24]	@ (80028bc <HAL_InitTick+0x5c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2000000c 	.word	0x2000000c
 80028b8:	20000014 	.word	0x20000014
 80028bc:	20000010 	.word	0x20000010

080028c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_IncTick+0x1c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_IncTick+0x20>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a03      	ldr	r2, [pc, #12]	@ (80028e0 <HAL_IncTick+0x20>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000014 	.word	0x20000014
 80028e0:	200001f8 	.word	0x200001f8

080028e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b02      	ldr	r3, [pc, #8]	@ (80028f4 <HAL_GetTick+0x10>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	200001f8 	.word	0x200001f8

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4906      	ldr	r1, [pc, #24]	@ (8002990 <__NVIC_EnableIRQ+0x34>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a5c:	d301      	bcc.n	8002a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <SysTick_Config+0x40>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f7ff ff90 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <SysTick_Config+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7a:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <SysTick_Config+0x40>)
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff2d 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff42 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff90 	bl	80029e8 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5f 	bl	8002994 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff35 	bl	800295c <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa2 	bl	8002a4c <SysTick_Config>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b08b      	sub	sp, #44	@ 0x2c
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b26:	e179      	b.n	8002e1c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8168 	bne.w	8002e16 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a96      	ldr	r2, [pc, #600]	@ (8002da4 <HAL_GPIO_Init+0x290>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d05e      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b50:	4a94      	ldr	r2, [pc, #592]	@ (8002da4 <HAL_GPIO_Init+0x290>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d875      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b56:	4a94      	ldr	r2, [pc, #592]	@ (8002da8 <HAL_GPIO_Init+0x294>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d058      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b5c:	4a92      	ldr	r2, [pc, #584]	@ (8002da8 <HAL_GPIO_Init+0x294>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d86f      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b62:	4a92      	ldr	r2, [pc, #584]	@ (8002dac <HAL_GPIO_Init+0x298>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d052      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b68:	4a90      	ldr	r2, [pc, #576]	@ (8002dac <HAL_GPIO_Init+0x298>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d869      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b6e:	4a90      	ldr	r2, [pc, #576]	@ (8002db0 <HAL_GPIO_Init+0x29c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d04c      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b74:	4a8e      	ldr	r2, [pc, #568]	@ (8002db0 <HAL_GPIO_Init+0x29c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d863      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b7a:	4a8e      	ldr	r2, [pc, #568]	@ (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d046      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b80:	4a8c      	ldr	r2, [pc, #560]	@ (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d85d      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d82a      	bhi.n	8002be0 <HAL_GPIO_Init+0xcc>
 8002b8a:	2b12      	cmp	r3, #18
 8002b8c:	d859      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <HAL_GPIO_Init+0x80>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002c0f 	.word	0x08002c0f
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002bfb 	.word	0x08002bfb
 8002ba0:	08002c3d 	.word	0x08002c3d
 8002ba4:	08002c43 	.word	0x08002c43
 8002ba8:	08002c43 	.word	0x08002c43
 8002bac:	08002c43 	.word	0x08002c43
 8002bb0:	08002c43 	.word	0x08002c43
 8002bb4:	08002c43 	.word	0x08002c43
 8002bb8:	08002c43 	.word	0x08002c43
 8002bbc:	08002c43 	.word	0x08002c43
 8002bc0:	08002c43 	.word	0x08002c43
 8002bc4:	08002c43 	.word	0x08002c43
 8002bc8:	08002c43 	.word	0x08002c43
 8002bcc:	08002c43 	.word	0x08002c43
 8002bd0:	08002c43 	.word	0x08002c43
 8002bd4:	08002c43 	.word	0x08002c43
 8002bd8:	08002bf1 	.word	0x08002bf1
 8002bdc:	08002c05 	.word	0x08002c05
 8002be0:	4a75      	ldr	r2, [pc, #468]	@ (8002db8 <HAL_GPIO_Init+0x2a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002be6:	e02c      	b.n	8002c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	623b      	str	r3, [r7, #32]
          break;
 8002bee:	e029      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	623b      	str	r3, [r7, #32]
          break;
 8002bf8:	e024      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	623b      	str	r3, [r7, #32]
          break;
 8002c02:	e01f      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	623b      	str	r3, [r7, #32]
          break;
 8002c0c:	e01a      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c16:	2304      	movs	r3, #4
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e013      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	611a      	str	r2, [r3, #16]
          break;
 8002c2e:	e009      	b.n	8002c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c30:	2308      	movs	r3, #8
 8002c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	615a      	str	r2, [r3, #20]
          break;
 8002c3a:	e003      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
          break;
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          break;
 8002c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2bff      	cmp	r3, #255	@ 0xff
 8002c48:	d801      	bhi.n	8002c4e <HAL_GPIO_Init+0x13a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e001      	b.n	8002c52 <HAL_GPIO_Init+0x13e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d802      	bhi.n	8002c60 <HAL_GPIO_Init+0x14c>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	e002      	b.n	8002c66 <HAL_GPIO_Init+0x152>
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	3b08      	subs	r3, #8
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80c1 	beq.w	8002e16 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c94:	4b49      	ldr	r3, [pc, #292]	@ (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a48      	ldr	r2, [pc, #288]	@ (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b46      	ldr	r3, [pc, #280]	@ (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cac:	4a44      	ldr	r2, [pc, #272]	@ (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc4 <HAL_GPIO_Init+0x2b0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d01f      	beq.n	8002d18 <HAL_GPIO_Init+0x204>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc8 <HAL_GPIO_Init+0x2b4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d019      	beq.n	8002d14 <HAL_GPIO_Init+0x200>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3a      	ldr	r2, [pc, #232]	@ (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1fc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a39      	ldr	r2, [pc, #228]	@ (8002dd0 <HAL_GPIO_Init+0x2bc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <HAL_GPIO_Init+0x2c0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1f4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a37      	ldr	r2, [pc, #220]	@ (8002dd8 <HAL_GPIO_Init+0x2c4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1f0>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e00a      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d04:	2306      	movs	r3, #6
 8002d06:	e008      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e004      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e002      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_GPIO_Init+0x206>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4093      	lsls	r3, r2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d2a:	4925      	ldr	r1, [pc, #148]	@ (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4924      	ldr	r1, [pc, #144]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4920      	ldr	r1, [pc, #128]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	491a      	ldr	r1, [pc, #104]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d025      	beq.n	8002de0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4910      	ldr	r1, [pc, #64]	@ (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	e025      	b.n	8002dee <HAL_GPIO_Init+0x2da>
 8002da2:	bf00      	nop
 8002da4:	10320000 	.word	0x10320000
 8002da8:	10310000 	.word	0x10310000
 8002dac:	10220000 	.word	0x10220000
 8002db0:	10210000 	.word	0x10210000
 8002db4:	10120000 	.word	0x10120000
 8002db8:	10110000 	.word	0x10110000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	40010c00 	.word	0x40010c00
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	40011800 	.word	0x40011800
 8002dd8:	40011c00 	.word	0x40011c00
 8002ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de0:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4913      	ldr	r1, [pc, #76]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	490e      	ldr	r1, [pc, #56]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4909      	ldr	r1, [pc, #36]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	3301      	adds	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f47f ae7e 	bne.w	8002b28 <HAL_GPIO_Init+0x14>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	372c      	adds	r7, #44	@ 0x2c
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e272      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e8c:	4b92      	ldr	r3, [pc, #584]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e98:	4b8f      	ldr	r3, [pc, #572]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d112      	bne.n	8002eca <HAL_RCC_OscConfig+0x5e>
 8002ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb2:	4b89      	ldr	r3, [pc, #548]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x12c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d168      	bne.n	8002f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e24c      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x76>
 8002ed4:	4b80      	ldr	r3, [pc, #512]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7f      	ldr	r2, [pc, #508]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e02e      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b7b      	ldr	r3, [pc, #492]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7a      	ldr	r2, [pc, #488]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b78      	ldr	r3, [pc, #480]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a77      	ldr	r2, [pc, #476]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0xbc>
 8002f0e:	4b72      	ldr	r3, [pc, #456]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a71      	ldr	r2, [pc, #452]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xd4>
 8002f28:	4b6b      	ldr	r3, [pc, #428]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b68      	ldr	r3, [pc, #416]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff fccc 	bl	80028e4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7ff fcc8 	bl	80028e4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e200      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b5d      	ldr	r3, [pc, #372]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe4>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff fcb8 	bl	80028e4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff fcb4 	bl	80028e4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1ec      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x10c>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb2:	4b49      	ldr	r3, [pc, #292]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x18c>
 8002fbe:	4b46      	ldr	r3, [pc, #280]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	4b43      	ldr	r3, [pc, #268]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x176>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1c0      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4939      	ldr	r1, [pc, #228]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e03a      	b.n	800306e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <HAL_RCC_OscConfig+0x270>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7ff fc6d 	bl	80028e4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7ff fc69 	bl	80028e4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1a1      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4927      	ldr	r1, [pc, #156]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003042:	4b26      	ldr	r3, [pc, #152]	@ (80030dc <HAL_RCC_OscConfig+0x270>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff fc4c 	bl	80028e4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7ff fc48 	bl	80028e4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e180      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03a      	beq.n	80030f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003082:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7ff fc2c 	bl	80028e4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7ff fc28 	bl	80028e4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e160      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	4b0d      	ldr	r3, [pc, #52]	@ (80030d8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f000 fa9c 	bl	80035ec <RCC_Delay>
 80030b4:	e01c      	b.n	80030f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7ff fc12 	bl	80028e4 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	e00f      	b.n	80030e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7ff fc0e 	bl	80028e4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d908      	bls.n	80030e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e146      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	42420000 	.word	0x42420000
 80030e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b92      	ldr	r3, [pc, #584]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e9      	bne.n	80030c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a6 	beq.w	800324a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b8b      	ldr	r3, [pc, #556]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b88      	ldr	r3, [pc, #544]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a87      	ldr	r2, [pc, #540]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b85      	ldr	r3, [pc, #532]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b82      	ldr	r3, [pc, #520]	@ (8003334 <HAL_RCC_OscConfig+0x4c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b7f      	ldr	r3, [pc, #508]	@ (8003334 <HAL_RCC_OscConfig+0x4c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7e      	ldr	r2, [pc, #504]	@ (8003334 <HAL_RCC_OscConfig+0x4c8>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7ff fbcf 	bl	80028e4 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7ff fbcb 	bl	80028e4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	@ 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e103      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b75      	ldr	r3, [pc, #468]	@ (8003334 <HAL_RCC_OscConfig+0x4c8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x312>
 8003170:	4b6f      	ldr	r3, [pc, #444]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a6e      	ldr	r2, [pc, #440]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x334>
 8003186:	4b6a      	ldr	r3, [pc, #424]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a69      	ldr	r2, [pc, #420]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	4b67      	ldr	r3, [pc, #412]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a66      	ldr	r2, [pc, #408]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x356>
 80031a8:	4b61      	ldr	r3, [pc, #388]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a60      	ldr	r2, [pc, #384]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x36e>
 80031c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b58      	ldr	r3, [pc, #352]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a57      	ldr	r2, [pc, #348]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7ff fb7f 	bl	80028e4 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7ff fb7b 	bl	80028e4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0b1      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b4b      	ldr	r3, [pc, #300]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x37e>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7ff fb69 	bl	80028e4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7ff fb65 	bl	80028e4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e09b      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b3c      	ldr	r3, [pc, #240]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a3b      	ldr	r2, [pc, #236]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d061      	beq.n	8003324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d146      	bne.n	80032f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b33      	ldr	r3, [pc, #204]	@ (8003338 <HAL_RCC_OscConfig+0x4cc>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff fb39 	bl	80028e4 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003276:	f7ff fb35 	bl	80028e4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e06d      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d108      	bne.n	80032b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4921      	ldr	r1, [pc, #132]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a19      	ldr	r1, [r3, #32]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	430b      	orrs	r3, r1
 80032c2:	491b      	ldr	r1, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7ff fb09 	bl	80028e4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7ff fb05 	bl	80028e4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e03d      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x46a>
 80032f4:	e035      	b.n	8003362 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <HAL_RCC_OscConfig+0x4cc>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7ff faf2 	bl	80028e4 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7ff faee 	bl	80028e4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e026      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x498>
 8003322:	e01e      	b.n	8003362 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e019      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
 8003338:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCC_OscConfig+0x500>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000

08003370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0d0      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d910      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0207 	bic.w	r2, r3, #7
 800339a:	4965      	ldr	r1, [pc, #404]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a58      	ldr	r2, [pc, #352]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d040      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e073      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e06b      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b39      	ldr	r3, [pc, #228]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4936      	ldr	r1, [pc, #216]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7ff fa40 	bl	80028e4 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7ff fa3c 	bl	80028e4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e053      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b27      	ldr	r3, [pc, #156]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d210      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4922      	ldr	r1, [pc, #136]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <HAL_RCC_ClockConfig+0x1cc>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_ClockConfig+0x1d0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f99e 	bl	8002860 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40022000 	.word	0x40022000
 8003534:	40021000 	.word	0x40021000
 8003538:	08004f3c 	.word	0x08004f3c
 800353c:	2000000c 	.word	0x2000000c
 8003540:	20000010 	.word	0x20000010

08003544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800355e:	4b1e      	ldr	r3, [pc, #120]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d002      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x30>
 800356e:	2b08      	cmp	r3, #8
 8003570:	d003      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x36>
 8003572:	e027      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003574:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003576:	613b      	str	r3, [r7, #16]
      break;
 8003578:	e027      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0c9b      	lsrs	r3, r3, #18
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003592:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	0c5b      	lsrs	r3, r3, #17
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x98>)
 80035a6:	fb03 f202 	mul.w	r2, r3, r2
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e004      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	613b      	str	r3, [r7, #16]
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x98>)
 80035c6:	613b      	str	r3, [r7, #16]
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	693b      	ldr	r3, [r7, #16]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	007a1200 	.word	0x007a1200
 80035e0:	08004f4c 	.word	0x08004f4c
 80035e4:	08004f5c 	.word	0x08004f5c
 80035e8:	003d0900 	.word	0x003d0900

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	2000000c 	.word	0x2000000c
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe ffa6 	bl	80025a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fe04 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e041      	b.n	800375c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f839 	bl	8003764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 fdb5 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x24>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e022      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e015      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x58>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e072      	b.n	80038d0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0x82>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	e013      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x92>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	e00b      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003818:	e003      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f8f7 	bl	8004a1e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <HAL_TIM_PWM_Start+0x160>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_PWM_Start+0xcc>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a27      	ldr	r2, [pc, #156]	@ (80038dc <HAL_TIM_PWM_Start+0x164>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_TIM_PWM_Start+0xd0>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_TIM_PWM_Start+0xd2>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_TIM_PWM_Start+0x160>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_TIM_PWM_Start+0x122>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1b      	ldr	r2, [pc, #108]	@ (80038dc <HAL_TIM_PWM_Start+0x164>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_TIM_PWM_Start+0x122>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d00e      	beq.n	800389a <HAL_TIM_PWM_Start+0x122>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_TIM_PWM_Start+0x168>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_TIM_PWM_Start+0x122>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_TIM_PWM_Start+0x16c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_TIM_PWM_Start+0x122>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <HAL_TIM_PWM_Start+0x170>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d111      	bne.n	80038be <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d010      	beq.n	80038ce <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038bc:	e007      	b.n	80038ce <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40013400 	.word	0x40013400
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00

080038ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e041      	b.n	8003982 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f839 	bl	800398a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f000 fca2 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0x1e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0x2e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start_IT+0x3e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_TIM_IC_Start_IT+0x58>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e013      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d104      	bne.n	8003a04 <HAL_TIM_IC_Start_IT+0x68>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e00b      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d104      	bne.n	8003a14 <HAL_TIM_IC_Start_IT+0x78>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e003      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	7bbb      	ldrb	r3, [r7, #14]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0c2      	b.n	8003bb4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_IC_Start_IT+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a3c:	e013      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_IC_Start_IT+0xb2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4c:	e00b      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_IC_Start_IT+0xc2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Start_IT+0xda>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a74:	e013      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_IC_Start_IT+0xea>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a84:	e00b      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_IC_Start_IT+0xfa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a94:	e003      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d841      	bhi.n	8003b28 <HAL_TIM_IC_Start_IT+0x18c>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <HAL_TIM_IC_Start_IT+0x110>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003b29 	.word	0x08003b29
 8003ab4:	08003b29 	.word	0x08003b29
 8003ab8:	08003b29 	.word	0x08003b29
 8003abc:	08003af3 	.word	0x08003af3
 8003ac0:	08003b29 	.word	0x08003b29
 8003ac4:	08003b29 	.word	0x08003b29
 8003ac8:	08003b29 	.word	0x08003b29
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b17 	.word	0x08003b17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0202 	orr.w	r2, r2, #2
 8003aee:	60da      	str	r2, [r3, #12]
      break;
 8003af0:	e01d      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	60da      	str	r2, [r3, #12]
      break;
 8003b02:	e014      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	60da      	str	r2, [r3, #12]
      break;
 8003b14:	e00b      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0210 	orr.w	r2, r2, #16
 8003b24:	60da      	str	r2, [r3, #12]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13e      	bne.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 ff6e 	bl	8004a1e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <HAL_TIM_IC_Start_IT+0x220>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <HAL_TIM_IC_Start_IT+0x224>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_TIM_IC_Start_IT+0x228>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	@ (8003bc8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <HAL_TIM_IC_Start_IT+0x230>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d111      	bne.n	8003ba2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d010      	beq.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba0:	e007      	b.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00

08003bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd ffee 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb0e 	bl	800423c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb14 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0204 	mvn.w	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd ffc4 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fae4 	bl	800423c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 faea 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0208 	mvn.w	r2, #8
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd ff9a 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 faba 	bl	800423c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fac0 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd ff70 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa90 	bl	800423c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa96 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0201 	mvn.w	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa6b 	bl	800422a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5e:	2b80      	cmp	r3, #128	@ 0x80
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6c:	2b80      	cmp	r3, #128	@ 0x80
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 ff3a 	bl	8004bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa5a 	bl	8004260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0220 	mvn.w	r2, #32
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 ff05 	bl	8004be2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e088      	b.n	8003f10 <HAL_TIM_IC_ConfigChannel+0x130>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003e1c:	f000 fc50 	bl	80046c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020c 	bic.w	r2, r2, #12
 8003e2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
 8003e42:	e060      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d11c      	bne.n	8003e84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003e5a:	f000 fcc5 	bl	80047e8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6999      	ldr	r1, [r3, #24]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	021a      	lsls	r2, r3, #8
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
 8003e82:	e040      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e9a:	f000 fd10 	bl	80048be <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020c 	bic.w	r2, r2, #12
 8003eac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
 8003ec0:	e021      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d11c      	bne.n	8003f02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ed8:	f000 fd2c 	bl	8004934 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003eea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69d9      	ldr	r1, [r3, #28]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]
 8003f00:	e001      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0ae      	b.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	f200 809f 	bhi.w	8004084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08004085 	.word	0x08004085
 8003f54:	08004085 	.word	0x08004085
 8003f58:	08004085 	.word	0x08004085
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	08004085 	.word	0x08004085
 8003f64:	08004085 	.word	0x08004085
 8003f68:	08004085 	.word	0x08004085
 8003f6c:	08004003 	.word	0x08004003
 8003f70:	08004085 	.word	0x08004085
 8003f74:	08004085 	.word	0x08004085
 8003f78:	08004085 	.word	0x08004085
 8003f7c:	08004043 	.word	0x08004043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f9ee 	bl	8004368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6999      	ldr	r1, [r3, #24]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	619a      	str	r2, [r3, #24]
      break;
 8003fbe:	e064      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fa3e 	bl	8004448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	021a      	lsls	r2, r3, #8
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
      break;
 8004000:	e043      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fa91 	bl	8004530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0208 	orr.w	r2, r2, #8
 800401c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0204 	bic.w	r2, r2, #4
 800402c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	61da      	str	r2, [r3, #28]
      break;
 8004040:	e023      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fae5 	bl	8004618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	021a      	lsls	r2, r3, #8
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
      break;
 8004082:	e002      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75fb      	strb	r3, [r7, #23]
      break;
 8004088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_TIM_ConfigClockSource+0x1c>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e0b4      	b.n	8004222 <HAL_TIM_ConfigClockSource+0x186>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f0:	d03e      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0xd4>
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f6:	f200 8087 	bhi.w	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fe:	f000 8086 	beq.w	800420e <HAL_TIM_ConfigClockSource+0x172>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004106:	d87f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b70      	cmp	r3, #112	@ 0x70
 800410a:	d01a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xa6>
 800410c:	2b70      	cmp	r3, #112	@ 0x70
 800410e:	d87b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b60      	cmp	r3, #96	@ 0x60
 8004112:	d050      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004114:	2b60      	cmp	r3, #96	@ 0x60
 8004116:	d877      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b50      	cmp	r3, #80	@ 0x50
 800411a:	d03c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0xfa>
 800411c:	2b50      	cmp	r3, #80	@ 0x50
 800411e:	d873      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b40      	cmp	r3, #64	@ 0x40
 8004122:	d058      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d86f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b30      	cmp	r3, #48	@ 0x30
 800412a:	d064      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b30      	cmp	r3, #48	@ 0x30
 800412e:	d86b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d060      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	2b20      	cmp	r3, #32
 8004136:	d867      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05c      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	2b10      	cmp	r3, #16
 800413e:	d05a      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004140:	e062      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004152:	f000 fc45 	bl	80049e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	609a      	str	r2, [r3, #8]
      break;
 800416e:	e04f      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	f000 fc2e 	bl	80049e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004192:	609a      	str	r2, [r3, #8]
      break;
 8004194:	e03c      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 faf2 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2150      	movs	r1, #80	@ 0x50
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fbfc 	bl	80049ac <TIM_ITRx_SetConfig>
      break;
 80041b4:	e02c      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 fb4c 	bl	8004860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2160      	movs	r1, #96	@ 0x60
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fbec 	bl	80049ac <TIM_ITRx_SetConfig>
      break;
 80041d4:	e01c      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fad2 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2140      	movs	r1, #64	@ 0x40
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fbdc 	bl	80049ac <TIM_ITRx_SetConfig>
      break;
 80041f4:	e00c      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fbd3 	bl	80049ac <TIM_ITRx_SetConfig>
      break;
 8004206:	e003      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      break;
 800420c:	e000      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800420e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <TIM_Base_SetConfig+0xe0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a32      	ldr	r2, [pc, #200]	@ (8004358 <TIM_Base_SetConfig+0xe4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a2f      	ldr	r2, [pc, #188]	@ (800435c <TIM_Base_SetConfig+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004360 <TIM_Base_SetConfig+0xec>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <TIM_Base_SetConfig+0xf0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d108      	bne.n	80042c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a22      	ldr	r2, [pc, #136]	@ (8004354 <TIM_Base_SetConfig+0xe0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0x82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a21      	ldr	r2, [pc, #132]	@ (8004358 <TIM_Base_SetConfig+0xe4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0x82>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0x82>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <TIM_Base_SetConfig+0xe8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0x82>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <TIM_Base_SetConfig+0xec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0x82>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <TIM_Base_SetConfig+0xf0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <TIM_Base_SetConfig+0xe0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0xc8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <TIM_Base_SetConfig+0xe4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d103      	bne.n	8004344 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	615a      	str	r2, [r3, #20]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00

08004368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 0201 	bic.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0302 	bic.w	r3, r3, #2
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a20      	ldr	r2, [pc, #128]	@ (8004440 <TIM_OC1_SetConfig+0xd8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC1_SetConfig+0x64>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004444 <TIM_OC1_SetConfig+0xdc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10c      	bne.n	80043e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0308 	bic.w	r3, r3, #8
 80043d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a15      	ldr	r2, [pc, #84]	@ (8004440 <TIM_OC1_SetConfig+0xd8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_OC1_SetConfig+0x8e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <TIM_OC1_SetConfig+0xdc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d111      	bne.n	800441a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400

08004448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 0210 	bic.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <TIM_OC2_SetConfig+0xe0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_OC2_SetConfig+0x68>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a20      	ldr	r2, [pc, #128]	@ (800452c <TIM_OC2_SetConfig+0xe4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10d      	bne.n	80044cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <TIM_OC2_SetConfig+0xe0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC2_SetConfig+0x94>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <TIM_OC2_SetConfig+0xe4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d113      	bne.n	8004504 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400

08004530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <TIM_OC3_SetConfig+0xe0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC3_SetConfig+0x66>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <TIM_OC3_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <TIM_OC3_SetConfig+0xe0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC3_SetConfig+0x92>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <TIM_OC3_SetConfig+0xe4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d113      	bne.n	80045ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400

08004618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a11      	ldr	r2, [pc, #68]	@ (80046b8 <TIM_OC4_SetConfig+0xa0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_OC4_SetConfig+0x68>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a10      	ldr	r2, [pc, #64]	@ (80046bc <TIM_OC4_SetConfig+0xa4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400

080046c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 0201 	bic.w	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <TIM_TI1_SetConfig+0xb8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_TI1_SetConfig+0x56>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a22      	ldr	r2, [pc, #136]	@ (800477c <TIM_TI1_SetConfig+0xbc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_TI1_SetConfig+0x56>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d00b      	beq.n	8004716 <TIM_TI1_SetConfig+0x56>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a1f      	ldr	r2, [pc, #124]	@ (8004780 <TIM_TI1_SetConfig+0xc0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_TI1_SetConfig+0x56>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a1e      	ldr	r2, [pc, #120]	@ (8004784 <TIM_TI1_SetConfig+0xc4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_TI1_SetConfig+0x56>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <TIM_TI1_SetConfig+0xc8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <TIM_TI1_SetConfig+0x5a>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <TIM_TI1_SetConfig+0x5c>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e003      	b.n	800473a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	b2db      	uxtb	r3, r3
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 030a 	bic.w	r3, r3, #10
 8004754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 030a 	and.w	r3, r3, #10
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40013400 	.word	0x40013400
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00

0800478c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 030a 	bic.w	r3, r3, #10
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	031b      	lsls	r3, r3, #12
 800482c:	b29b      	uxth	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048be:	b480      	push	{r7}
 80048c0:	b087      	sub	sp, #28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	b2db      	uxtb	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800490e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004960:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004972:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	031b      	lsls	r3, r3, #12
 8004978:	b29b      	uxth	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004986:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	031b      	lsls	r3, r3, #12
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f043 0307 	orr.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b087      	sub	sp, #28
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1a      	ldr	r2, [r3, #32]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	401a      	ands	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e050      	b.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a12      	ldr	r2, [pc, #72]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10c      	bne.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00

08004b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e03d      	b.n	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <_Znwj>:
 8004c06:	2801      	cmp	r0, #1
 8004c08:	bf38      	it	cc
 8004c0a:	2001      	movcc	r0, #1
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f835 	bl	8004c80 <malloc>
 8004c16:	b100      	cbz	r0, 8004c1a <_Znwj+0x14>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	f000 f805 	bl	8004c28 <_ZSt15get_new_handlerv>
 8004c1e:	b908      	cbnz	r0, 8004c24 <_Znwj+0x1e>
 8004c20:	f000 f80a 	bl	8004c38 <abort>
 8004c24:	4780      	blx	r0
 8004c26:	e7f3      	b.n	8004c10 <_Znwj+0xa>

08004c28 <_ZSt15get_new_handlerv>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	@ (8004c34 <_ZSt15get_new_handlerv+0xc>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	f3bf 8f5b 	dmb	ish
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	200001fc 	.word	0x200001fc

08004c38 <abort>:
 8004c38:	2006      	movs	r0, #6
 8004c3a:	b508      	push	{r3, lr}
 8004c3c:	f000 f906 	bl	8004e4c <raise>
 8004c40:	2001      	movs	r0, #1
 8004c42:	f7fd fd8a 	bl	800275a <_exit>
	...

08004c48 <calloc>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	@ (8004c54 <calloc+0xc>)
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f000 b802 	b.w	8004c58 <_calloc_r>
 8004c54:	20000018 	.word	0x20000018

08004c58 <_calloc_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8004c5e:	b93c      	cbnz	r4, 8004c70 <_calloc_r+0x18>
 8004c60:	4629      	mov	r1, r5
 8004c62:	f000 f837 	bl	8004cd4 <_malloc_r>
 8004c66:	4606      	mov	r6, r0
 8004c68:	b928      	cbnz	r0, 8004c76 <_calloc_r+0x1e>
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	220c      	movs	r2, #12
 8004c72:	6002      	str	r2, [r0, #0]
 8004c74:	e7f9      	b.n	8004c6a <_calloc_r+0x12>
 8004c76:	462a      	mov	r2, r5
 8004c78:	4621      	mov	r1, r4
 8004c7a:	f000 f8b7 	bl	8004dec <memset>
 8004c7e:	e7f5      	b.n	8004c6c <_calloc_r+0x14>

08004c80 <malloc>:
 8004c80:	4b02      	ldr	r3, [pc, #8]	@ (8004c8c <malloc+0xc>)
 8004c82:	4601      	mov	r1, r0
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	f000 b825 	b.w	8004cd4 <_malloc_r>
 8004c8a:	bf00      	nop
 8004c8c:	20000018 	.word	0x20000018

08004c90 <sbrk_aligned>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4e0f      	ldr	r6, [pc, #60]	@ (8004cd0 <sbrk_aligned+0x40>)
 8004c94:	460c      	mov	r4, r1
 8004c96:	6831      	ldr	r1, [r6, #0]
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b911      	cbnz	r1, 8004ca2 <sbrk_aligned+0x12>
 8004c9c:	f000 f8f2 	bl	8004e84 <_sbrk_r>
 8004ca0:	6030      	str	r0, [r6, #0]
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 f8ed 	bl	8004e84 <_sbrk_r>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d103      	bne.n	8004cb6 <sbrk_aligned+0x26>
 8004cae:	f04f 34ff 	mov.w	r4, #4294967295
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	1cc4      	adds	r4, r0, #3
 8004cb8:	f024 0403 	bic.w	r4, r4, #3
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d0f8      	beq.n	8004cb2 <sbrk_aligned+0x22>
 8004cc0:	1a21      	subs	r1, r4, r0
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f8de 	bl	8004e84 <_sbrk_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1f2      	bne.n	8004cb2 <sbrk_aligned+0x22>
 8004ccc:	e7ef      	b.n	8004cae <sbrk_aligned+0x1e>
 8004cce:	bf00      	nop
 8004cd0:	20000200 	.word	0x20000200

08004cd4 <_malloc_r>:
 8004cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd8:	1ccd      	adds	r5, r1, #3
 8004cda:	f025 0503 	bic.w	r5, r5, #3
 8004cde:	3508      	adds	r5, #8
 8004ce0:	2d0c      	cmp	r5, #12
 8004ce2:	bf38      	it	cc
 8004ce4:	250c      	movcc	r5, #12
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	4606      	mov	r6, r0
 8004cea:	db01      	blt.n	8004cf0 <_malloc_r+0x1c>
 8004cec:	42a9      	cmp	r1, r5
 8004cee:	d904      	bls.n	8004cfa <_malloc_r+0x26>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dd0 <_malloc_r+0xfc>
 8004cfe:	f000 f869 	bl	8004dd4 <__malloc_lock>
 8004d02:	f8d8 3000 	ldr.w	r3, [r8]
 8004d06:	461c      	mov	r4, r3
 8004d08:	bb44      	cbnz	r4, 8004d5c <_malloc_r+0x88>
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff ffbf 	bl	8004c90 <sbrk_aligned>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	4604      	mov	r4, r0
 8004d16:	d158      	bne.n	8004dca <_malloc_r+0xf6>
 8004d18:	f8d8 4000 	ldr.w	r4, [r8]
 8004d1c:	4627      	mov	r7, r4
 8004d1e:	2f00      	cmp	r7, #0
 8004d20:	d143      	bne.n	8004daa <_malloc_r+0xd6>
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	d04b      	beq.n	8004dbe <_malloc_r+0xea>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	eb04 0903 	add.w	r9, r4, r3
 8004d30:	f000 f8a8 	bl	8004e84 <_sbrk_r>
 8004d34:	4581      	cmp	r9, r0
 8004d36:	d142      	bne.n	8004dbe <_malloc_r+0xea>
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	1a6d      	subs	r5, r5, r1
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f7ff ffa6 	bl	8004c90 <sbrk_aligned>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d03a      	beq.n	8004dbe <_malloc_r+0xea>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	442b      	add	r3, r5
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	bb62      	cbnz	r2, 8004db0 <_malloc_r+0xdc>
 8004d56:	f8c8 7000 	str.w	r7, [r8]
 8004d5a:	e00f      	b.n	8004d7c <_malloc_r+0xa8>
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	1b52      	subs	r2, r2, r5
 8004d60:	d420      	bmi.n	8004da4 <_malloc_r+0xd0>
 8004d62:	2a0b      	cmp	r2, #11
 8004d64:	d917      	bls.n	8004d96 <_malloc_r+0xc2>
 8004d66:	1961      	adds	r1, r4, r5
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	6059      	strne	r1, [r3, #4]
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	bf08      	it	eq
 8004d74:	f8c8 1000 	streq.w	r1, [r8]
 8004d78:	5162      	str	r2, [r4, r5]
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f82f 	bl	8004de0 <__malloc_unlock>
 8004d82:	f104 000b 	add.w	r0, r4, #11
 8004d86:	1d23      	adds	r3, r4, #4
 8004d88:	f020 0007 	bic.w	r0, r0, #7
 8004d8c:	1ac2      	subs	r2, r0, r3
 8004d8e:	bf1c      	itt	ne
 8004d90:	1a1b      	subne	r3, r3, r0
 8004d92:	50a3      	strne	r3, [r4, r2]
 8004d94:	e7af      	b.n	8004cf6 <_malloc_r+0x22>
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	bf0c      	ite	eq
 8004d9c:	f8c8 2000 	streq.w	r2, [r8]
 8004da0:	605a      	strne	r2, [r3, #4]
 8004da2:	e7eb      	b.n	8004d7c <_malloc_r+0xa8>
 8004da4:	4623      	mov	r3, r4
 8004da6:	6864      	ldr	r4, [r4, #4]
 8004da8:	e7ae      	b.n	8004d08 <_malloc_r+0x34>
 8004daa:	463c      	mov	r4, r7
 8004dac:	687f      	ldr	r7, [r7, #4]
 8004dae:	e7b6      	b.n	8004d1e <_malloc_r+0x4a>
 8004db0:	461a      	mov	r2, r3
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d1fb      	bne.n	8004db0 <_malloc_r+0xdc>
 8004db8:	2300      	movs	r3, #0
 8004dba:	6053      	str	r3, [r2, #4]
 8004dbc:	e7de      	b.n	8004d7c <_malloc_r+0xa8>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	f000 f80c 	bl	8004de0 <__malloc_unlock>
 8004dc8:	e794      	b.n	8004cf4 <_malloc_r+0x20>
 8004dca:	6005      	str	r5, [r0, #0]
 8004dcc:	e7d6      	b.n	8004d7c <_malloc_r+0xa8>
 8004dce:	bf00      	nop
 8004dd0:	20000204 	.word	0x20000204

08004dd4 <__malloc_lock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	@ (8004ddc <__malloc_lock+0x8>)
 8004dd6:	f000 b88f 	b.w	8004ef8 <__retarget_lock_acquire_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000344 	.word	0x20000344

08004de0 <__malloc_unlock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	@ (8004de8 <__malloc_unlock+0x8>)
 8004de2:	f000 b88a 	b.w	8004efa <__retarget_lock_release_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000344 	.word	0x20000344

08004dec <memset>:
 8004dec:	4603      	mov	r3, r0
 8004dee:	4402      	add	r2, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <_raise_r>:
 8004dfc:	291f      	cmp	r1, #31
 8004dfe:	b538      	push	{r3, r4, r5, lr}
 8004e00:	4605      	mov	r5, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	d904      	bls.n	8004e10 <_raise_r+0x14>
 8004e06:	2316      	movs	r3, #22
 8004e08:	6003      	str	r3, [r0, #0]
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004e12:	b112      	cbz	r2, 8004e1a <_raise_r+0x1e>
 8004e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e18:	b94b      	cbnz	r3, 8004e2e <_raise_r+0x32>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 f830 	bl	8004e80 <_getpid_r>
 8004e20:	4622      	mov	r2, r4
 8004e22:	4601      	mov	r1, r0
 8004e24:	4628      	mov	r0, r5
 8004e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e2a:	f000 b817 	b.w	8004e5c <_kill_r>
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d00a      	beq.n	8004e48 <_raise_r+0x4c>
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	d103      	bne.n	8004e3e <_raise_r+0x42>
 8004e36:	2316      	movs	r3, #22
 8004e38:	6003      	str	r3, [r0, #0]
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	e7e7      	b.n	8004e0e <_raise_r+0x12>
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4620      	mov	r0, r4
 8004e42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004e46:	4798      	blx	r3
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e7e0      	b.n	8004e0e <_raise_r+0x12>

08004e4c <raise>:
 8004e4c:	4b02      	ldr	r3, [pc, #8]	@ (8004e58 <raise+0xc>)
 8004e4e:	4601      	mov	r1, r0
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	f7ff bfd3 	b.w	8004dfc <_raise_r>
 8004e56:	bf00      	nop
 8004e58:	20000018 	.word	0x20000018

08004e5c <_kill_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	2300      	movs	r3, #0
 8004e60:	4d06      	ldr	r5, [pc, #24]	@ (8004e7c <_kill_r+0x20>)
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	f7fd fc66 	bl	800273a <_kill>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d102      	bne.n	8004e78 <_kill_r+0x1c>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	b103      	cbz	r3, 8004e78 <_kill_r+0x1c>
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000340 	.word	0x20000340

08004e80 <_getpid_r>:
 8004e80:	f7fd bc54 	b.w	800272c <_getpid>

08004e84 <_sbrk_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	2300      	movs	r3, #0
 8004e88:	4d05      	ldr	r5, [pc, #20]	@ (8004ea0 <_sbrk_r+0x1c>)
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fd fc6e 	bl	8002770 <_sbrk>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_sbrk_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_sbrk_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20000340 	.word	0x20000340

08004ea4 <__errno>:
 8004ea4:	4b01      	ldr	r3, [pc, #4]	@ (8004eac <__errno+0x8>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000018 	.word	0x20000018

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	4d0c      	ldr	r5, [pc, #48]	@ (8004ee8 <__libc_init_array+0x38>)
 8004eb6:	4c0d      	ldr	r4, [pc, #52]	@ (8004eec <__libc_init_array+0x3c>)
 8004eb8:	1b64      	subs	r4, r4, r5
 8004eba:	10a4      	asrs	r4, r4, #2
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	f000 f81c 	bl	8004efc <_init>
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	4d0a      	ldr	r5, [pc, #40]	@ (8004ef0 <__libc_init_array+0x40>)
 8004ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ef4 <__libc_init_array+0x44>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08004f60 	.word	0x08004f60
 8004eec:	08004f60 	.word	0x08004f60
 8004ef0:	08004f60 	.word	0x08004f60
 8004ef4:	08004f64 	.word	0x08004f64

08004ef8 <__retarget_lock_acquire_recursive>:
 8004ef8:	4770      	bx	lr

08004efa <__retarget_lock_release_recursive>:
 8004efa:	4770      	bx	lr

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
